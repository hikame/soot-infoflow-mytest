class com.android.server.pm.PackageManagerService$FileInstallArgs extends com.android.server.pm.PackageManagerService$InstallArgs
{
    private java.io.File codeFile;
    private java.io.File resourceFile;
    final com.android.server.pm.PackageManagerService this$0;

    void <init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs this;
        com.android.server.pm.PackageManagerService l1;
        com.android.server.pm.PackageManagerService$InstallParams params;
        com.android.server.pm.PackageManagerService$OriginInfo $r0;
        com.android.server.pm.PackageManagerService$MoveInfo $r1;
        android.content.pm.IPackageInstallObserver2 $r2;
        int $i0;
        java.lang.String $r3, $r4, $r8;
        android.content.pm.ManifestDigest $r5;
        android.os.UserHandle $r6;
        java.lang.String[] $r7;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;

        this := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        l1 := @parameter0: com.android.server.pm.PackageManagerService;

        params := @parameter1: com.android.server.pm.PackageManagerService$InstallParams;

        this.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0> = l1;

        $r0 = params.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r1 = params.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$MoveInfo move>;

        $r2 = params.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.IPackageInstallObserver2 observer>;

        $i0 = params.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $r3 = params.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String installerPackageName>;

        $r4 = params.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String volumeUuid>;

        $r5 = virtualinvoke params.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.ManifestDigest getManifestDigest()>();

        $r6 = virtualinvoke params.<com.android.server.pm.PackageManagerService$InstallParams: android.os.UserHandle getUser()>();

        $r8 = params.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String packageAbiOverride>;

        $r7 = params.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String[] grantedRuntimePermissions>;

        specialinvoke this.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,com.android.server.pm.PackageManagerService$MoveInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle,java.lang.String[],java.lang.String,java.lang.String[])>($r0, $r1, $r2, $i0, $r3, $r4, $r5, $r6, null, $r8, $r7);

        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Forward locking only supported in ASEC");

        throw $r9;

     label1:
        return;
    }

    void <init>(com.android.server.pm.PackageManagerService, java.lang.String, java.lang.String, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs this;
        com.android.server.pm.PackageManagerService l1;
        java.lang.String codePath, resourcePath;
        java.lang.String[] instructionSets;
        com.android.server.pm.PackageManagerService$OriginInfo $r0;
        java.io.File $r1, $r2;

        this := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        l1 := @parameter0: com.android.server.pm.PackageManagerService;

        codePath := @parameter1: java.lang.String;

        resourcePath := @parameter2: java.lang.String;

        instructionSets := @parameter3: java.lang.String[];

        this.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0> = l1;

        $r0 = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromNothing()>();

        specialinvoke this.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,com.android.server.pm.PackageManagerService$MoveInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle,java.lang.String[],java.lang.String,java.lang.String[])>($r0, null, null, 0, null, null, null, null, instructionSets, null, null);

        if codePath == null goto label1;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(codePath);

        goto label2;

     label1:
        $r1 = null;

     label2:
        this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = $r1;

        if resourcePath == null goto label3;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(resourcePath);

        goto label4;

     label3:
        $r2 = null;

     label4:
        this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = $r2;

        return;
    }

    int copyApk(com.android.internal.app.IMediaContainerService, boolean) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs this;
        com.android.internal.app.IMediaContainerService imcs;
        boolean temp, $z0, ret#4;
        java.io.File libraryRoot, $r5, $r8, $r10, $r14, $r16, tempDir#1, tmp$1137995431;
        java.io.IOException e, $r17, $r19, tempDir#2;
        java.lang.Throwable l8, $r15;
        com.android.server.pm.PackageManagerService$OriginInfo $r0, $r6, $r12, $r13;
        com.android.server.pm.PackageManagerService $r1;
        java.lang.String $r2, $r7, $r11, $r21;
        com.android.server.pm.PackageInstallerService $r3;
        java.lang.StringBuilder $r20, $r22, tmp$321670034;
        com.android.server.pm.PackageManagerService$FileInstallArgs$1 tempDir#3, tmp$1684265158;
        int ret#5, ret#7;
        com.android.internal.content.NativeLibraryHelper$Handle handle#6;
        com.android.internal.os.IParcelFileDescriptorFactory tmp$638298075;

        this := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        imcs := @parameter0: com.android.internal.app.IMediaContainerService;

        temp := @parameter1: boolean;

        $r0 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $z0 = $r0.<com.android.server.pm.PackageManagerService$OriginInfo: boolean staged>;

        if $z0 == 0 goto label01;

        $r12 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r14 = $r12.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = $r14;

        $r13 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r16 = $r13.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = $r16;

        return 1;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r3 = $r1.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        $r2 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String volumeUuid>;

        tempDir#1 = virtualinvoke $r3.<com.android.server.pm.PackageInstallerService: java.io.File allocateStageDirLegacy(java.lang.String)>($r2);

        this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = tempDir#1;

        this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = tempDir#1;

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        tempDir#2 = $r17;

        tmp$321670034 = new java.lang.StringBuilder;

        specialinvoke tmp$321670034.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke tmp$321670034.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create copy file: ");

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(tempDir#2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r21);

        return -4;

     label04:
        tmp$1684265158 = new com.android.server.pm.PackageManagerService$FileInstallArgs$1;

        specialinvoke tmp$1684265158.<com.android.server.pm.PackageManagerService$FileInstallArgs$1: void <init>(com.android.server.pm.PackageManagerService$FileInstallArgs)>(this);

        tempDir#3 = tmp$1684265158;

        ret#4 = 1;

        $r6 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r5 = $r6.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        $r7 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        tmp$638298075 = (com.android.internal.os.IParcelFileDescriptorFactory) tempDir#3;

        ret#5 = interfaceinvoke imcs.<com.android.internal.app.IMediaContainerService: int copyPackage(java.lang.String,com.android.internal.os.IParcelFileDescriptorFactory)>($r7, tmp$638298075);

        if ret#5 == 1 goto label05;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "Failed to copy package");

        return ret#5;

     label05:
        tmp$1137995431 = new java.io.File;

        $r8 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        specialinvoke tmp$1137995431.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "lib");

        libraryRoot = tmp$1137995431;

        handle#6 = null;

     label06:
        $r10 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        handle#6 = staticinvoke <com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle create(java.io.File)>($r10);

        $r11 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String abiOverride>;

        ret#7 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String)>(handle#6, libraryRoot, $r11);

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(handle#6);

        goto label12;

     label08:
        $r19 := @caughtexception;

        e = $r19;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Copying native libraries failed", e);

        ret#7 = -110;

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(handle#6);

        goto label12;

     label10:
        $r15 := @caughtexception;

        l8 = $r15;

     label11:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(handle#6);

        throw l8;

     label12:
        return ret#7;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    int doPreInstall(int)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs this;
        int status;

        this := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        status := @parameter0: int;

        if status == 1 goto label1;

        specialinvoke this.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

     label1:
        return status;
    }

    boolean doRename(int, android.content.pm.PackageParser$Package, java.lang.String)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs this;
        int status;
        android.content.pm.PackageParser$Package pkg;
        java.lang.String oldCodePath, $r1, $r3, $r4, $r5, $r6, $r8, $r9, $r11, $r13, $r17, $r19;
        java.io.File targetDir, beforeCodeFile, afterCodeFile, $r0;
        android.system.ErrnoException e, $r24;
        com.android.server.pm.PackageManagerService $r2;
        boolean $z0;
        java.lang.String[] $r7, $r10, $r15, $r23;
        android.content.pm.ApplicationInfo $r12, $r14, $r16, $r18, $r20, $r21, $r22;

        this := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        status := @parameter0: int;

        pkg := @parameter1: android.content.pm.PackageParser$Package;

        oldCodePath := @parameter2: java.lang.String;

        if status == 1 goto label1;

        specialinvoke this.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

        return 0;

     label1:
        $r0 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        targetDir = virtualinvoke $r0.<java.io.File: java.io.File getParentFile()>();

        beforeCodeFile = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $r2 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r1 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        afterCodeFile = staticinvoke <com.android.server.pm.PackageManagerService: java.io.File access$4400(com.android.server.pm.PackageManagerService,java.io.File,java.lang.String)>($r2, targetDir, $r1);

     label2:
        $r3 = virtualinvoke beforeCodeFile.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = virtualinvoke afterCodeFile.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void rename(java.lang.String,java.lang.String)>($r3, $r4);

     label3:
        goto label5;

     label4:
        $r24 := @caughtexception;

        e = $r24;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Failed to rename", e);

        return 0;

     label5:
        $z0 = staticinvoke <android.os.SELinux: boolean restoreconRecursive(java.io.File)>(afterCodeFile);

        if $z0 != 0 goto label6;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Failed to restorecon");

        return 0;

     label6:
        this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = afterCodeFile;

        this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = afterCodeFile;

        $r6 = virtualinvoke afterCodeFile.<java.io.File: java.lang.String getAbsolutePath()>();

        pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath> = $r6;

        $r5 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r8 = staticinvoke <android.os.FileUtils: java.lang.String rewriteAfterRename(java.io.File,java.io.File,java.lang.String)>(beforeCodeFile, afterCodeFile, $r5);

        pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath> = $r8;

        $r7 = pkg.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        $r10 = staticinvoke <android.os.FileUtils: java.lang.String[] rewriteAfterRename(java.io.File,java.io.File,java.lang.String[])>(beforeCodeFile, afterCodeFile, $r7);

        pkg.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths> = $r10;

        $r12 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r9 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r12.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid> = $r9;

        $r14 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r11 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        virtualinvoke $r14.<android.content.pm.ApplicationInfo: void setCodePath(java.lang.String)>($r11);

        $r16 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r13 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        virtualinvoke $r16.<android.content.pm.ApplicationInfo: void setBaseCodePath(java.lang.String)>($r13);

        $r18 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r15 = pkg.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        virtualinvoke $r18.<android.content.pm.ApplicationInfo: void setSplitCodePaths(java.lang.String[])>($r15);

        $r20 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r17 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        virtualinvoke $r20.<android.content.pm.ApplicationInfo: void setResourcePath(java.lang.String)>($r17);

        $r22 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r19 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        virtualinvoke $r22.<android.content.pm.ApplicationInfo: void setBaseResourcePath(java.lang.String)>($r19);

        $r21 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r23 = pkg.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        virtualinvoke $r21.<android.content.pm.ApplicationInfo: void setSplitResourcePaths(java.lang.String[])>($r23);

        return 1;

        catch android.system.ErrnoException from label2 to label3 with label4;
    }

    int doPostInstall(int, int)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs this;
        int status, uid;

        this := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        status := @parameter0: int;

        uid := @parameter1: int;

        if status == 1 goto label1;

        specialinvoke this.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

     label1:
        return status;
    }

    java.lang.String getCodePath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs this;
        java.io.File $r0, $r1;
        java.lang.String $r2;

        this := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r0 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        if $r0 == null goto label1;

        $r1 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    java.lang.String getResourcePath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs this;
        java.io.File $r0, $r1;
        java.lang.String $r2;

        this := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r0 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        if $r0 == null goto label1;

        $r1 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    private boolean cleanUp()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs this;
        java.io.File $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9;
        boolean $z0, $z1, $z3;
        com.android.server.pm.PackageManagerService $r8;
        java.lang.String $r10;
        com.android.server.pm.Installer $r11;

        this := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r0 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        if $r0 == null goto label1;

        $r1 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $z1 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label3;

        $r8 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r11 = $r8.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r9 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $r10 = virtualinvoke $r9.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r11.<com.android.server.pm.Installer: int rmPackageDir(java.lang.String)>($r10);

        goto label4;

     label3:
        $r3 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label4:
        $r4 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        if $r4 == null goto label5;

        $r6 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $r5 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        $z3 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r6, $r5);

        if $z3 != 0 goto label5;

        $r7 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        virtualinvoke $r7.<java.io.File: boolean delete()>();

     label5:
        return 1;
    }

    void cleanUpResourcesLI()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs this;
        java.io.File $r0, $r3, $r4;
        java.lang.String[] $r1;
        com.android.server.pm.PackageManagerService $r2;
        boolean $z1;
        android.content.pm.PackageParser$PackageParserException $r5;
        java.util.List allCodePaths#1;
        android.content.pm.PackageParser$PackageLite pkg#2;

        this := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        allCodePaths#1 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r0 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        if $r0 == null goto label4;

        $r3 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label4;

     label1:
        $r4 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        pkg#2 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>($r4, 0);

        allCodePaths#1 = virtualinvoke pkg#2.<android.content.pm.PackageParser$PackageLite: java.util.List getAllCodePaths()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        specialinvoke this.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

        $r2 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r1 = this.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String[] instructionSets>;

        staticinvoke <com.android.server.pm.PackageManagerService: void access$4500(com.android.server.pm.PackageManagerService,java.util.List,java.lang.String[])>($r2, allCodePaths#1, $r1);

        return;

        catch android.content.pm.PackageParser$PackageParserException from label1 to label2 with label3;
    }

    boolean doPostDeleteLI(boolean)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs this;
        boolean delete;

        this := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        delete := @parameter0: boolean;

        virtualinvoke this.<com.android.server.pm.PackageManagerService$FileInstallArgs: void cleanUpResourcesLI()>();

        return 1;
    }

    static java.io.File access$4300(com.android.server.pm.PackageManagerService$FileInstallArgs)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs x0;
        java.io.File $r0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r0 = x0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        return $r0;
    }
}
