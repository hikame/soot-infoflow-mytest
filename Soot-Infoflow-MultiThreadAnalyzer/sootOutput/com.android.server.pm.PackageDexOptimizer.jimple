final class com.android.server.pm.PackageDexOptimizer extends java.lang.Object
{
    private static final java.lang.String TAG;
    static final java.lang.String OAT_DIR_NAME;
    static final int DEX_OPT_SKIPPED;
    static final int DEX_OPT_PERFORMED;
    static final int DEX_OPT_DEFERRED;
    static final int DEX_OPT_FAILED;
    private final com.android.server.pm.PackageManagerService mPackageManagerService;
    private android.util.ArraySet mDeferredDexOpt;
    private final android.os.PowerManager$WakeLock mDexoptWakeLock;
    private volatile boolean mSystemReady;

    void <init>(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageDexOptimizer this;
        com.android.server.pm.PackageManagerService packageManagerService;
        android.os.PowerManager powerManager;
        android.content.Context $r0;
        java.lang.Object $r1;
        android.os.PowerManager$WakeLock $r2;

        this := @this: com.android.server.pm.PackageDexOptimizer;

        packageManagerService := @parameter0: com.android.server.pm.PackageManagerService;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.android.server.pm.PackageDexOptimizer: com.android.server.pm.PackageManagerService mPackageManagerService> = packageManagerService;

        $r0 = packageManagerService.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        powerManager = (android.os.PowerManager) $r1;

        $r2 = virtualinvoke powerManager.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "*dexopt*");

        this.<com.android.server.pm.PackageDexOptimizer: android.os.PowerManager$WakeLock mDexoptWakeLock> = $r2;

        return;
    }

    int performDexOpt(android.content.pm.PackageParser$Package, java.lang.String[], boolean, boolean, boolean)
    {
        com.android.server.pm.PackageDexOptimizer this;
        android.content.pm.PackageParser$Package pkg;
        java.lang.String[] instructionSets;
        boolean forceDex, defer, inclDependencies, useLock;
        java.lang.Object l7, $r1;
        int l9, $i0;
        java.lang.Throwable l10, l11, $r10, $r12;
        com.android.server.pm.PackageManagerService $r0;
        android.os.WorkSource $r2;
        android.os.PowerManager$WakeLock $r3, $r5, $r6, $r13;
        android.content.pm.ApplicationInfo $r4;
        android.util.ArraySet $r7, done#1;
        java.util.ArrayList $r8, $r11;
        java.lang.String $r9;

        this := @this: com.android.server.pm.PackageDexOptimizer;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        instructionSets := @parameter1: java.lang.String[];

        forceDex := @parameter2: boolean;

        defer := @parameter3: boolean;

        inclDependencies := @parameter4: boolean;

        if inclDependencies == 0 goto label02;

        $r8 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesLibraries>;

        if $r8 != null goto label01;

        $r11 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesOptionalLibraries>;

        if $r11 == null goto label02;

     label01:
        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        done#1 = $r7;

        $r9 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke done#1.<android.util.ArraySet: boolean add(java.lang.Object)>($r9);

        goto label03;

     label02:
        done#1 = null;

     label03:
        $r0 = this.<com.android.server.pm.PackageDexOptimizer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $r1 = $r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l7 = $r1;

        entermonitor $r1;

     label04:
        useLock = this.<com.android.server.pm.PackageDexOptimizer: boolean mSystemReady>;

        if useLock == 0 goto label05;

        $r6 = this.<com.android.server.pm.PackageDexOptimizer: android.os.PowerManager$WakeLock mDexoptWakeLock>;

        $r2 = new android.os.WorkSource;

        $r4 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r4.<android.content.pm.ApplicationInfo: int uid>;

        specialinvoke $r2.<android.os.WorkSource: void <init>(int)>($i0);

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>($r2);

        $r5 = this.<com.android.server.pm.PackageDexOptimizer: android.os.PowerManager$WakeLock mDexoptWakeLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void acquire()>();

     label05:
        l9 = specialinvoke this.<com.android.server.pm.PackageDexOptimizer: int performDexOptLI(android.content.pm.PackageParser$Package,java.lang.String[],boolean,boolean,android.util.ArraySet)>(pkg, instructionSets, forceDex, defer, done#1);

     label06:
        if useLock == 0 goto label07;

        $r3 = this.<com.android.server.pm.PackageDexOptimizer: android.os.PowerManager$WakeLock mDexoptWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

     label07:
        exitmonitor l7;

     label08:
        return l9;

     label09:
        $r12 := @caughtexception;

        l10 = $r12;

     label10:
        if useLock == 0 goto label11;

        $r13 = this.<com.android.server.pm.PackageDexOptimizer: android.os.PowerManager$WakeLock mDexoptWakeLock>;

        virtualinvoke $r13.<android.os.PowerManager$WakeLock: void release()>();

     label11:
        throw l10;

     label12:
        $r10 := @caughtexception;

        l11 = $r10;

        exitmonitor l7;

     label13:
        throw l11;

        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label04 to label08 with label12;
        catch java.lang.Throwable from label09 to label13 with label12;
    }

    private int performDexOptLI(android.content.pm.PackageParser$Package, java.lang.String[], boolean, boolean, android.util.ArraySet)
    {
        com.android.server.pm.PackageDexOptimizer this;
        android.content.pm.PackageParser$Package pkg;
        java.lang.String[] targetInstructionSets, instructionSets, dexCodeInstructionSets, arr$, $r51;
        boolean forceDex, defer, vmSafeMode, debuggable, $z0, $z2, $z4, $z5, $z6, performedDexOpt#4, $z7;
        android.util.ArraySet done, $r4, $r31;
        java.util.List paths;
        int len$, 'ret', $i0, $i1, $i2, $i3, $i4, $i5, $i7, i$#5, dexoptNeeded#6, ioe#11;
        java.lang.String dexCodeInstructionSet, path, $r5, $r13, $r20, $r30, $r34, $r38, $r39, $r41, $r46, oatDir#8, ioe#9;
        java.util.Iterator i$;
        android.content.pm.ApplicationInfo $r0, $r1, $r2, $r3, $r21, $r26;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r40, $r42, $r45, $r47, $r48, $r49;
        java.lang.IllegalStateException $r9;
        com.android.server.pm.PackageManagerService $r32;
        com.android.server.pm.Installer $r33;
        java.util.ArrayList $r35, $r36, $r37, $r44;
        java.io.IOException $r43, $r50, ioe#7, ioe#10;
        byte $b10;

        this := @this: com.android.server.pm.PackageDexOptimizer;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        targetInstructionSets := @parameter1: java.lang.String[];

        forceDex := @parameter2: boolean;

        defer := @parameter3: boolean;

        done := @parameter4: android.util.ArraySet;

        if targetInstructionSets == null goto label01;

        $r51 = targetInstructionSets;

        goto label02;

     label01:
        $r0 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r51 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(android.content.pm.ApplicationInfo)>($r0);

     label02:
        instructionSets = $r51;

        if done == null goto label04;

        $r38 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke done.<android.util.ArraySet: boolean add(java.lang.Object)>($r38);

        $r35 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesLibraries>;

        if $r35 == null goto label03;

        $r44 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesLibraries>;

        specialinvoke this.<com.android.server.pm.PackageDexOptimizer: void performDexOptLibsLI(java.util.ArrayList,java.lang.String[],boolean,boolean,android.util.ArraySet)>($r44, instructionSets, forceDex, defer, done);

     label03:
        $r37 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesOptionalLibraries>;

        if $r37 == null goto label04;

        $r36 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesOptionalLibraries>;

        specialinvoke this.<com.android.server.pm.PackageDexOptimizer: void performDexOptLibsLI(java.util.ArrayList,java.lang.String[],boolean,boolean,android.util.ArraySet)>($r36, instructionSets, forceDex, defer, done);

     label04:
        $r1 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r1.<android.content.pm.ApplicationInfo: int flags>;

        $i0 = $i1 & 4;

        if $i0 != 0 goto label05;

        return 0;

     label05:
        $r2 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r2.<android.content.pm.ApplicationInfo: int flags>;

        $i3 = $i2 & 16384;

        if $i3 == 0 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        vmSafeMode = $z5;

        $r3 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r3.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label08;

        $z6 = 1;

        goto label09;

     label08:
        $z6 = 0;

     label09:
        debuggable = $z6;

        paths = virtualinvoke pkg.<android.content.pm.PackageParser$Package: java.util.List getAllCodePathsExcludingResourceOnly()>();

        performedDexOpt#4 = 0;

        dexCodeInstructionSets = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getDexCodeInstructionSets(java.lang.String[])>(instructionSets);

        arr$ = dexCodeInstructionSets;

        len$ = lengthof arr$;

        i$#5 = 0;

     label10:
        if i$#5 >= len$ goto label30;

        dexCodeInstructionSet = arr$[i$#5];

        if forceDex != 0 goto label11;

        $r31 = pkg.<android.content.pm.PackageParser$Package: android.util.ArraySet mDexOptPerformed>;

        $z4 = virtualinvoke $r31.<android.util.ArraySet: boolean contains(java.lang.Object)>(dexCodeInstructionSet);

        if $z4 == 0 goto label11;

        goto label29;

     label11:
        i$ = interfaceinvoke paths.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label28;

        $r6 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        path = (java.lang.String) $r6;

        if forceDex == 0 goto label13;

        dexoptNeeded#6 = 1;

        goto label16;

     label13:
        $r5 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        dexoptNeeded#6 = staticinvoke <dalvik.system.DexFile: int getDexOptNeeded(java.lang.String,java.lang.String,java.lang.String,boolean)>(path, $r5, dexCodeInstructionSet, defer);

     label14:
        goto label16;

     label15:
        $r50 := @caughtexception;

        ioe#7 = $r50;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException reading apk: ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(path);

        $r46 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager.DexOptimizer", $r46, ioe#7);

        return -1;

     label16:
        if forceDex != 0 goto label17;

        if defer == 0 goto label17;

        if dexoptNeeded#6 == 0 goto label17;

        virtualinvoke this.<com.android.server.pm.PackageDexOptimizer: void addPackageForDeferredDexopt(android.content.pm.PackageParser$Package)>(pkg);

        return 2;

     label17:
        if dexoptNeeded#6 == 0 goto label27;

        oatDir#8 = null;

        if dexoptNeeded#6 != 1 goto label21;

        ioe#9 = "dex2oat";

     label18:
        oatDir#8 = specialinvoke this.<com.android.server.pm.PackageDexOptimizer: java.lang.String createOatDirIfSupported(android.content.pm.PackageParser$Package,java.lang.String)>(pkg, dexCodeInstructionSet);

     label19:
        goto label24;

     label20:
        $r43 := @caughtexception;

        ioe#10 = $r43;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create oatDir for package: ");

        $r39 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager.DexOptimizer", $r41);

        return -1;

     label21:
        if dexoptNeeded#6 != 2 goto label22;

        ioe#9 = "patchoat";

        goto label24;

     label22:
        if dexoptNeeded#6 != 3 goto label23;

        ioe#9 = "self patchoat";

        goto label24;

     label23:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid dexopt needed: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(dexoptNeeded#6);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label24:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Running dexopt (");

        $r17 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(ioe#9);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") on: ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(path);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pkg=");

        $r21 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r20 = $r21.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isa=");

        $r25 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(dexCodeInstructionSet);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vmSafeMode=");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(vmSafeMode);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" debuggable=");

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(debuggable);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" oatDir = ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(oatDir#8);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager.DexOptimizer", $r30);

        $r26 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i7 = $r26.<android.content.pm.ApplicationInfo: int uid>;

        ioe#11 = staticinvoke <android.os.UserHandle: int getSharedAppGid(int)>($i7);

        $r32 = this.<com.android.server.pm.PackageDexOptimizer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $r33 = $r32.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $z2 = virtualinvoke pkg.<android.content.pm.PackageParser$Package: boolean isForwardLocked()>();

        if $z2 != 0 goto label25;

        $z7 = 1;

        goto label26;

     label25:
        $z7 = 0;

     label26:
        $r34 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        'ret' = virtualinvoke $r33.<com.android.server.pm.Installer: int dexopt(java.lang.String,int,boolean,java.lang.String,java.lang.String,int,boolean,boolean,java.lang.String)>(path, ioe#11, $z7, $r34, dexCodeInstructionSet, dexoptNeeded#6, vmSafeMode, debuggable, oatDir#8);

        if 'ret' != 0 goto label27;

        performedDexOpt#4 = 1;

     label27:
        goto label12;

     label28:
        $r4 = pkg.<android.content.pm.PackageParser$Package: android.util.ArraySet mDexOptPerformed>;

        virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(dexCodeInstructionSet);

     label29:
        i$#5 = i$#5 + 1;

        goto label10;

     label30:
        if performedDexOpt#4 == 0 goto label31;

        $b10 = 1;

        goto label32;

     label31:
        $b10 = 0;

     label32:
        return $b10;

        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label18 to label19 with label20;
    }

    private java.lang.String createOatDirIfSupported(android.content.pm.PackageParser$Package, java.lang.String) throws java.io.IOException
    {
        com.android.server.pm.PackageDexOptimizer this;
        android.content.pm.PackageParser$Package pkg;
        java.lang.String dexInstructionSet, $r2, $r5, $r6;
        java.io.File codePath, oatDir, $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.content.pm.ApplicationInfo $r0;
        com.android.server.pm.PackageManagerService $r3;
        com.android.server.pm.Installer $r4;

        this := @this: com.android.server.pm.PackageDexOptimizer;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        dexInstructionSet := @parameter1: java.lang.String;

        $z0 = virtualinvoke pkg.<android.content.pm.PackageParser$Package: boolean isSystemApp()>();

        if $z0 == 0 goto label1;

        $z4 = virtualinvoke pkg.<android.content.pm.PackageParser$Package: boolean isUpdatedSystemApp()>();

        if $z4 == 0 goto label2;

     label1:
        $z1 = virtualinvoke pkg.<android.content.pm.PackageParser$Package: boolean isForwardLocked()>();

        if $z1 != 0 goto label2;

        $r0 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $z2 = virtualinvoke $r0.<android.content.pm.ApplicationInfo: boolean isExternalAsec()>();

        if $z2 == 0 goto label3;

     label2:
        return null;

     label3:
        $r1 = new java.io.File;

        $r2 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        codePath = $r1;

        $z3 = virtualinvoke codePath.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label4;

        oatDir = staticinvoke <com.android.server.pm.PackageDexOptimizer: java.io.File getOatDir(java.io.File)>(codePath);

        $r3 = this.<com.android.server.pm.PackageDexOptimizer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $r4 = $r3.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r5 = virtualinvoke oatDir.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r4.<com.android.server.pm.Installer: int createOatDir(java.lang.String,java.lang.String)>($r5, dexInstructionSet);

        $r6 = virtualinvoke oatDir.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r6;

     label4:
        return null;
    }

    static java.io.File getOatDir(java.io.File)
    {
        java.io.File codePath, $r0;

        codePath := @parameter0: java.io.File;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>(codePath, "oat");

        return $r0;
    }

    private void performDexOptLibsLI(java.util.ArrayList, java.lang.String[], boolean, boolean, android.util.ArraySet)
    {
        com.android.server.pm.PackageDexOptimizer this;
        java.util.ArrayList libs;
        java.lang.String[] instructionSets;
        boolean forceDex, defer, $z0, $z1;
        android.util.ArraySet done;
        java.util.Iterator i$;
        java.lang.String libName;
        android.content.pm.PackageParser$Package libPkg;
        java.lang.Object $r0;
        com.android.server.pm.PackageManagerService $r1;

        this := @this: com.android.server.pm.PackageDexOptimizer;

        libs := @parameter0: java.util.ArrayList;

        instructionSets := @parameter1: java.lang.String[];

        forceDex := @parameter2: boolean;

        defer := @parameter3: boolean;

        done := @parameter4: android.util.ArraySet;

        i$ = virtualinvoke libs.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r0 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        libName = (java.lang.String) $r0;

        $r1 = this.<com.android.server.pm.PackageDexOptimizer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        libPkg = virtualinvoke $r1.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package findSharedNonSystemLibrary(java.lang.String)>(libName);

        if libPkg == null goto label2;

        $z1 = virtualinvoke done.<android.util.ArraySet: boolean contains(java.lang.Object)>(libName);

        if $z1 != 0 goto label2;

        specialinvoke this.<com.android.server.pm.PackageDexOptimizer: int performDexOptLI(android.content.pm.PackageParser$Package,java.lang.String[],boolean,boolean,android.util.ArraySet)>(libPkg, instructionSets, forceDex, defer, done);

     label2:
        goto label1;

     label3:
        return;
    }

    public android.util.ArraySet clearDeferredDexOptPackages()
    {
        com.android.server.pm.PackageDexOptimizer this;
        android.util.ArraySet result;

        this := @this: com.android.server.pm.PackageDexOptimizer;

        result = this.<com.android.server.pm.PackageDexOptimizer: android.util.ArraySet mDeferredDexOpt>;

        this.<com.android.server.pm.PackageDexOptimizer: android.util.ArraySet mDeferredDexOpt> = null;

        return result;
    }

    public void addPackageForDeferredDexopt(android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageDexOptimizer this;
        android.content.pm.PackageParser$Package pkg;
        android.util.ArraySet $r0, $r1, $r2;

        this := @this: com.android.server.pm.PackageDexOptimizer;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        $r0 = this.<com.android.server.pm.PackageDexOptimizer: android.util.ArraySet mDeferredDexOpt>;

        if $r0 != null goto label1;

        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        this.<com.android.server.pm.PackageDexOptimizer: android.util.ArraySet mDeferredDexOpt> = $r2;

     label1:
        $r1 = this.<com.android.server.pm.PackageDexOptimizer: android.util.ArraySet mDeferredDexOpt>;

        virtualinvoke $r1.<android.util.ArraySet: boolean add(java.lang.Object)>(pkg);

        return;
    }

    void systemReady()
    {
        com.android.server.pm.PackageDexOptimizer this;

        this := @this: com.android.server.pm.PackageDexOptimizer;

        this.<com.android.server.pm.PackageDexOptimizer: boolean mSystemReady> = 1;

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.PackageDexOptimizer: int DEX_OPT_FAILED> = -1;

        <com.android.server.pm.PackageDexOptimizer: int DEX_OPT_DEFERRED> = 2;

        <com.android.server.pm.PackageDexOptimizer: int DEX_OPT_PERFORMED> = 1;

        <com.android.server.pm.PackageDexOptimizer: int DEX_OPT_SKIPPED> = 0;

        <com.android.server.pm.PackageDexOptimizer: java.lang.String OAT_DIR_NAME> = "oat";

        <com.android.server.pm.PackageDexOptimizer: java.lang.String TAG> = "PackageManager.DexOptimizer";

        return;
    }
}
