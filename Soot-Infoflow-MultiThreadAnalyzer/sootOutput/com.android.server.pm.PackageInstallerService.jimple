public class com.android.server.pm.PackageInstallerService extends android.content.pm.IPackageInstaller$Stub
{
    private static final java.lang.String TAG;
    private static final boolean LOGD;
    private static final java.lang.String TAG_SESSIONS;
    private static final java.lang.String TAG_SESSION;
    private static final java.lang.String TAG_GRANTED_RUNTIME_PERMISSION;
    private static final java.lang.String ATTR_SESSION_ID;
    private static final java.lang.String ATTR_USER_ID;
    private static final java.lang.String ATTR_INSTALLER_PACKAGE_NAME;
    private static final java.lang.String ATTR_INSTALLER_UID;
    private static final java.lang.String ATTR_CREATED_MILLIS;
    private static final java.lang.String ATTR_SESSION_STAGE_DIR;
    private static final java.lang.String ATTR_SESSION_STAGE_CID;
    private static final java.lang.String ATTR_PREPARED;
    private static final java.lang.String ATTR_SEALED;
    private static final java.lang.String ATTR_MODE;
    private static final java.lang.String ATTR_INSTALL_FLAGS;
    private static final java.lang.String ATTR_INSTALL_LOCATION;
    private static final java.lang.String ATTR_SIZE_BYTES;
    private static final java.lang.String ATTR_APP_PACKAGE_NAME;
    private static final java.lang.String ATTR_APP_ICON;
    private static final java.lang.String ATTR_APP_LABEL;
    private static final java.lang.String ATTR_ORIGINATING_URI;
    private static final java.lang.String ATTR_REFERRER_URI;
    private static final java.lang.String ATTR_ABI_OVERRIDE;
    private static final java.lang.String ATTR_VOLUME_UUID;
    private static final java.lang.String ATTR_NAME;
    private static final long MAX_AGE_MILLIS;
    private static final long MAX_ACTIVE_SESSIONS;
    private static final long MAX_HISTORICAL_SESSIONS;
    private final android.content.Context mContext;
    private final com.android.server.pm.PackageManagerService mPm;
    private android.app.AppOpsManager mAppOps;
    private android.os.storage.StorageManager mStorage;
    private final android.os.HandlerThread mInstallThread;
    private final android.os.Handler mInstallHandler;
    private final com.android.server.pm.PackageInstallerService$Callbacks mCallbacks;
    private final android.util.AtomicFile mSessionsFile;
    private final java.io.File mSessionsDir;
    private final com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback;
    private final java.util.Random mRandom;
    private final android.util.SparseArray mSessions;
    private final android.util.SparseArray mHistoricalSessions;
    private final android.util.SparseBooleanArray mLegacySessions;
    private static final java.io.FilenameFilter sStageFilter;

    public void <init>(android.content.Context, com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageInstallerService this;
        android.content.Context context;
        com.android.server.pm.PackageManagerService pm;
        android.util.SparseArray l3, $r2, $r3, $r20, $r23, $r29;
        android.util.ArraySet unclaimedIcons;
        java.lang.Throwable l7, $r31;
        com.android.server.pm.PackageInstallerService$InternalCallback $r0;
        java.security.SecureRandom $r1;
        android.util.SparseBooleanArray $r4;
        android.os.HandlerThread $r5, $r6, $r9, $r10;
        android.os.Handler $r7;
        android.os.Looper $r8, $r13;
        com.android.server.pm.PackageInstallerService$Callbacks $r11;
        android.util.AtomicFile $r12;
        java.io.File $r14, $r15, $r16, $r17, $r18, $r22, $r32, session#4;
        java.lang.String $r19, $r27;
        java.io.File[] $r21;
        int $i0, $i2, i#1;
        java.lang.Object $r24, $r30;
        java.lang.StringBuilder $r25, $r26, $r28;
        boolean $z1;
        com.android.server.pm.PackageInstallerSession session#2;
        java.util.Iterator i#3;

        this := @this: com.android.server.pm.PackageInstallerService;

        context := @parameter0: android.content.Context;

        pm := @parameter1: com.android.server.pm.PackageManagerService;

        specialinvoke this.<android.content.pm.IPackageInstaller$Stub: void <init>()>();

        $r0 = new com.android.server.pm.PackageInstallerService$InternalCallback;

        specialinvoke $r0.<com.android.server.pm.PackageInstallerService$InternalCallback: void <init>(com.android.server.pm.PackageInstallerService)>(this);

        this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback> = $r0;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        this.<com.android.server.pm.PackageInstallerService: java.util.Random mRandom> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions> = $r3;

        $r4 = new android.util.SparseBooleanArray;

        specialinvoke $r4.<android.util.SparseBooleanArray: void <init>()>();

        this.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions> = $r4;

        this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext> = context;

        this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm> = pm;

        $r5 = new android.os.HandlerThread;

        specialinvoke $r5.<android.os.HandlerThread: void <init>(java.lang.String)>("PackageInstaller");

        this.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread> = $r5;

        $r6 = this.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        virtualinvoke $r6.<android.os.HandlerThread: void start()>();

        $r7 = new android.os.Handler;

        $r9 = this.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r8 = virtualinvoke $r9.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r7.<android.os.Handler: void <init>(android.os.Looper)>($r8);

        this.<com.android.server.pm.PackageInstallerService: android.os.Handler mInstallHandler> = $r7;

        $r11 = new com.android.server.pm.PackageInstallerService$Callbacks;

        $r10 = this.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r13 = virtualinvoke $r10.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r11.<com.android.server.pm.PackageInstallerService$Callbacks: void <init>(android.os.Looper)>($r13);

        this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks> = $r11;

        $r12 = new android.util.AtomicFile;

        $r15 = new java.io.File;

        $r14 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, "install_sessions.xml");

        specialinvoke $r12.<android.util.AtomicFile: void <init>(java.io.File)>($r15);

        this.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile> = $r12;

        $r17 = new java.io.File;

        $r16 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, "install_sessions");

        this.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir> = $r17;

        $r18 = this.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir>;

        virtualinvoke $r18.<java.io.File: boolean mkdirs()>();

        $r20 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l3 = $r20;

        entermonitor $r20;

     label1:
        specialinvoke this.<com.android.server.pm.PackageInstallerService: void readSessionsLocked()>();

        $r19 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        specialinvoke this.<com.android.server.pm.PackageInstallerService: void reconcileStagesLocked(java.lang.String)>($r19);

        $r22 = this.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir>;

        $r21 = virtualinvoke $r22.<java.io.File: java.io.File[] listFiles()>();

        unclaimedIcons = staticinvoke <com.android.server.pm.PackageInstallerService: android.util.ArraySet newArraySet(java.lang.Object[])>($r21);

        i#1 = 0;

     label2:
        $r23 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i0 = virtualinvoke $r23.<android.util.SparseArray: int size()>();

        if i#1 >= $i0 goto label3;

        $r29 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r30 = virtualinvoke $r29.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#1);

        session#2 = (com.android.server.pm.PackageInstallerSession) $r30;

        $i2 = session#2.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r32 = specialinvoke this.<com.android.server.pm.PackageInstallerService: java.io.File buildAppIconFile(int)>($i2);

        virtualinvoke unclaimedIcons.<android.util.ArraySet: boolean remove(java.lang.Object)>($r32);

        i#1 = i#1 + 1;

        goto label2;

     label3:
        i#3 = virtualinvoke unclaimedIcons.<android.util.ArraySet: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke i#3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r24 = interfaceinvoke i#3.<java.util.Iterator: java.lang.Object next()>();

        session#4 = (java.io.File) $r24;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting orphan icon ");

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(session#4);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r27);

        virtualinvoke session#4.<java.io.File: boolean delete()>();

        goto label4;

     label5:
        exitmonitor l3;

     label6:
        goto label9;

     label7:
        $r31 := @caughtexception;

        l7 = $r31;

        exitmonitor l3;

     label8:
        throw l7;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void systemReady()
    {
        com.android.server.pm.PackageInstallerService this;
        android.content.Context $r0, $r3;
        java.lang.Object $r1, $r4;
        android.app.AppOpsManager $r2;
        android.os.storage.StorageManager $r5;

        this := @this: com.android.server.pm.PackageInstallerService;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "android/app/AppOpsManager");

        $r2 = (android.app.AppOpsManager) $r1;

        this.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps> = $r2;

        $r3 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "android/os/storage/StorageManager");

        $r5 = (android.os.storage.StorageManager) $r4;

        this.<com.android.server.pm.PackageInstallerService: android.os.storage.StorageManager mStorage> = $r5;

        return;
    }

    private void reconcileStagesLocked(java.lang.String)
    {
        com.android.server.pm.PackageInstallerService this;
        java.lang.String volumeUuid, $r6, $r12;
        java.io.File stagingDir, $r13, session#4;
        android.util.ArraySet unclaimedStages;
        java.lang.Object l6, $r4, $r9, $r15;
        java.lang.Throwable l7, $r16;
        java.io.FilenameFilter $r0;
        java.io.File[] $r1;
        android.util.SparseArray $r2, $r14;
        int $i0, i#1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r5, $r7;
        com.android.server.pm.PackageManagerService $r8, $r11;
        com.android.server.pm.Installer $r10;
        com.android.server.pm.PackageInstallerSession session#2;
        java.util.Iterator i#3;

        this := @this: com.android.server.pm.PackageInstallerService;

        volumeUuid := @parameter0: java.lang.String;

        stagingDir = specialinvoke this.<com.android.server.pm.PackageInstallerService: java.io.File buildStagingDir(java.lang.String)>(volumeUuid);

        $r0 = <com.android.server.pm.PackageInstallerService: java.io.FilenameFilter sStageFilter>;

        $r1 = virtualinvoke stagingDir.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r0);

        unclaimedStages = staticinvoke <com.android.server.pm.PackageInstallerService: android.util.ArraySet newArraySet(java.lang.Object[])>($r1);

        i#1 = 0;

     label01:
        $r2 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i#1 >= $i0 goto label02;

        $r14 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r15 = virtualinvoke $r14.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#1);

        session#2 = (com.android.server.pm.PackageInstallerSession) $r15;

        $r13 = session#2.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        virtualinvoke unclaimedStages.<android.util.ArraySet: boolean remove(java.lang.Object)>($r13);

        i#1 = i#1 + 1;

        goto label01;

     label02:
        i#3 = virtualinvoke unclaimedStages.<android.util.ArraySet: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke i#3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r4 = interfaceinvoke i#3.<java.util.Iterator: java.lang.Object next()>();

        session#4 = (java.io.File) $r4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting orphan stage ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(session#4);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r6);

        $r8 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r9 = $r8.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l6 = $r9;

        entermonitor $r9;

     label04:
        $z1 = virtualinvoke session#4.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label05;

        $r11 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r10 = $r11.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r12 = virtualinvoke session#4.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r10.<com.android.server.pm.Installer: int rmPackageDir(java.lang.String)>($r12);

        goto label06;

     label05:
        virtualinvoke session#4.<java.io.File: boolean delete()>();

     label06:
        exitmonitor l6;

     label07:
        goto label10;

     label08:
        $r16 := @caughtexception;

        l7 = $r16;

        exitmonitor l6;

     label09:
        throw l7;

     label10:
        goto label03;

     label11:
        return;

        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void onPrivateVolumeMounted(java.lang.String)
    {
        com.android.server.pm.PackageInstallerService this;
        java.lang.String volumeUuid;
        android.util.SparseArray l2, $r0;
        java.lang.Throwable l3, $r1;

        this := @this: com.android.server.pm.PackageInstallerService;

        volumeUuid := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        specialinvoke this.<com.android.server.pm.PackageInstallerService: void reconcileStagesLocked(java.lang.String)>(volumeUuid);

        exitmonitor l2;

     label2:
        goto label5;

     label3:
        $r1 := @caughtexception;

        l3 = $r1;

        exitmonitor l2;

     label4:
        throw l3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void onSecureContainersAvailable()
    {
        com.android.server.pm.PackageInstallerService this;
        android.util.SparseArray l1, $r0, $r2, $r9;
        android.util.ArraySet unclaimed, $r1;
        java.lang.String cid, $r6, $r10, i$#6, len$#8;
        java.lang.Throwable l7, $r12;
        int $i0, len$#2, i$#3, arr$#4;
        boolean $z0, $z2, $z3;
        java.lang.StringBuilder $r3, $r5, $r7;
        java.lang.Object $r4, $r8;
        java.lang.String[] arr$#1;
        com.android.server.pm.PackageInstallerSession len$#5;
        java.util.Iterator arr$#7;

        this := @this: com.android.server.pm.PackageInstallerService;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l1 = $r0;

        entermonitor $r0;

     label01:
        $r1 = new android.util.ArraySet;

        specialinvoke $r1.<android.util.ArraySet: void <init>()>();

        unclaimed = $r1;

        arr$#1 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String[] getSecureContainerList()>();

        len$#2 = lengthof arr$#1;

        i$#3 = 0;

     label02:
        if i$#3 >= len$#2 goto label04;

        cid = arr$#1[i$#3];

        $z3 = staticinvoke <com.android.server.pm.PackageInstallerService: boolean isStageName(java.lang.String)>(cid);

        if $z3 == 0 goto label03;

        virtualinvoke unclaimed.<android.util.ArraySet: boolean add(java.lang.Object)>(cid);

     label03:
        i$#3 = i$#3 + 1;

        goto label02;

     label04:
        arr$#4 = 0;

     label05:
        $r2 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if arr$#4 >= $i0 goto label07;

        $r9 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r8 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object valueAt(int)>(arr$#4);

        len$#5 = (com.android.server.pm.PackageInstallerSession) $r8;

        i$#6 = len$#5.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        $z2 = virtualinvoke unclaimed.<android.util.ArraySet: boolean remove(java.lang.Object)>(i$#6);

        if $z2 == 0 goto label06;

        $r10 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int)>(i$#6, $r10, 1000);

     label06:
        arr$#4 = arr$#4 + 1;

        goto label05;

     label07:
        arr$#7 = virtualinvoke unclaimed.<android.util.ArraySet: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke arr$#7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r4 = interfaceinvoke arr$#7.<java.util.Iterator: java.lang.Object next()>();

        len$#8 = (java.lang.String) $r4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting orphan container ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(len$#8);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r6);

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>(len$#8);

        goto label08;

     label09:
        exitmonitor l1;

     label10:
        goto label13;

     label11:
        $r12 := @caughtexception;

        l7 = $r12;

        exitmonitor l1;

     label12:
        throw l7;

     label13:
        return;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static boolean isStageName(java.lang.String)
    {
        java.lang.String name;
        boolean isFile, isContainer, isLegacyContainer, $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        name := @parameter0: java.lang.String;

        $z0 = virtualinvoke name.<java.lang.String: boolean startsWith(java.lang.String)>("vmdl");

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke name.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        isFile = $z4;

        $z1 = virtualinvoke name.<java.lang.String: boolean startsWith(java.lang.String)>("smdl");

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke name.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z2 == 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        isContainer = $z5;

        isLegacyContainer = virtualinvoke name.<java.lang.String: boolean startsWith(java.lang.String)>("smdl2tmp");

        if isFile != 0 goto label5;

        if isContainer != 0 goto label5;

        if isLegacyContainer == 0 goto label6;

     label5:
        $z6 = 1;

        goto label7;

     label6:
        $z6 = 0;

     label7:
        return $z6;
    }

    public java.io.File allocateStageDirLegacy(java.lang.String) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService this;
        java.lang.String volumeUuid;
        android.util.SparseArray l2, $r0;
        java.io.File stageDir;
        java.lang.Throwable l5, $r2;
        android.util.SparseBooleanArray $r1;
        java.lang.IllegalStateException $r3, sessionId#2;
        java.io.IOException $r4;
        int sessionId#1;

        this := @this: com.android.server.pm.PackageInstallerService;

        volumeUuid := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        sessionId#1 = specialinvoke this.<com.android.server.pm.PackageInstallerService: int allocateSessionIdLocked()>();

        $r1 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions>;

        virtualinvoke $r1.<android.util.SparseBooleanArray: void put(int,boolean)>(sessionId#1, 1);

        stageDir = specialinvoke this.<com.android.server.pm.PackageInstallerService: java.io.File buildStageDir(java.lang.String,int)>(volumeUuid, sessionId#1);

        staticinvoke <com.android.server.pm.PackageInstallerService: void prepareStageDir(java.io.File)>(stageDir);

     label2:
        exitmonitor l2;

     label3:
        return stageDir;

     label4:
        $r3 := @caughtexception;

        sessionId#2 = $r3;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.Throwable)>(sessionId#2);

        throw $r4;

     label5:
        $r2 := @caughtexception;

        l5 = $r2;

        exitmonitor l2;

     label6:
        throw l5;

        catch java.lang.IllegalStateException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public java.lang.String allocateExternalStageCidLegacy()
    {
        com.android.server.pm.PackageInstallerService this;
        android.util.SparseArray l1, $r0;
        int sessionId;
        java.lang.Throwable l3, $r7;
        android.util.SparseBooleanArray $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        this := @this: com.android.server.pm.PackageInstallerService;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l1 = $r0;

        entermonitor $r0;

     label1:
        sessionId = specialinvoke this.<com.android.server.pm.PackageInstallerService: int allocateSessionIdLocked()>();

        $r1 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions>;

        virtualinvoke $r1.<android.util.SparseBooleanArray: void put(int,boolean)>(sessionId, 1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("smdl");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(sessionId);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor l1;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        l3 = $r7;

        exitmonitor l1;

     label4:
        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void readSessionsLocked()
    {
        com.android.server.pm.PackageInstallerService this;
        bottom_type fis;
        int type, $i0, $i4, $i5;
        java.lang.String tag, $r3, $r4, $r11;
        com.android.server.pm.PackageInstallerSession session;
        long age, $l1, $l3, $l6;
        java.lang.Throwable l9, $r9;
        android.util.SparseArray $r0, $r5, $r6;
        android.util.AtomicFile $r1;
        java.nio.charset.Charset $r2;
        boolean $z0, valid#3;
        byte $b2;
        java.lang.StringBuilder $r8, $r10, tmp$854249420;
        java.io.FileNotFoundException $r12, in#4;
        java.lang.Exception $r13, in#5;
        java.io.FileInputStream fis#1;
        org.xmlpull.v1.XmlPullParser in#2;
        java.io.InputStream tmp$502554684;

        this := @this: com.android.server.pm.PackageInstallerService;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        virtualinvoke $r0.<android.util.SparseArray: void clear()>();

        fis#1 = null;

     label01:
        $r1 = this.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        fis#1 = virtualinvoke $r1.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        in#2 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        tmp$502554684 = (java.io.InputStream) fis#1;

        interfaceinvoke in#2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(tmp$502554684, $r3);

     label02:
        $i0 = interfaceinvoke in#2.<org.xmlpull.v1.XmlPullParser: int next()>();

        type = $i0;

        if $i0 == 1 goto label07;

        if type != 2 goto label02;

        tag = interfaceinvoke in#2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r4 = "session";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(tag);

        if $z0 == 0 goto label06;

        session = specialinvoke this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerSession readSessionLocked(org.xmlpull.v1.XmlPullParser)>(in#2);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = session.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        age = $l1 - $l3;

        $b2 = age cmp 259200000L;

        if $b2 < 0 goto label03;

        tmp$854249420 = new java.lang.StringBuilder;

        specialinvoke tmp$854249420.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke tmp$854249420.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Abandoning old session first created at ");

        $l6 = session.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r11);

        valid#3 = 0;

        goto label04;

     label03:
        valid#3 = 1;

     label04:
        if valid#3 == 0 goto label05;

        $r6 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i5 = session.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>($i5, session);

        goto label06;

     label05:
        $r5 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        $i4 = session.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>($i4, session);

     label06:
        goto label02;

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(fis#1);

        goto label12;

     label08:
        $r13 := @caughtexception;

        in#5 = $r13;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageInstaller", "Failed reading install sessions", in#5);

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(fis#1);

        goto label12;

     label10:
        $r9 := @caughtexception;

        l9 = $r9;

     label11:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(fis#1);

        throw l9;

     label12:
        return;

        catch java.io.IOException from label01 to label07 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label07 with label08;
        catch java.lang.Throwable from label01 to label07 with label10;
        catch java.lang.Throwable from label08 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private com.android.server.pm.PackageInstallerSession readSessionLocked(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.pm.PackageInstallerService this;
        org.xmlpull.v1.XmlPullParser in;
        int sessionId, userId, installerUid, $i0, $i1, $i2, $i4;
        java.lang.String installerPackageName, stageDirRaw, stageCid, $r2, $r4, $r6, $r9, $r17;
        long createdMillis, $l3, $l5;
        java.io.File stageDir, appIconFile, $r18;
        boolean prepared, sealed, $z0;
        android.content.pm.PackageInstaller$SessionParams params, $r1;
        com.android.server.pm.PackageManagerService $r0, $r12;
        android.net.Uri $r3, $r8;
        android.graphics.Bitmap $r5, $r16;
        java.lang.String[] $r7;
        com.android.server.pm.PackageInstallerSession $r10;
        android.os.HandlerThread $r11;
        android.os.Looper $r13;
        com.android.server.pm.PackageInstallerService$InternalCallback $r14;
        android.content.Context $r15;

        this := @this: com.android.server.pm.PackageInstallerService;

        in := @parameter0: org.xmlpull.v1.XmlPullParser;

        sessionId = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "sessionId");

        userId = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "userId");

        installerPackageName = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "installerPackageName");

        $r0 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $i0 = virtualinvoke $r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>(installerPackageName, userId);

        installerUid = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(in, "installerUid", $i0);

        createdMillis = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "createdMillis");

        stageDirRaw = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "sessionStageDir");

        if stageDirRaw == null goto label1;

        $r18 = new java.io.File;

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(stageDirRaw);

        goto label2;

     label1:
        $r18 = null;

     label2:
        stageDir = $r18;

        stageCid = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "sessionStageCid");

        prepared = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,boolean)>(in, "prepared", 1);

        sealed = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "sealed");

        $r1 = new android.content.pm.PackageInstaller$SessionParams;

        specialinvoke $r1.<android.content.pm.PackageInstaller$SessionParams: void <init>(int)>(-1);

        params = $r1;

        $i2 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "mode");

        params.<android.content.pm.PackageInstaller$SessionParams: int mode> = $i2;

        $i1 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "installFlags");

        params.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i1;

        $i4 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "installLocation");

        params.<android.content.pm.PackageInstaller$SessionParams: int installLocation> = $i4;

        $l3 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "sizeBytes");

        params.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes> = $l3;

        $r4 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "appPackageName");

        params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName> = $r4;

        $r5 = staticinvoke <com.android.internal.util.XmlUtils: android.graphics.Bitmap readBitmapAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "appIcon");

        params.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = $r5;

        $r2 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "appLabel");

        params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel> = $r2;

        $r3 = staticinvoke <com.android.internal.util.XmlUtils: android.net.Uri readUriAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "originatingUri");

        params.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri originatingUri> = $r3;

        $r8 = staticinvoke <com.android.internal.util.XmlUtils: android.net.Uri readUriAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "referrerUri");

        params.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri referrerUri> = $r8;

        $r9 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "abiOverride");

        params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String abiOverride> = $r9;

        $r6 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "volumeUuid");

        params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String volumeUuid> = $r6;

        $r7 = staticinvoke <com.android.server.pm.PackageInstallerService: java.lang.String[] readGrantedRuntimePermissions(org.xmlpull.v1.XmlPullParser)>(in);

        params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String[] grantedRuntimePermissions> = $r7;

        appIconFile = specialinvoke this.<com.android.server.pm.PackageInstallerService: java.io.File buildAppIconFile(int)>(sessionId);

        $z0 = virtualinvoke appIconFile.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        $r17 = virtualinvoke appIconFile.<java.io.File: java.lang.String getAbsolutePath()>();

        $r16 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>($r17);

        params.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = $r16;

        $l5 = virtualinvoke appIconFile.<java.io.File: long lastModified()>();

        params.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified> = $l5;

     label3:
        $r10 = new com.android.server.pm.PackageInstallerSession;

        $r14 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        $r15 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r12 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r11 = this.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r13 = virtualinvoke $r11.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r10.<com.android.server.pm.PackageInstallerSession: void <init>(com.android.server.pm.PackageInstallerService$InternalCallback,android.content.Context,com.android.server.pm.PackageManagerService,android.os.Looper,int,int,java.lang.String,int,android.content.pm.PackageInstaller$SessionParams,long,java.io.File,java.lang.String,boolean,boolean)>($r14, $r15, $r12, $r13, sessionId, userId, installerPackageName, installerUid, params, createdMillis, stageDir, stageCid, prepared, sealed);

        return $r10;
    }

    private void writeSessionsLocked()
    {
        com.android.server.pm.PackageInstallerService this;
        int size, i#3;
        com.android.server.pm.PackageInstallerSession session;
        android.util.AtomicFile $r0, $r7, $r11;
        com.android.internal.util.FastXmlSerializer $r1, out#2;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;
        java.lang.Boolean $r4;
        android.util.SparseArray $r6, $r10;
        java.lang.Object $r9;
        java.io.IOException $r12, out#4;
        java.io.FileOutputStream fos#1;

        this := @this: com.android.server.pm.PackageInstallerService;

        fos#1 = null;

     label1:
        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        fos#1 = virtualinvoke $r0.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        $r1 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r1.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        out#2 = $r1;

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke out#2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(fos#1, $r3);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke out#2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r4);

        interfaceinvoke out#2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "sessions");

        $r6 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        size = virtualinvoke $r6.<android.util.SparseArray: int size()>();

        i#3 = 0;

     label2:
        if i#3 >= size goto label3;

        $r10 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r9 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#3);

        session = (com.android.server.pm.PackageInstallerSession) $r9;

        specialinvoke this.<com.android.server.pm.PackageInstallerService: void writeSessionLocked(org.xmlpull.v1.XmlSerializer,com.android.server.pm.PackageInstallerSession)>(out#2, session);

        i#3 = i#3 + 1;

        goto label2;

     label3:
        interfaceinvoke out#2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "sessions");

        interfaceinvoke out#2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r7 = this.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        virtualinvoke $r7.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(fos#1);

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

        out#4 = $r12;

        if fos#1 == null goto label6;

        $r11 = this.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        virtualinvoke $r11.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(fos#1);

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    private void writeSessionLocked(org.xmlpull.v1.XmlSerializer, com.android.server.pm.PackageInstallerSession) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService this;
        org.xmlpull.v1.XmlSerializer out;
        com.android.server.pm.PackageInstallerSession session;
        android.content.pm.PackageInstaller$SessionParams params;
        java.io.File appIconFile, $r2, $r18;
        java.io.IOException e, $r20;
        java.lang.Throwable l7, $r28;
        int $i0, $i1, $i2, $i4, $i5, $i7, $i8;
        java.lang.String $r1, $r3, $r4, $r5, $r8, $r9, $r17, $r21, $r25, $r27;
        long $l3, $l6, $l10, $l11, $l12;
        boolean $z0, $z1, $z3;
        android.net.Uri $r6, $r7;
        java.lang.String[] $r10;
        android.graphics.Bitmap $r12, $r13, $r16;
        byte $b9;
        android.graphics.Bitmap$CompressFormat $r15;
        java.lang.StringBuilder $r22, $r23, $r24, $r26, tmp$1976182924;
        java.io.FileOutputStream os#1, tmp$985496934;
        java.lang.AutoCloseable tmp$11473707, tmp$87150821, tmp$492205407;

        this := @this: com.android.server.pm.PackageInstallerService;

        out := @parameter0: org.xmlpull.v1.XmlSerializer;

        session := @parameter1: com.android.server.pm.PackageInstallerSession;

        params = session.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        interfaceinvoke out.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "session");

        $i0 = session.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(out, "sessionId", $i0);

        $i1 = session.<com.android.server.pm.PackageInstallerSession: int userId>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(out, "userId", $i1);

        $r1 = session.<com.android.server.pm.PackageInstallerSession: java.lang.String installerPackageName>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(out, "installerPackageName", $r1);

        $i2 = session.<com.android.server.pm.PackageInstallerSession: int installerUid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(out, "installerUid", $i2);

        $l3 = session.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(out, "createdMillis", $l3);

        $r2 = session.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r2 == null goto label01;

        $r18 = session.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r21 = virtualinvoke $r18.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(out, "sessionStageDir", $r21);

     label01:
        $r3 = session.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        if $r3 == null goto label02;

        $r17 = session.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(out, "sessionStageCid", $r17);

     label02:
        $z0 = virtualinvoke session.<com.android.server.pm.PackageInstallerSession: boolean isPrepared()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(out, "prepared", $z0);

        $z1 = virtualinvoke session.<com.android.server.pm.PackageInstallerSession: boolean isSealed()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(out, "sealed", $z1);

        $i5 = params.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(out, "mode", $i5);

        $i4 = params.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(out, "installFlags", $i4);

        $i7 = params.<android.content.pm.PackageInstaller$SessionParams: int installLocation>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(out, "installLocation", $i7);

        $l6 = params.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(out, "sizeBytes", $l6);

        $r5 = params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(out, "appPackageName", $r5);

        $r4 = params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(out, "appLabel", $r4);

        $r7 = params.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri originatingUri>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeUriAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,android.net.Uri)>(out, "originatingUri", $r7);

        $r6 = params.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri referrerUri>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeUriAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,android.net.Uri)>(out, "referrerUri", $r6);

        $r9 = params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String abiOverride>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(out, "abiOverride", $r9);

        $r8 = params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String volumeUuid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(out, "volumeUuid", $r8);

        $i8 = session.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        appIconFile = specialinvoke this.<com.android.server.pm.PackageInstallerService: java.io.File buildAppIconFile(int)>($i8);

        $r12 = params.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        if $r12 != null goto label03;

        $z3 = virtualinvoke appIconFile.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label03;

        virtualinvoke appIconFile.<java.io.File: boolean delete()>();

        goto label11;

     label03:
        $r13 = params.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        if $r13 == null goto label11;

        $l10 = virtualinvoke appIconFile.<java.io.File: long lastModified()>();

        $l11 = params.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified>;

        $b9 = $l10 cmp $l11;

        if $b9 == 0 goto label11;

        os#1 = null;

     label04:
        tmp$985496934 = new java.io.FileOutputStream;

        specialinvoke tmp$985496934.<java.io.FileOutputStream: void <init>(java.io.File)>(appIconFile);

        os#1 = tmp$985496934;

        $r16 = params.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $r15 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r16.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r15, 90, os#1);

     label05:
        tmp$11473707 = (java.lang.AutoCloseable) os#1;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(tmp$11473707);

        goto label10;

     label06:
        $r20 := @caughtexception;

        e = $r20;

        tmp$1976182924 = new java.lang.StringBuilder;

        specialinvoke tmp$1976182924.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke tmp$1976182924.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write icon ");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(appIconFile);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r27 = virtualinvoke e.<java.io.IOException: java.lang.String getMessage()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r25);

     label07:
        tmp$87150821 = (java.lang.AutoCloseable) os#1;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(tmp$87150821);

        goto label10;

     label08:
        $r28 := @caughtexception;

        l7 = $r28;

     label09:
        tmp$492205407 = (java.lang.AutoCloseable) os#1;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(tmp$492205407);

        throw l7;

     label10:
        $l12 = virtualinvoke appIconFile.<java.io.File: long lastModified()>();

        params.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified> = $l12;

     label11:
        $r10 = params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String[] grantedRuntimePermissions>;

        staticinvoke <com.android.server.pm.PackageInstallerService: void writeGrantedRuntimePermissions(org.xmlpull.v1.XmlSerializer,java.lang.String[])>(out, $r10);

        interfaceinvoke out.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "session");

        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private static void writeGrantedRuntimePermissions(org.xmlpull.v1.XmlSerializer, java.lang.String[]) throws java.io.IOException
    {
        org.xmlpull.v1.XmlSerializer out;
        java.lang.String[] grantedRuntimePermissions, arr$;
        int len$, i$#1;
        java.lang.String permission;

        out := @parameter0: org.xmlpull.v1.XmlSerializer;

        grantedRuntimePermissions := @parameter1: java.lang.String[];

        if grantedRuntimePermissions == null goto label2;

        arr$ = grantedRuntimePermissions;

        len$ = lengthof arr$;

        i$#1 = 0;

     label1:
        if i$#1 >= len$ goto label2;

        permission = arr$[i$#1];

        interfaceinvoke out.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "granted-runtime-permission");

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(out, "name", permission);

        interfaceinvoke out.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "granted-runtime-permission");

        i$#1 = i$#1 + 1;

        goto label1;

     label2:
        return;
    }

    private static java.lang.String[] readGrantedRuntimePermissions(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser in;
        int outerDepth, type, $i0, $i1, $i2;
        java.lang.String $r1, $r2, permission#2;
        boolean $z0;
        java.util.ArrayList permissions#1, tmp$1830375160;
        java.lang.String[] permission#3;
        java.util.List tmp$1094326516, tmp$904213501, tmp$1998724528;

        in := @parameter0: org.xmlpull.v1.XmlPullParser;

        permissions#1 = null;

        outerDepth = interfaceinvoke in.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        $i0 = interfaceinvoke in.<org.xmlpull.v1.XmlPullParser: int next()>();

        type = $i0;

        if $i0 == 1 goto label5;

        if type != 3 goto label2;

        $i2 = interfaceinvoke in.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i2 <= outerDepth goto label5;

     label2:
        if type == 3 goto label1;

        if type != 4 goto label3;

        goto label1;

     label3:
        $r1 = "granted-runtime-permission";

        $r2 = interfaceinvoke in.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        permission#2 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(in, "name");

        if permissions#1 != null goto label4;

        tmp$1830375160 = new java.util.ArrayList;

        specialinvoke tmp$1830375160.<java.util.ArrayList: void <init>()>();

        permissions#1 = tmp$1830375160;

     label4:
        tmp$1094326516 = (java.util.List) permissions#1;

        interfaceinvoke tmp$1094326516.<java.util.List: boolean add(java.lang.Object)>(permission#2);

        goto label1;

     label5:
        if permissions#1 != null goto label6;

        return null;

     label6:
        tmp$904213501 = (java.util.List) permissions#1;

        $i1 = interfaceinvoke tmp$904213501.<java.util.List: int size()>();

        permission#3 = newarray (java.lang.String)[$i1];

        tmp$1998724528 = (java.util.List) permissions#1;

        interfaceinvoke tmp$1998724528.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(permission#3);

        return permission#3;
    }

    private java.io.File buildAppIconFile(int)
    {
        com.android.server.pm.PackageInstallerService this;
        int sessionId;
        java.io.File $r0, $r2;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.lang.String $r6;

        this := @this: com.android.server.pm.PackageInstallerService;

        sessionId := @parameter0: int;

        $r0 = new java.io.File;

        $r2 = this.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_icon.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(sessionId);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r6);

        return $r0;
    }

    private void writeSessionsAsync()
    {
        com.android.server.pm.PackageInstallerService this;
        android.os.Handler $r0;
        com.android.server.pm.PackageInstallerService$2 $r1;

        this := @this: com.android.server.pm.PackageInstallerService;

        $r0 = staticinvoke <com.android.server.IoThread: android.os.Handler getHandler()>();

        $r1 = new com.android.server.pm.PackageInstallerService$2;

        specialinvoke $r1.<com.android.server.pm.PackageInstallerService$2: void <init>(com.android.server.pm.PackageInstallerService)>(this);

        virtualinvoke $r0.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public int createSession(android.content.pm.PackageInstaller$SessionParams, java.lang.String, int)
    {
        com.android.server.pm.PackageInstallerService this;
        android.content.pm.PackageInstaller$SessionParams params;
        java.lang.String installerPackageName;
        int userId, $i0;
        java.io.IOException e, $r0;
        java.lang.RuntimeException $r1;

        this := @this: com.android.server.pm.PackageInstallerService;

        params := @parameter0: android.content.pm.PackageInstaller$SessionParams;

        installerPackageName := @parameter1: java.lang.String;

        userId := @parameter2: int;

     label1:
        $i0 = specialinvoke this.<com.android.server.pm.PackageInstallerService: int createSessionInternal(android.content.pm.PackageInstaller$SessionParams,java.lang.String,int)>(params, installerPackageName, userId);

     label2:
        return $i0;

     label3:
        $r0 := @caughtexception;

        e = $r0;

        $r1 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(e);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private int createSessionInternal(android.content.pm.PackageInstaller$SessionParams, java.lang.String, int) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService this;
        android.content.pm.PackageInstaller$SessionParams params;
        java.lang.String installerPackageName, $r3, $r6, $r16, $r18, $r29, $r32, stageCid#8;
        int userId, callingUid, activeCount, historicalCount, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, iconSize#2, am#6;
        long createdMillis, $l11, $l13, $l15, $l21, $l22, am#3;
        java.lang.Throwable l14, $r46, $r47, l7#4;
        com.android.server.pm.PackageManagerService $r0, $r1, $r10;
        boolean $z0, $z1, $z2;
        android.graphics.Bitmap $r2, $r37, $r38, $r41, $r45;
        android.content.Context $r4, $r11, $r27, $r30, $r40, $r44;
        android.util.SparseArray $r5, $r7, $r8, $r14, l7#5;
        byte $b14, $b16;
        com.android.server.pm.PackageInstallerSession $r9, iconSize#9;
        com.android.server.pm.PackageInstallerService$InternalCallback $r12;
        android.os.HandlerThread $r13;
        android.os.Looper $r15;
        com.android.server.pm.PackageInstallerService$Callbacks $r17;
        java.lang.IllegalStateException $r19, $r22;
        java.lang.StringBuilder $r20, $r21, $r23, $r24, $r25, $r28, $r31, $r33, $r35;
        java.io.IOException $r26, $r34;
        java.lang.IllegalArgumentException $r36;
        java.lang.Object $r39;
        android.app.AppOpsManager $r42;
        java.lang.SecurityException $r43, $r48;
        android.app.ActivityManager am#1;
        java.io.File stageDir#7;

        this := @this: com.android.server.pm.PackageInstallerService;

        params := @parameter0: android.content.pm.PackageInstaller$SessionParams;

        installerPackageName := @parameter1: java.lang.String;

        userId := @parameter2: int;

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        virtualinvoke $r1.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(callingUid, userId, 1, 1, "createSession");

        $r0 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.PackageManagerService: boolean isUserRestricted(int,java.lang.String)>(userId, "no_install_apps");

        if $z0 == 0 goto label01;

        $r48 = new java.lang.SecurityException;

        specialinvoke $r48.<java.lang.SecurityException: void <init>(java.lang.String)>("User restriction prevents installing");

        throw $r48;

     label01:
        if callingUid == 2000 goto label02;

        if callingUid != 0 goto label03;

     label02:
        $i0 = params.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i2 = $i0 | 32;

        params.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i2;

        goto label04;

     label03:
        $r42 = this.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r42.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(callingUid, installerPackageName);

        $i26 = params.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i33 = $i26 & -33;

        params.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i33;

        $i34 = params.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i31 = $i34 & -65;

        params.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i31;

        $i32 = params.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i30 = $i32 | 2;

        params.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i30;

     label04:
        $i1 = params.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i3 = $i1 & 256;

        if $i3 == 0 goto label05;

        $r44 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $i27 = virtualinvoke $r44.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS");

        if $i27 != -1 goto label05;

        $r43 = new java.lang.SecurityException;

        specialinvoke $r43.<java.lang.SecurityException: void <init>(java.lang.String)>("You need the android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS permission to use the PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS flag");

        throw $r43;

     label05:
        $r2 = params.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        if $r2 == null goto label07;

        $r40 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r39 = virtualinvoke $r40.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        am#1 = (android.app.ActivityManager) $r39;

        iconSize#2 = virtualinvoke am#1.<android.app.ActivityManager: int getLauncherLargeIconSize()>();

        $r41 = params.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $i25 = virtualinvoke $r41.<android.graphics.Bitmap: int getWidth()>();

        $i24 = iconSize#2 * 2;

        if $i25 > $i24 goto label06;

        $r45 = params.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $i29 = virtualinvoke $r45.<android.graphics.Bitmap: int getHeight()>();

        $i28 = iconSize#2 * 2;

        if $i29 <= $i28 goto label07;

     label06:
        $r38 = params.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $r37 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>($r38, iconSize#2, iconSize#2, 1);

        params.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = $r37;

     label07:
        $i5 = params.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        lookupswitch($i5)
        {
            case 1: goto label08;
            case 2: goto label08;
            default: goto label09;
        };

     label08:
        goto label10;

     label09:
        $r36 = new java.lang.IllegalArgumentException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid install mode: ");

        $i23 = params.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r36;

     label10:
        $i4 = params.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i7 = $i4 & 16;

        if $i7 == 0 goto label11;

        $r27 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $l21 = params.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $z2 = staticinvoke <com.android.internal.content.PackageHelper: boolean fitsOnInternal(android.content.Context,long)>($r27, $l21);

        if $z2 != 0 goto label18;

        $r34 = new java.io.IOException;

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String)>("No suitable internal storage available");

        throw $r34;

     label11:
        $i6 = params.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i9 = $i6 & 8;

        if $i9 == 0 goto label12;

        $r30 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $l22 = params.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $z1 = staticinvoke <com.android.internal.content.PackageHelper: boolean fitsOnExternal(android.content.Context,long)>($r30, $l22);

        if $z1 != 0 goto label18;

        $r26 = new java.io.IOException;

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>("No suitable external storage available");

        throw $r26;

     label12:
        $i8 = params.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i10 = $i8 & 512;

        if $i10 == 0 goto label13;

        virtualinvoke params.<android.content.pm.PackageInstaller$SessionParams: void setInstallFlagsInternal()>();

        goto label18;

     label13:
        virtualinvoke params.<android.content.pm.PackageInstaller$SessionParams: void setInstallFlagsInternal()>();

        am#3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label14:
        $r4 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r3 = params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        $i12 = params.<android.content.pm.PackageInstaller$SessionParams: int installLocation>;

        $l11 = params.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $r6 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String resolveInstallVolume(android.content.Context,java.lang.String,int,long)>($r4, $r3, $i12, $l11);

        params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String volumeUuid> = $r6;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(am#3);

        goto label18;

     label16:
        $r46 := @caughtexception;

        l7#4 = $r46;

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(am#3);

        throw l7#4;

     label18:
        $r7 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l7#5 = $r7;

        entermonitor $r7;

     label19:
        $r5 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        activeCount = staticinvoke <com.android.server.pm.PackageInstallerService: int getSessionCount(android.util.SparseArray,int)>($r5, callingUid);

        $l13 = (long) activeCount;

        $b14 = $l13 cmp 1024L;

        if $b14 < 0 goto label20;

        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many active sessions for UID ");

        $r28 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(callingUid);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r19;

     label20:
        $r8 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        historicalCount = staticinvoke <com.android.server.pm.PackageInstallerService: int getSessionCount(android.util.SparseArray,int)>($r8, callingUid);

        $l15 = (long) historicalCount;

        $b16 = $l15 cmp 1048576L;

        if $b16 < 0 goto label21;

        $r22 = new java.lang.IllegalStateException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many historical sessions for UID ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(callingUid);

        $r18 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r22;

     label21:
        createdMillis = staticinvoke <java.lang.System: long currentTimeMillis()>();

        am#6 = specialinvoke this.<com.android.server.pm.PackageInstallerService: int allocateSessionIdLocked()>();

        stageDir#7 = null;

        stageCid#8 = null;

        $i18 = params.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i17 = $i18 & 16;

        if $i17 == 0 goto label22;

        $r16 = params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String volumeUuid>;

        stageDir#7 = specialinvoke this.<com.android.server.pm.PackageInstallerService: java.io.File buildStageDir(java.lang.String,int)>($r16, am#6);

        goto label23;

     label22:
        stageCid#8 = specialinvoke this.<com.android.server.pm.PackageInstallerService: java.lang.String buildExternalStageCid(int)>(am#6);

     label23:
        $r9 = new com.android.server.pm.PackageInstallerSession;

        $r12 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        $r11 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r10 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r13 = this.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r15 = virtualinvoke $r13.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r9.<com.android.server.pm.PackageInstallerSession: void <init>(com.android.server.pm.PackageInstallerService$InternalCallback,android.content.Context,com.android.server.pm.PackageManagerService,android.os.Looper,int,int,java.lang.String,int,android.content.pm.PackageInstaller$SessionParams,long,java.io.File,java.lang.String,boolean,boolean)>($r12, $r11, $r10, $r15, am#6, userId, installerPackageName, callingUid, params, createdMillis, stageDir#7, stageCid#8, 0, 0);

        iconSize#9 = $r9;

        $r14 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(am#6, iconSize#9);

        exitmonitor l7#5;

     label24:
        goto label27;

     label25:
        $r47 := @caughtexception;

        l14 = $r47;

        exitmonitor l7#5;

     label26:
        throw l14;

     label27:
        $r17 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        $i20 = iconSize#9.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $i19 = iconSize#9.<com.android.server.pm.PackageInstallerSession: int userId>;

        staticinvoke <com.android.server.pm.PackageInstallerService$Callbacks: void access$200(com.android.server.pm.PackageInstallerService$Callbacks,int,int)>($r17, $i20, $i19);

        specialinvoke this.<com.android.server.pm.PackageInstallerService: void writeSessionsAsync()>();

        return am#6;

        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label19 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    public void updateSessionAppIcon(int, android.graphics.Bitmap)
    {
        com.android.server.pm.PackageInstallerService this;
        int sessionId, iconSize, $i0, $i1, $i2, $i3;
        android.util.SparseArray l3, $r0, $r1;
        com.android.server.pm.PackageInstallerSession session;
        android.app.ActivityManager am;
        java.lang.Throwable l7, $r13;
        java.lang.Object $r2, $r12;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        android.content.pm.PackageInstaller$SessionParams $r8, $r10;
        boolean $z0;
        com.android.server.pm.PackageInstallerService$InternalCallback $r9;
        android.content.Context $r11;
        android.graphics.Bitmap appIcon#1;

        this := @this: com.android.server.pm.PackageInstallerService;

        sessionId := @parameter0: int;

        appIcon#1 := @parameter1: android.graphics.Bitmap;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(sessionId);

        session = (com.android.server.pm.PackageInstallerSession) $r2;

        if session == null goto label2;

        $z0 = specialinvoke this.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(session);

        if $z0 != 0 goto label3;

     label2:
        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(sessionId);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label3:
        if appIcon#1 == null goto label5;

        $r11 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        am = (android.app.ActivityManager) $r12;

        iconSize = virtualinvoke am.<android.app.ActivityManager: int getLauncherLargeIconSize()>();

        $i1 = virtualinvoke appIcon#1.<android.graphics.Bitmap: int getWidth()>();

        $i0 = iconSize * 2;

        if $i1 > $i0 goto label4;

        $i2 = virtualinvoke appIcon#1.<android.graphics.Bitmap: int getHeight()>();

        $i3 = iconSize * 2;

        if $i2 <= $i3 goto label5;

     label4:
        appIcon#1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>(appIcon#1, iconSize, iconSize, 1);

     label5:
        $r8 = session.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r8.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = appIcon#1;

        $r10 = session.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r10.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified> = -1L;

        $r9 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        virtualinvoke $r9.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionBadgingChanged(com.android.server.pm.PackageInstallerSession)>(session);

        exitmonitor l3;

     label6:
        goto label9;

     label7:
        $r13 := @caughtexception;

        l7 = $r13;

        exitmonitor l3;

     label8:
        throw l7;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void updateSessionAppLabel(int, java.lang.String)
    {
        com.android.server.pm.PackageInstallerService this;
        int sessionId;
        java.lang.String appLabel, $r7;
        android.util.SparseArray l3, $r0, $r1;
        com.android.server.pm.PackageInstallerSession session;
        java.lang.Throwable l5, $r10;
        java.lang.Object $r2;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        boolean $z0;
        android.content.pm.PackageInstaller$SessionParams $r8;
        com.android.server.pm.PackageInstallerService$InternalCallback $r9;

        this := @this: com.android.server.pm.PackageInstallerService;

        sessionId := @parameter0: int;

        appLabel := @parameter1: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(sessionId);

        session = (com.android.server.pm.PackageInstallerSession) $r2;

        if session == null goto label2;

        $z0 = specialinvoke this.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(session);

        if $z0 != 0 goto label3;

     label2:
        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(sessionId);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label3:
        $r8 = session.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r8.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel> = appLabel;

        $r9 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        virtualinvoke $r9.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionBadgingChanged(com.android.server.pm.PackageInstallerSession)>(session);

        exitmonitor l3;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        l5 = $r10;

        exitmonitor l3;

     label6:
        throw l5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void abandonSession(int)
    {
        com.android.server.pm.PackageInstallerService this;
        int sessionId;
        android.util.SparseArray l2, $r0, $r1;
        com.android.server.pm.PackageInstallerSession session;
        java.lang.Throwable l4, $r8;
        java.lang.Object $r2;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        this := @this: com.android.server.pm.PackageInstallerService;

        sessionId := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(sessionId);

        session = (com.android.server.pm.PackageInstallerSession) $r2;

        if session == null goto label2;

        $z0 = specialinvoke this.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(session);

        if $z0 != 0 goto label3;

     label2:
        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(sessionId);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label3:
        virtualinvoke session.<com.android.server.pm.PackageInstallerSession: void abandon()>();

        exitmonitor l2;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        l4 = $r8;

        exitmonitor l2;

     label6:
        throw l4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.content.pm.IPackageInstallerSession openSession(int)
    {
        com.android.server.pm.PackageInstallerService this;
        int sessionId;
        java.io.IOException e, $r1;
        android.content.pm.IPackageInstallerSession $r0;
        java.lang.RuntimeException $r2;

        this := @this: com.android.server.pm.PackageInstallerService;

        sessionId := @parameter0: int;

     label1:
        $r0 = specialinvoke this.<com.android.server.pm.PackageInstallerService: android.content.pm.IPackageInstallerSession openSessionInternal(int)>(sessionId);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        $r2 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(e);

        throw $r2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private android.content.pm.IPackageInstallerSession openSessionInternal(int) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService this;
        int sessionId;
        android.util.SparseArray l2, $r0, $r1;
        com.android.server.pm.PackageInstallerSession session;
        java.lang.Throwable l4, $r8;
        java.lang.Object $r2;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        this := @this: com.android.server.pm.PackageInstallerService;

        sessionId := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(sessionId);

        session = (com.android.server.pm.PackageInstallerSession) $r2;

        if session == null goto label2;

        $z0 = specialinvoke this.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(session);

        if $z0 != 0 goto label3;

     label2:
        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(sessionId);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label3:
        virtualinvoke session.<com.android.server.pm.PackageInstallerSession: void open()>();

        exitmonitor l2;

     label4:
        return session;

     label5:
        $r8 := @caughtexception;

        l4 = $r8;

        exitmonitor l2;

     label6:
        throw l4;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int allocateSessionIdLocked()
    {
        com.android.server.pm.PackageInstallerService this;
        int sessionId, $i0, $i1, n#1;
        java.util.Random $r0;
        android.util.SparseArray $r1, $r4;
        java.lang.Object $r2, $r5;
        java.lang.IllegalStateException $r3;
        android.util.SparseBooleanArray $r6;
        boolean $z0;

        this := @this: com.android.server.pm.PackageInstallerService;

        n#1 = 0;

     label1:
        $r0 = this.<com.android.server.pm.PackageInstallerService: java.util.Random mRandom>;

        $i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(2147483646);

        sessionId = $i0 + 1;

        $r1 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(sessionId);

        if $r2 != null goto label2;

        $r4 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(sessionId);

        if $r5 != null goto label2;

        $r6 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions>;

        $z0 = virtualinvoke $r6.<android.util.SparseBooleanArray: boolean get(int,boolean)>(sessionId, 0);

        if $z0 != 0 goto label2;

        return sessionId;

     label2:
        $i1 = n#1;

        n#1 = n#1 + 1;

        if $i1 < 32 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to allocate session ID");

        throw $r3;
    }

    private java.io.File buildStagingDir(java.lang.String)
    {
        com.android.server.pm.PackageInstallerService this;
        java.lang.String volumeUuid;
        java.io.File $r0;

        this := @this: com.android.server.pm.PackageInstallerService;

        volumeUuid := @parameter0: java.lang.String;

        $r0 = staticinvoke <android.os.Environment: java.io.File getDataAppDirectory(java.lang.String)>(volumeUuid);

        return $r0;
    }

    private java.io.File buildStageDir(java.lang.String, int)
    {
        com.android.server.pm.PackageInstallerService this;
        java.lang.String volumeUuid, $r5;
        int sessionId;
        java.io.File stagingDir, $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;

        this := @this: com.android.server.pm.PackageInstallerService;

        volumeUuid := @parameter0: java.lang.String;

        sessionId := @parameter1: int;

        stagingDir = specialinvoke this.<com.android.server.pm.PackageInstallerService: java.io.File buildStagingDir(java.lang.String)>(volumeUuid);

        $r0 = new java.io.File;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vmdl");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(sessionId);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>(stagingDir, $r5);

        return $r0;
    }

    static void prepareStageDir(java.io.File) throws java.io.IOException
    {
        java.io.File stageDir;
        android.system.ErrnoException e, $r13;
        boolean $z0, $z1;
        java.lang.String $r0, $r1, $r6, $r11, $r16;
        java.io.IOException $r2, $r7, $r12;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10, $r14, $r15, $r17;

        stageDir := @parameter0: java.io.File;

        $z0 = virtualinvoke stageDir.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session dir already exists: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(stageDir);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $r0 = virtualinvoke stageDir.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void mkdir(java.lang.String,int)>($r0, 493);

        $r1 = virtualinvoke stageDir.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r1, 493);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        e = $r13;

        $r12 = new java.io.IOException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to prepare session dir: ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(stageDir);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r16, e);

        throw $r12;

     label4:
        $z1 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>(stageDir);

        if $z1 != 0 goto label5;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restorecon session dir: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(stageDir);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label5:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    private java.lang.String buildExternalStageCid(int)
    {
        com.android.server.pm.PackageInstallerService this;
        int sessionId;
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        java.lang.String $r4;

        this := @this: com.android.server.pm.PackageInstallerService;

        sessionId := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("smdl");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(sessionId);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    static void prepareExternalStageCid(java.lang.String, long) throws java.io.IOException
    {
        java.lang.String stageCid, $r0, $r1, $r6;
        long sizeBytes;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        stageCid := @parameter0: java.lang.String;

        sizeBytes := @parameter1: long;

        $r0 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        $r1 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String createSdDir(long,java.lang.String,java.lang.String,int,boolean)>(sizeBytes, stageCid, $r0, 1000, 1);

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create session cid: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(stageCid);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        return;
    }

    public android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)
    {
        com.android.server.pm.PackageInstallerService this;
        int sessionId;
        android.util.SparseArray l2, $r0, $r1;
        com.android.server.pm.PackageInstallerSession session;
        java.lang.Throwable l4, $r3;
        java.lang.Object $r2;
        android.content.pm.PackageInstaller$SessionInfo $r4;

        this := @this: com.android.server.pm.PackageInstallerService;

        sessionId := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(sessionId);

        session = (com.android.server.pm.PackageInstallerSession) $r2;

        if session == null goto label2;

        $r4 = virtualinvoke session.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfo()>();

        goto label3;

     label2:
        $r4 = null;

     label3:
        exitmonitor l2;

     label4:
        return $r4;

     label5:
        $r3 := @caughtexception;

        l4 = $r3;

        exitmonitor l2;

     label6:
        throw l4;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.content.pm.ParceledListSlice getAllSessions(int)
    {
        com.android.server.pm.PackageInstallerService this;
        int userId, $i0, $i1, $i2, i#1;
        java.util.ArrayList result, tmp$280343513;
        android.util.SparseArray l3, $r2, $r3, $r5;
        com.android.server.pm.PackageInstallerSession session;
        java.lang.Throwable l6, $r8;
        com.android.server.pm.PackageManagerService $r0;
        java.lang.Object $r6;
        android.content.pm.PackageInstaller$SessionInfo $r7;
        android.content.pm.ParceledListSlice tmp$1332094782;
        java.util.List tmp$2034595904, tmp$2098748228;

        this := @this: com.android.server.pm.PackageInstallerService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r0.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 1, 0, "getAllSessions");

        tmp$280343513 = new java.util.ArrayList;

        specialinvoke tmp$280343513.<java.util.ArrayList: void <init>()>();

        result = tmp$280343513;

        $r2 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l3 = $r2;

        entermonitor $r2;

     label1:
        i#1 = 0;

     label2:
        $r3 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i1 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i#1 >= $i1 goto label4;

        $r5 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#1);

        session = (com.android.server.pm.PackageInstallerSession) $r6;

        $i2 = session.<com.android.server.pm.PackageInstallerSession: int userId>;

        if $i2 != userId goto label3;

        $r7 = virtualinvoke session.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfo()>();

        tmp$2034595904 = (java.util.List) result;

        interfaceinvoke tmp$2034595904.<java.util.List: boolean add(java.lang.Object)>($r7);

     label3:
        i#1 = i#1 + 1;

        goto label2;

     label4:
        exitmonitor l3;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        l6 = $r8;

        exitmonitor l3;

     label7:
        throw l6;

     label8:
        tmp$1332094782 = new android.content.pm.ParceledListSlice;

        tmp$2098748228 = (java.util.List) result;

        specialinvoke tmp$1332094782.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(tmp$2098748228);

        return tmp$1332094782;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.content.pm.ParceledListSlice getMySessions(java.lang.String, int)
    {
        com.android.server.pm.PackageInstallerService this;
        java.lang.String installerPackageName, $r8;
        int userId, $i0, $i1, $i2, $i3, i#1;
        java.util.ArrayList result, tmp$841916907;
        android.util.SparseArray l4, $r3, $r4, $r7;
        com.android.server.pm.PackageInstallerSession session;
        java.lang.Throwable l7, $r10;
        com.android.server.pm.PackageManagerService $r0;
        android.app.AppOpsManager $r1;
        java.lang.Object $r6;
        boolean $z0;
        android.content.pm.PackageInstaller$SessionInfo $r9;
        android.content.pm.ParceledListSlice tmp$1604418954;
        java.util.List tmp$1445231142, tmp$1662801329;

        this := @this: com.android.server.pm.PackageInstallerService;

        installerPackageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r0.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 1, 0, "getMySessions");

        $r1 = this.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r1.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i1, installerPackageName);

        tmp$841916907 = new java.util.ArrayList;

        specialinvoke tmp$841916907.<java.util.ArrayList: void <init>()>();

        result = tmp$841916907;

        $r3 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l4 = $r3;

        entermonitor $r3;

     label1:
        i#1 = 0;

     label2:
        $r4 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i2 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if i#1 >= $i2 goto label4;

        $r7 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r6 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#1);

        session = (com.android.server.pm.PackageInstallerSession) $r6;

        $r8 = session.<com.android.server.pm.PackageInstallerSession: java.lang.String installerPackageName>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, installerPackageName);

        if $z0 == 0 goto label3;

        $i3 = session.<com.android.server.pm.PackageInstallerSession: int userId>;

        if $i3 != userId goto label3;

        $r9 = virtualinvoke session.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfo()>();

        tmp$1445231142 = (java.util.List) result;

        interfaceinvoke tmp$1445231142.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        i#1 = i#1 + 1;

        goto label2;

     label4:
        exitmonitor l4;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        l7 = $r10;

        exitmonitor l4;

     label7:
        throw l7;

     label8:
        tmp$1604418954 = new android.content.pm.ParceledListSlice;

        tmp$1662801329 = (java.util.List) result;

        specialinvoke tmp$1604418954.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(tmp$1662801329);

        return tmp$1604418954;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void uninstall(java.lang.String, java.lang.String, int, android.content.IntentSender, int)
    {
        com.android.server.pm.PackageInstallerService this;
        java.lang.String packageName, callerPackageName;
        int flags, userId, callingUid, $i0;
        android.content.IntentSender statusReceiver;
        android.app.admin.DevicePolicyManager dpm;
        boolean isDeviceOwner, $z0, $z1;
        com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter adapter, $r2;
        java.lang.Throwable l12, $r17;
        com.android.server.pm.PackageManagerService $r0, $r12, $r13;
        android.content.Context $r1, $r4, $r5;
        java.lang.Object $r3;
        android.content.Intent $r6, ident#3;
        android.net.Uri $r8;
        android.content.pm.IPackageDeleteObserver2 $r9, $r14, $r16;
        android.os.IBinder $r11;
        android.app.AppOpsManager $r15;
        long ident#2;

        this := @this: com.android.server.pm.PackageInstallerService;

        packageName := @parameter0: java.lang.String;

        callerPackageName := @parameter1: java.lang.String;

        flags := @parameter2: int;

        statusReceiver := @parameter3: android.content.IntentSender;

        userId := @parameter4: int;

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r0 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        virtualinvoke $r0.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(callingUid, userId, 1, 1, "uninstall");

        if callingUid == 2000 goto label01;

        if callingUid == 0 goto label01;

        $r15 = this.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r15.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(callingUid, callerPackageName);

     label01:
        $r1 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        dpm = (android.app.admin.DevicePolicyManager) $r3;

        if dpm == null goto label02;

        $z0 = virtualinvoke dpm.<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerApp(java.lang.String)>(callerPackageName);

        if $z0 == 0 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        isDeviceOwner = $z1;

        $r2 = new com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter;

        $r5 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        specialinvoke $r2.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: void <init>(android.content.Context,android.content.IntentSender,java.lang.String,boolean,int)>($r5, statusReceiver, packageName, isDeviceOwner, userId);

        adapter = $r2;

        $r4 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DELETE_PACKAGES");

        if $i0 != 0 goto label04;

        $r13 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r16 = virtualinvoke adapter.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        virtualinvoke $r13.<com.android.server.pm.PackageManagerService: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver2,int,int)>(packageName, $r16, userId, flags);

        goto label11;

     label04:
        if isDeviceOwner == 0 goto label10;

        ident#2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        $r12 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r14 = virtualinvoke adapter.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        virtualinvoke $r12.<com.android.server.pm.PackageManagerService: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver2,int,int)>(packageName, $r14, userId, flags);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident#2);

        goto label09;

     label07:
        $r17 := @caughtexception;

        l12 = $r17;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident#2);

        throw l12;

     label09:
        goto label11;

     label10:
        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.UNINSTALL_PACKAGE");

        ident#3 = $r6;

        $r8 = staticinvoke <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>("package", packageName, null);

        virtualinvoke ident#3.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r8);

        $r9 = virtualinvoke adapter.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        $r11 = interfaceinvoke $r9.<android.content.pm.IPackageDeleteObserver2: android.os.IBinder asBinder()>();

        virtualinvoke ident#3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.IBinder)>("android.content.pm.extra.CALLBACK", $r11);

        virtualinvoke adapter.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: void onUserActionRequired(android.content.Intent)>(ident#3);

     label11:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public void setPermissionsResult(int, boolean)
    {
        com.android.server.pm.PackageInstallerService this;
        int sessionId;
        boolean accepted;
        android.util.SparseArray l3, $r1, $r2;
        java.lang.Throwable l4, $r5;
        android.content.Context $r0;
        java.lang.Object $r3;
        com.android.server.pm.PackageInstallerSession $r4;

        this := @this: com.android.server.pm.PackageInstallerService;

        sessionId := @parameter0: int;

        accepted := @parameter1: boolean;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INSTALL_PACKAGES", "PackageInstaller");

        $r1 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l3 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(sessionId);

        $r4 = (com.android.server.pm.PackageInstallerSession) $r3;

        virtualinvoke $r4.<com.android.server.pm.PackageInstallerSession: void setPermissionsResult(boolean)>(accepted);

        exitmonitor l3;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        l4 = $r5;

        exitmonitor l3;

     label4:
        throw l4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void registerCallback(android.content.pm.IPackageInstallerCallback, int)
    {
        com.android.server.pm.PackageInstallerService this;
        android.content.pm.IPackageInstallerCallback callback;
        int userId, $i0;
        com.android.server.pm.PackageManagerService $r0;
        com.android.server.pm.PackageInstallerService$Callbacks $r1;

        this := @this: com.android.server.pm.PackageInstallerService;

        callback := @parameter0: android.content.pm.IPackageInstallerCallback;

        userId := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r0.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 1, 0, "registerCallback");

        $r1 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        virtualinvoke $r1.<com.android.server.pm.PackageInstallerService$Callbacks: void register(android.content.pm.IPackageInstallerCallback,int)>(callback, userId);

        return;
    }

    public void unregisterCallback(android.content.pm.IPackageInstallerCallback)
    {
        com.android.server.pm.PackageInstallerService this;
        android.content.pm.IPackageInstallerCallback callback;
        com.android.server.pm.PackageInstallerService$Callbacks $r0;

        this := @this: com.android.server.pm.PackageInstallerService;

        callback := @parameter0: android.content.pm.IPackageInstallerCallback;

        $r0 = this.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        virtualinvoke $r0.<com.android.server.pm.PackageInstallerService$Callbacks: void unregister(android.content.pm.IPackageInstallerCallback)>(callback);

        return;
    }

    private static int getSessionCount(android.util.SparseArray, int)
    {
        android.util.SparseArray sessions;
        int installerUid, size, $i0, count#1, i#2;
        com.android.server.pm.PackageInstallerSession session;
        java.lang.Object $r0;

        sessions := @parameter0: android.util.SparseArray;

        installerUid := @parameter1: int;

        count#1 = 0;

        size = virtualinvoke sessions.<android.util.SparseArray: int size()>();

        i#2 = 0;

     label1:
        if i#2 >= size goto label3;

        $r0 = virtualinvoke sessions.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#2);

        session = (com.android.server.pm.PackageInstallerSession) $r0;

        $i0 = session.<com.android.server.pm.PackageInstallerSession: int installerUid>;

        if $i0 != installerUid goto label2;

        count#1 = count#1 + 1;

     label2:
        i#2 = i#2 + 1;

        goto label1;

     label3:
        return count#1;
    }

    private boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerService this;
        com.android.server.pm.PackageInstallerSession session;
        int callingUid, $i0;
        boolean $z0;

        this := @this: com.android.server.pm.PackageInstallerService;

        session := @parameter0: com.android.server.pm.PackageInstallerSession;

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        if callingUid != 0 goto label1;

        return 1;

     label1:
        if session == null goto label2;

        $i0 = session.<com.android.server.pm.PackageInstallerSession: int installerUid>;

        if callingUid != $i0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static android.app.Notification buildSuccessNotification(android.content.Context, java.lang.String, java.lang.String, int)
    {
        android.content.Context context;
        java.lang.String contentText, basePackageName, $r4;
        int userId, $i1, $i2, $i3;
        android.graphics.Bitmap packageIcon;
        java.lang.CharSequence packageLabel;
        android.content.pm.IPackageManager $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        android.content.pm.ApplicationInfo $r5, $r7, $r10;
        android.graphics.drawable.Drawable $r6;
        android.content.res.Resources $r8, $r9, $r12;
        android.app.Notification$Builder $r11, $r13, $r14, $r17, $r18, $r21, $r22;
        android.app.Notification$BigTextStyle $r15, $r16;
        android.app.Notification $r19;
        android.os.RemoteException $r20, pm#2;
        android.content.pm.PackageInfo packageInfo#1;
        android.content.pm.PackageManager pm#3;

        context := @parameter0: android.content.Context;

        contentText := @parameter1: java.lang.String;

        basePackageName := @parameter2: java.lang.String;

        userId := @parameter3: int;

        packageInfo#1 = null;

     label1:
        $r0 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        packageInfo#1 = interfaceinvoke $r0.<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(basePackageName, 0, userId);

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        pm#2 = $r20;

     label4:
        if packageInfo#1 == null goto label5;

        $r5 = packageInfo#1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r5 != null goto label6;

     label5:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Notification not built for package: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(basePackageName);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r4);

        return null;

     label6:
        pm#3 = virtualinvoke context.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r7 = packageInfo#1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r6 = virtualinvoke $r7.<android.content.pm.ApplicationInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>(pm#3);

        $r8 = virtualinvoke context.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r8.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104901);

        $r9 = virtualinvoke context.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r9.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104902);

        packageIcon = staticinvoke <com.android.internal.util.ImageUtils: android.graphics.Bitmap buildScaledBitmap(android.graphics.drawable.Drawable,int,int)>($r6, $i1, $i2);

        $r10 = packageInfo#1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        packageLabel = virtualinvoke $r10.<android.content.pm.ApplicationInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>(pm#3);

        $r11 = new android.app.Notification$Builder;

        specialinvoke $r11.<android.app.Notification$Builder: void <init>(android.content.Context)>(context);

        $r13 = virtualinvoke $r11.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17302289);

        $r12 = virtualinvoke context.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = virtualinvoke $r12.<android.content.res.Resources: int getColor(int)>(17170521);

        $r14 = virtualinvoke $r13.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i3);

        $r17 = virtualinvoke $r14.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(packageLabel);

        $r18 = virtualinvoke $r17.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(contentText);

        $r15 = new android.app.Notification$BigTextStyle;

        specialinvoke $r15.<android.app.Notification$BigTextStyle: void <init>()>();

        $r16 = virtualinvoke $r15.<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>(contentText);

        $r21 = virtualinvoke $r18.<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>($r16);

        $r22 = virtualinvoke $r21.<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)>(packageIcon);

        $r19 = virtualinvoke $r22.<android.app.Notification$Builder: android.app.Notification build()>();

        return $r19;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static transient android.util.ArraySet newArraySet(java.lang.Object[])
    {
        java.lang.Object[] elements;
        android.util.ArraySet set, tmp$674532182;
        int $i0;
        java.util.Collection tmp$1526922704;

        elements := @parameter0: java.lang.Object[];

        tmp$674532182 = new android.util.ArraySet;

        specialinvoke tmp$674532182.<android.util.ArraySet: void <init>()>();

        set = tmp$674532182;

        if elements == null goto label1;

        $i0 = lengthof elements;

        virtualinvoke set.<android.util.ArraySet: void ensureCapacity(int)>($i0);

        tmp$1526922704 = (java.util.Collection) set;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(tmp$1526922704, elements);

     label1:
        return set;
    }

    void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.pm.PackageInstallerService this;
        com.android.internal.util.IndentingPrintWriter pw;
        android.util.SparseArray l2, $r0, $r1, $r2, $r5, $r6;
        java.lang.Throwable l6, $r8;
        android.util.SparseBooleanArray $r3;
        java.lang.String $r4;
        java.lang.Object $r7, $r9;
        int N#1, i#2, N#4, i#5;
        com.android.server.pm.PackageInstallerSession session#3, session#6;

        this := @this: com.android.server.pm.PackageInstallerService;

        pw := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r0 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Active install sessions:");

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r1 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        N#1 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        i#2 = 0;

     label2:
        if i#2 >= N#1 goto label3;

        $r6 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r9 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#2);

        session#3 = (com.android.server.pm.PackageInstallerSession) $r9;

        virtualinvoke session#3.<com.android.server.pm.PackageInstallerSession: void dump(com.android.internal.util.IndentingPrintWriter)>(pw);

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i#2 = i#2 + 1;

        goto label2;

     label3:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Historical install sessions:");

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r2 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        N#4 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        i#5 = 0;

     label4:
        if i#5 >= N#4 goto label5;

        $r5 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        $r7 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#5);

        session#6 = (com.android.server.pm.PackageInstallerSession) $r7;

        virtualinvoke session#6.<com.android.server.pm.PackageInstallerSession: void dump(com.android.internal.util.IndentingPrintWriter)>(pw);

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i#5 = i#5 + 1;

        goto label4;

     label5:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Legacy install sessions:");

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r3 = this.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions>;

        $r4 = virtualinvoke $r3.<android.util.SparseBooleanArray: java.lang.String toString()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r4);

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        exitmonitor l2;

     label6:
        goto label9;

     label7:
        $r8 := @caughtexception;

        l6 = $r8;

        exitmonitor l2;

     label8:
        throw l6;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    static android.util.SparseArray access$000(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService x0;
        android.util.SparseArray $r0;

        x0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r0 = x0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        return $r0;
    }

    static void access$100(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService x0;

        x0 := @parameter0: com.android.server.pm.PackageInstallerService;

        specialinvoke x0.<com.android.server.pm.PackageInstallerService: void writeSessionsLocked()>();

        return;
    }

    static android.app.Notification access$300(android.content.Context, java.lang.String, java.lang.String, int)
    {
        android.content.Context x0;
        java.lang.String x1, x2;
        int x3;
        android.app.Notification $r0;

        x0 := @parameter0: android.content.Context;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: java.lang.String;

        x3 := @parameter3: int;

        $r0 = staticinvoke <com.android.server.pm.PackageInstallerService: android.app.Notification buildSuccessNotification(android.content.Context,java.lang.String,java.lang.String,int)>(x0, x1, x2, x3);

        return $r0;
    }

    static com.android.server.pm.PackageInstallerService$Callbacks access$400(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService x0;
        com.android.server.pm.PackageInstallerService$Callbacks $r0;

        x0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r0 = x0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        return $r0;
    }

    static void access$600(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService x0;

        x0 := @parameter0: com.android.server.pm.PackageInstallerService;

        specialinvoke x0.<com.android.server.pm.PackageInstallerService: void writeSessionsAsync()>();

        return;
    }

    static android.util.SparseArray access$900(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService x0;
        android.util.SparseArray $r0;

        x0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r0 = x0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        return $r0;
    }

    static java.io.File access$1000(com.android.server.pm.PackageInstallerService, int)
    {
        com.android.server.pm.PackageInstallerService x0;
        int x1;
        java.io.File $r0;

        x0 := @parameter0: com.android.server.pm.PackageInstallerService;

        x1 := @parameter1: int;

        $r0 = specialinvoke x0.<com.android.server.pm.PackageInstallerService: java.io.File buildAppIconFile(int)>(x1);

        return $r0;
    }

    static android.os.Handler access$1100(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService x0;
        android.os.Handler $r0;

        x0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r0 = x0.<com.android.server.pm.PackageInstallerService: android.os.Handler mInstallHandler>;

        return $r0;
    }

    static void <clinit>()
    {
        com.android.server.pm.PackageInstallerService$1 tmp$58894957;
        java.io.FilenameFilter tmp$2060827587;

        <com.android.server.pm.PackageInstallerService: long MAX_HISTORICAL_SESSIONS> = 1048576L;

        <com.android.server.pm.PackageInstallerService: long MAX_ACTIVE_SESSIONS> = 1024L;

        <com.android.server.pm.PackageInstallerService: long MAX_AGE_MILLIS> = 259200000L;

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_NAME> = "name";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_VOLUME_UUID> = "volumeUuid";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_ABI_OVERRIDE> = "abiOverride";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_REFERRER_URI> = "referrerUri";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_ORIGINATING_URI> = "originatingUri";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_APP_LABEL> = "appLabel";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_APP_ICON> = "appIcon";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_APP_PACKAGE_NAME> = "appPackageName";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_SIZE_BYTES> = "sizeBytes";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_INSTALL_LOCATION> = "installLocation";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_INSTALL_FLAGS> = "installFlags";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_MODE> = "mode";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_SEALED> = "sealed";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_PREPARED> = "prepared";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_SESSION_STAGE_CID> = "sessionStageCid";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_SESSION_STAGE_DIR> = "sessionStageDir";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_CREATED_MILLIS> = "createdMillis";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_INSTALLER_UID> = "installerUid";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_INSTALLER_PACKAGE_NAME> = "installerPackageName";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_USER_ID> = "userId";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_SESSION_ID> = "sessionId";

        <com.android.server.pm.PackageInstallerService: java.lang.String TAG_GRANTED_RUNTIME_PERMISSION> = "granted-runtime-permission";

        <com.android.server.pm.PackageInstallerService: java.lang.String TAG_SESSION> = "session";

        <com.android.server.pm.PackageInstallerService: java.lang.String TAG_SESSIONS> = "sessions";

        <com.android.server.pm.PackageInstallerService: boolean LOGD> = 0;

        <com.android.server.pm.PackageInstallerService: java.lang.String TAG> = "PackageInstaller";

        tmp$58894957 = new com.android.server.pm.PackageInstallerService$1;

        specialinvoke tmp$58894957.<com.android.server.pm.PackageInstallerService$1: void <init>()>();

        tmp$2060827587 = (java.io.FilenameFilter) tmp$58894957;

        <com.android.server.pm.PackageInstallerService: java.io.FilenameFilter sStageFilter> = tmp$2060827587;

        return;
    }
}
