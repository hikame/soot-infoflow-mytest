class com.android.server.pm.PackageManagerService$AsecInstallArgs extends com.android.server.pm.PackageManagerService$InstallArgs
{
    static final java.lang.String RES_FILE_NAME;
    static final java.lang.String PUBLIC_RES_FILE_NAME;
    java.lang.String cid;
    java.lang.String packagePath;
    java.lang.String resourcePath;
    final com.android.server.pm.PackageManagerService this$0;

    void <init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        com.android.server.pm.PackageManagerService l1;
        com.android.server.pm.PackageManagerService$InstallParams params;
        com.android.server.pm.PackageManagerService$OriginInfo $r0;
        com.android.server.pm.PackageManagerService$MoveInfo $r1;
        android.content.pm.IPackageInstallObserver2 $r2;
        int $i0;
        java.lang.String $r3, $r4, $r8;
        android.content.pm.ManifestDigest $r5;
        android.os.UserHandle $r6;
        java.lang.String[] $r7;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        l1 := @parameter0: com.android.server.pm.PackageManagerService;

        params := @parameter1: com.android.server.pm.PackageManagerService$InstallParams;

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0> = l1;

        $r0 = params.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r1 = params.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$MoveInfo move>;

        $r2 = params.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.IPackageInstallObserver2 observer>;

        $i0 = params.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $r3 = params.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String installerPackageName>;

        $r4 = params.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String volumeUuid>;

        $r5 = virtualinvoke params.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.ManifestDigest getManifestDigest()>();

        $r6 = virtualinvoke params.<com.android.server.pm.PackageManagerService$InstallParams: android.os.UserHandle getUser()>();

        $r8 = params.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String packageAbiOverride>;

        $r7 = params.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String[] grantedRuntimePermissions>;

        specialinvoke this.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,com.android.server.pm.PackageManagerService$MoveInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle,java.lang.String[],java.lang.String,java.lang.String[])>($r0, $r1, $r2, $i0, $r3, $r4, $r5, $r6, null, $r8, $r7);

        return;
    }

    void <init>(com.android.server.pm.PackageManagerService, java.lang.String, java.lang.String[], boolean, boolean)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        com.android.server.pm.PackageManagerService l1;
        java.lang.String[] instructionSets;
        boolean isExternal, isForwardLocked, $z0;
        int eidx, sidx, $i1;
        java.lang.String subStr1, $r2, fullCodePath#1;
        com.android.server.pm.PackageManagerService$OriginInfo $r0;
        byte $b0, $b2, $b3;
        java.io.File $r1;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        l1 := @parameter0: com.android.server.pm.PackageManagerService;

        fullCodePath#1 := @parameter1: java.lang.String;

        instructionSets := @parameter2: java.lang.String[];

        isExternal := @parameter3: boolean;

        isForwardLocked := @parameter4: boolean;

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0> = l1;

        $r0 = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromNothing()>();

        if isExternal == 0 goto label1;

        $b2 = 8;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        if isForwardLocked == 0 goto label3;

        $b3 = 1;

        goto label4;

     label3:
        $b3 = 0;

     label4:
        $b0 = $b2 | $b3;

        specialinvoke this.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,com.android.server.pm.PackageManagerService$MoveInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle,java.lang.String[],java.lang.String,java.lang.String[])>($r0, null, null, $b0, null, null, null, null, instructionSets, null, null);

        $z0 = virtualinvoke fullCodePath#1.<java.lang.String: boolean endsWith(java.lang.String)>("pkg.apk");

        if $z0 != 0 goto label5;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String,java.lang.String)>(fullCodePath#1, "pkg.apk");

        fullCodePath#1 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

     label5:
        eidx = virtualinvoke fullCodePath#1.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        subStr1 = virtualinvoke fullCodePath#1.<java.lang.String: java.lang.String substring(int,int)>(0, eidx);

        sidx = virtualinvoke subStr1.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i1 = sidx + 1;

        $r2 = virtualinvoke subStr1.<java.lang.String: java.lang.String substring(int,int)>($i1, eidx);

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = $r2;

        specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>(subStr1);

        return;
    }

    void <init>(com.android.server.pm.PackageManagerService, java.lang.String, java.lang.String[], boolean)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        com.android.server.pm.PackageManagerService l1;
        java.lang.String cid, $r1;
        java.lang.String[] instructionSets;
        boolean isForwardLocked, $z0;
        com.android.server.pm.PackageManagerService$OriginInfo $r0;
        byte $b0, $b1, $b2;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        l1 := @parameter0: com.android.server.pm.PackageManagerService;

        cid := @parameter1: java.lang.String;

        instructionSets := @parameter2: java.lang.String[];

        isForwardLocked := @parameter3: boolean;

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0> = l1;

        $r0 = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromNothing()>();

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean access$4600(com.android.server.pm.PackageManagerService,java.lang.String)>(l1, cid);

        if $z0 == 0 goto label1;

        $b1 = 8;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        if isForwardLocked == 0 goto label3;

        $b2 = 1;

        goto label4;

     label3:
        $b2 = 0;

     label4:
        $b0 = $b1 | $b2;

        specialinvoke this.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,com.android.server.pm.PackageManagerService$MoveInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle,java.lang.String[],java.lang.String,java.lang.String[])>($r0, null, null, $b0, null, null, null, null, instructionSets, null, null);

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = cid;

        $r1 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)>(cid);

        specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>($r1);

        return;
    }

    void createCopyFile()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        com.android.server.pm.PackageManagerService $r0;
        com.android.server.pm.PackageInstallerService $r1;
        java.lang.String $r2;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r0 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r1 = $r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        $r2 = virtualinvoke $r1.<com.android.server.pm.PackageInstallerService: java.lang.String allocateExternalStageCidLegacy()>();

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = $r2;

        return;
    }

    int copyApk(com.android.internal.app.IMediaContainerService, boolean) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        com.android.internal.app.IMediaContainerService imcs;
        boolean temp, $z0, $z2, $z3;
        java.lang.String newMountPath, $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12;
        com.android.server.pm.PackageManagerService$OriginInfo $r0, $r2, $r10;
        java.io.File $r3;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        imcs := @parameter0: com.android.internal.app.IMediaContainerService;

        temp := @parameter1: boolean;

        $r0 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $z0 = $r0.<com.android.server.pm.PackageManagerService$OriginInfo: boolean staged>;

        if $z0 == 0 goto label1;

        $r10 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r9 = $r10.<com.android.server.pm.PackageManagerService$OriginInfo: java.lang.String cid>;

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = $r9;

        $r12 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r11 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)>($r12);

        specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>($r11);

        return 1;

     label1:
        if temp == 0 goto label2;

        virtualinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void createCopyFile()>();

        goto label3;

     label2:
        $r1 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r1);

     label3:
        $r2 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r3 = $r2.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r6 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        $z2 = virtualinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isExternalAsec()>();

        $z3 = virtualinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        $r7 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String abiOverride>;

        $r8 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String access$4700(java.lang.String,com.android.server.pm.PackageSetting)>($r7, null);

        newMountPath = interfaceinvoke imcs.<com.android.internal.app.IMediaContainerService: java.lang.String copyPackageToContainer(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,java.lang.String)>($r4, $r5, $r6, $z2, $z3, $r8);

        if newMountPath == null goto label4;

        specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>(newMountPath);

        return 1;

     label4:
        return -18;
    }

    java.lang.String getCodePath()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        java.lang.String $r0;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r0 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        return $r0;
    }

    java.lang.String getResourcePath()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        java.lang.String $r0;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r0 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String resourcePath>;

        return $r0;
    }

    int doPreInstall(int)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        int status;
        boolean mounted;
        java.lang.String newMountPath, $r0, $r1, $r2, $r3;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        status := @parameter0: int;

        if status == 1 goto label1;

        $r3 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r3);

        goto label3;

     label1:
        $r0 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        mounted = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r0);

        if mounted != 0 goto label3;

        $r1 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r2 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        newMountPath = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int)>($r1, $r2, 1000);

        if newMountPath == null goto label2;

        specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>(newMountPath);

        goto label3;

     label2:
        return -18;

     label3:
        return status;
    }

    boolean doRename(int, android.content.pm.PackageParser$Package, java.lang.String)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        int status;
        android.content.pm.PackageParser$Package pkg;
        java.lang.String oldCodePath, newCacheId, $r0, $r1, $r2, $r4, $r10, $r14, $r15, $r16, $r19, $r20, $r21, $r23, $r27, $r29, $r31, $r36, $r42, $r43, $r50, $r53, $r54, $r55, $r59, $r62, $r65, $r68, $r69, newMountPath#2;
        java.io.File beforeCodeFile, afterCodeFile, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8, $r9, $r11, $r33, $r37, $r38, $r39, $r40, $r41, $r44, $r45, $r46, $r47, $r48, $r49, $r51, $r52, $r56, $r57, $r58, $r60, $r61, $r63, $r64, $r66, $r67, $r70, $r71;
        java.lang.String[] $r17, $r18, $r25, $r35;
        android.content.pm.ApplicationInfo $r22, $r24, $r26, $r28, $r30, $r32, $r34;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        status := @parameter0: int;

        pkg := @parameter1: android.content.pm.PackageParser$Package;

        oldCodePath := @parameter2: java.lang.String;

        $r0 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        newCacheId = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String access$4800(java.lang.String,java.lang.String,java.lang.String)>(oldCodePath, $r0, "/pkg.apk");

        $r1 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z0 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r62 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z5 = staticinvoke <com.android.internal.content.PackageHelper: boolean unMountSdDir(java.lang.String)>($r62);

        if $z5 != 0 goto label1;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to unmount ");

        $r69 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r67 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" before renaming");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r68);

        return 0;

     label1:
        $r2 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z1 = staticinvoke <com.android.internal.content.PackageHelper: boolean renameSdDir(java.lang.String,java.lang.String)>($r2, newCacheId);

        if $z1 != 0 goto label3;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename ");

        $r50 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r44 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newCacheId);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which might be stale. Will try to clean up.");

        $r53 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r53);

        $z4 = staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>(newCacheId);

        if $z4 != 0 goto label2;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Very strange. Cannot clean up stale container ");

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newCacheId);

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r65);

        return 0;

     label2:
        $r54 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z3 = staticinvoke <com.android.internal.content.PackageHelper: boolean renameSdDir(java.lang.String,java.lang.String)>($r54, newCacheId);

        if $z3 != 0 goto label3;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename ");

        $r59 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r58 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newCacheId);

        $r56 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inspite of cleaning it up.");

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r55);

        return 0;

     label3:
        $z2 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>(newCacheId);

        if $z2 != 0 goto label4;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mounting container ");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newCacheId);

        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r43);

        $r42 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        newMountPath#2 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int)>(newCacheId, $r42, 1000);

        goto label5;

     label4:
        newMountPath#2 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)>(newCacheId);

     label5:
        if newMountPath#2 != null goto label6;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get cache path for  ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newCacheId);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r36);

        return 0;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Succesfully renamed ");

        $r4 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newCacheId);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at new path: ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newMountPath#2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r10);

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = newCacheId;

        $r12 = new java.io.File;

        $r14 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r14);

        beforeCodeFile = $r12;

        specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>(newMountPath#2);

        $r13 = new java.io.File;

        $r16 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>($r16);

        afterCodeFile = $r13;

        $r15 = virtualinvoke afterCodeFile.<java.io.File: java.lang.String getAbsolutePath()>();

        pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath> = $r15;

        $r19 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r20 = staticinvoke <android.os.FileUtils: java.lang.String rewriteAfterRename(java.io.File,java.io.File,java.lang.String)>(beforeCodeFile, afterCodeFile, $r19);

        pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath> = $r20;

        $r17 = pkg.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        $r18 = staticinvoke <android.os.FileUtils: java.lang.String[] rewriteAfterRename(java.io.File,java.io.File,java.lang.String[])>(beforeCodeFile, afterCodeFile, $r17);

        pkg.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths> = $r18;

        $r24 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r23 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r24.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid> = $r23;

        $r22 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r21 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        virtualinvoke $r22.<android.content.pm.ApplicationInfo: void setCodePath(java.lang.String)>($r21);

        $r28 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r27 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        virtualinvoke $r28.<android.content.pm.ApplicationInfo: void setBaseCodePath(java.lang.String)>($r27);

        $r26 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r25 = pkg.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        virtualinvoke $r26.<android.content.pm.ApplicationInfo: void setSplitCodePaths(java.lang.String[])>($r25);

        $r32 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r31 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        virtualinvoke $r32.<android.content.pm.ApplicationInfo: void setResourcePath(java.lang.String)>($r31);

        $r30 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r29 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        virtualinvoke $r30.<android.content.pm.ApplicationInfo: void setBaseResourcePath(java.lang.String)>($r29);

        $r34 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r35 = pkg.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        virtualinvoke $r34.<android.content.pm.ApplicationInfo: void setSplitResourcePaths(java.lang.String[])>($r35);

        return 1;
    }

    private void setMountPath(java.lang.String)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        java.lang.String mountPath, $r2, $r3, $r4, $r5, $r7;
        java.io.File mountFile, monolithicFile, $r0, $r1, $r6;
        boolean $z0, $z1;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        mountPath := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(mountPath);

        mountFile = $r0;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(mountFile, "pkg.apk");

        monolithicFile = $r1;

        $z0 = virtualinvoke monolithicFile.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke monolithicFile.<java.io.File: java.lang.String getAbsolutePath()>();

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath> = $r4;

        $z1 = virtualinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z1 == 0 goto label1;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(mountFile, "res.zip");

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String resourcePath> = $r7;

        goto label3;

     label1:
        $r5 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String resourcePath> = $r5;

        goto label3;

     label2:
        $r2 = virtualinvoke mountFile.<java.io.File: java.lang.String getAbsolutePath()>();

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath> = $r2;

        $r3 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String resourcePath> = $r3;

     label3:
        return;
    }

    int doPostInstall(int, int)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        int status, uid, $i1, groupOwner#1;
        boolean mounted, $z0, $z2;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4, $r5, $r6, $r7, $r8, $r9, protectedFile#2;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        status := @parameter0: int;

        uid := @parameter1: int;

        if status == 1 goto label1;

        specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void cleanUp()>();

        goto label6;

     label1:
        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label2;

        groupOwner#1 = staticinvoke <android.os.UserHandle: int getSharedAppGid(int)>(uid);

        protectedFile#2 = "pkg.apk";

        goto label3;

     label2:
        groupOwner#1 = -1;

        protectedFile#2 = null;

     label3:
        if uid < 10000 goto label4;

        $r6 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z2 = staticinvoke <com.android.internal.content.PackageHelper: boolean fixSdPermissions(java.lang.String,int,java.lang.String)>($r6, groupOwner#1, protectedFile#2);

        if $z2 != 0 goto label5;

     label4:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to finalize ");

        $r2 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r4);

        $r5 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r5);

        return -18;

     label5:
        $r7 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        mounted = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r7);

        if mounted != 0 goto label6;

        $r9 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r8 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int)>($r9, $r8, $i1);

     label6:
        return status;
    }

    private void cleanUp()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        java.lang.String $r0;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r0 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r0);

        return;
    }

    private java.util.List getAllCodePaths()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        java.io.File codeFile, $r0;
        java.lang.String $r1;
        java.util.List $r2, $r3;
        boolean $z0;
        android.content.pm.PackageParser$PackageParserException $r4, pkg#2;
        android.content.pm.PackageParser$PackageLite pkg#1;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r0 = new java.io.File;

        $r1 = virtualinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getCodePath()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        codeFile = $r0;

        if codeFile == null goto label4;

        $z0 = virtualinvoke codeFile.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

     label1:
        pkg#1 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>(codeFile, 0);

        $r3 = virtualinvoke pkg#1.<android.content.pm.PackageParser$PackageLite: java.util.List getAllCodePaths()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

     label4:
        $r2 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r2;

        catch android.content.pm.PackageParser$PackageParserException from label1 to label2 with label3;
    }

    void cleanUpResourcesLI()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        java.util.List $r0;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r0 = specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.util.List getAllCodePaths()>();

        specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void cleanUpResourcesLI(java.util.List)>($r0);

        return;
    }

    private void cleanUpResourcesLI(java.util.List)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        java.util.List allCodePaths;
        java.lang.String[] $r0;
        com.android.server.pm.PackageManagerService $r1;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        allCodePaths := @parameter0: java.util.List;

        specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void cleanUp()>();

        $r1 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r0 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String[] instructionSets>;

        staticinvoke <com.android.server.pm.PackageManagerService: void access$4500(com.android.server.pm.PackageManagerService,java.util.List,java.lang.String[])>($r1, allCodePaths, $r0);

        return;
    }

    java.lang.String getPackageName()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        java.lang.String $r0, $r1;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r0 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r1 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getAsecPackageName(java.lang.String)>($r0);

        return $r1;
    }

    boolean doPostDeleteLI(boolean)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        boolean delete, $z0, mounted#1, $z1;
        java.util.List allCodePaths;
        java.lang.String $r0, $r1;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        delete := @parameter0: boolean;

        allCodePaths = specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.util.List getAllCodePaths()>();

        $r0 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        mounted#1 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r0);

        if mounted#1 == 0 goto label1;

        $r1 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z0 = staticinvoke <com.android.internal.content.PackageHelper: boolean unMountSdDir(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        mounted#1 = 0;

     label1:
        if mounted#1 != 0 goto label2;

        if delete == 0 goto label2;

        specialinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void cleanUpResourcesLI(java.util.List)>(allCodePaths);

     label2:
        if mounted#1 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    int doPreCopy()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerService $r0;
        java.lang.String $r1;
        int $i0;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label1;

        $r1 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r0 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $i0 = virtualinvoke $r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>("com.android.defcontainer", 0);

        $z1 = staticinvoke <com.android.internal.content.PackageHelper: boolean fixSdPermissions(java.lang.String,int,java.lang.String)>($r1, $i0, "pkg.apk");

        if $z1 != 0 goto label1;

        return -18;

     label1:
        return 1;
    }

    int doPostCopy(int)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs this;
        int uid, $i1;
        boolean $z0, $z2;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4, $r5, $r6;

        this := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        uid := @parameter0: int;

        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label2;

        if uid < 10000 goto label1;

        $r6 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $i1 = staticinvoke <android.os.UserHandle: int getSharedAppGid(int)>(uid);

        $z2 = staticinvoke <com.android.internal.content.PackageHelper: boolean fixSdPermissions(java.lang.String,int,java.lang.String)>($r6, $i1, "pkg.apk");

        if $z2 != 0 goto label2;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to finalize ");

        $r2 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r4);

        $r5 = this.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r5);

        return -18;

     label2:
        return 1;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String PUBLIC_RES_FILE_NAME> = "res.zip";

        <com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String RES_FILE_NAME> = "pkg.apk";

        return;
    }
}
