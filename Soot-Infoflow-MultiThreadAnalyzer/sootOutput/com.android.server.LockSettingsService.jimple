public class com.android.server.LockSettingsService extends com.android.internal.widget.ILockSettings$Stub
{
    private static final java.lang.String PERMISSION;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final com.android.server.LockSettingsStorage mStorage;
    private com.android.internal.widget.LockPatternUtils mLockPatternUtils;
    private boolean mFirstCallToVold;
    private final android.content.BroadcastReceiver mBroadcastReceiver;
    private static final java.lang.String[] VALID_SETTINGS;
    private static final java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS;

    public void <init>(android.content.Context)
    {
        com.android.server.LockSettingsService this;
        android.content.Context context, $r5;
        android.content.IntentFilter filter, $r2;
        com.android.server.LockSettingsService$2 $r0;
        com.android.internal.widget.LockPatternUtils $r1;
        android.os.UserHandle $r3;
        android.content.BroadcastReceiver $r4;
        com.android.server.LockSettingsStorage $r7;
        com.android.server.LockSettingsService$1 $r8;

        this := @this: com.android.server.LockSettingsService;

        context := @parameter0: android.content.Context;

        specialinvoke this.<com.android.internal.widget.ILockSettings$Stub: void <init>()>();

        $r0 = new com.android.server.LockSettingsService$2;

        specialinvoke $r0.<com.android.server.LockSettingsService$2: void <init>(com.android.server.LockSettingsService)>(this);

        this.<com.android.server.LockSettingsService: android.content.BroadcastReceiver mBroadcastReceiver> = $r0;

        this.<com.android.server.LockSettingsService: android.content.Context mContext> = context;

        $r1 = new com.android.internal.widget.LockPatternUtils;

        specialinvoke $r1.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>(context);

        this.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils> = $r1;

        this.<com.android.server.LockSettingsService: boolean mFirstCallToVold> = 1;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>()>();

        filter = $r2;

        virtualinvoke filter.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke filter.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STARTING");

        $r5 = this.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $r4 = this.<com.android.server.LockSettingsService: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r3 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r4, $r3, filter, null, null);

        $r7 = new com.android.server.LockSettingsStorage;

        $r8 = new com.android.server.LockSettingsService$1;

        specialinvoke $r8.<com.android.server.LockSettingsService$1: void <init>(com.android.server.LockSettingsService)>(this);

        specialinvoke $r7.<com.android.server.LockSettingsStorage: void <init>(android.content.Context,com.android.server.LockSettingsStorage$Callback)>(context, $r8);

        this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage> = $r7;

        return;
    }

    public void systemReady()
    {
        com.android.server.LockSettingsService this;
        com.android.server.LockSettingsStorage $r0;

        this := @this: com.android.server.LockSettingsService;

        specialinvoke this.<com.android.server.LockSettingsService: void migrateOldData()>();

        $r0 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        virtualinvoke $r0.<com.android.server.LockSettingsStorage: void prefetchUser(int)>(0);

        return;
    }

    private void migrateOldData()
    {
        com.android.server.LockSettingsService this;
        java.lang.String ownerInfo, OWNER_INFO_ENABLED, $r0, $r1, validSetting#5, value#6, value#12;
        boolean enabled, $z2, $z3;
        android.content.Context $r2, $r4, $r7;
        java.lang.Object $r3, $r6;
        int $i1, len$#3, i$#4, i$#10, validSetting#11, ivalue#13;
        android.content.pm.UserInfo $r5;
        android.os.RemoteException $r8, cr#17;
        android.provider.Settings$SettingNotFoundException $r9, ivalue#16;
        android.content.ContentResolver cr#1, arr$#8;
        java.lang.String[] arr$#2;
        android.os.UserManager cr#7;
        java.util.List len$#9;
        long $l4;

        this := @this: com.android.server.LockSettingsService;

     label01:
        $r0 = virtualinvoke this.<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>("migrated", null, 0);

        if $r0 != null goto label05;

        $r7 = this.<com.android.server.LockSettingsService: android.content.Context mContext>;

        cr#1 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        arr$#2 = <com.android.server.LockSettingsService: java.lang.String[] VALID_SETTINGS>;

        len$#3 = lengthof arr$#2;

        i$#4 = 0;

     label02:
        if i$#4 >= len$#3 goto label04;

        validSetting#5 = arr$#2[i$#4];

        value#6 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(cr#1, validSetting#5);

        if value#6 == null goto label03;

        virtualinvoke this.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>(validSetting#5, value#6, 0);

     label03:
        i$#4 = i$#4 + 1;

        goto label02;

     label04:
        virtualinvoke this.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("migrated", "true", 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated lock settings to new location");

     label05:
        $r1 = virtualinvoke this.<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>("migrated_user_specific", null, 0);

        if $r1 != null goto label17;

        $r2 = this.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        cr#7 = (android.os.UserManager) $r3;

        $r4 = this.<com.android.server.LockSettingsService: android.content.Context mContext>;

        arr$#8 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        len$#9 = virtualinvoke cr#7.<android.os.UserManager: java.util.List getUsers()>();

        i$#10 = 0;

     label06:
        $i1 = interfaceinvoke len$#9.<java.util.List: int size()>();

        if i$#10 >= $i1 goto label16;

        $r6 = interfaceinvoke len$#9.<java.util.List: java.lang.Object get(int)>(i$#10);

        $r5 = (android.content.pm.UserInfo) $r6;

        validSetting#11 = $r5.<android.content.pm.UserInfo: int id>;

        value#12 = "lock_screen_owner_info";

        ownerInfo = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(arr$#8, "lock_screen_owner_info", validSetting#11);

        if ownerInfo == null goto label07;

        virtualinvoke this.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("lock_screen_owner_info", ownerInfo, validSetting#11);

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(arr$#8, ownerInfo, "", validSetting#11);

     label07:
        OWNER_INFO_ENABLED = "lock_screen_owner_info_enabled";

     label08:
        ivalue#13 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>(arr$#8, "lock_screen_owner_info_enabled", validSetting#11);

        if ivalue#13 == 0 goto label09;

        $z3 = 1;

        goto label10;

     label09:
        $z3 = 0;

     label10:
        enabled = $z3;

        if enabled == 0 goto label11;

        $l4 = 1L;

        goto label12;

     label11:
        $l4 = 0L;

     label12:
        virtualinvoke this.<com.android.server.LockSettingsService: void setLong(java.lang.String,long,int)>("lock_screen_owner_info_enabled", $l4, validSetting#11);

     label13:
        goto label15;

     label14:
        $r9 := @caughtexception;

        ivalue#16 = $r9;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(ownerInfo);

        if $z2 != 0 goto label15;

        virtualinvoke this.<com.android.server.LockSettingsService: void setLong(java.lang.String,long,int)>("lock_screen_owner_info_enabled", 1L, validSetting#11);

     label15:
        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(arr$#8, "lock_screen_owner_info_enabled", 0, validSetting#11);

        i$#10 = i$#10 + 1;

        goto label06;

     label16:
        virtualinvoke this.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("migrated_user_specific", "true", 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated per-user lock settings to new location");

     label17:
        goto label19;

     label18:
        $r8 := @caughtexception;

        cr#17 = $r8;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Unable to migrate old data", cr#17);

     label19:
        return;

        catch android.provider.Settings$SettingNotFoundException from label08 to label13 with label14;
        catch android.os.RemoteException from label01 to label17 with label18;
    }

    private final void checkWritePermission(int)
    {
        com.android.server.LockSettingsService this;
        int userId;
        android.content.Context $r0;

        this := @this: com.android.server.LockSettingsService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.LockSettingsService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE", "LockSettingsWrite");

        return;
    }

    private final void checkPasswordReadPermission(int)
    {
        com.android.server.LockSettingsService this;
        int userId;
        android.content.Context $r0;

        this := @this: com.android.server.LockSettingsService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.LockSettingsService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE", "LockSettingsRead");

        return;
    }

    private final void checkReadPermission(java.lang.String, int)
    {
        com.android.server.LockSettingsService this;
        java.lang.String requestedKey, key, $r12;
        int userId, callingUid, $i0, $i1, i#1;
        java.lang.String[] $r0, $r1;
        boolean $z0;
        android.content.Context $r2;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13;

        this := @this: com.android.server.LockSettingsService;

        requestedKey := @parameter0: java.lang.String;

        userId := @parameter1: int;

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        i#1 = 0;

     label1:
        $r0 = <com.android.server.LockSettingsService: java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS>;

        $i0 = lengthof $r0;

        if i#1 >= $i0 goto label3;

        $r1 = <com.android.server.LockSettingsService: java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS>;

        key = $r1[i#1];

        $z0 = virtualinvoke key.<java.lang.String: boolean equals(java.lang.Object)>(requestedKey);

        if $z0 == 0 goto label2;

        $r2 = this.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.READ_PROFILE");

        if $i1 == 0 goto label2;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid=");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(callingUid);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needs permission ");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.READ_PROFILE");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to read ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(requestedKey);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r3;

     label2:
        i#1 = i#1 + 1;

        goto label1;

     label3:
        return;
    }

    public void setBoolean(java.lang.String, boolean, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        java.lang.String key, $r0;
        boolean value;
        int userId;

        this := @this: com.android.server.LockSettingsService;

        key := @parameter0: java.lang.String;

        value := @parameter1: boolean;

        userId := @parameter2: int;

        specialinvoke this.<com.android.server.LockSettingsService: void checkWritePermission(int)>(userId);

        if value == 0 goto label1;

        $r0 = "1";

        goto label2;

     label1:
        $r0 = "0";

     label2:
        specialinvoke this.<com.android.server.LockSettingsService: void setStringUnchecked(java.lang.String,int,java.lang.String)>(key, userId, $r0);

        return;
    }

    public void setLong(java.lang.String, long, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        java.lang.String key, $r0;
        long value;
        int userId;

        this := @this: com.android.server.LockSettingsService;

        key := @parameter0: java.lang.String;

        value := @parameter1: long;

        userId := @parameter2: int;

        specialinvoke this.<com.android.server.LockSettingsService: void checkWritePermission(int)>(userId);

        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(value);

        specialinvoke this.<com.android.server.LockSettingsService: void setStringUnchecked(java.lang.String,int,java.lang.String)>(key, userId, $r0);

        return;
    }

    public void setString(java.lang.String, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        java.lang.String key, value;
        int userId;

        this := @this: com.android.server.LockSettingsService;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.lang.String;

        userId := @parameter2: int;

        specialinvoke this.<com.android.server.LockSettingsService: void checkWritePermission(int)>(userId);

        specialinvoke this.<com.android.server.LockSettingsService: void setStringUnchecked(java.lang.String,int,java.lang.String)>(key, userId, value);

        return;
    }

    private void setStringUnchecked(java.lang.String, int, java.lang.String)
    {
        com.android.server.LockSettingsService this;
        java.lang.String key, value;
        int userId;
        com.android.server.LockSettingsStorage $r0;

        this := @this: com.android.server.LockSettingsService;

        key := @parameter0: java.lang.String;

        userId := @parameter1: int;

        value := @parameter2: java.lang.String;

        $r0 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        virtualinvoke $r0.<com.android.server.LockSettingsStorage: void writeKeyValue(java.lang.String,java.lang.String,int)>(key, value, userId);

        return;
    }

    public boolean getBoolean(java.lang.String, boolean, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        java.lang.String key, value;
        boolean defaultValue, $z0, $z1, $z2, $z3;
        int userId;
        com.android.server.LockSettingsStorage $r0;

        this := @this: com.android.server.LockSettingsService;

        key := @parameter0: java.lang.String;

        defaultValue := @parameter1: boolean;

        userId := @parameter2: int;

        specialinvoke this.<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)>(key, userId);

        $r0 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        value = virtualinvoke $r0.<com.android.server.LockSettingsStorage: java.lang.String readKeyValue(java.lang.String,java.lang.String,int)>(key, null, userId);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(value);

        if $z0 == 0 goto label1;

        $z3 = defaultValue;

        goto label4;

     label1:
        $z1 = virtualinvoke value.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke value.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public long getLong(java.lang.String, long, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        java.lang.String key, value;
        long defaultValue, $l0;
        int userId;
        com.android.server.LockSettingsStorage $r0;
        boolean $z0;

        this := @this: com.android.server.LockSettingsService;

        key := @parameter0: java.lang.String;

        defaultValue := @parameter1: long;

        userId := @parameter2: int;

        specialinvoke this.<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)>(key, userId);

        $r0 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        value = virtualinvoke $r0.<com.android.server.LockSettingsStorage: java.lang.String readKeyValue(java.lang.String,java.lang.String,int)>(key, null, userId);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(value);

        if $z0 == 0 goto label1;

        $l0 = defaultValue;

        goto label2;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(value);

     label2:
        return $l0;
    }

    public java.lang.String getString(java.lang.String, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        java.lang.String key, defaultValue, $r1;
        int userId;
        com.android.server.LockSettingsStorage $r0;

        this := @this: com.android.server.LockSettingsService;

        key := @parameter0: java.lang.String;

        defaultValue := @parameter1: java.lang.String;

        userId := @parameter2: int;

        specialinvoke this.<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)>(key, userId);

        $r0 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        $r1 = virtualinvoke $r0.<com.android.server.LockSettingsStorage: java.lang.String readKeyValue(java.lang.String,java.lang.String,int)>(key, defaultValue, userId);

        return $r1;
    }

    public boolean havePassword(int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        int userId;
        com.android.server.LockSettingsStorage $r0;
        boolean $z0;

        this := @this: com.android.server.LockSettingsService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        $z0 = virtualinvoke $r0.<com.android.server.LockSettingsStorage: boolean hasPassword(int)>(userId);

        return $z0;
    }

    public boolean havePattern(int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        int userId;
        com.android.server.LockSettingsStorage $r0;
        boolean $z0;

        this := @this: com.android.server.LockSettingsService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        $z0 = virtualinvoke $r0.<com.android.server.LockSettingsStorage: boolean hasPattern(int)>(userId);

        return $z0;
    }

    private void maybeUpdateKeystore(java.lang.String, int)
    {
        com.android.server.LockSettingsService this;
        java.lang.String password;
        int userHandle, profileUid, $i0, $i1;
        android.os.UserManager um;
        android.security.KeyStore ks;
        java.util.List profiles;
        java.util.Iterator i$;
        android.content.pm.UserInfo pi;
        android.content.Context $r0;
        java.lang.Object $r1, $r2;
        boolean $z0, $z3, shouldReset#1;

        this := @this: com.android.server.LockSettingsService;

        password := @parameter0: java.lang.String;

        userHandle := @parameter1: int;

        $r0 = this.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        um = (android.os.UserManager) $r1;

        ks = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        profiles = virtualinvoke um.<android.os.UserManager: java.util.List getProfiles(int)>(userHandle);

        shouldReset#1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(password);

        if userHandle != 0 goto label1;

        $i1 = interfaceinvoke profiles.<java.util.List: int size()>();

        if $i1 != 1 goto label1;

        $z3 = virtualinvoke ks.<android.security.KeyStore: boolean isEmpty()>();

        if $z3 != 0 goto label1;

        shouldReset#1 = 0;

     label1:
        i$ = interfaceinvoke profiles.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        pi = (android.content.pm.UserInfo) $r2;

        $i0 = pi.<android.content.pm.UserInfo: int id>;

        profileUid = staticinvoke <android.os.UserHandle: int getUid(int,int)>($i0, 1000);

        if shouldReset#1 == 0 goto label3;

        virtualinvoke ks.<android.security.KeyStore: boolean resetUid(int)>(profileUid);

        goto label4;

     label3:
        virtualinvoke ks.<android.security.KeyStore: boolean passwordUid(java.lang.String,int)>(password, profileUid);

     label4:
        goto label2;

     label5:
        return;
    }

    public void setLockPattern(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        java.lang.String pattern;
        int userId;
        byte[] hash;
        java.util.List $r0;
        com.android.server.LockSettingsStorage $r1;

        this := @this: com.android.server.LockSettingsService;

        pattern := @parameter0: java.lang.String;

        userId := @parameter1: int;

        specialinvoke this.<com.android.server.LockSettingsService: void checkWritePermission(int)>(userId);

        specialinvoke this.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(pattern, userId);

        $r0 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.util.List stringToPattern(java.lang.String)>(pattern);

        hash = staticinvoke <com.android.internal.widget.LockPatternUtils: byte[] patternToHash(java.util.List)>($r0);

        $r1 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        virtualinvoke $r1.<com.android.server.LockSettingsStorage: void writePatternHash(byte[],int)>(hash, userId);

        return;
    }

    public void setLockPassword(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        java.lang.String password;
        int userId;
        com.android.internal.widget.LockPatternUtils $r0;
        com.android.server.LockSettingsStorage $r1;
        byte[] $r2;

        this := @this: com.android.server.LockSettingsService;

        password := @parameter0: java.lang.String;

        userId := @parameter1: int;

        specialinvoke this.<com.android.server.LockSettingsService: void checkWritePermission(int)>(userId);

        specialinvoke this.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(password, userId);

        $r1 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        $r0 = this.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $r2 = virtualinvoke $r0.<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String,int)>(password, userId);

        virtualinvoke $r1.<com.android.server.LockSettingsStorage: void writePasswordHash(byte[],int)>($r2, userId);

        return;
    }

    public boolean checkPattern(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        java.lang.String pattern;
        int userId;
        byte[] hash, storedHash;
        boolean matched, $z0;
        java.util.List $r0;
        com.android.server.LockSettingsStorage $r1;

        this := @this: com.android.server.LockSettingsService;

        pattern := @parameter0: java.lang.String;

        userId := @parameter1: int;

        specialinvoke this.<com.android.server.LockSettingsService: void checkPasswordReadPermission(int)>(userId);

        $r0 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.util.List stringToPattern(java.lang.String)>(pattern);

        hash = staticinvoke <com.android.internal.widget.LockPatternUtils: byte[] patternToHash(java.util.List)>($r0);

        $r1 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        storedHash = virtualinvoke $r1.<com.android.server.LockSettingsStorage: byte[] readPatternHash(int)>(userId);

        if storedHash != null goto label1;

        return 1;

     label1:
        matched = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(hash, storedHash);

        if matched == 0 goto label2;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(pattern);

        if $z0 != 0 goto label2;

        specialinvoke this.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(pattern, userId);

     label2:
        return matched;
    }

    public boolean checkPassword(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        java.lang.String password;
        int userId;
        byte[] hash, storedHash;
        boolean matched, $z0;
        com.android.internal.widget.LockPatternUtils $r0;
        com.android.server.LockSettingsStorage $r1;

        this := @this: com.android.server.LockSettingsService;

        password := @parameter0: java.lang.String;

        userId := @parameter1: int;

        specialinvoke this.<com.android.server.LockSettingsService: void checkPasswordReadPermission(int)>(userId);

        $r0 = this.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        hash = virtualinvoke $r0.<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String,int)>(password, userId);

        $r1 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        storedHash = virtualinvoke $r1.<com.android.server.LockSettingsStorage: byte[] readPasswordHash(int)>(userId);

        if storedHash != null goto label1;

        return 1;

     label1:
        matched = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(hash, storedHash);

        if matched == 0 goto label2;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(password);

        if $z0 != 0 goto label2;

        specialinvoke this.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(password, userId);

     label2:
        return matched;
    }

    public boolean checkVoldPassword(int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService this;
        int userId;
        android.os.storage.IMountService service;
        java.lang.String password;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.internal.widget.LockPatternUtils $r0, $r1;
        java.lang.Exception $r2, $r3, l4#1, l4#2;

        this := @this: com.android.server.LockSettingsService;

        userId := @parameter0: int;

        $z0 = this.<com.android.server.LockSettingsService: boolean mFirstCallToVold>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        this.<com.android.server.LockSettingsService: boolean mFirstCallToVold> = 0;

        specialinvoke this.<com.android.server.LockSettingsService: void checkPasswordReadPermission(int)>(userId);

        service = specialinvoke this.<com.android.server.LockSettingsService: android.os.storage.IMountService getMountService()>();

        password = interfaceinvoke service.<android.os.storage.IMountService: java.lang.String getPassword()>();

        interfaceinvoke service.<android.os.storage.IMountService: void clearPassword()>();

        if password != null goto label02;

        return 0;

     label02:
        $r0 = this.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z1 = virtualinvoke $r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled()>();

        if $z1 == 0 goto label04;

        $z4 = virtualinvoke this.<com.android.server.LockSettingsService: boolean checkPattern(java.lang.String,int)>(password, userId);

        if $z4 == 0 goto label04;

     label03:
        return 1;

     label04:
        goto label06;

     label05:
        $r2 := @caughtexception;

        l4#1 = $r2;

     label06:
        $r1 = this.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r1.<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()>();

        if $z2 == 0 goto label08;

        $z3 = virtualinvoke this.<com.android.server.LockSettingsService: boolean checkPassword(java.lang.String,int)>(password, userId);

        if $z3 == 0 goto label08;

     label07:
        return 1;

     label08:
        goto label10;

     label09:
        $r3 := @caughtexception;

        l4#2 = $r3;

     label10:
        return 0;

        catch java.lang.Exception from label02 to label03 with label05;
        catch java.lang.Exception from label06 to label07 with label09;
    }

    public void removeUser(int)
    {
        com.android.server.LockSettingsService this;
        int userId, userUid;
        android.security.KeyStore ks;
        com.android.server.LockSettingsStorage $r0;

        this := @this: com.android.server.LockSettingsService;

        userId := @parameter0: int;

        specialinvoke this.<com.android.server.LockSettingsService: void checkWritePermission(int)>(userId);

        $r0 = this.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        virtualinvoke $r0.<com.android.server.LockSettingsStorage: void removeUser(int)>(userId);

        ks = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        userUid = staticinvoke <android.os.UserHandle: int getUid(int,int)>(userId, 1000);

        virtualinvoke ks.<android.security.KeyStore: boolean resetUid(int)>(userUid);

        return;
    }

    private android.os.storage.IMountService getMountService()
    {
        com.android.server.LockSettingsService this;
        android.os.IBinder service;
        android.os.storage.IMountService $r0;

        this := @this: com.android.server.LockSettingsService;

        service = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if service == null goto label1;

        $r0 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>(service);

        return $r0;

     label1:
        return null;
    }

    static com.android.server.LockSettingsStorage access$000(com.android.server.LockSettingsService)
    {
        com.android.server.LockSettingsService x0;
        com.android.server.LockSettingsStorage $r0;

        x0 := @parameter0: com.android.server.LockSettingsService;

        $r0 = x0.<com.android.server.LockSettingsService: com.android.server.LockSettingsStorage mStorage>;

        return $r0;
    }

    static android.content.Context access$100(com.android.server.LockSettingsService)
    {
        com.android.server.LockSettingsService x0;
        android.content.Context $r0;

        x0 := @parameter0: com.android.server.LockSettingsService;

        $r0 = x0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;

        <com.android.server.LockSettingsService: java.lang.String TAG> = "LockSettingsService";

        <com.android.server.LockSettingsService: java.lang.String PERMISSION> = "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE";

        $r0 = newarray (java.lang.String)[16];

        $r0[0] = "lockscreen.lockedoutpermanently";

        $r0[1] = "lockscreen.lockoutattemptdeadline";

        $r0[2] = "lockscreen.patterneverchosen";

        $r0[3] = "lockscreen.password_type";

        $r0[4] = "lockscreen.password_type_alternate";

        $r0[5] = "lockscreen.password_salt";

        $r0[6] = "lockscreen.disabled";

        $r0[7] = "lockscreen.options";

        $r0[8] = "lockscreen.biometric_weak_fallback";

        $r0[9] = "lockscreen.biometricweakeverchosen";

        $r0[10] = "lockscreen.power_button_instantly_locks";

        $r0[11] = "lockscreen.passwordhistory";

        $r0[12] = "lock_pattern_autolock";

        $r0[13] = "lock_biometric_weak_flags";

        $r0[14] = "lock_pattern_visible_pattern";

        $r0[15] = "lock_pattern_tactile_feedback_enabled";

        <com.android.server.LockSettingsService: java.lang.String[] VALID_SETTINGS> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "lock_screen_owner_info_enabled";

        $r1[1] = "lock_screen_owner_info";

        <com.android.server.LockSettingsService: java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS> = $r1;

        return;
    }
}
