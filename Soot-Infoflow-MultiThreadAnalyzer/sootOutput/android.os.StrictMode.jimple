public final class android.os.StrictMode extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean LOG_V;
    private static final boolean IS_USER_BUILD;
    private static final boolean IS_ENG_BUILD;
    public static final java.lang.String DISABLE_PROPERTY;
    public static final java.lang.String VISUAL_PROPERTY;
    private static final java.lang.String CLEARTEXT_PROPERTY;
    private static final long MIN_LOG_INTERVAL_MS;
    private static final long MIN_DIALOG_INTERVAL_MS;
    private static final int MAX_SPAN_TAGS;
    private static final int MAX_OFFENSES_PER_LOOP;
    public static final int DETECT_DISK_WRITE;
    public static final int DETECT_DISK_READ;
    public static final int DETECT_NETWORK;
    public static final int DETECT_CUSTOM;
    public static final int DETECT_RESOURCE_MISMATCH;
    private static final int ALL_THREAD_DETECT_BITS;
    public static final int DETECT_VM_CURSOR_LEAKS;
    public static final int DETECT_VM_CLOSABLE_LEAKS;
    public static final int DETECT_VM_ACTIVITY_LEAKS;
    private static final int DETECT_VM_INSTANCE_LEAKS;
    public static final int DETECT_VM_REGISTRATION_LEAKS;
    private static final int DETECT_VM_FILE_URI_EXPOSURE;
    private static final int DETECT_VM_CLEARTEXT_NETWORK;
    private static final int ALL_VM_DETECT_BITS;
    public static final int PENALTY_LOG;
    public static final int PENALTY_DIALOG;
    public static final int PENALTY_DEATH;
    public static final int PENALTY_DEATH_ON_NETWORK;
    public static final int PENALTY_FLASH;
    public static final int PENALTY_DROPBOX;
    public static final int PENALTY_GATHER;
    public static final int PENALTY_DEATH_ON_CLEARTEXT_NETWORK;
    private static final int THREAD_PENALTY_MASK;
    private static final int VM_PENALTY_MASK;
    public static final int NETWORK_POLICY_ACCEPT;
    public static final int NETWORK_POLICY_LOG;
    public static final int NETWORK_POLICY_REJECT;
    private static final java.util.HashMap EMPTY_CLASS_LIMIT_MAP;
    private static volatile int sVmPolicyMask;
    private static volatile android.os.StrictMode$VmPolicy sVmPolicy;
    private static final java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight;
    private static final java.lang.ThreadLocal gatheredViolations;
    private static final java.lang.ThreadLocal violationsBeingTimed;
    private static final java.lang.ThreadLocal threadHandler;
    private static final java.lang.ThreadLocal threadAndroidPolicy;
    private static long sLastInstanceCountCheckMillis;
    private static boolean sIsIdlerRegistered;
    private static final android.os.MessageQueue$IdleHandler sProcessIdleHandler;
    private static final java.util.HashMap sLastVmViolationTime;
    private static final android.os.StrictMode$Span NO_OP_SPAN;
    private static final java.lang.ThreadLocal sThisThreadSpanState;
    private static android.util.Singleton sWindowManager;
    private static final java.util.HashMap sExpectedActivityInstanceCount;

    private void <init>()
    {
        android.os.StrictMode this;

        this := @this: android.os.StrictMode;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setThreadPolicy(android.os.StrictMode$ThreadPolicy)
    {
        android.os.StrictMode$ThreadPolicy policy;
        int $i0;

        policy := @parameter0: android.os.StrictMode$ThreadPolicy;

        $i0 = policy.<android.os.StrictMode$ThreadPolicy: int mask>;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>($i0);

        return;
    }

    private static void setThreadPolicyMask(int)
    {
        int policyMask;

        policyMask := @parameter0: int;

        staticinvoke <android.os.StrictMode: void setBlockGuardPolicy(int)>(policyMask);

        staticinvoke <android.os.Binder: void setThreadStrictModePolicy(int)>(policyMask);

        return;
    }

    private static void setBlockGuardPolicy(int)
    {
        int policyMask;
        dalvik.system.BlockGuard$Policy policy, $r2;
        boolean $z0;
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        android.os.StrictMode$AndroidBlockGuardPolicy androidPolicy#1;

        policyMask := @parameter0: int;

        if policyMask != 0 goto label1;

        $r2 = <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy LAX_POLICY>;

        staticinvoke <dalvik.system.BlockGuard: void setThreadPolicy(dalvik.system.BlockGuard$Policy)>($r2);

        return;

     label1:
        policy = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = policy instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 == 0 goto label2;

        androidPolicy#1 = (android.os.StrictMode$AndroidBlockGuardPolicy) policy;

        goto label3;

     label2:
        $r0 = <android.os.StrictMode: java.lang.ThreadLocal threadAndroidPolicy>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        androidPolicy#1 = (android.os.StrictMode$AndroidBlockGuardPolicy) $r1;

        staticinvoke <dalvik.system.BlockGuard: void setThreadPolicy(dalvik.system.BlockGuard$Policy)>(androidPolicy#1);

     label3:
        virtualinvoke androidPolicy#1.<android.os.StrictMode$AndroidBlockGuardPolicy: void setPolicyMask(int)>(policyMask);

        return;
    }

    private static void setCloseGuardEnabled(boolean)
    {
        boolean enabled, $z0;
        dalvik.system.CloseGuard$Reporter $r0;
        android.os.StrictMode$AndroidCloseGuardReporter $r1;

        enabled := @parameter0: boolean;

        $r0 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard$Reporter getReporter()>();

        $z0 = $r0 instanceof android.os.StrictMode$AndroidCloseGuardReporter;

        if $z0 != 0 goto label1;

        $r1 = new android.os.StrictMode$AndroidCloseGuardReporter;

        specialinvoke $r1.<android.os.StrictMode$AndroidCloseGuardReporter: void <init>(android.os.StrictMode$1)>(null);

        staticinvoke <dalvik.system.CloseGuard: void setReporter(dalvik.system.CloseGuard$Reporter)>($r1);

     label1:
        staticinvoke <dalvik.system.CloseGuard: void setEnabled(boolean)>(enabled);

        return;
    }

    public static int getThreadPolicyMask()
    {
        dalvik.system.BlockGuard$Policy $r0;
        int $i0;

        $r0 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $i0 = interfaceinvoke $r0.<dalvik.system.BlockGuard$Policy: int getPolicyMask()>();

        return $i0;
    }

    public static android.os.StrictMode$ThreadPolicy getThreadPolicy()
    {
        android.os.StrictMode$ThreadPolicy $r0;
        int $i0;

        $r0 = new android.os.StrictMode$ThreadPolicy;

        $i0 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy: void <init>(int,android.os.StrictMode$1)>($i0, null);

        return $r0;
    }

    public static android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()
    {
        int oldPolicyMask, newPolicyMask;
        android.os.StrictMode$ThreadPolicy $r0;

        oldPolicyMask = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        newPolicyMask = oldPolicyMask & -4;

        if newPolicyMask == oldPolicyMask goto label1;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(newPolicyMask);

     label1:
        $r0 = new android.os.StrictMode$ThreadPolicy;

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy: void <init>(int,android.os.StrictMode$1)>(oldPolicyMask, null);

        return $r0;
    }

    public static android.os.StrictMode$ThreadPolicy allowThreadDiskReads()
    {
        int oldPolicyMask, newPolicyMask;
        android.os.StrictMode$ThreadPolicy $r0;

        oldPolicyMask = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        newPolicyMask = oldPolicyMask & -3;

        if newPolicyMask == oldPolicyMask goto label1;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(newPolicyMask);

     label1:
        $r0 = new android.os.StrictMode$ThreadPolicy;

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy: void <init>(int,android.os.StrictMode$1)>(oldPolicyMask, null);

        return $r0;
    }

    private static boolean amTheSystemServerProcess()
    {
        java.lang.Throwable stack, $r0;
        java.lang.StackTraceElement[] arr$;
        int len$, $i0, i$#1;
        java.lang.StackTraceElement ste;
        java.lang.String clsName;
        boolean $z0;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 == 1000 goto label1;

        return 0;

     label1:
        $r0 = new java.lang.Throwable;

        specialinvoke $r0.<java.lang.Throwable: void <init>()>();

        stack = $r0;

        virtualinvoke stack.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        arr$ = virtualinvoke stack.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        len$ = lengthof arr$;

        i$#1 = 0;

     label2:
        if i$#1 >= len$ goto label4;

        ste = arr$[i$#1];

        clsName = virtualinvoke ste.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        if clsName == null goto label3;

        $z0 = virtualinvoke clsName.<java.lang.String: boolean startsWith(java.lang.String)>("com.android.server.");

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i$#1 = i$#1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static boolean conditionallyEnableDebugLogging()
    {
        boolean suppress, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, doFlashes#2;
        android.os.StrictMode$VmPolicy$Builder policyBuilder, $r0, $r1;
        android.os.StrictMode$VmPolicy $r2;
        int threadPolicyMask#3;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.strictmode.visual", 0);

        if $z0 == 0 goto label01;

        $z7 = staticinvoke <android.os.StrictMode: boolean amTheSystemServerProcess()>();

        if $z7 != 0 goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        doFlashes#2 = $z8;

        suppress = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.strictmode.disable", 0);

        if doFlashes#2 != 0 goto label04;

        $z6 = <android.os.StrictMode: boolean IS_USER_BUILD>;

        if $z6 != 0 goto label03;

        if suppress == 0 goto label04;

     label03:
        staticinvoke <android.os.StrictMode: void setCloseGuardEnabled(boolean)>(0);

        return 0;

     label04:
        $z1 = <android.os.StrictMode: boolean IS_ENG_BUILD>;

        if $z1 == 0 goto label05;

        doFlashes#2 = 1;

     label05:
        threadPolicyMask#3 = 7;

        $z2 = <android.os.StrictMode: boolean IS_USER_BUILD>;

        if $z2 != 0 goto label06;

        threadPolicyMask#3 = threadPolicyMask#3 | 2097152;

     label06:
        if doFlashes#2 == 0 goto label07;

        threadPolicyMask#3 = threadPolicyMask#3 | 1048576;

     label07:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(threadPolicyMask#3);

        $z3 = <android.os.StrictMode: boolean IS_USER_BUILD>;

        if $z3 == 0 goto label08;

        staticinvoke <android.os.StrictMode: void setCloseGuardEnabled(boolean)>(0);

        goto label10;

     label08:
        $r0 = new android.os.StrictMode$VmPolicy$Builder;

        specialinvoke $r0.<android.os.StrictMode$VmPolicy$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectAll()>();

        policyBuilder = virtualinvoke $r1.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDropBox()>();

        $z4 = <android.os.StrictMode: boolean IS_ENG_BUILD>;

        if $z4 == 0 goto label09;

        virtualinvoke policyBuilder.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyLog()>();

     label09:
        $r2 = virtualinvoke policyBuilder.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy build()>();

        staticinvoke <android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)>($r2);

        $z5 = staticinvoke <android.os.StrictMode: boolean vmClosableObjectLeaksEnabled()>();

        staticinvoke <android.os.StrictMode: void setCloseGuardEnabled(boolean)>($z5);

     label10:
        return 1;
    }

    public static void enableDeathOnNetwork()
    {
        int oldPolicy, newPolicy, $i0;

        oldPolicy = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        $i0 = oldPolicy | 4;

        newPolicy = $i0 | 524288;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(newPolicy);

        return;
    }

    private static int parsePolicyFromMessage(java.lang.String)
    {
        java.lang.String message, policyString;
        int spaceIndex, $i0;
        java.lang.NumberFormatException e, $r1;
        boolean $z0;
        java.lang.Integer $r0;

        message := @parameter0: java.lang.String;

        if message == null goto label1;

        $z0 = virtualinvoke message.<java.lang.String: boolean startsWith(java.lang.String)>("policy=");

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        spaceIndex = virtualinvoke message.<java.lang.String: int indexOf(int)>(32);

        if spaceIndex != -1 goto label3;

        return 0;

     label3:
        policyString = virtualinvoke message.<java.lang.String: java.lang.String substring(int,int)>(7, spaceIndex);

     label4:
        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(policyString);

        $i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();

     label5:
        return $i0;

     label6:
        $r1 := @caughtexception;

        e = $r1;

        return 0;

        catch java.lang.NumberFormatException from label4 to label5 with label6;
    }

    private static int parseViolationFromMessage(java.lang.String)
    {
        java.lang.String message, violationString, $r0;
        int violationIndex, numberStartIndex, $i0, $i1, numberEndIndex#1;
        java.lang.NumberFormatException e, $r2;
        java.lang.Integer $r1;

        message := @parameter0: java.lang.String;

        if message != null goto label1;

        return 0;

     label1:
        violationIndex = virtualinvoke message.<java.lang.String: int indexOf(java.lang.String)>("violation=");

        if violationIndex != -1 goto label2;

        return 0;

     label2:
        $r0 = "violation=";

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        numberStartIndex = violationIndex + $i0;

        numberEndIndex#1 = virtualinvoke message.<java.lang.String: int indexOf(int,int)>(32, numberStartIndex);

        if numberEndIndex#1 != -1 goto label3;

        numberEndIndex#1 = virtualinvoke message.<java.lang.String: int length()>();

     label3:
        violationString = virtualinvoke message.<java.lang.String: java.lang.String substring(int,int)>(numberStartIndex, numberEndIndex#1);

     label4:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(violationString);

        $i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

     label5:
        return $i1;

     label6:
        $r2 := @caughtexception;

        e = $r2;

        return 0;

        catch java.lang.NumberFormatException from label4 to label5 with label6;
    }

    private static boolean tooManyViolationsThisLoop()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        java.util.ArrayList $r2;
        int $i0;
        boolean $z0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal violationsBeingTimed>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (java.util.ArrayList) $r1;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 < 10 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static void executeDeathPenalty(android.os.StrictMode$ViolationInfo)
    {
        android.os.StrictMode$ViolationInfo info;
        int violationBit, $i0;
        android.app.ApplicationErrorReport$CrashInfo $r0;
        java.lang.String $r1;
        android.os.StrictMode$StrictModeViolation $r2;

        info := @parameter0: android.os.StrictMode$ViolationInfo;

        $r0 = info.<android.os.StrictMode$ViolationInfo: android.app.ApplicationErrorReport$CrashInfo crashInfo>;

        $r1 = $r0.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String exceptionMessage>;

        violationBit = staticinvoke <android.os.StrictMode: int parseViolationFromMessage(java.lang.String)>($r1);

        $r2 = new android.os.StrictMode$StrictModeViolation;

        $i0 = info.<android.os.StrictMode$ViolationInfo: int policy>;

        specialinvoke $r2.<android.os.StrictMode$StrictModeViolation: void <init>(int,int,java.lang.String)>($i0, violationBit, null);

        throw $r2;
    }

    private static void dropboxViolationAsync(int, android.os.StrictMode$ViolationInfo)
    {
        int violationMaskSubset, outstanding;
        android.os.StrictMode$ViolationInfo info;
        java.util.concurrent.atomic.AtomicInteger $r0, $r6;
        boolean $z0;
        android.os.StrictMode$5 $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        violationMaskSubset := @parameter0: int;

        info := @parameter1: android.os.StrictMode$ViolationInfo;

        $r0 = <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight>;

        outstanding = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        if outstanding <= 20 goto label1;

        $r6 = <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        return;

     label1:
        $z0 = <android.os.StrictMode: boolean LOG_V>;

        if $z0 == 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropboxing async; in-flight=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(outstanding);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r5);

     label2:
        $r1 = new android.os.StrictMode$5;

        specialinvoke $r1.<android.os.StrictMode$5: void <init>(java.lang.String,int,android.os.StrictMode$ViolationInfo)>("callActivityManagerForStrictModeDropbox", violationMaskSubset, info);

        virtualinvoke $r1.<android.os.StrictMode$5: void start()>();

        return;
    }

    static boolean hasGatheredViolations()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void clearGatheredViolations()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        virtualinvoke $r0.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

        return;
    }

    public static void conditionallyCheckInstanceCounts()
    {
        android.os.StrictMode$VmPolicy policy;
        java.util.Iterator i$;
        java.util.Map$Entry entry;
        java.lang.Class klass;
        int limit, $i0;
        long instances, $l1;
        android.os.StrictMode$InstanceCountViolation tr, $r7;
        java.util.HashMap $r0, $r1;
        java.util.Set $r2;
        boolean $z0;
        java.lang.Object $r3, $r4, $r5;
        java.lang.Integer $r6;
        byte $b2;
        java.lang.String $r8;

        policy = staticinvoke <android.os.StrictMode: android.os.StrictMode$VmPolicy getVmPolicy()>();

        $r0 = policy.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        $i0 = virtualinvoke $r0.<java.util.HashMap: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void runFinalization()>();

        staticinvoke <java.lang.System: void gc()>();

        $r1 = policy.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set entrySet()>();

        i$ = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r3;

        $r4 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        klass = (java.lang.Class) $r4;

        $r5 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (java.lang.Integer) $r5;

        limit = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        instances = staticinvoke <dalvik.system.VMDebug: long countInstancesOfClass(java.lang.Class,boolean)>(klass, 0);

        $l1 = (long) limit;

        $b2 = instances cmp $l1;

        if $b2 > 0 goto label3;

        goto label2;

     label3:
        $r7 = new android.os.StrictMode$InstanceCountViolation;

        specialinvoke $r7.<android.os.StrictMode$InstanceCountViolation: void <init>(java.lang.Class,long,int)>(klass, instances, limit);

        tr = $r7;

        $r8 = virtualinvoke tr.<java.lang.Throwable: java.lang.String getMessage()>();

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>($r8, tr);

        goto label2;

     label4:
        return;
    }

    public static void setVmPolicy(android.os.StrictMode$VmPolicy)
    {
        android.os.StrictMode$VmPolicy policy;
        java.lang.Class l1;
        android.os.Looper looper;
        android.os.INetworkManagementService netd;
        android.os.RemoteException l5, $r4;
        java.lang.Throwable l6, $r5;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1;
        android.os.IBinder $r0;
        java.util.HashMap $r1;
        android.os.MessageQueue$IdleHandler $r2, $r3;
        android.os.MessageQueue mq#1;
        byte mq#2;

        policy := @parameter0: android.os.StrictMode$VmPolicy;

        l1 = class "android/os/StrictMode";

        entermonitor class "android/os/StrictMode";

     label01:
        <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy> = policy;

        $i0 = policy.<android.os.StrictMode$VmPolicy: int mask>;

        <android.os.StrictMode: int sVmPolicyMask> = $i0;

        $z0 = staticinvoke <android.os.StrictMode: boolean vmClosableObjectLeaksEnabled()>();

        staticinvoke <android.os.StrictMode: void setCloseGuardEnabled(boolean)>($z0);

        looper = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if looper == null goto label04;

        mq#1 = looper.<android.os.Looper: android.os.MessageQueue mQueue>;

        $r1 = policy.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        $i9 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        if $i9 == 0 goto label02;

        $i10 = <android.os.StrictMode: int sVmPolicyMask>;

        $i11 = $i10 & 10813440;

        if $i11 != 0 goto label03;

     label02:
        $r2 = <android.os.StrictMode: android.os.MessageQueue$IdleHandler sProcessIdleHandler>;

        virtualinvoke mq#1.<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>($r2);

        <android.os.StrictMode: boolean sIsIdlerRegistered> = 0;

        goto label04;

     label03:
        $z1 = <android.os.StrictMode: boolean sIsIdlerRegistered>;

        if $z1 != 0 goto label04;

        $r3 = <android.os.StrictMode: android.os.MessageQueue$IdleHandler sProcessIdleHandler>;

        virtualinvoke mq#1.<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>($r3);

        <android.os.StrictMode: boolean sIsIdlerRegistered> = 1;

     label04:
        mq#2 = 0;

        $i1 = <android.os.StrictMode: int sVmPolicyMask>;

        $i2 = $i1 & 16384;

        if $i2 == 0 goto label07;

        $i5 = <android.os.StrictMode: int sVmPolicyMask>;

        $i6 = $i5 & 262144;

        if $i6 != 0 goto label05;

        $i7 = <android.os.StrictMode: int sVmPolicyMask>;

        $i8 = $i7 & 8388608;

        if $i8 == 0 goto label06;

     label05:
        mq#2 = 2;

        goto label07;

     label06:
        mq#2 = 1;

     label07:
        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("network_management");

        netd = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService asInterface(android.os.IBinder)>($r0);

        if netd == null goto label11;

     label08:
        $i4 = staticinvoke <android.os.Process: int myUid()>();

        interfaceinvoke netd.<android.os.INetworkManagementService: void setUidCleartextNetworkPolicy(int,int)>($i4, mq#2);

     label09:
        goto label12;

     label10:
        $r4 := @caughtexception;

        l5 = $r4;

        goto label12;

     label11:
        if mq#2 == 0 goto label12;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("StrictMode", "Dropping requested network policy due to missing service!");

     label12:
        exitmonitor l1;

     label13:
        goto label16;

     label14:
        $r5 := @caughtexception;

        l6 = $r5;

        exitmonitor l1;

     label15:
        throw l6;

     label16:
        return;

        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public static android.os.StrictMode$VmPolicy getVmPolicy()
    {
        java.lang.Class l0;
        java.lang.Throwable l1, $r1;
        android.os.StrictMode$VmPolicy $r0;

        l0 = class "android/os/StrictMode";

        entermonitor class "android/os/StrictMode";

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        exitmonitor l0;

        return $r0;
    }

    public static void enableDefaults()
    {
        android.os.StrictMode$ThreadPolicy$Builder $r0, $r1, $r2;
        android.os.StrictMode$ThreadPolicy $r3;
        android.os.StrictMode$VmPolicy$Builder $r4, $r5, $r6;
        android.os.StrictMode$VmPolicy $r7;

        $r0 = new android.os.StrictMode$ThreadPolicy$Builder;

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectAll()>();

        $r2 = virtualinvoke $r1.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyLog()>();

        $r3 = virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy build()>();

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($r3);

        $r4 = new android.os.StrictMode$VmPolicy$Builder;

        specialinvoke $r4.<android.os.StrictMode$VmPolicy$Builder: void <init>()>();

        $r5 = virtualinvoke $r4.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectAll()>();

        $r6 = virtualinvoke $r5.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyLog()>();

        $r7 = virtualinvoke $r6.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy build()>();

        staticinvoke <android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)>($r7);

        return;
    }

    public static boolean vmSqliteObjectLeaksEnabled()
    {
        int $i0, $i1;
        boolean $z0;

        $i0 = <android.os.StrictMode: int sVmPolicyMask>;

        $i1 = $i0 & 256;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean vmClosableObjectLeaksEnabled()
    {
        int $i0, $i1;
        boolean $z0;

        $i0 = <android.os.StrictMode: int sVmPolicyMask>;

        $i1 = $i0 & 512;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean vmRegistrationLeaksEnabled()
    {
        int $i0, $i1;
        boolean $z0;

        $i0 = <android.os.StrictMode: int sVmPolicyMask>;

        $i1 = $i0 & 4096;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean vmFileUriExposureEnabled()
    {
        int $i0, $i1;
        boolean $z0;

        $i0 = <android.os.StrictMode: int sVmPolicyMask>;

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean vmCleartextNetworkEnabled()
    {
        int $i0, $i1;
        boolean $z0;

        $i0 = <android.os.StrictMode: int sVmPolicyMask>;

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void onSqliteObjectLeaked(java.lang.String, java.lang.Throwable)
    {
        java.lang.String message;
        java.lang.Throwable originStack;

        message := @parameter0: java.lang.String;

        originStack := @parameter1: java.lang.Throwable;

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>(message, originStack);

        return;
    }

    public static void onWebViewMethodCalledOnWrongThread(java.lang.Throwable)
    {
        java.lang.Throwable originStack;

        originStack := @parameter0: java.lang.Throwable;

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>(null, originStack);

        return;
    }

    public static void onIntentReceiverLeaked(java.lang.Throwable)
    {
        java.lang.Throwable originStack;

        originStack := @parameter0: java.lang.Throwable;

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>(null, originStack);

        return;
    }

    public static void onServiceConnectionLeaked(java.lang.Throwable)
    {
        java.lang.Throwable originStack;

        originStack := @parameter0: java.lang.Throwable;

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>(null, originStack);

        return;
    }

    public static void onFileUriExposed(java.lang.String)
    {
        java.lang.String location, message;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.Throwable $r3;

        location := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:// Uri exposed through ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(location);

        message = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.Throwable;

        specialinvoke $r3.<java.lang.Throwable: void <init>(java.lang.String)>(message);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>(null, $r3);

        return;
    }

    public static void onCleartextNetworkDetected(byte[])
    {
        byte[] firstPacket, rawAddr#1;
        int uid, $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r0, $r1, $r2, $r6, $r7, $r8, $r9, $r11;
        java.lang.String $r3, $r4, msg#2;
        java.lang.Throwable $r5;
        java.net.InetAddress $r10;
        byte $b4, $b6;
        short $s5, $s7;
        java.net.UnknownHostException $r12, forceDeath#3;
        boolean $z0, forceDeath#5;

        firstPacket := @parameter0: byte[];

        rawAddr#1 = null;

        if firstPacket == null goto label2;

        $i2 = lengthof firstPacket;

        if $i2 < 20 goto label1;

        $b6 = firstPacket[0];

        $s7 = $b6 & 240;

        if $s7 != 64 goto label1;

        rawAddr#1 = newarray (byte)[4];

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(firstPacket, 16, rawAddr#1, 0, 4);

        goto label2;

     label1:
        $i3 = lengthof firstPacket;

        if $i3 < 40 goto label2;

        $b4 = firstPacket[0];

        $s5 = $b4 & 240;

        if $s5 != 96 goto label2;

        rawAddr#1 = newarray (byte)[16];

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(firstPacket, 24, rawAddr#1, 0, 16);

     label2:
        uid = staticinvoke <android.os.Process: int myUid()>();

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detected cleartext network traffic from UID ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(uid);

        msg#2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        if rawAddr#1 == null goto label6;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detected cleartext network traffic from UID ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(uid);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r10 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(rawAddr#1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        msg#2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

        forceDeath#3 = $r12;

     label6:
        $i0 = <android.os.StrictMode: int sVmPolicyMask>;

        $i1 = $i0 & 8388608;

        if $i1 == 0 goto label7;

        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        forceDeath#5 = $z0;

        $r3 = staticinvoke <com.android.internal.util.HexDump: java.lang.String dumpHexString(byte[])>(firstPacket);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $r5 = new java.lang.Throwable;

        specialinvoke $r5.<java.lang.Throwable: void <init>(java.lang.String)>(msg#2);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable,boolean)>($r4, $r5, forceDeath#5);

        return;

        catch java.net.UnknownHostException from label3 to label4 with label5;
    }

    public static void onVmPolicyViolation(java.lang.String, java.lang.Throwable)
    {
        java.lang.String message;
        java.lang.Throwable originStack;

        message := @parameter0: java.lang.String;

        originStack := @parameter1: java.lang.Throwable;

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable,boolean)>(message, originStack, 0);

        return;
    }

    public static void onVmPolicyViolation(java.lang.String, java.lang.Throwable, boolean)
    {
        java.lang.String message;
        java.lang.Throwable originStack, l17, $r13, $r14, savedPolicyMask#7;
        boolean forceDeath, penaltyDropbox, penaltyDeath, penaltyLog, $z0, $z1, $z2, $z3;
        android.os.StrictMode$ViolationInfo info, $r0;
        java.lang.Integer fingerprint;
        long now, lastViolationTime#4, timeSinceLastViolationMillis#5;
        android.os.RemoteException e, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, violationMaskSubset#8, savedPolicyMask#9;
        java.util.HashMap $r1, $r2, $r6, $r9, violationMaskSubset#6;
        byte $b8, $b12, $b13;
        java.io.PrintStream $r3;
        android.app.IActivityManager $r4;
        android.os.IBinder $r5;
        java.lang.Long $r7, $r11;
        java.lang.Object $r10;

        message := @parameter0: java.lang.String;

        originStack := @parameter1: java.lang.Throwable;

        forceDeath := @parameter2: boolean;

        $i0 = <android.os.StrictMode: int sVmPolicyMask>;

        $i1 = $i0 & 2097152;

        if $i1 == 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        penaltyDropbox = $z1;

        $i2 = <android.os.StrictMode: int sVmPolicyMask>;

        $i3 = $i2 & 262144;

        if $i3 != 0 goto label03;

        if forceDeath == 0 goto label04;

     label03:
        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        penaltyDeath = $z2;

        $i4 = <android.os.StrictMode: int sVmPolicyMask>;

        $i5 = $i4 & 65536;

        if $i5 == 0 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        penaltyLog = $z3;

        $r0 = new android.os.StrictMode$ViolationInfo;

        $i6 = <android.os.StrictMode: int sVmPolicyMask>;

        specialinvoke $r0.<android.os.StrictMode$ViolationInfo: void <init>(java.lang.String,java.lang.Throwable,int)>(message, originStack, $i6);

        info = $r0;

        info.<android.os.StrictMode$ViolationInfo: int numAnimationsRunning> = 0;

        info.<android.os.StrictMode$ViolationInfo: java.lang.String[] tags> = null;

        info.<android.os.StrictMode$ViolationInfo: java.lang.String broadcastIntentAction> = null;

        $i7 = virtualinvoke info.<android.os.StrictMode$ViolationInfo: int hashCode()>();

        fingerprint = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        now = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        lastViolationTime#4 = 0L;

        timeSinceLastViolationMillis#5 = 9223372036854775807L;

        $r1 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        violationMaskSubset#6 = $r1;

        entermonitor $r1;

     label08:
        $r2 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(fingerprint);

        if $z0 == 0 goto label09;

        $r9 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(fingerprint);

        $r11 = (java.lang.Long) $r10;

        lastViolationTime#4 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        timeSinceLastViolationMillis#5 = now - lastViolationTime#4;

     label09:
        $b8 = timeSinceLastViolationMillis#5 cmp 1000L;

        if $b8 <= 0 goto label10;

        $r6 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(now);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(fingerprint, $r7);

     label10:
        exitmonitor violationMaskSubset#6;

     label11:
        goto label14;

     label12:
        $r13 := @caughtexception;

        savedPolicyMask#7 = $r13;

        exitmonitor violationMaskSubset#6;

     label13:
        throw savedPolicyMask#7;

     label14:
        if penaltyLog == 0 goto label15;

        $b13 = timeSinceLastViolationMillis#5 cmp 1000L;

        if $b13 <= 0 goto label15;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StrictMode", message, originStack);

     label15:
        $i9 = <android.os.StrictMode: int sVmPolicyMask>;

        $i10 = 32512 & $i9;

        violationMaskSubset#8 = 2097152 | $i10;

        if penaltyDropbox == 0 goto label16;

        if penaltyDeath != 0 goto label16;

        staticinvoke <android.os.StrictMode: void dropboxViolationAsync(int,android.os.StrictMode$ViolationInfo)>(violationMaskSubset#8, info);

        return;

     label16:
        if penaltyDropbox == 0 goto label23;

        $b12 = lastViolationTime#4 cmp 0L;

        if $b12 != 0 goto label23;

        savedPolicyMask#9 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

     label17:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(0);

        $r4 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r5 = staticinvoke <com.android.internal.os.RuntimeInit: android.os.IBinder getApplicationObject()>();

        interfaceinvoke $r4.<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>($r5, violationMaskSubset#8, info);

     label18:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(savedPolicyMask#9);

        goto label23;

     label19:
        $r12 := @caughtexception;

        e = $r12;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StrictMode", "RemoteException trying to handle StrictMode violation", e);

     label20:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(savedPolicyMask#9);

        goto label23;

     label21:
        $r14 := @caughtexception;

        l17 = $r14;

     label22:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(savedPolicyMask#9);

        throw l17;

     label23:
        if penaltyDeath == 0 goto label24;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("StrictMode VmPolicy violation with POLICY_DEATH; shutting down.");

        $i11 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i11);

        staticinvoke <java.lang.System: void exit(int)>(10);

     label24:
        return;

        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch android.os.RemoteException from label17 to label18 with label19;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    static void writeGatheredViolationsToParcel(android.os.Parcel)
    {
        android.os.Parcel p;
        java.util.ArrayList violations;
        int start, size, $i0, $i1, $i2, $i4, $i5, $i6, $i7, i#1;
        java.lang.ThreadLocal $r0, $r2;
        java.lang.Object $r1, $r7;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r6, $r17;
        android.os.StrictMode$ViolationInfo $r8;

        p := @parameter0: android.os.Parcel;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        violations = (java.util.ArrayList) $r1;

        if violations != null goto label1;

        virtualinvoke p.<android.os.Parcel: void writeInt(int)>(0);

        goto label6;

     label1:
        $i0 = virtualinvoke violations.<java.util.ArrayList: int size()>();

        virtualinvoke p.<android.os.Parcel: void writeInt(int)>($i0);

        i#1 = 0;

     label2:
        $i1 = virtualinvoke violations.<java.util.ArrayList: int size()>();

        if i#1 >= $i1 goto label4;

        start = virtualinvoke p.<android.os.Parcel: int dataPosition()>();

        $r7 = virtualinvoke violations.<java.util.ArrayList: java.lang.Object get(int)>(i#1);

        $r8 = (android.os.StrictMode$ViolationInfo) $r7;

        virtualinvoke $r8.<android.os.StrictMode$ViolationInfo: void writeToParcel(android.os.Parcel,int)>(p, 0);

        $i4 = virtualinvoke p.<android.os.Parcel: int dataPosition()>();

        size = $i4 - start;

        if size <= 10240 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrote violation #");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i#1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $i5 = virtualinvoke violations.<java.util.ArrayList: int size()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i6 = virtualinvoke p.<android.os.Parcel: int dataPosition()>();

        $i7 = $i6 - start;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StrictMode", $r17);

     label3:
        i#1 = i#1 + 1;

        goto label2;

     label4:
        $z0 = <android.os.StrictMode: boolean LOG_V>;

        if $z0 == 0 goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrote violations to response parcel; num=");

        $i2 = virtualinvoke violations.<java.util.ArrayList: int size()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r6);

     label5:
        virtualinvoke violations.<java.util.ArrayList: void clear()>();

     label6:
        $r2 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

        return;
    }

    static void readAndHandleBinderCallViolations(android.os.Parcel)
    {
        android.os.Parcel p;
        java.io.StringWriter sw, $r0;
        com.android.internal.util.FastPrintWriter pw, $r1;
        java.lang.String ourStack, $r5, $r8, $r12, $r15, $r17, $r22, $r26, $r31, front#5;
        int policyMask, numViolations, $i0, $i1, i#2;
        boolean currentlyGathering, $z0, $z1, $z2, $z3, $z4;
        android.os.StrictMode$LogStackTrace $r2;
        android.os.StrictMode$ViolationInfo $r3, $r27, info#4, info#7;
        android.app.ApplicationErrorReport$CrashInfo $r4, $r7, $r14, $r16;
        java.lang.StringBuilder $r6, $r9, $r10, $r11, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r28, $r29, $r30;
        android.os.StrictMode$AndroidBlockGuardPolicy $r13;
        dalvik.system.BlockGuard$Policy front#8;

        p := @parameter0: android.os.Parcel;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        sw = $r0;

        $r1 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r1.<com.android.internal.util.FastPrintWriter: void <init>(java.io.Writer,boolean,int)>(sw, 0, 256);

        pw = $r1;

        $r2 = new android.os.StrictMode$LogStackTrace;

        specialinvoke $r2.<android.os.StrictMode$LogStackTrace: void <init>(android.os.StrictMode$1)>(null);

        virtualinvoke $r2.<android.os.StrictMode$LogStackTrace: void printStackTrace(java.io.PrintWriter)>(pw);

        virtualinvoke pw.<java.io.PrintWriter: void flush()>();

        ourStack = virtualinvoke sw.<java.io.StringWriter: java.lang.String toString()>();

        policyMask = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        $i0 = policyMask & 4194304;

        if $i0 == 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        currentlyGathering = $z2;

        numViolations = virtualinvoke p.<android.os.Parcel: int readInt()>();

        i#2 = 0;

     label03:
        if i#2 >= numViolations goto label13;

        $z0 = <android.os.StrictMode: boolean LOG_V>;

        if $z0 == 0 goto label04;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("strict mode violation stacks read from binder call.  i=");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i#2);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r31);

     label04:
        $r3 = new android.os.StrictMode$ViolationInfo;

        if currentlyGathering != 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        specialinvoke $r3.<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>(p, $z3);

        info#4 = $r3;

        $r4 = info#4.<android.os.StrictMode$ViolationInfo: android.app.ApplicationErrorReport$CrashInfo crashInfo>;

        $r5 = $r4.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String stackTrace>;

        if $r5 == null goto label11;

        $r14 = info#4.<android.os.StrictMode$ViolationInfo: android.app.ApplicationErrorReport$CrashInfo crashInfo>;

        $r15 = $r14.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String stackTrace>;

        $i1 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i1 <= 30000 goto label11;

        $r16 = info#4.<android.os.StrictMode$ViolationInfo: android.app.ApplicationErrorReport$CrashInfo crashInfo>;

        $r17 = $r16.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String stackTrace>;

        front#5 = virtualinvoke $r17.<java.lang.String: java.lang.String substring(int)>(256);

     label07:
        if i#2 >= numViolations goto label10;

        $r27 = new android.os.StrictMode$ViolationInfo;

        if currentlyGathering != 0 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        specialinvoke $r27.<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>(p, $z4);

        info#7 = $r27;

        i#2 = i#2 + 1;

        goto label07;

     label10:
        staticinvoke <android.os.StrictMode: void clearGatheredViolations()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stack is too large: numViolations=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(numViolations);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" policy=#");

        $r22 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(policyMask);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" front=");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(front#5);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtfStack(java.lang.String,java.lang.String)>("StrictMode", $r26);

        return;

     label11:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = info#4.<android.os.StrictMode$ViolationInfo: android.app.ApplicationErrorReport$CrashInfo crashInfo>;

        $r8 = $r7.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String stackTrace>;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# via Binder call with stack:\n");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(ourStack);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String stackTrace> = $r12;

        front#8 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z1 = front#8 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z1 == 0 goto label12;

        $r13 = (android.os.StrictMode$AndroidBlockGuardPolicy) front#8;

        virtualinvoke $r13.<android.os.StrictMode$AndroidBlockGuardPolicy: void handleViolationWithTimingAttempt(android.os.StrictMode$ViolationInfo)>(info#4);

     label12:
        i#2 = i#2 + 1;

        goto label03;

     label13:
        return;
    }

    private static void onBinderStrictModePolicyChange(int)
    {
        int newPolicy;

        newPolicy := @parameter0: int;

        staticinvoke <android.os.StrictMode: void setBlockGuardPolicy(int)>(newPolicy);

        return;
    }

    public static android.os.StrictMode$Span enterCriticalSpan(java.lang.String)
    {
        java.lang.String name, $r13;
        android.os.StrictMode$ThreadSpanState state, l3;
        java.lang.Throwable l4, $r17;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r0;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2;
        android.os.StrictMode$Span $r4, $r5, $r6, $r7, $r14, $r15, $r16, span#2;
        long $l0;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;

        name := @parameter0: java.lang.String;

        $z0 = <android.os.StrictMode: boolean IS_USER_BUILD>;

        if $z0 == 0 goto label01;

        $r16 = <android.os.StrictMode: android.os.StrictMode$Span NO_OP_SPAN>;

        return $r16;

     label01:
        if name == null goto label02;

        $z1 = virtualinvoke name.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label03;

     label02:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must be non-null and non-empty");

        throw $r0;

     label03:
        $r1 = <android.os.StrictMode: java.lang.ThreadLocal sThisThreadSpanState>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        state = (android.os.StrictMode$ThreadSpanState) $r2;

        l3 = state;

        entermonitor state;

     label04:
        $r4 = state.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mFreeListHead>;

        if $r4 == null goto label05;

        span#2 = state.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mFreeListHead>;

        $r15 = staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$1800(android.os.StrictMode$Span)>(span#2);

        state.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mFreeListHead> = $r15;

        $i4 = state.<android.os.StrictMode$ThreadSpanState: int mFreeListSize>;

        $i5 = $i4 - 1;

        state.<android.os.StrictMode$ThreadSpanState: int mFreeListSize> = $i5;

        goto label06;

     label05:
        $r5 = new android.os.StrictMode$Span;

        specialinvoke $r5.<android.os.StrictMode$Span: void <init>(android.os.StrictMode$ThreadSpanState)>(state);

        span#2 = $r5;

     label06:
        staticinvoke <android.os.StrictMode$Span: java.lang.String access$1902(android.os.StrictMode$Span,java.lang.String)>(span#2, name);

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.os.StrictMode$Span: long access$2002(android.os.StrictMode$Span,long)>(span#2, $l0);

        $r6 = state.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mActiveHead>;

        staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$1802(android.os.StrictMode$Span,android.os.StrictMode$Span)>(span#2, $r6);

        staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$2102(android.os.StrictMode$Span,android.os.StrictMode$Span)>(span#2, null);

        state.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mActiveHead> = span#2;

        $i1 = state.<android.os.StrictMode$ThreadSpanState: int mActiveSize>;

        $i2 = $i1 + 1;

        state.<android.os.StrictMode$ThreadSpanState: int mActiveSize> = $i2;

        $r7 = staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$1800(android.os.StrictMode$Span)>(span#2);

        if $r7 == null goto label07;

        $r14 = staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$1800(android.os.StrictMode$Span)>(span#2);

        staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$2102(android.os.StrictMode$Span,android.os.StrictMode$Span)>($r14, span#2);

     label07:
        $z2 = <android.os.StrictMode: boolean LOG_V>;

        if $z2 == 0 goto label08;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Span enter=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; size=");

        $i3 = state.<android.os.StrictMode$ThreadSpanState: int mActiveSize>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r13);

     label08:
        exitmonitor l3;

     label09:
        goto label12;

     label10:
        $r17 := @caughtexception;

        l4 = $r17;

        exitmonitor l3;

     label11:
        throw l4;

     label12:
        return span#2;

        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static void noteSlowCall(java.lang.String)
    {
        java.lang.String name;
        dalvik.system.BlockGuard$Policy policy;
        boolean $z0;
        android.os.StrictMode$AndroidBlockGuardPolicy $r0;

        name := @parameter0: java.lang.String;

        policy = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = policy instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0 = (android.os.StrictMode$AndroidBlockGuardPolicy) policy;

        virtualinvoke $r0.<android.os.StrictMode$AndroidBlockGuardPolicy: void onCustomSlowCall(java.lang.String)>(name);

        return;
    }

    public static void noteResourceMismatch(java.lang.Object)
    {
        java.lang.Object tag;
        dalvik.system.BlockGuard$Policy policy;
        boolean $z0;
        android.os.StrictMode$AndroidBlockGuardPolicy $r0;

        tag := @parameter0: java.lang.Object;

        policy = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = policy instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0 = (android.os.StrictMode$AndroidBlockGuardPolicy) policy;

        virtualinvoke $r0.<android.os.StrictMode$AndroidBlockGuardPolicy: void onResourceMismatch(java.lang.Object)>(tag);

        return;
    }

    public static void noteDiskRead()
    {
        dalvik.system.BlockGuard$Policy policy;
        boolean $z0;
        android.os.StrictMode$AndroidBlockGuardPolicy $r0;

        policy = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = policy instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0 = (android.os.StrictMode$AndroidBlockGuardPolicy) policy;

        virtualinvoke $r0.<android.os.StrictMode$AndroidBlockGuardPolicy: void onReadFromDisk()>();

        return;
    }

    public static void noteDiskWrite()
    {
        dalvik.system.BlockGuard$Policy policy;
        boolean $z0;
        android.os.StrictMode$AndroidBlockGuardPolicy $r0;

        policy = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = policy instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0 = (android.os.StrictMode$AndroidBlockGuardPolicy) policy;

        virtualinvoke $r0.<android.os.StrictMode$AndroidBlockGuardPolicy: void onWriteToDisk()>();

        return;
    }

    public static java.lang.Object trackActivity(java.lang.Object)
    {
        java.lang.Object instance;
        android.os.StrictMode$InstanceTracker $r0;

        instance := @parameter0: java.lang.Object;

        $r0 = new android.os.StrictMode$InstanceTracker;

        specialinvoke $r0.<android.os.StrictMode$InstanceTracker: void <init>(java.lang.Object)>(instance);

        return $r0;
    }

    public static void incrementExpectedActivityCount(java.lang.Class)
    {
        java.lang.Class klass, l1;
        java.lang.Integer expected, newExpected;
        java.lang.Throwable l4, $r5;
        android.os.StrictMode$VmPolicy $r0;
        int $i0, $i1, $i2, $i3;
        java.util.HashMap $r1, $r3;
        java.lang.Object $r2;

        klass := @parameter0: java.lang.Class;

        if klass != null goto label01;

        return;

     label01:
        l1 = class "android/os/StrictMode";

        entermonitor class "android/os/StrictMode";

     label02:
        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 1024;

        if $i1 != 0 goto label04;

        exitmonitor l1;

     label03:
        return;

     label04:
        $r1 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(klass);

        expected = (java.lang.Integer) $r2;

        if expected != null goto label05;

        $i3 = 1;

        goto label06;

     label05:
        $i2 = virtualinvoke expected.<java.lang.Integer: int intValue()>();

        $i3 = $i2 + 1;

     label06:
        newExpected = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(klass, newExpected);

        exitmonitor l1;

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

        l4 = $r5;

        exitmonitor l1;

     label09:
        throw l4;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public static void decrementExpectedActivityCount(java.lang.Class)
    {
        java.lang.Class klass, actual#1;
        int limit, newExpected, $i0, $i1, $i4, $i5, $i6, actual#5;
        android.os.StrictMode$VmPolicy $r0;
        java.util.HashMap $r1, $r3, $r8;
        java.lang.Object $r2;
        java.lang.Integer $r4, expected#2;
        long $l2, expected#6;
        byte $b3;
        android.os.StrictMode$InstanceCountViolation $r6, tr#7;
        java.lang.String $r7;
        java.lang.Throwable $r10, tr#4;

        klass := @parameter0: java.lang.Class;

        if klass != null goto label01;

        return;

     label01:
        actual#1 = class "android/os/StrictMode";

        entermonitor class "android/os/StrictMode";

     label02:
        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 1024;

        if $i1 != 0 goto label04;

        exitmonitor actual#1;

     label03:
        return;

     label04:
        $r1 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(klass);

        expected#2 = (java.lang.Integer) $r2;

        if expected#2 == null goto label05;

        $i4 = virtualinvoke expected#2.<java.lang.Integer: int intValue()>();

        if $i4 != 0 goto label06;

     label05:
        $i6 = 0;

        goto label07;

     label06:
        $i5 = virtualinvoke expected#2.<java.lang.Integer: int intValue()>();

        $i6 = $i5 - 1;

     label07:
        newExpected = $i6;

        if newExpected != 0 goto label08;

        $r8 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(klass);

        goto label09;

     label08:
        $r3 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newExpected);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(klass, $r4);

     label09:
        limit = newExpected + 1;

        exitmonitor actual#1;

     label10:
        goto label13;

     label11:
        $r10 := @caughtexception;

        tr#4 = $r10;

        exitmonitor actual#1;

     label12:
        throw tr#4;

     label13:
        actual#5 = staticinvoke <android.os.StrictMode$InstanceTracker: int getInstanceCount(java.lang.Class)>(klass);

        if actual#5 > limit goto label14;

        return;

     label14:
        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void runFinalization()>();

        staticinvoke <java.lang.System: void gc()>();

        expected#6 = staticinvoke <dalvik.system.VMDebug: long countInstancesOfClass(java.lang.Class,boolean)>(klass, 0);

        $l2 = (long) limit;

        $b3 = expected#6 cmp $l2;

        if $b3 <= 0 goto label15;

        $r6 = new android.os.StrictMode$InstanceCountViolation;

        specialinvoke $r6.<android.os.StrictMode$InstanceCountViolation: void <init>(java.lang.Class,long,int)>(klass, expected#6, limit);

        tr#7 = $r6;

        $r7 = virtualinvoke tr#7.<java.lang.Throwable: java.lang.String getMessage()>();

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>($r7, tr#7);

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    static java.util.HashMap access$100()
    {
        java.util.HashMap $r0;

        $r0 = <android.os.StrictMode: java.util.HashMap EMPTY_CLASS_LIMIT_MAP>;

        return $r0;
    }

    static boolean access$400()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.StrictMode: boolean tooManyViolationsThisLoop()>();

        return $z0;
    }

    static java.lang.ThreadLocal access$500()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal violationsBeingTimed>;

        return $r0;
    }

    static android.util.Singleton access$600()
    {
        android.util.Singleton $r0;

        $r0 = <android.os.StrictMode: android.util.Singleton sWindowManager>;

        return $r0;
    }

    static java.lang.ThreadLocal access$700()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal threadHandler>;

        return $r0;
    }

    static boolean access$800()
    {
        boolean $z0;

        $z0 = <android.os.StrictMode: boolean LOG_V>;

        return $z0;
    }

    static java.lang.ThreadLocal access$900()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        return $r0;
    }

    static int access$1000(java.lang.String)
    {
        java.lang.String x0;
        int $i0;

        x0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.StrictMode: int parseViolationFromMessage(java.lang.String)>(x0);

        return $i0;
    }

    static void access$1100(int, android.os.StrictMode$ViolationInfo)
    {
        int x0;
        android.os.StrictMode$ViolationInfo x1;

        x0 := @parameter0: int;

        x1 := @parameter1: android.os.StrictMode$ViolationInfo;

        staticinvoke <android.os.StrictMode: void dropboxViolationAsync(int,android.os.StrictMode$ViolationInfo)>(x0, x1);

        return;
    }

    static void access$1200(int)
    {
        int x0;

        x0 := @parameter0: int;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(x0);

        return;
    }

    static void access$1300(android.os.StrictMode$ViolationInfo)
    {
        android.os.StrictMode$ViolationInfo x0;

        x0 := @parameter0: android.os.StrictMode$ViolationInfo;

        staticinvoke <android.os.StrictMode: void executeDeathPenalty(android.os.StrictMode$ViolationInfo)>(x0);

        return;
    }

    static java.util.concurrent.atomic.AtomicInteger access$1400()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight>;

        return $r0;
    }

    static long access$1500()
    {
        long $l0;

        $l0 = <android.os.StrictMode: long sLastInstanceCountCheckMillis>;

        return $l0;
    }

    static long access$1502(long)
    {
        long x0;

        x0 := @parameter0: long;

        <android.os.StrictMode: long sLastInstanceCountCheckMillis> = x0;

        return x0;
    }

    static java.lang.ThreadLocal access$2200()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal sThisThreadSpanState>;

        return $r0;
    }

    static void <clinit>()
    {
        boolean $z0, $z1, $z2;
        java.lang.String $r0, $r1, $r2, $r3;
        java.util.HashMap $r4, $r12, $r16;
        android.os.StrictMode$VmPolicy $r5;
        java.util.concurrent.atomic.AtomicInteger $r6;
        android.os.StrictMode$1 $r7;
        android.os.StrictMode$2 $r8;
        android.os.StrictMode$3 $r9;
        android.os.StrictMode$4 $r10;
        android.os.StrictMode$6 $r11;
        android.os.StrictMode$7 $r13;
        android.os.StrictMode$8 $r14;
        android.os.StrictMode$9 $r15;

        <android.os.StrictMode: int NETWORK_POLICY_REJECT> = 2;

        <android.os.StrictMode: int NETWORK_POLICY_LOG> = 1;

        <android.os.StrictMode: int NETWORK_POLICY_ACCEPT> = 0;

        <android.os.StrictMode: int VM_PENALTY_MASK> = 10813440;

        <android.os.StrictMode: int THREAD_PENALTY_MASK> = 8323072;

        <android.os.StrictMode: int PENALTY_DEATH_ON_CLEARTEXT_NETWORK> = 8388608;

        <android.os.StrictMode: int PENALTY_GATHER> = 4194304;

        <android.os.StrictMode: int PENALTY_DROPBOX> = 2097152;

        <android.os.StrictMode: int PENALTY_FLASH> = 1048576;

        <android.os.StrictMode: int PENALTY_DEATH_ON_NETWORK> = 524288;

        <android.os.StrictMode: int PENALTY_DEATH> = 262144;

        <android.os.StrictMode: int PENALTY_DIALOG> = 131072;

        <android.os.StrictMode: int PENALTY_LOG> = 65536;

        <android.os.StrictMode: int ALL_VM_DETECT_BITS> = 32512;

        <android.os.StrictMode: int DETECT_VM_CLEARTEXT_NETWORK> = 16384;

        <android.os.StrictMode: int DETECT_VM_FILE_URI_EXPOSURE> = 8192;

        <android.os.StrictMode: int DETECT_VM_REGISTRATION_LEAKS> = 4096;

        <android.os.StrictMode: int DETECT_VM_INSTANCE_LEAKS> = 2048;

        <android.os.StrictMode: int DETECT_VM_ACTIVITY_LEAKS> = 1024;

        <android.os.StrictMode: int DETECT_VM_CLOSABLE_LEAKS> = 512;

        <android.os.StrictMode: int DETECT_VM_CURSOR_LEAKS> = 256;

        <android.os.StrictMode: int ALL_THREAD_DETECT_BITS> = 31;

        <android.os.StrictMode: int DETECT_RESOURCE_MISMATCH> = 16;

        <android.os.StrictMode: int DETECT_CUSTOM> = 8;

        <android.os.StrictMode: int DETECT_NETWORK> = 4;

        <android.os.StrictMode: int DETECT_DISK_READ> = 2;

        <android.os.StrictMode: int DETECT_DISK_WRITE> = 1;

        <android.os.StrictMode: int MAX_OFFENSES_PER_LOOP> = 10;

        <android.os.StrictMode: int MAX_SPAN_TAGS> = 20;

        <android.os.StrictMode: long MIN_DIALOG_INTERVAL_MS> = 30000L;

        <android.os.StrictMode: long MIN_LOG_INTERVAL_MS> = 1000L;

        <android.os.StrictMode: java.lang.String CLEARTEXT_PROPERTY> = "persist.sys.strictmode.clear";

        <android.os.StrictMode: java.lang.String VISUAL_PROPERTY> = "persist.sys.strictmode.visual";

        <android.os.StrictMode: java.lang.String DISABLE_PROPERTY> = "persist.sys.strictmode.disable";

        <android.os.StrictMode: java.lang.String TAG> = "StrictMode";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("StrictMode", 2);

        <android.os.StrictMode: boolean LOG_V> = $z0;

        $r1 = "user";

        $r0 = <android.os.Build: java.lang.String TYPE>;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        <android.os.StrictMode: boolean IS_USER_BUILD> = $z1;

        $r3 = "eng";

        $r2 = <android.os.Build: java.lang.String TYPE>;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        <android.os.StrictMode: boolean IS_ENG_BUILD> = $z2;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <android.os.StrictMode: java.util.HashMap EMPTY_CLASS_LIMIT_MAP> = $r4;

        <android.os.StrictMode: int sVmPolicyMask> = 0;

        $r5 = <android.os.StrictMode$VmPolicy: android.os.StrictMode$VmPolicy LAX>;

        <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight> = $r6;

        $r7 = new android.os.StrictMode$1;

        specialinvoke $r7.<android.os.StrictMode$1: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations> = $r7;

        $r8 = new android.os.StrictMode$2;

        specialinvoke $r8.<android.os.StrictMode$2: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal violationsBeingTimed> = $r8;

        $r9 = new android.os.StrictMode$3;

        specialinvoke $r9.<android.os.StrictMode$3: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal threadHandler> = $r9;

        $r10 = new android.os.StrictMode$4;

        specialinvoke $r10.<android.os.StrictMode$4: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal threadAndroidPolicy> = $r10;

        <android.os.StrictMode: long sLastInstanceCountCheckMillis> = 0L;

        <android.os.StrictMode: boolean sIsIdlerRegistered> = 0;

        $r11 = new android.os.StrictMode$6;

        specialinvoke $r11.<android.os.StrictMode$6: void <init>()>();

        <android.os.StrictMode: android.os.MessageQueue$IdleHandler sProcessIdleHandler> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        <android.os.StrictMode: java.util.HashMap sLastVmViolationTime> = $r12;

        $r13 = new android.os.StrictMode$7;

        specialinvoke $r13.<android.os.StrictMode$7: void <init>()>();

        <android.os.StrictMode: android.os.StrictMode$Span NO_OP_SPAN> = $r13;

        $r14 = new android.os.StrictMode$8;

        specialinvoke $r14.<android.os.StrictMode$8: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal sThisThreadSpanState> = $r14;

        $r15 = new android.os.StrictMode$9;

        specialinvoke $r15.<android.os.StrictMode$9: void <init>()>();

        <android.os.StrictMode: android.util.Singleton sWindowManager> = $r15;

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount> = $r16;

        return;
    }
}
