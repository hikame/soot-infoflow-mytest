public class com.android.server.pm.PackageManagerService extends android.content.pm.IPackageManager$Stub
{
    static final java.lang.String TAG;
    static final boolean DEBUG_SETTINGS;
    static final boolean DEBUG_PREFERRED;
    static final boolean DEBUG_UPGRADE;
    static final boolean DEBUG_DOMAIN_VERIFICATION;
    private static final boolean DEBUG_BACKUP;
    private static final boolean DEBUG_INSTALL;
    private static final boolean DEBUG_REMOVE;
    private static final boolean DEBUG_BROADCASTS;
    private static final boolean DEBUG_SHOW_INFO;
    private static final boolean DEBUG_PACKAGE_INFO;
    private static final boolean DEBUG_INTENT_MATCHING;
    private static final boolean DEBUG_PACKAGE_SCANNING;
    private static final boolean DEBUG_VERIFY;
    private static final boolean DEBUG_DEXOPT;
    private static final boolean DEBUG_ABI_SELECTION;
    static final boolean CLEAR_RUNTIME_PERMISSIONS_ON_UPGRADE;
    private static final int RADIO_UID;
    private static final int LOG_UID;
    private static final int NFC_UID;
    private static final int BLUETOOTH_UID;
    private static final int SHELL_UID;
    private static final int MAX_PERMISSION_TREE_FOOTPRINT;
    private static final java.lang.String INSTALL_PACKAGE_SUFFIX;
    static final int SCAN_NO_DEX;
    static final int SCAN_FORCE_DEX;
    static final int SCAN_UPDATE_SIGNATURE;
    static final int SCAN_NEW_INSTALL;
    static final int SCAN_NO_PATHS;
    static final int SCAN_UPDATE_TIME;
    static final int SCAN_DEFER_DEX;
    static final int SCAN_BOOTING;
    static final int SCAN_TRUSTED_OVERLAY;
    static final int SCAN_DELETE_DATA_ON_FAILURES;
    static final int SCAN_REPLACING;
    static final int SCAN_REQUIRE_KNOWN;
    static final int SCAN_MOVE;
    static final int SCAN_INITIAL;
    static final int REMOVE_CHATTY;
    private static final int[] EMPTY_INT_ARRAY;
    private static final long WATCHDOG_TIMEOUT;
    private static final long DEFAULT_MANDATORY_FSTRIM_INTERVAL;
    private static final boolean DEFAULT_VERIFY_ENABLE;
    private static final long DEFAULT_VERIFICATION_TIMEOUT;
    private static final int DEFAULT_VERIFICATION_RESPONSE;
    static final java.lang.String DEFAULT_CONTAINER_PACKAGE;
    static final android.content.ComponentName DEFAULT_CONTAINER_COMPONENT;
    private static final java.lang.String KILL_APP_REASON_GIDS_CHANGED;
    private static final java.lang.String KILL_APP_REASON_PERMISSIONS_REVOKED;
    private static final java.lang.String PACKAGE_MIME_TYPE;
    private static final java.lang.String VENDOR_OVERLAY_DIR;
    private static final int GRANT_DENIED;
    private static final int GRANT_INSTALL;
    private static final int GRANT_INSTALL_LEGACY;
    private static final int GRANT_RUNTIME;
    private static final int GRANT_UPGRADE;
    private static final android.content.Intent sBrowserIntent;
    final com.android.server.ServiceThread mHandlerThread;
    final com.android.server.pm.PackageManagerService$PackageHandler mHandler;
    private java.util.ArrayList mPostSystemReadyMessages;
    final int mSdkVersion;
    final android.content.Context mContext;
    final boolean mFactoryTest;
    final boolean mOnlyCore;
    final boolean mLazyDexOpt;
    final long mDexOptLRUThresholdInMills;
    final android.util.DisplayMetrics mMetrics;
    final int mDefParseFlags;
    final java.lang.String[] mSeparateProcesses;
    final boolean mIsUpgrade;
    final java.io.File mAppDataDir;
    final java.io.File mUserAppDataDir;
    final java.lang.String mAsecInternalPath;
    final com.android.server.pm.Installer mInstaller;
    final java.io.File mAppInstallDir;
    private java.io.File mAppLib32InstallDir;
    final java.io.File mDrmAppPrivateInstallDir;
    final java.lang.Object mInstallLock;
    final android.util.ArrayMap mPackages;
    final android.util.ArrayMap mOverlays;
    private final android.util.ArrayMap mExpectingBetter;
    private final android.util.ArraySet mExistingSystemPackages;
    boolean mPromoteSystemApps;
    final com.android.server.pm.Settings mSettings;
    boolean mRestoredSettings;
    final int[] mGlobalGids;
    final android.util.SparseArray mSystemPermissions;
    final android.util.ArrayMap mAvailableFeatures;
    boolean mFoundPolicyFile;
    private boolean mShouldRestoreconData;
    final android.util.ArrayMap mSharedLibraries;
    final com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities;
    final com.android.server.pm.PackageManagerService$ActivityIntentResolver mReceivers;
    final com.android.server.pm.PackageManagerService$ServiceIntentResolver mServices;
    final com.android.server.pm.PackageManagerService$ProviderIntentResolver mProviders;
    final android.util.ArrayMap mProvidersByAuthority;
    final android.util.ArrayMap mInstrumentation;
    final android.util.ArrayMap mPermissionGroups;
    final android.util.ArraySet mTransferedPackages;
    final android.util.ArraySet mProtectedBroadcasts;
    final android.util.SparseArray mPendingVerification;
    final android.util.ArrayMap mAppOpPermissionPackages;
    final com.android.server.pm.PackageInstallerService mInstallerService;
    private final com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer;
    private java.util.concurrent.atomic.AtomicInteger mNextMoveId;
    private final com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks;
    private final com.android.server.pm.PackageManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners;
    android.util.SparseBooleanArray mUserNeedsBadging;
    private int mPendingVerificationToken;
    volatile boolean mSystemReady;
    volatile boolean mSafeMode;
    volatile boolean mHasSystemUidErrors;
    android.content.pm.ApplicationInfo mAndroidApplication;
    final android.content.pm.ActivityInfo mResolveActivity;
    final android.content.pm.ResolveInfo mResolveInfo;
    android.content.ComponentName mResolveComponentName;
    android.content.pm.PackageParser$Package mPlatformPackage;
    android.content.ComponentName mCustomResolverComponentName;
    boolean mResolverReplaced;
    private final android.content.ComponentName mIntentFilterVerifierComponent;
    private int mIntentFilterVerificationToken;
    final android.util.SparseArray mIntentFilterVerificationStates;
    final com.android.server.pm.DefaultPermissionGrantPolicy mDefaultPermissionPolicy;
    private com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier;
    final com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts;
    private com.android.internal.app.IMediaContainerService mContainerService;
    static final int SEND_PENDING_BROADCAST;
    static final int MCS_BOUND;
    static final int END_COPY;
    static final int INIT_COPY;
    static final int MCS_UNBIND;
    static final int START_CLEANING_PACKAGE;
    static final int FIND_INSTALL_LOC;
    static final int POST_INSTALL;
    static final int MCS_RECONNECT;
    static final int MCS_GIVE_UP;
    static final int UPDATED_MEDIA_STATUS;
    static final int WRITE_SETTINGS;
    static final int WRITE_PACKAGE_RESTRICTIONS;
    static final int PACKAGE_VERIFIED;
    static final int CHECK_PENDING_VERIFICATION;
    static final int START_INTENT_FILTER_VERIFICATIONS;
    static final int INTENT_FILTER_VERIFIED;
    static final int WRITE_SETTINGS_DELAY;
    static final int BROADCAST_DELAY;
    static com.android.server.pm.UserManagerService sUserManager;
    private android.util.ArraySet mDirtyUsers;
    private final com.android.server.pm.PackageManagerService$DefaultContainerConnection mDefContainerConn;
    final android.util.SparseArray mRunningInstalls;
    int mNextInstallToken;
    private static final java.lang.String TAG_PREFERRED_BACKUP;
    private static final java.lang.String TAG_DEFAULT_APPS;
    private static final java.lang.String TAG_INTENT_FILTER_VERIFICATION;
    final java.lang.String mRequiredVerifierPackage;
    final java.lang.String mRequiredInstallerPackage;
    private final com.android.server.pm.PackageManagerService$PackageUsage mPackageUsage;
    private android.os.storage.StorageEventListener mStorageListener;
    static final int UPDATE_PERMISSIONS_ALL;
    static final int UPDATE_PERMISSIONS_REPLACE_PKG;
    static final int UPDATE_PERMISSIONS_REPLACE_ALL;
    private static final java.util.Comparator mResolvePrioritySorter;
    private static final java.util.Comparator mProviderInitOrderSorter;
    static final boolean DEBUG_SD_INSTALL;
    private static final java.lang.String SD_ENCRYPTION_KEYSTORE_NAME;
    private static final java.lang.String SD_ENCRYPTION_ALGORITHM;
    private boolean mMediaMounted;

    private static boolean hasValidDomains(android.content.pm.PackageParser$ActivityIntentInfo)
    {
        android.content.pm.PackageParser$ActivityIntentInfo filter;
        boolean $z0, $z1, $z2, $z3;

        filter := @parameter0: android.content.pm.PackageParser$ActivityIntentInfo;

        $z0 = virtualinvoke filter.<android.content.pm.PackageParser$ActivityIntentInfo: boolean hasCategory(java.lang.String)>("android.intent.category.BROWSABLE");

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke filter.<android.content.pm.PackageParser$ActivityIntentInfo: boolean hasDataScheme(java.lang.String)>("http");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke filter.<android.content.pm.PackageParser$ActivityIntentInfo: boolean hasDataScheme(java.lang.String)>("https");

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private void grantRequestedRuntimePermissions(android.content.pm.PackageParser$Package, int, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg;
        int userId, someUserId, len$#5, i$#6;
        java.lang.String[] grantedPermissions;
        java.lang.Throwable l9, $r4, $r5, len$#3;
        android.util.ArrayMap $r0, $r2, arr$#1, userIds#7;
        com.android.server.pm.Settings $r1;
        com.android.server.pm.UserManagerService $r3;
        int[] userIds#2, arr$#4;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        userId := @parameter1: int;

        grantedPermissions := @parameter2: java.lang.String[];

        if userId < 0 goto label01;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void grantRequestedRuntimePermissionsForUser(android.content.pm.PackageParser$Package,int,java.lang.String[])>(pkg, userId, grantedPermissions);

        goto label08;

     label01:
        if userId != -1 goto label08;

        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        arr$#1 = $r2;

        entermonitor $r2;

     label02:
        $r3 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        userIds#2 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        exitmonitor arr$#1;

     label03:
        goto label06;

     label04:
        $r4 := @caughtexception;

        len$#3 = $r4;

        exitmonitor arr$#1;

     label05:
        throw len$#3;

     label06:
        arr$#4 = userIds#2;

        len$#5 = lengthof arr$#4;

        i$#6 = 0;

     label07:
        if i$#6 >= len$#5 goto label08;

        someUserId = arr$#4[i$#6];

        specialinvoke this.<com.android.server.pm.PackageManagerService: void grantRequestedRuntimePermissionsForUser(android.content.pm.PackageParser$Package,int,java.lang.String[])>(pkg, someUserId, grantedPermissions);

        i$#6 = i$#6 + 1;

        goto label07;

     label08:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        userIds#7 = $r0;

        entermonitor $r0;

     label09:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r1.<com.android.server.pm.Settings: void writePackageListLPr()>();

        exitmonitor userIds#7;

     label10:
        goto label13;

     label11:
        $r5 := @caughtexception;

        l9 = $r5;

        exitmonitor userIds#7;

     label12:
        throw l9;

     label13:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private void grantRequestedRuntimePermissionsForUser(android.content.pm.PackageParser$Package, int, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg;
        int userId;
        java.lang.String[] grantedPermissions;
        com.android.server.pm.SettingBase sb;
        com.android.server.pm.PermissionsState permissionsState;
        java.util.Iterator i$;
        java.lang.String permission;
        com.android.server.pm.BasePermission bp;
        java.lang.Object $r0, $r2, $r4;
        java.util.ArrayList $r1;
        boolean $z0, $z1, $z2;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r5;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        userId := @parameter1: int;

        grantedPermissions := @parameter2: java.lang.String[];

        $r0 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        sb = (com.android.server.pm.SettingBase) $r0;

        if sb != null goto label1;

        return;

     label1:
        permissionsState = virtualinvoke sb.<com.android.server.pm.SettingBase: com.android.server.pm.PermissionsState getPermissionsState()>();

        $r1 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        i$ = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        permission = (java.lang.String) $r2;

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r4 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(permission);

        bp = (com.android.server.pm.BasePermission) $r4;

        if bp == null goto label4;

        $z1 = virtualinvoke bp.<com.android.server.pm.BasePermission: boolean isRuntime()>();

        if $z1 == 0 goto label4;

        if grantedPermissions == null goto label3;

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(grantedPermissions, permission);

        if $z2 == 0 goto label4;

     label3:
        virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int grantRuntimePermission(com.android.server.pm.BasePermission,int)>(bp, userId);

     label4:
        goto label2;

     label5:
        return;
    }

    android.os.Bundle extrasForInstallResult(com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo res;
        int $i0;
        android.os.Bundle $r0, $r4, extras#1;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r1, $r2;
        java.lang.String $r3, $r5, $r6;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        res := @parameter0: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        extras#1 = null;

        $i0 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        lookupswitch($i0)
        {
            case -112: goto label1;
            case 1: goto label2;
            default: goto label5;
        };

     label1:
        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        extras#1 = $r4;

        $r5 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String origPermission>;

        virtualinvoke extras#1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.content.pm.extra.FAILURE_EXISTING_PERMISSION", $r5);

        $r6 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String origPackage>;

        virtualinvoke extras#1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.content.pm.extra.FAILURE_EXISTING_PACKAGE", $r6);

        goto label5;

     label2:
        $r0 = new android.os.Bundle;

        specialinvoke $r0.<android.os.Bundle: void <init>()>();

        extras#1 = $r0;

        $r1 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        if $r1 == null goto label3;

        $r2 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r3 = $r2.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage>;

        if $r3 == null goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        virtualinvoke extras#1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.intent.extra.REPLACING", $z0);

     label5:
        return extras#1;
    }

    void scheduleWriteSettingsLocked()
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageManagerService$PackageHandler $r0, $r1;
        boolean $z0;
        android.os.Message msg_KAME0;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.PackageManagerService$PackageHandler: boolean hasMessages(int)>(13);

        if $z0 != 0 goto label1;

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        msg_KAME0 = new android.os.Message;

        specialinvoke msg_KAME0.<android.os.Message: void <init>()>();

        virtualinvoke $r1.<com.android.server.pm.PackageManagerService$PackageHandler: void dispatchMessage_PackageManagerService__PackageHandler_13(android.os.Message)>(msg_KAME0);

     label1:
        return;
    }

    void scheduleWritePackageRestrictionsLocked(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z2;
        android.util.ArraySet $r1;
        java.lang.Integer $r2;
        com.android.server.pm.PackageManagerService$PackageHandler $r3, $r4;
        android.os.Message msg_KAME0;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(userId);

        virtualinvoke $r1.<android.util.ArraySet: boolean add(java.lang.Object)>($r2);

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $z2 = virtualinvoke $r3.<com.android.server.pm.PackageManagerService$PackageHandler: boolean hasMessages(int)>(14);

        if $z2 != 0 goto label2;

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        msg_KAME0 = new android.os.Message;

        specialinvoke msg_KAME0.<android.os.Message: void <init>()>();

        virtualinvoke $r4.<com.android.server.pm.PackageManagerService$PackageHandler: void dispatchMessage_PackageManagerService__PackageHandler_14(android.os.Message)>(msg_KAME0);

     label2:
        return;
    }

    public static com.android.server.pm.PackageManagerService main(android.content.Context, com.android.server.pm.Installer, boolean, boolean)
    {
        android.content.Context context;
        com.android.server.pm.Installer installer;
        boolean factoryTest, onlyCore;
        com.android.server.pm.PackageManagerService m, tmp$938481638;
        android.os.IBinder tmp$977346734;

        context := @parameter0: android.content.Context;

        installer := @parameter1: com.android.server.pm.Installer;

        factoryTest := @parameter2: boolean;

        onlyCore := @parameter3: boolean;

        tmp$938481638 = new com.android.server.pm.PackageManagerService;

        specialinvoke tmp$938481638.<com.android.server.pm.PackageManagerService: void <init>(android.content.Context,com.android.server.pm.Installer,boolean,boolean)>(context, installer, factoryTest, onlyCore);

        m = tmp$938481638;

        tmp$977346734 = (android.os.IBinder) m;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("package", tmp$977346734);

        return m;
    }

    static java.lang.String[] splitString(java.lang.String, char)
    {
        java.lang.String str, $r0, $r1;
        char sep;
        java.lang.String[] res;
        int $i0, $i1, $i2, count#1, i#2, i#3, i#4, count#5, lastI#6, i#7;

        str := @parameter0: java.lang.String;

        sep := @parameter1: char;

        count#1 = 1;

        i#2 = 0;

     label1:
        $i0 = virtualinvoke str.<java.lang.String: int indexOf(int,int)>(58, i#2);

        i#3 = $i0;

        if $i0 < 0 goto label2;

        count#1 = count#1 + 1;

        i#2 = i#3 + 1;

        goto label1;

     label2:
        res = newarray (java.lang.String)[count#1];

        i#4 = 0;

        count#5 = 0;

        lastI#6 = 0;

     label3:
        $i1 = virtualinvoke str.<java.lang.String: int indexOf(int,int)>(58, i#4);

        i#7 = $i1;

        if $i1 < 0 goto label4;

        $r1 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(lastI#6, i#7);

        res[count#5] = $r1;

        count#5 = count#5 + 1;

        i#4 = i#7 + 1;

        lastI#6 = i#4;

        goto label3;

     label4:
        $i2 = virtualinvoke str.<java.lang.String: int length()>();

        $r0 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(lastI#6, $i2);

        res[count#5] = $r0;

        return res;
    }

    private static void getDefaultDisplayMetrics(android.content.Context, android.util.DisplayMetrics)
    {
        android.content.Context context;
        android.util.DisplayMetrics metrics;
        android.hardware.display.DisplayManager displayManager;
        java.lang.Object $r0;
        android.view.Display $r1;

        context := @parameter0: android.content.Context;

        metrics := @parameter1: android.util.DisplayMetrics;

        $r0 = virtualinvoke context.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        displayManager = (android.hardware.display.DisplayManager) $r0;

        $r1 = virtualinvoke displayManager.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(0);

        virtualinvoke $r1.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>(metrics);

        return;
    }

    public void <init>(android.content.Context, com.android.server.pm.Installer, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Context context, $r119;
        com.android.server.pm.Installer installer, $r96, $r222, $r250;
        boolean factoryTest, onlyCore, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37;
        java.lang.String separateProcesses, bootClassPath, systemServerClassPath, $r29, $r32, $r65, $r81, $r84, $r87, $r91, $r99, $r100, $r113, $r124, $r125, $r128, $r129, $r130, $r131, $r134, $r138, $r155, $r174, $r183, $r186, $r197, $r199, $r207, $r208, $r210, $r215, $r216, $r219, $r221, $r224, $r232, $r234, $r240, $r242, $r245, $r248, $r257, $r265, $r269, $r274, $r276, $r281, $r285, $r289, $r291, perm#7, element#14, element#19, dexCodeInstructionSet#25, lib#28, libEntry#37, path#40, scannedPkg#63, msg#65, scannedPkg#68;
        com.android.server.SystemConfig systemConfig;
        java.lang.Object l9, $r2, $r50, $r72, $r133, $r142, $r147, $r159, $r161, $r166, $r169, $r176, $r181, $r184, $r188, $r228, $r236, $r244, $r246, $r251, $r255;
        android.util.ArrayMap l10, permConfig, $r0, $r1, $r3, $r4, $r11, $r12, $r13, $r15, $r36, $r47, $r49, $r61, $r78, $r108, $r132, $r136, $r145, $r146, $r158, $r167, $r168, $r178, $r185, $r187, $r225, $r227, $r249, $r252, $r253, $r275, i#5;
        java.io.File dataDir, $r54, $r63, $r64, $r66, $r67, $r68, $r79, $r89, $r93, $r94, $r95, $r97, $r98, $r101, $r102, $r103, $r143, $r144, $r209, $r212, $r220, $r233, len$#32, dexoptNeeded#39, dexCodeInstructionSet#49, i$#50, libEntry#51, lib#52, dexoptNeeded#54, disabledPs#69;
        android.util.ArraySet alreadyDexOpted, $r5, $r10, $r17, $r27, $r80, $r111, $r141, $r223;
        java.lang.Throwable l38, l39, $r261, $r263;
        int $i0, $i2, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, i#2, perm#6, len$#12, i$#13, len$#17, i$#18, i$#23, element#24, dexoptNeeded#29, dexCodeInstructionSet#35, i$#36, lib#38, dexoptNeeded#41, ps#61, ps#67, scannedPkg#77;
        com.android.server.pm.PackageManagerService$ProviderIntentResolver $r6;
        com.android.server.pm.PackageManagerService$ServiceIntentResolver $r7;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r8, $r9;
        java.util.concurrent.atomic.AtomicInteger $r14;
        android.util.SparseArray $r16, $r18, $r22, $r52;
        android.content.pm.ResolveInfo $r19;
        android.content.pm.ActivityInfo $r20;
        android.util.SparseBooleanArray $r21;
        com.android.server.pm.PackageManagerService$PackageUsage $r23, $r104;
        com.android.server.pm.PackageManagerService$1 $r24;
        com.android.server.pm.DefaultPermissionGrantPolicy $r25;
        com.android.server.pm.PackageManagerService$PendingPackageBroadcasts $r26;
        com.android.server.pm.PackageManagerService$DefaultContainerConnection $r28;
        android.util.DisplayMetrics $r30, $r53;
        com.android.server.pm.Settings $r31, $r33, $r34, $r35, $r37, $r38, $r39, $r73, $r85, $r106, $r107, $r110, $r126, $r135, $r137, $r149, $r157, $r160, $r179, $r182, $r189, $r200, $r211, $r226, $r241, $r247;
        long $l1, $l3, $l4, $l10, $l15, $l16, $l17, $l19, dexOptLRUThresholdInMinutes#1, bp#9;
        com.android.server.FgThread $r40, $r45;
        android.os.Looper $r41, $r42, $r57;
        com.android.server.pm.PackageManagerService$OnPermissionChangeListeners $r43;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r44;
        com.android.server.pm.PackageDexOptimizer $r46;
        com.android.server.ServiceThread $r48, $r58, $r60;
        int[] $r51, $r237, $r238;
        com.android.server.pm.PackageManagerService$PackageHandler $r55, $r59;
        com.android.server.Watchdog $r56;
        com.android.server.pm.UserManagerService $r62, $r74, $r127;
        java.util.List $r69, $r148, bootClassPathElements#20;
        android.content.res.Resources $r70;
        android.content.ComponentName $r71, $r120, $r122;
        java.lang.String[] $r75, $r77, $r273, bootClassPathElements#10, arr$#11, bootClassPathElements#15, arr$#16, arr$#21, len$#22, i$#33, element#34;
        java.lang.Object[] $r76;
        java.lang.StringBuilder $r82, $r83, $r86, $r88, $r90, $r92, $r112, $r114, $r115, $r116, $r139, $r140, $r150, $r151, $r152, $r153, $r154, $r156, $r162, $r163, $r164, $r165, $r170, $r171, $r172, $r173, $r175, $r191, $r192, $r193, $r194, $r195, $r196, $r198, $r201, $r202, $r203, $r204, $r205, $r206, $r213, $r214, $r217, $r218, $r230, $r231, $r235, $r256, $r258, $r260, $r264, $r266, $r267, $r270, $r271, $r272, $r277, $r278, $r279, $r280, $r283, $r284, $r286, $r288, $r290, $r292, $r294;
        java.util.Collection $r105, $r177, $r229, $r254;
        java.util.ArrayList $r109, path#55, dexoptNeeded#60;
        float $f0, $f1;
        com.android.server.pm.PackageManagerService$PackageManagerInternalImpl $r117;
        java.lang.Runtime $r118;
        com.android.server.pm.PackageManagerService$IntentVerifierProxy $r121;
        com.android.server.pm.PackageInstallerService $r123;
        com.android.server.pm.PackageSetting $r180, i$#48, ps#57, disabledPs#59, deletedPs#66, disabledPs#78;
        android.content.pm.ApplicationInfo $r190;
        com.android.server.pm.BasePermission $r239, bp#4;
        com.android.server.pm.PackageManagerService$SharedLibraryEntry $r243, libEntry#27;
        java.io.FileNotFoundException $r259, $r268;
        java.io.IOException $r262, $r282, $r287, dexoptNeeded#31, dexoptNeeded#43;
        com.android.server.pm.PackageManagerException $r293, deletedPs#71;
        com.android.server.SystemConfig$PermissionEntry perm#3;
        java.util.Iterator i$#26, dexCodeInstructionSet#47, dexoptNeeded#56, ps#62, ps#72, scannedPkg#75;
        com.android.server.pm.Settings$VersionInfo element#44;
        android.content.pm.PackageParser$Package scannedPkg#58, disabledPs#64;
        short msg#70;
        com.android.server.pm.SharedUserSetting scannedPkg#73;
        byte ps#74;
        android.content.pm.UserInfo disabledPs#76;

        this := @this: com.android.server.pm.PackageManagerService;

        context := @parameter0: android.content.Context;

        installer := @parameter1: com.android.server.pm.Installer;

        factoryTest := @parameter2: boolean;

        onlyCore := @parameter3: boolean;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke this.<android.content.pm.IPackageManager$Stub: void <init>()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        this.<com.android.server.pm.PackageManagerService: int mSdkVersion> = $i0;

        $r2 = new java.lang.Object;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock> = $r2;

        $r0 = new android.util.ArrayMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r0.<android.util.ArrayMap: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages> = $r0;

        $r1 = new android.util.ArrayMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r1.<android.util.ArrayMap: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mOverlays> = $r1;

        $r4 = new android.util.ArrayMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter> = $r4;

        $r5 = new android.util.ArraySet;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r5.<android.util.ArraySet: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mExistingSystemPackages> = $r5;

        $z0 = staticinvoke <com.android.server.pm.SELinuxMMAC: boolean shouldRestorecon()>();

        this.<com.android.server.pm.PackageManagerService: boolean mShouldRestoreconData> = $z0;

        $r3 = new android.util.ArrayMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries> = $r3;

        $r9 = new com.android.server.pm.PackageManagerService$ActivityIntentResolver;

        specialinvoke $r9.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void <init>(com.android.server.pm.PackageManagerService)>(this);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities> = $r9;

        $r8 = new com.android.server.pm.PackageManagerService$ActivityIntentResolver;

        specialinvoke $r8.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void <init>(com.android.server.pm.PackageManagerService)>(this);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mReceivers> = $r8;

        $r7 = new com.android.server.pm.PackageManagerService$ServiceIntentResolver;

        specialinvoke $r7.<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$1)>(this, null);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ServiceIntentResolver mServices> = $r7;

        $r6 = new com.android.server.pm.PackageManagerService$ProviderIntentResolver;

        specialinvoke $r6.<com.android.server.pm.PackageManagerService$ProviderIntentResolver: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$1)>(this, null);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ProviderIntentResolver mProviders> = $r6;

        $r13 = new android.util.ArrayMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r13.<android.util.ArrayMap: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mProvidersByAuthority> = $r13;

        $r12 = new android.util.ArrayMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r12.<android.util.ArrayMap: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation> = $r12;

        $r11 = new android.util.ArrayMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r11.<android.util.ArrayMap: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPermissionGroups> = $r11;

        $r10 = new android.util.ArraySet;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r10.<android.util.ArraySet: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mTransferedPackages> = $r10;

        $r17 = new android.util.ArraySet;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r17.<android.util.ArraySet: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mProtectedBroadcasts> = $r17;

        $r16 = new android.util.SparseArray;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r16.<android.util.SparseArray: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.SparseArray mPendingVerification> = $r16;

        $r15 = new android.util.ArrayMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r15.<android.util.ArrayMap: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAppOpPermissionPackages> = $r15;

        $r14 = new java.util.concurrent.atomic.AtomicInteger;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: java.util.concurrent.atomic.AtomicInteger mNextMoveId> = $r14;

        $r21 = new android.util.SparseBooleanArray;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r21.<android.util.SparseBooleanArray: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mUserNeedsBadging> = $r21;

        this.<com.android.server.pm.PackageManagerService: int mPendingVerificationToken> = 0;

        $r20 = new android.content.pm.ActivityInfo;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r20.<android.content.pm.ActivityInfo: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity> = $r20;

        $r19 = new android.content.pm.ResolveInfo;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r19.<android.content.pm.ResolveInfo: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo> = $r19;

        this.<com.android.server.pm.PackageManagerService: boolean mResolverReplaced> = 0;

        this.<com.android.server.pm.PackageManagerService: int mIntentFilterVerificationToken> = 0;

        $r18 = new android.util.SparseArray;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r18.<android.util.SparseArray: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.SparseArray mIntentFilterVerificationStates> = $r18;

        $r25 = new com.android.server.pm.DefaultPermissionGrantPolicy;

        specialinvoke $r25.<com.android.server.pm.DefaultPermissionGrantPolicy: void <init>(com.android.server.pm.PackageManagerService)>(this);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.DefaultPermissionGrantPolicy mDefaultPermissionPolicy> = $r25;

        $r26 = new com.android.server.pm.PackageManagerService$PendingPackageBroadcasts;

        specialinvoke $r26.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts> = $r26;

        this.<com.android.server.pm.PackageManagerService: com.android.internal.app.IMediaContainerService mContainerService> = null;

        $r27 = new android.util.ArraySet;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r27.<android.util.ArraySet: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers> = $r27;

        $r28 = new com.android.server.pm.PackageManagerService$DefaultContainerConnection;

        specialinvoke $r28.<com.android.server.pm.PackageManagerService$DefaultContainerConnection: void <init>(com.android.server.pm.PackageManagerService)>(this);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$DefaultContainerConnection mDefContainerConn> = $r28;

        $r22 = new android.util.SparseArray;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r22.<android.util.SparseArray: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.SparseArray mRunningInstalls> = $r22;

        this.<com.android.server.pm.PackageManagerService: int mNextInstallToken> = 1;

        $r23 = new com.android.server.pm.PackageManagerService$PackageUsage;

        specialinvoke $r23.<com.android.server.pm.PackageManagerService$PackageUsage: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$1)>(this, null);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageUsage mPackageUsage> = $r23;

        $r24 = new com.android.server.pm.PackageManagerService$1;

        specialinvoke $r24.<com.android.server.pm.PackageManagerService$1: void <init>(com.android.server.pm.PackageManagerService)>(this);

        this.<com.android.server.pm.PackageManagerService: android.os.storage.StorageEventListener mStorageListener> = $r24;

        this.<com.android.server.pm.PackageManagerService: boolean mMediaMounted> = 0;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3060, $l1);

        $i2 = this.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        if $i2 > 0 goto label01;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "**** ro.build.version.sdk not set!");

     label01:
        this.<com.android.server.pm.PackageManagerService: android.content.Context mContext> = context;

        this.<com.android.server.pm.PackageManagerService: boolean mFactoryTest> = factoryTest;

        this.<com.android.server.pm.PackageManagerService: boolean mOnlyCore> = onlyCore;

        $r32 = "eng";

        $r29 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.type");

        $z1 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        this.<com.android.server.pm.PackageManagerService: boolean mLazyDexOpt> = $z1;

        $r30 = new android.util.DisplayMetrics;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r30.<android.util.DisplayMetrics: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: android.util.DisplayMetrics mMetrics> = $r30;

        $r31 = new com.android.server.pm.Settings;

        $r36 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        specialinvoke $r31.<com.android.server.pm.Settings: void <init>(java.lang.Object)>($r36);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings> = $r31;

        $r35 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r35.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.system", 1000, 1, 8);

        $r37 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r37.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.phone", 1001, 1, 8);

        $r33 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r33.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.log", 1007, 1, 8);

        $r34 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r34.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.nfc", 1027, 1, 8);

        $r38 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r38.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.bluetooth", 1002, 1, 8);

        $r39 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r39.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.shell", 2000, 1, 8);

        $z2 = this.<com.android.server.pm.PackageManagerService: boolean mLazyDexOpt>;

        if $z2 == 0 goto label02;

        dexOptLRUThresholdInMinutes#1 = 30L;

        goto label03;

     label02:
        dexOptLRUThresholdInMinutes#1 = 10080L;

     label03:
        $l4 = dexOptLRUThresholdInMinutes#1 * 60L;

        $l3 = $l4 * 1000L;

        this.<com.android.server.pm.PackageManagerService: long mDexOptLRUThresholdInMills> = $l3;

        separateProcesses = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("debug.separate_processes");

        if separateProcesses == null goto label05;

        $i37 = virtualinvoke separateProcesses.<java.lang.String: int length()>();

        if $i37 <= 0 goto label05;

        $r274 = "*";

        $z35 = virtualinvoke $r274.<java.lang.String: boolean equals(java.lang.Object)>(separateProcesses);

        if $z35 == 0 goto label04;

        this.<com.android.server.pm.PackageManagerService: int mDefParseFlags> = 8;

        this.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses> = null;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Running with debug.separate_processes: * (ALL)");

        goto label06;

     label04:
        this.<com.android.server.pm.PackageManagerService: int mDefParseFlags> = 0;

        $r273 = virtualinvoke separateProcesses.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        this.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses> = $r273;

        $r272 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r272.<java.lang.StringBuilder: void <init>()>();

        $r271 = virtualinvoke $r272.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Running with debug.separate_processes: ");

        $r270 = virtualinvoke $r271.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(separateProcesses);

        $r269 = virtualinvoke $r270.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r269);

        goto label06;

     label05:
        this.<com.android.server.pm.PackageManagerService: int mDefParseFlags> = 0;

        this.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses> = null;

     label06:
        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller> = installer;

        $r46 = new com.android.server.pm.PackageDexOptimizer;

        specialinvoke $r46.<com.android.server.pm.PackageDexOptimizer: void <init>(com.android.server.pm.PackageManagerService)>(this);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer> = $r46;

        $r44 = new com.android.server.pm.PackageManagerService$MoveCallbacks;

        $r45 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r42 = virtualinvoke $r45.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r44.<com.android.server.pm.PackageManagerService$MoveCallbacks: void <init>(android.os.Looper)>($r42);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks> = $r44;

        $r43 = new com.android.server.pm.PackageManagerService$OnPermissionChangeListeners;

        $r40 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r41 = virtualinvoke $r40.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r43.<com.android.server.pm.PackageManagerService$OnPermissionChangeListeners: void <init>(com.android.server.pm.PackageManagerService,android.os.Looper)>(this, $r41);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners> = $r43;

        $r53 = this.<com.android.server.pm.PackageManagerService: android.util.DisplayMetrics mMetrics>;

        staticinvoke <com.android.server.pm.PackageManagerService: void getDefaultDisplayMetrics(android.content.Context,android.util.DisplayMetrics)>(context, $r53);

        systemConfig = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r51 = virtualinvoke systemConfig.<com.android.server.SystemConfig: int[] getGlobalGids()>();

        this.<com.android.server.pm.PackageManagerService: int[] mGlobalGids> = $r51;

        $r52 = virtualinvoke systemConfig.<com.android.server.SystemConfig: android.util.SparseArray getSystemPermissions()>();

        this.<com.android.server.pm.PackageManagerService: android.util.SparseArray mSystemPermissions> = $r52;

        $r49 = virtualinvoke systemConfig.<com.android.server.SystemConfig: android.util.ArrayMap getAvailableFeatures()>();

        this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures> = $r49;

        $r50 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l9 = $r50;

        entermonitor $r50;

     label07:
        $r47 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l10 = $r47;

        entermonitor $r47;

     label08:
        $r48 = new com.android.server.ServiceThread;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r48.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("PackageManager", 10, 1);

        this.<com.android.server.pm.PackageManagerService: com.android.server.ServiceThread mHandlerThread> = $r48;

        $r60 = this.<com.android.server.pm.PackageManagerService: com.android.server.ServiceThread mHandlerThread>;

        virtualinvoke $r60.<com.android.server.ServiceThread: void start()>();

        $r59 = new com.android.server.pm.PackageManagerService$PackageHandler;

        $r58 = this.<com.android.server.pm.PackageManagerService: com.android.server.ServiceThread mHandlerThread>;

        $r57 = virtualinvoke $r58.<com.android.server.ServiceThread: android.os.Looper getLooper()>();

        specialinvoke $r59.<com.android.server.pm.PackageManagerService$PackageHandler: void <init>(com.android.server.pm.PackageManagerService,android.os.Looper)>(this, $r57);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler> = $r59;

        $r56 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        $r55 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r56.<com.android.server.Watchdog: void addThread(android.os.Handler,long)>($r55, 600000L);

        dataDir = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r54 = new java.io.File;

        specialinvoke $r54.<java.io.File: void <init>(java.io.File,java.lang.String)>(dataDir, "data");

        this.<com.android.server.pm.PackageManagerService: java.io.File mAppDataDir> = $r54;

        $r68 = new java.io.File;

        specialinvoke $r68.<java.io.File: void <init>(java.io.File,java.lang.String)>(dataDir, "app");

        this.<com.android.server.pm.PackageManagerService: java.io.File mAppInstallDir> = $r68;

        $r67 = new java.io.File;

        specialinvoke $r67.<java.io.File: void <init>(java.io.File,java.lang.String)>(dataDir, "app-lib");

        this.<com.android.server.pm.PackageManagerService: java.io.File mAppLib32InstallDir> = $r67;

        $r66 = new java.io.File;

        specialinvoke $r66.<java.io.File: void <init>(java.io.File,java.lang.String)>(dataDir, "app-asec");

        $r65 = virtualinvoke $r66.<java.io.File: java.lang.String getPath()>();

        this.<com.android.server.pm.PackageManagerService: java.lang.String mAsecInternalPath> = $r65;

        $r64 = new java.io.File;

        specialinvoke $r64.<java.io.File: void <init>(java.io.File,java.lang.String)>(dataDir, "user");

        this.<com.android.server.pm.PackageManagerService: java.io.File mUserAppDataDir> = $r64;

        $r63 = new java.io.File;

        specialinvoke $r63.<java.io.File: void <init>(java.io.File,java.lang.String)>(dataDir, "app-private");

        this.<com.android.server.pm.PackageManagerService: java.io.File mDrmAppPrivateInstallDir> = $r63;

        $r62 = new com.android.server.pm.UserManagerService;

        $r72 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        $r61 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        specialinvoke $r62.<com.android.server.pm.UserManagerService: void <init>(android.content.Context,com.android.server.pm.PackageManagerService,java.lang.Object,java.lang.Object)>(context, this, $r72, $r61);

        <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager> = $r62;

        permConfig = virtualinvoke systemConfig.<com.android.server.SystemConfig: android.util.ArrayMap getPermissions()>();

        i#2 = 0;

     label09:
        $i6 = virtualinvoke permConfig.<android.util.ArrayMap: int size()>();

        if i#2 >= $i6 goto label12;

        $r246 = virtualinvoke permConfig.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i#2);

        perm#3 = (com.android.server.SystemConfig$PermissionEntry) $r246;

        $r247 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r249 = $r247.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r248 = perm#3.<com.android.server.SystemConfig$PermissionEntry: java.lang.String name>;

        $r236 = virtualinvoke $r249.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r248);

        bp#4 = (com.android.server.pm.BasePermission) $r236;

        if bp#4 != null goto label10;

        $r239 = new com.android.server.pm.BasePermission;

        $r240 = perm#3.<com.android.server.SystemConfig$PermissionEntry: java.lang.String name>;

        specialinvoke $r239.<com.android.server.pm.BasePermission: void <init>(java.lang.String,java.lang.String,int)>($r240, "android", 1);

        bp#4 = $r239;

        $r241 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r275 = $r241.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r242 = perm#3.<com.android.server.SystemConfig$PermissionEntry: java.lang.String name>;

        virtualinvoke $r275.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r242, bp#4);

     label10:
        $r237 = perm#3.<com.android.server.SystemConfig$PermissionEntry: int[] gids>;

        if $r237 == null goto label11;

        $r238 = perm#3.<com.android.server.SystemConfig$PermissionEntry: int[] gids>;

        $z32 = perm#3.<com.android.server.SystemConfig$PermissionEntry: boolean perUser>;

        virtualinvoke bp#4.<com.android.server.pm.BasePermission: void setGids(int[],boolean)>($r238, $z32);

     label11:
        i#2 = i#2 + 1;

        goto label09;

     label12:
        i#5 = virtualinvoke systemConfig.<com.android.server.SystemConfig: android.util.ArrayMap getSharedLibraries()>();

        perm#6 = 0;

     label13:
        $i7 = virtualinvoke i#5.<android.util.ArrayMap: int size()>();

        if perm#6 >= $i7 goto label14;

        $r252 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r251 = virtualinvoke i#5.<android.util.ArrayMap: java.lang.Object keyAt(int)>(perm#6);

        $r243 = new com.android.server.pm.PackageManagerService$SharedLibraryEntry;

        $r244 = virtualinvoke i#5.<android.util.ArrayMap: java.lang.Object valueAt(int)>(perm#6);

        $r245 = (java.lang.String) $r244;

        specialinvoke $r243.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: void <init>(java.lang.String,java.lang.String)>($r245, null);

        virtualinvoke $r252.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r251, $r243);

        perm#6 = perm#6 + 1;

        goto label13;

     label14:
        $z6 = staticinvoke <com.android.server.pm.SELinuxMMAC: boolean readInstallPolicy()>();

        this.<com.android.server.pm.PackageManagerService: boolean mFoundPolicyFile> = $z6;

        $r73 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r74 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $r69 = virtualinvoke $r74.<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)>(0);

        $i5 = this.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        $z3 = this.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        $z4 = virtualinvoke $r73.<com.android.server.pm.Settings: boolean readLPw(com.android.server.pm.PackageManagerService,java.util.List,int,boolean)>(this, $r69, $i5, $z3);

        this.<com.android.server.pm.PackageManagerService: boolean mRestoredSettings> = $z4;

        $r70 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        perm#7 = virtualinvoke $r70.<android.content.res.Resources: java.lang.String getString(int)>(17039428);

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(perm#7);

        if $z5 == 0 goto label15;

        goto label16;

     label15:
        $r71 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(perm#7);

        this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mCustomResolverComponentName> = $r71;

     label16:
        bp#9 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3070, bp#9);

        $r80 = new android.util.ArraySet;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r80.<android.util.ArraySet: void <init>()>();

        alreadyDexOpted = $r80;

        bootClassPath = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("BOOTCLASSPATH");

        systemServerClassPath = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("SYSTEMSERVERCLASSPATH");

        if bootClassPath == null goto label19;

        bootClassPathElements#10 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String[] splitString(java.lang.String,char)>(bootClassPath, 58);

        arr$#11 = bootClassPathElements#10;

        len$#12 = lengthof arr$#11;

        i$#13 = 0;

     label17:
        if i$#13 >= len$#12 goto label18;

        element#14 = arr$#11[i$#13];

        virtualinvoke alreadyDexOpted.<android.util.ArraySet: boolean add(java.lang.Object)>(element#14);

        i$#13 = i$#13 + 1;

        goto label17;

     label18:
        goto label20;

     label19:
        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "No BOOTCLASSPATH found!");

     label20:
        if systemServerClassPath == null goto label23;

        bootClassPathElements#15 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String[] splitString(java.lang.String,char)>(systemServerClassPath, 58);

        arr$#16 = bootClassPathElements#15;

        len$#17 = lengthof arr$#16;

        i$#18 = 0;

     label21:
        if i$#18 >= len$#17 goto label22;

        element#19 = arr$#16[i$#18];

        virtualinvoke alreadyDexOpted.<android.util.ArraySet: boolean add(java.lang.Object)>(element#19);

        i$#18 = i$#18 + 1;

        goto label21;

     label22:
        goto label24;

     label23:
        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "No SYSTEMSERVERCLASSPATH found!");

     label24:
        bootClassPathElements#20 = staticinvoke <com.android.server.pm.InstructionSets: java.util.List getAllInstructionSets()>();

        $i8 = interfaceinvoke bootClassPathElements#20.<java.util.List: int size()>();

        $r75 = newarray (java.lang.String)[$i8];

        $r76 = interfaceinvoke bootClassPathElements#20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r75);

        $r77 = (java.lang.String[]) $r76;

        arr$#21 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getDexCodeInstructionSets(java.lang.String[])>($r77);

        $r78 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $i9 = virtualinvoke $r78.<android.util.ArrayMap: int size()>();

        if $i9 <= 0 goto label33;

        len$#22 = arr$#21;

        i$#23 = lengthof len$#22;

        element#24 = 0;

     label25:
        if element#24 >= i$#23 goto label33;

        dexCodeInstructionSet#25 = len$#22[element#24];

        $r253 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r254 = virtualinvoke $r253.<android.util.ArrayMap: java.util.Collection values()>();

        i$#26 = interfaceinvoke $r254.<java.util.Collection: java.util.Iterator iterator()>();

     label26:
        $z34 = interfaceinvoke i$#26.<java.util.Iterator: boolean hasNext()>();

        if $z34 == 0 goto label32;

        $r255 = interfaceinvoke i$#26.<java.util.Iterator: java.lang.Object next()>();

        libEntry#27 = (com.android.server.pm.PackageManagerService$SharedLibraryEntry) $r255;

        lib#28 = libEntry#27.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String path>;

        if lib#28 != null goto label27;

        goto label26;

     label27:
        dexoptNeeded#29 = staticinvoke <dalvik.system.DexFile: int getDexOptNeeded(java.lang.String,java.lang.String,java.lang.String,boolean)>(lib#28, null, dexCodeInstructionSet#25, 0);

        if dexoptNeeded#29 == 0 goto label28;

        virtualinvoke alreadyDexOpted.<android.util.ArraySet: boolean add(java.lang.Object)>(lib#28);

        $r250 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r250.<com.android.server.pm.Installer: int dexopt(java.lang.String,int,boolean,java.lang.String,int)>(lib#28, 1000, 1, dexCodeInstructionSet#25, dexoptNeeded#29);

     label28:
        goto label31;

     label29:
        $r268 := @caughtexception;

        $r267 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r267.<java.lang.StringBuilder: void <init>()>();

        $r266 = virtualinvoke $r267.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Library not found: ");

        $r264 = virtualinvoke $r266.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(lib#28);

        $r265 = virtualinvoke $r264.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r265);

        goto label31;

     label30:
        $r287 := @caughtexception;

        dexoptNeeded#31 = $r287;

        $r288 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r288.<java.lang.StringBuilder: void <init>()>();

        $r284 = virtualinvoke $r288.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot dexopt ");

        $r283 = virtualinvoke $r284.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(lib#28);

        $r286 = virtualinvoke $r283.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; is it an APK or JAR? ");

        $r285 = virtualinvoke dexoptNeeded#31.<java.io.IOException: java.lang.String getMessage()>();

        $r280 = virtualinvoke $r286.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r285);

        $r281 = virtualinvoke $r280.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r281);

     label31:
        goto label26;

     label32:
        element#24 = element#24 + 1;

        goto label25;

     label33:
        $r79 = new java.io.File;

        $r89 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        specialinvoke $r79.<java.io.File: void <init>(java.io.File,java.lang.String)>($r89, "framework");

        len$#32 = $r79;

        $r88 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke len$#32.<java.io.File: java.lang.String getPath()>();

        $r86 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

        $r92 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/framework-res.apk");

        $r91 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke alreadyDexOpted.<android.util.ArraySet: boolean add(java.lang.Object)>($r91);

        $r90 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke len$#32.<java.io.File: java.lang.String getPath()>();

        $r83 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r84);

        $r82 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/core-libart.jar");

        $r81 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke alreadyDexOpted.<android.util.ArraySet: boolean add(java.lang.Object)>($r81);

        i$#33 = virtualinvoke len$#32.<java.io.File: java.lang.String[] list()>();

        if i$#33 == null goto label43;

        element#34 = arr$#21;

        dexCodeInstructionSet#35 = lengthof element#34;

        i$#36 = 0;

     label34:
        if i$#36 >= dexCodeInstructionSet#35 goto label43;

        libEntry#37 = element#34[i$#36];

        lib#38 = 0;

     label35:
        $i33 = lengthof i$#33;

        if lib#38 >= $i33 goto label42;

        $r220 = new java.io.File;

        $r221 = i$#33[lib#38];

        specialinvoke $r220.<java.io.File: void <init>(java.io.File,java.lang.String)>(len$#32, $r221);

        dexoptNeeded#39 = $r220;

        path#40 = virtualinvoke dexoptNeeded#39.<java.io.File: java.lang.String getPath()>();

        $z28 = virtualinvoke alreadyDexOpted.<android.util.ArraySet: boolean contains(java.lang.Object)>(path#40);

        if $z28 == 0 goto label36;

        goto label41;

     label36:
        $z29 = virtualinvoke path#40.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z29 != 0 goto label37;

        $z33 = virtualinvoke path#40.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        if $z33 != 0 goto label37;

        goto label41;

     label37:
        dexoptNeeded#41 = staticinvoke <dalvik.system.DexFile: int getDexOptNeeded(java.lang.String,java.lang.String,java.lang.String,boolean)>(path#40, null, libEntry#37, 0);

        if dexoptNeeded#41 == 0 goto label38;

        $r222 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r222.<com.android.server.pm.Installer: int dexopt(java.lang.String,int,boolean,java.lang.String,int)>(path#40, 1000, 1, libEntry#37, dexoptNeeded#41);

     label38:
        goto label41;

     label39:
        $r259 := @caughtexception;

        $r260 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r260.<java.lang.StringBuilder: void <init>()>();

        $r258 = virtualinvoke $r260.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Jar not found: ");

        $r256 = virtualinvoke $r258.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(path#40);

        $r257 = virtualinvoke $r256.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r257);

        goto label41;

     label40:
        $r282 := @caughtexception;

        dexoptNeeded#43 = $r282;

        $r277 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r277.<java.lang.StringBuilder: void <init>()>();

        $r278 = virtualinvoke $r277.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception reading jar: ");

        $r279 = virtualinvoke $r278.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(path#40);

        $r276 = virtualinvoke $r279.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r276, dexoptNeeded#43);

     label41:
        lib#38 = lib#38 + 1;

        goto label35;

     label42:
        i$#36 = i$#36 + 1;

        goto label34;

     label43:
        $r85 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        element#44 = virtualinvoke $r85.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo getInternalVersion()>();

        $r100 = <android.os.Build: java.lang.String FINGERPRINT>;

        $r99 = element#44.<com.android.server.pm.Settings$VersionInfo: java.lang.String fingerprint>;

        $z7 = virtualinvoke $r100.<java.lang.String: boolean equals(java.lang.Object)>($r99);

        if $z7 != 0 goto label44;

        $z36 = 1;

        goto label45;

     label44:
        $z36 = 0;

     label45:
        this.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade> = $z36;

        $z8 = this.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

        if $z8 == 0 goto label46;

        $i34 = element#44.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        if $i34 > 22 goto label46;

        $z37 = 1;

        goto label47;

     label46:
        $z37 = 0;

     label47:
        this.<com.android.server.pm.PackageManagerService: boolean mPromoteSystemApps> = $z37;

        $z9 = this.<com.android.server.pm.PackageManagerService: boolean mPromoteSystemApps>;

        if $z9 == 0 goto label50;

        $r226 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r225 = $r226.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r229 = virtualinvoke $r225.<android.util.ArrayMap: java.util.Collection values()>();

        dexCodeInstructionSet#47 = interfaceinvoke $r229.<java.util.Collection: java.util.Iterator iterator()>();

     label48:
        $z31 = interfaceinvoke dexCodeInstructionSet#47.<java.util.Iterator: boolean hasNext()>();

        if $z31 == 0 goto label50;

        $r228 = interfaceinvoke dexCodeInstructionSet#47.<java.util.Iterator: java.lang.Object next()>();

        i$#48 = (com.android.server.pm.PackageSetting) $r228;

        $z30 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(i$#48);

        if $z30 == 0 goto label49;

        $r223 = this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mExistingSystemPackages>;

        $r224 = i$#48.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r223.<android.util.ArraySet: boolean add(java.lang.Object)>($r224);

     label49:
        goto label48;

     label50:
        $r103 = new java.io.File;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r103.<java.io.File: void <init>(java.lang.String)>("/vendor/overlay");

        dexCodeInstructionSet#49 = $r103;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)>(dexCodeInstructionSet#49, 65, 17312, 0L);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)>(len$#32, 193, 16802, 0L);

        $r101 = new java.io.File;

        $r102 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        specialinvoke $r101.<java.io.File: void <init>(java.io.File,java.lang.String)>($r102, "priv-app");

        i$#50 = $r101;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)>(i$#50, 193, 16800, 0L);

        $r94 = new java.io.File;

        $r95 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        specialinvoke $r94.<java.io.File: void <init>(java.io.File,java.lang.String)>($r95, "app");

        libEntry#51 = $r94;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)>(libEntry#51, 65, 16800, 0L);

        $r93 = new java.io.File;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r93.<java.io.File: void <init>(java.lang.String)>("/vendor/app");

        lib#52 = $r93;

     label51:
        lib#52 = virtualinvoke lib#52.<java.io.File: java.io.File getCanonicalFile()>();

     label52:
        goto label54;

     label53:
        $r262 := @caughtexception;

     label54:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)>(lib#52, 65, 16800, 0L);

        $r97 = new java.io.File;

        $r98 = staticinvoke <android.os.Environment: java.io.File getOemDirectory()>();

        specialinvoke $r97.<java.io.File: void <init>(java.io.File,java.lang.String)>($r98, "app");

        dexoptNeeded#54 = $r97;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)>(dexoptNeeded#54, 65, 16800, 0L);

        $r96 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r96.<com.android.server.pm.Installer: int moveFiles()>();

        $r109 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r109.<java.util.ArrayList: void <init>()>();

        path#55 = $r109;

        $z12 = this.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        if $z12 != 0 goto label61;

        $r179 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r178 = $r179.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r177 = virtualinvoke $r178.<android.util.ArrayMap: java.util.Collection values()>();

        dexoptNeeded#56 = interfaceinvoke $r177.<java.util.Collection: java.util.Iterator iterator()>();

     label55:
        $z24 = interfaceinvoke dexoptNeeded#56.<java.util.Iterator: boolean hasNext()>();

        if $z24 == 0 goto label61;

        $r176 = interfaceinvoke dexoptNeeded#56.<java.util.Iterator: java.lang.Object next()>();

        ps#57 = (com.android.server.pm.PackageSetting) $r176;

        $i27 = ps#57.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i26 = $i27 & 1;

        if $i26 != 0 goto label56;

        goto label55;

     label56:
        $r185 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r186 = ps#57.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r184 = virtualinvoke $r185.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r186);

        scannedPkg#58 = (android.content.pm.PackageParser$Package) $r184;

        if scannedPkg#58 == null goto label57;

        $r200 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r199 = ps#57.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z26 = virtualinvoke $r200.<com.android.server.pm.Settings: boolean isDisabledSystemPackageLPr(java.lang.String)>($r199);

        if $z26 == 0 goto label55;

        $r196 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r196.<java.lang.StringBuilder: void <init>()>();

        $r198 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting better updated system app for ");

        $r197 = ps#57.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r205 = virtualinvoke $r198.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r197);

        $r204 = virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; removing system app.  Last known codePath=");

        $r207 = ps#57.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r206 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r207);

        $r201 = virtualinvoke $r206.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", installStatus=");

        $i32 = ps#57.<com.android.server.pm.PackageSetting: int installStatus>;

        $r203 = virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r202 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", versionCode=");

        $i36 = ps#57.<com.android.server.pm.PackageSetting: int versionCode>;

        $r231 = virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i36);

        $r230 = virtualinvoke $r231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; scanned versionCode=");

        $i35 = scannedPkg#58.<android.content.pm.PackageParser$Package: int mVersionCode>;

        $r235 = virtualinvoke $r230.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i35);

        $r234 = virtualinvoke $r235.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r234);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void removePackageLI(com.android.server.pm.PackageSetting,boolean)>(ps#57, 1);

        $r227 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        $r232 = ps#57.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r233 = ps#57.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        virtualinvoke $r227.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r232, $r233);

        goto label55;

     label57:
        $r182 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r183 = ps#57.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z25 = virtualinvoke $r182.<com.android.server.pm.Settings: boolean isDisabledSystemPackageLPr(java.lang.String)>($r183);

        if $z25 != 0 goto label58;

        interfaceinvoke dexoptNeeded#56.<java.util.Iterator: void remove()>();

        $r217 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r217.<java.lang.StringBuilder: void <init>()>();

        $r218 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System package ");

        $r219 = ps#57.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r213 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r219);

        $r214 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer exists; wiping its data");

        $r215 = virtualinvoke $r214.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r215);

        $r216 = ps#57.<com.android.server.pm.PackageSetting: java.lang.String name>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: int removeDataDirsLI(java.lang.String,java.lang.String)>(null, $r216);

        goto label60;

     label58:
        $r211 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r210 = ps#57.<com.android.server.pm.PackageSetting: java.lang.String name>;

        disabledPs#59 = virtualinvoke $r211.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>($r210);

        $r212 = disabledPs#59.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        if $r212 == null goto label59;

        $r209 = disabledPs#59.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $z27 = virtualinvoke $r209.<java.io.File: boolean exists()>();

        if $z27 != 0 goto label60;

     label59:
        $r208 = ps#57.<com.android.server.pm.PackageSetting: java.lang.String name>;

        interfaceinvoke path#55.<java.util.List: boolean add(java.lang.Object)>($r208);

     label60:
        goto label55;

     label61:
        $r110 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        dexoptNeeded#60 = virtualinvoke $r110.<com.android.server.pm.Settings: java.util.ArrayList getListOfIncompleteInstallPackagesLPr()>();

        ps#61 = 0;

     label62:
        $i11 = virtualinvoke dexoptNeeded#60.<java.util.ArrayList: int size()>();

        if ps#61 >= $i11 goto label63;

        $r181 = virtualinvoke dexoptNeeded#60.<java.util.ArrayList: java.lang.Object get(int)>(ps#61);

        $r180 = (com.android.server.pm.PackageSetting) $r181;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void cleanupInstallFailedPackage(com.android.server.pm.PackageSetting)>($r180);

        ps#61 = ps#61 + 1;

        goto label62;

     label63:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void deleteTempPackageFiles()>();

        $r107 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r107.<com.android.server.pm.Settings: void pruneSharedUsersLPw()>();

        $z11 = this.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        if $z11 != 0 goto label78;

        $l19 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3080, $l19);

        $r144 = this.<com.android.server.pm.PackageManagerService: java.io.File mAppInstallDir>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)>($r144, 0, 20896, 0L);

        $r143 = this.<com.android.server.pm.PackageManagerService: java.io.File mDrmAppPrivateInstallDir>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)>($r143, 16, 20896, 0L);

        ps#62 = interfaceinvoke path#55.<java.util.List: java.util.Iterator iterator()>();

     label64:
        $z16 = interfaceinvoke ps#62.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label67;

        $r159 = interfaceinvoke ps#62.<java.util.Iterator: java.lang.Object next()>();

        scannedPkg#63 = (java.lang.String) $r159;

        $r158 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r161 = virtualinvoke $r158.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(scannedPkg#63);

        disabledPs#64 = (android.content.pm.PackageParser$Package) $r161;

        $r160 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r160.<com.android.server.pm.Settings: void removeDisabledSystemPackageLPw(java.lang.String)>(scannedPkg#63);

        if disabledPs#64 != null goto label65;

        $r194 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r194.<java.lang.StringBuilder: void <init>()>();

        $r195 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updated system package ");

        $r192 = virtualinvoke $r195.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(scannedPkg#63);

        $r193 = virtualinvoke $r192.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer exists; wiping its data");

        msg#65 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke this.<com.android.server.pm.PackageManagerService: int removeDataDirsLI(java.lang.String,java.lang.String)>(null, scannedPkg#63);

        goto label66;

     label65:
        $r163 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r163.<java.lang.StringBuilder: void <init>()>();

        $r162 = virtualinvoke $r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updated system app + ");

        $r165 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(scannedPkg#63);

        $r164 = virtualinvoke $r165.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer present; removing system privileges for ");

        $r191 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(scannedPkg#63);

        msg#65 = virtualinvoke $r191.<java.lang.StringBuilder: java.lang.String toString()>();

        $r190 = disabledPs#64.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i29 = $r190.<android.content.pm.ApplicationInfo: int flags>;

        $i28 = $i29 & -2;

        $r190.<android.content.pm.ApplicationInfo: int flags> = $i28;

        $r189 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r187 = $r189.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r188 = virtualinvoke $r187.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(scannedPkg#63);

        deletedPs#66 = (com.android.server.pm.PackageSetting) $r188;

        $i30 = deletedPs#66.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i31 = $i30 & -2;

        deletedPs#66.<com.android.server.pm.PackageSetting: int pkgFlags> = $i31;

     label66:
        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, msg#65);

        goto label64;

     label67:
        ps#67 = 0;

     label68:
        $r146 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        $i20 = virtualinvoke $r146.<android.util.ArrayMap: int size()>();

        if ps#67 >= $i20 goto label78;

        $r145 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        $r166 = virtualinvoke $r145.<android.util.ArrayMap: java.lang.Object keyAt(int)>(ps#67);

        scannedPkg#68 = (java.lang.String) $r166;

        $r167 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $z19 = virtualinvoke $r167.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(scannedPkg#68);

        if $z19 != 0 goto label77;

        $r168 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        $r169 = virtualinvoke $r168.<android.util.ArrayMap: java.lang.Object valueAt(int)>(ps#67);

        disabledPs#69 = (java.io.File) $r169;

        $r170 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r170.<java.lang.StringBuilder: void <init>()>();

        $r171 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected better ");

        $r172 = virtualinvoke $r171.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(scannedPkg#68);

        $r173 = virtualinvoke $r172.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but never showed up; reverting to system");

        $r174 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r174);

        $z20 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>(i$#50, disabledPs#69);

        if $z20 == 0 goto label69;

        msg#70 = 193;

        goto label73;

     label69:
        $z21 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>(libEntry#51, disabledPs#69);

        if $z21 == 0 goto label70;

        msg#70 = 65;

        goto label73;

     label70:
        $z22 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>(lib#52, disabledPs#69);

        if $z22 == 0 goto label71;

        msg#70 = 65;

        goto label73;

     label71:
        $z23 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>(dexoptNeeded#54, disabledPs#69);

        if $z23 == 0 goto label72;

        msg#70 = 65;

        goto label73;

     label72:
        $r175 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r175.<java.lang.StringBuilder: void <init>()>();

        $r154 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring unexpected fallback path ");

        $r156 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(disabledPs#69);

        $r155 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r155);

        goto label77;

     label73:
        $r157 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r157.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting enableSystemPackageLPw(java.lang.String)>(scannedPkg#68);

     label74:
        specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)>(disabledPs#69, msg#70, 16800, 0L, null);

     label75:
        goto label77;

     label76:
        $r293 := @caughtexception;

        deletedPs#71 = $r293;

        $r294 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r294.<java.lang.StringBuilder: void <init>()>();

        $r290 = virtualinvoke $r294.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse original system package: ");

        $r289 = virtualinvoke deletedPs#71.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        $r292 = virtualinvoke $r290.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r289);

        $r291 = virtualinvoke $r292.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r291);

     label77:
        ps#67 = ps#67 + 1;

        goto label68;

     label78:
        $r108 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        virtualinvoke $r108.<android.util.ArrayMap: void clear()>();

        specialinvoke this.<com.android.server.pm.PackageManagerService: void updateAllSharedLibrariesLPw()>();

        $r106 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r105 = virtualinvoke $r106.<com.android.server.pm.Settings: java.util.Collection getAllSharedUsersLPw()>();

        ps#72 = interfaceinvoke $r105.<java.util.Collection: java.util.Iterator iterator()>();

     label79:
        $z10 = interfaceinvoke ps#72.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label80;

        $r142 = interfaceinvoke ps#72.<java.util.Iterator: java.lang.Object next()>();

        scannedPkg#73 = (com.android.server.pm.SharedUserSetting) $r142;

        $r141 = scannedPkg#73.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void adjustCpuAbisForSharedUserLPw(java.util.Set,android.content.pm.PackageParser$Package,boolean,boolean)>($r141, null, 0, 0);

        goto label79;

     label80:
        $r104 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageUsage mPackageUsage>;

        virtualinvoke $r104.<com.android.server.pm.PackageManagerService$PackageUsage: void readLP()>();

        $l10 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3090, $l10);

        $r115 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r115.<java.lang.StringBuilder: void <init>()>();

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time to scan packages: ");

        $l16 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l15 = $l16 - bp#9;

        $f0 = (float) $l15;

        $f1 = $f0 / 1000.0F;

        $r114 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r112 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r113);

        ps#74 = 1;

        $i12 = element#44.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        $i14 = this.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        if $i12 == $i14 goto label81;

        $r151 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r151.<java.lang.StringBuilder: void <init>()>();

        $r150 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Platform changed from ");

        $i25 = element#44.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        $r153 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i25);

        $r152 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $i24 = this.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        $r140 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r139 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; regranting permissions for internal storage");

        $r138 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r138);

        ps#74 = 7;

     label81:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void updatePermissionsLPw(java.lang.String,android.content.pm.PackageParser$Package,int)>(null, null, ps#74);

        $i13 = this.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        element#44.<com.android.server.pm.Settings$VersionInfo: int sdkVersion> = $i13;

        if onlyCore != 0 goto label84;

        $z14 = this.<com.android.server.pm.PackageManagerService: boolean mPromoteSystemApps>;

        if $z14 != 0 goto label82;

        $z18 = this.<com.android.server.pm.PackageManagerService: boolean mRestoredSettings>;

        if $z18 != 0 goto label84;

     label82:
        $r127 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $r148 = virtualinvoke $r127.<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)>(1);

        scannedPkg#75 = interfaceinvoke $r148.<java.util.List: java.util.Iterator iterator()>();

     label83:
        $z17 = interfaceinvoke scannedPkg#75.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label84;

        $r147 = interfaceinvoke scannedPkg#75.<java.util.Iterator: java.lang.Object next()>();

        disabledPs#76 = (android.content.pm.UserInfo) $r147;

        $r149 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i23 = disabledPs#76.<android.content.pm.UserInfo: int id>;

        virtualinvoke $r149.<com.android.server.pm.Settings: void applyDefaultPreferredAppsLPw(com.android.server.pm.PackageManagerService,int)>(this, $i23);

        $i21 = disabledPs#76.<android.content.pm.UserInfo: int id>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void applyFactoryDefaultBrowserLPw(int)>($i21);

        $i22 = disabledPs#76.<android.content.pm.UserInfo: int id>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void primeDomainVerificationsLPw(int)>($i22);

        goto label83;

     label84:
        $z13 = this.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

        if $z13 == 0 goto label88;

        if onlyCore != 0 goto label88;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", "Build fingerprint changed; clearing code caches");

        scannedPkg#77 = 0;

     label85:
        $r137 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r136 = $r137.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $i18 = virtualinvoke $r136.<android.util.ArrayMap: int size()>();

        if scannedPkg#77 >= $i18 goto label87;

        $r135 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r132 = $r135.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r133 = virtualinvoke $r132.<android.util.ArrayMap: java.lang.Object valueAt(int)>(scannedPkg#77);

        disabledPs#78 = (com.android.server.pm.PackageSetting) $r133;

        $r131 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        $r130 = disabledPs#78.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        $z15 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r131, $r130);

        if $z15 == 0 goto label86;

        $r128 = disabledPs#78.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        $r129 = disabledPs#78.<com.android.server.pm.PackageSetting: java.lang.String name>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: int deleteCodeCacheDirsLI(java.lang.String,java.lang.String)>($r128, $r129);

     label86:
        scannedPkg#77 = scannedPkg#77 + 1;

        goto label85;

     label87:
        $r134 = <android.os.Build: java.lang.String FINGERPRINT>;

        element#44.<com.android.server.pm.Settings$VersionInfo: java.lang.String fingerprint> = $r134;

     label88:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void checkDefaultBrowser()>();

        $r111 = this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mExistingSystemPackages>;

        virtualinvoke $r111.<android.util.ArraySet: void clear()>();

        this.<com.android.server.pm.PackageManagerService: boolean mPromoteSystemApps> = 0;

        element#44.<com.android.server.pm.Settings$VersionInfo: int databaseVersion> = 3;

        $r126 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r126.<com.android.server.pm.Settings: void writeLPr()>();

        $l17 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3100, $l17);

        $r125 = specialinvoke this.<com.android.server.pm.PackageManagerService: java.lang.String getRequiredVerifierLPr()>();

        this.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage> = $r125;

        $r124 = specialinvoke this.<com.android.server.pm.PackageManagerService: java.lang.String getRequiredInstallerLPr()>();

        this.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredInstallerPackage> = $r124;

        $r123 = new com.android.server.pm.PackageInstallerService;

        specialinvoke $r123.<com.android.server.pm.PackageInstallerService: void <init>(android.content.Context,com.android.server.pm.PackageManagerService)>(context, this);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService> = $r123;

        $r122 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.ComponentName getIntentFilterVerifierComponentNameLPr()>();

        this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent> = $r122;

        $r121 = new com.android.server.pm.PackageManagerService$IntentVerifierProxy;

        $r119 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r120 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent>;

        specialinvoke $r121.<com.android.server.pm.PackageManagerService$IntentVerifierProxy: void <init>(com.android.server.pm.PackageManagerService,android.content.Context,android.content.ComponentName)>(this, $r119, $r120);

        this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier> = $r121;

        exitmonitor l10;

     label89:
        goto label92;

     label90:
        $r263 := @caughtexception;

        l38 = $r263;

        exitmonitor l10;

     label91:
        throw l38;

     label92:
        exitmonitor l9;

     label93:
        goto label96;

     label94:
        $r261 := @caughtexception;

        l39 = $r261;

        exitmonitor l9;

     label95:
        throw l39;

     label96:
        $r118 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r118.<java.lang.Runtime: void gc()>();

        $r117 = new com.android.server.pm.PackageManagerService$PackageManagerInternalImpl;

        specialinvoke $r117.<com.android.server.pm.PackageManagerService$PackageManagerInternalImpl: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$1)>(this, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "android/content/pm/PackageManagerInternal", $r117);

        return;

        catch java.io.FileNotFoundException from label27 to label28 with label29;
        catch java.io.IOException from label27 to label28 with label30;
        catch java.io.FileNotFoundException from label37 to label38 with label39;
        catch java.io.IOException from label37 to label38 with label40;
        catch java.io.IOException from label51 to label52 with label53;
        catch com.android.server.pm.PackageManagerException from label74 to label75 with label76;
        catch java.lang.Throwable from label08 to label89 with label90;
        catch java.lang.Throwable from label90 to label91 with label90;
        catch java.lang.Throwable from label07 to label93 with label94;
        catch java.lang.Throwable from label94 to label95 with label94;
    }

    public boolean isFirstBoot()
    {
        com.android.server.pm.PackageManagerService this;
        boolean $z0, $z1;

        this := @this: com.android.server.pm.PackageManagerService;

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mRestoredSettings>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isOnlyCoreApps()
    {
        com.android.server.pm.PackageManagerService this;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        return $z0;
    }

    public boolean isUpgrade()
    {
        com.android.server.pm.PackageManagerService this;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

        return $z0;
    }

    private java.lang.String getRequiredVerifierLPr()
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent verification, $r0;
        java.util.List receivers;
        int N, $i0, i#2;
        android.content.pm.ResolveInfo info;
        java.lang.String packageName, requiredVerifier#1;
        java.lang.Object $r1;
        android.content.pm.ActivityInfo $r2, $r3;
        java.lang.RuntimeException $r4;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.PACKAGE_NEEDS_VERIFICATION");

        verification = $r0;

        receivers = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>(verification, "application/vnd.android.package-archive", 512, 0);

        requiredVerifier#1 = null;

        N = interfaceinvoke receivers.<java.util.List: int size()>();

        i#2 = 0;

     label1:
        if i#2 >= N goto label6;

        $r1 = interfaceinvoke receivers.<java.util.List: java.lang.Object get(int)>(i#2);

        info = (android.content.pm.ResolveInfo) $r1;

        $r2 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r2 != null goto label2;

        goto label5;

     label2:
        $r3 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        packageName = $r3.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $i0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int checkPermission(java.lang.String,java.lang.String,int)>("android.permission.PACKAGE_VERIFICATION_AGENT", packageName, 0);

        if $i0 == 0 goto label3;

        goto label5;

     label3:
        if requiredVerifier#1 == null goto label4;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("There can be only one required verifier");

        throw $r4;

     label4:
        requiredVerifier#1 = packageName;

     label5:
        i#2 = i#2 + 1;

        goto label1;

     label6:
        return requiredVerifier#1;
    }

    private java.lang.String getRequiredInstallerLPr()
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent installerIntent, $r0;
        java.util.List installers;
        int N, i#2;
        android.content.pm.ResolveInfo info;
        java.lang.String packageName, requiredInstaller#1;
        java.io.File $r2;
        android.net.Uri $r3;
        java.lang.RuntimeException $r5, $r10;
        android.content.pm.ActivityInfo $r6, $r9;
        java.lang.Object $r7;
        android.content.pm.ApplicationInfo $r8;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.INSTALL_PACKAGE");

        installerIntent = $r0;

        virtualinvoke installerIntent.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DEFAULT");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("foo.apk");

        $r3 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>($r2);

        virtualinvoke installerIntent.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r3, "application/vnd.android.package-archive");

        installers = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>(installerIntent, "application/vnd.android.package-archive", 0, 0);

        requiredInstaller#1 = null;

        N = interfaceinvoke installers.<java.util.List: int size()>();

        i#2 = 0;

     label1:
        if i#2 >= N goto label5;

        $r7 = interfaceinvoke installers.<java.util.List: java.lang.Object get(int)>(i#2);

        info = (android.content.pm.ResolveInfo) $r7;

        $r6 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        packageName = $r6.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r9 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r8 = $r9.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z0 = virtualinvoke $r8.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        if requiredInstaller#1 == null goto label3;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("There must be one required installer");

        throw $r10;

     label3:
        requiredInstaller#1 = packageName;

     label4:
        i#2 = i#2 + 1;

        goto label1;

     label5:
        if requiredInstaller#1 != null goto label6;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("There must be one required installer");

        throw $r5;

     label6:
        return requiredInstaller#1;
    }

    private android.content.ComponentName getIntentFilterVerifierComponentNameLPr()
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent verification, $r0;
        java.util.List receivers;
        int N, $i0, $i1, priority#2, i#3;
        android.content.pm.ResolveInfo info;
        java.lang.String packageName, $r8;
        com.android.server.pm.PackageSetting ps;
        java.lang.Object $r1, $r6;
        android.content.pm.ActivityInfo $r2, $r3, $r9;
        android.util.ArrayMap $r4;
        com.android.server.pm.Settings $r5;
        android.content.ComponentName $r7, verifierComponentName#1;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.INTENT_FILTER_NEEDS_VERIFICATION");

        verification = $r0;

        receivers = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>(verification, "application/vnd.android.package-archive", 512, 0);

        verifierComponentName#1 = null;

        priority#2 = -1000;

        N = interfaceinvoke receivers.<java.util.List: int size()>();

        i#3 = 0;

     label1:
        if i#3 >= N goto label6;

        $r1 = interfaceinvoke receivers.<java.util.List: java.lang.Object get(int)>(i#3);

        info = (android.content.pm.ResolveInfo) $r1;

        $r2 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r2 != null goto label2;

        goto label5;

     label2:
        $r3 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        packageName = $r3.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r6;

        if ps != null goto label3;

        goto label5;

     label3:
        $i0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int checkPermission(java.lang.String,java.lang.String,int)>("android.permission.INTENT_FILTER_VERIFICATION_AGENT", packageName, 0);

        if $i0 == 0 goto label4;

        goto label5;

     label4:
        $i1 = info.<android.content.pm.ResolveInfo: int priority>;

        if priority#2 >= $i1 goto label5;

        priority#2 = info.<android.content.pm.ResolveInfo: int priority>;

        $r7 = new android.content.ComponentName;

        $r9 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r8 = $r9.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r7.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(packageName, $r8);

        verifierComponentName#1 = $r7;

     label5:
        i#3 = i#3 + 1;

        goto label1;

     label6:
        return verifierComponentName#1;
    }

    private void primeDomainVerificationsLPw(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, $i1;
        com.android.server.SystemConfig systemConfig;
        android.util.ArraySet packages, domains, $r0;
        java.util.Iterator i$, i$, i$#1;
        java.lang.String packageName, $r7, $r15, $r25;
        android.content.pm.PackageParser$Package pkg;
        android.content.pm.PackageParser$Activity a;
        android.content.pm.PackageParser$ActivityIntentInfo filter;
        java.lang.Object $r1, $r2, $r18, $r21;
        boolean $z0, $z1, $z2, $z4, $z6;
        android.util.ArrayMap $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r10, $r11, $r12, $r14, $r22, $r23, $r24, $r26;
        java.util.ArrayList $r9, $r13, $r19, $r20;
        com.android.server.pm.Settings $r16, $r17;
        android.content.pm.IntentFilterVerificationInfo i$#2;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        systemConfig = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        packages = virtualinvoke systemConfig.<com.android.server.SystemConfig: android.util.ArraySet getLinkedApps()>();

        $r0 = new android.util.ArraySet;

        specialinvoke $r0.<android.util.ArraySet: void <init>()>();

        domains = $r0;

        i$ = virtualinvoke packages.<android.util.ArraySet: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r1 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        packageName = (java.lang.String) $r1;

        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r2;

        if pkg == null goto label09;

        $z1 = virtualinvoke pkg.<android.content.pm.PackageParser$Package: boolean isSystemApp()>();

        if $z1 != 0 goto label02;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system app \'");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in sysconfig <app-link>");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r25);

        goto label01;

     label02:
        virtualinvoke domains.<android.util.ArraySet: void clear()>();

        $r9 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        i$#1 = virtualinvoke $r9.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke i$#1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r18 = interfaceinvoke i$#1.<java.util.Iterator: java.lang.Object next()>();

        a = (android.content.pm.PackageParser$Activity) $r18;

        $r19 = a.<android.content.pm.PackageParser$Activity: java.util.ArrayList intents>;

        i$ = virtualinvoke $r19.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label06;

        $r21 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        filter = (android.content.pm.PackageParser$ActivityIntentInfo) $r21;

        $z6 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasValidDomains(android.content.pm.PackageParser$ActivityIntentInfo)>(filter);

        if $z6 == 0 goto label05;

        $r20 = virtualinvoke filter.<android.content.pm.PackageParser$ActivityIntentInfo: java.util.ArrayList getHostsList()>();

        virtualinvoke domains.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r20);

     label05:
        goto label04;

     label06:
        goto label03;

     label07:
        $i1 = virtualinvoke domains.<android.util.ArraySet: int size()>();

        if $i1 <= 0 goto label08;

        $r17 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>(domains);

        i$#2 = virtualinvoke $r17.<com.android.server.pm.Settings: android.content.pm.IntentFilterVerificationInfo createIntentFilterVerificationIfNeededLPw(java.lang.String,java.util.ArrayList)>(packageName, $r13);

        virtualinvoke i$#2.<android.content.pm.IntentFilterVerificationInfo: void setStatus(int)>(0);

        $r16 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r16.<com.android.server.pm.Settings: boolean updateIntentFilterVerificationStatusLPw(java.lang.String,int,int)>(packageName, 2, userId);

        goto label10;

     label08:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sysconfig <app-link> package \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not handle web links");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r15);

        goto label10;

     label09:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package \'");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in sysconfig <app-link>");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r7);

     label10:
        goto label01;

     label11:
        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>();

        return;
    }

    private void applyFactoryDefaultBrowserLPw(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId;
        com.android.server.pm.PackageSetting ps;
        android.content.Context $r0;
        android.content.res.Resources $r1;
        boolean $z0;
        com.android.server.pm.Settings $r2, $r5;
        android.util.ArrayMap $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, browserPkg#1;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        browserPkg#1 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(17039404);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(browserPkg#1);

        if $z0 != 0 goto label2;

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(browserPkg#1);

        ps = (com.android.server.pm.PackageSetting) $r4;

        if ps != null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Product default browser app does not exist: ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(browserPkg#1);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r8);

        browserPkg#1 = null;

        goto label2;

     label1:
        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r5.<com.android.server.pm.Settings: boolean setDefaultBrowserPackageNameLPw(java.lang.String,int)>(browserPkg#1, userId);

     label2:
        if browserPkg#1 != null goto label3;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void calculateDefaultBrowserLPw(int)>(userId);

     label3:
        return;
    }

    private void calculateDefaultBrowserLPw(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, $i0;
        java.util.List allBrowsers;
        java.lang.String browserPkg, $r2;
        com.android.server.pm.Settings $r0;
        java.lang.Object $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        allBrowsers = specialinvoke this.<com.android.server.pm.PackageManagerService: java.util.List resolveAllBrowserApps(int)>(userId);

        $i0 = interfaceinvoke allBrowsers.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r1 = interfaceinvoke allBrowsers.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.lang.String) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        browserPkg = $r2;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r0.<com.android.server.pm.Settings: boolean setDefaultBrowserPackageNameLPw(java.lang.String,int)>(browserPkg, userId);

        return;
    }

    private java.util.List resolveAllBrowserApps(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, count, $i0, $i1, i#1;
        java.util.List list;
        java.util.ArrayList result, $r1;
        android.content.pm.ResolveInfo info;
        android.content.Intent $r0;
        java.lang.Object $r2;
        android.content.pm.ActivityInfo $r3, $r4, $r7, $r8;
        boolean $z0, $z1;
        android.content.pm.ApplicationInfo $r5;
        java.lang.String $r6, $r9;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        $r0 = <com.android.server.pm.PackageManagerService: android.content.Intent sBrowserIntent>;

        list = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>($r0, null, 131072, userId);

        count = interfaceinvoke list.<java.util.List: int size()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(count);

        result = $r1;

        i#1 = 0;

     label1:
        if i#1 >= count goto label4;

        $r2 = interfaceinvoke list.<java.util.List: java.lang.Object get(int)>(i#1);

        info = (android.content.pm.ResolveInfo) $r2;

        $r3 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r3 == null goto label3;

        $z0 = info.<android.content.pm.ResolveInfo: boolean handleAllWebDataURI>;

        if $z0 == 0 goto label3;

        $r4 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r5 = $r4.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r5.<android.content.pm.ApplicationInfo: int flags>;

        $i0 = $i1 & 1;

        if $i0 == 0 goto label3;

        $r7 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r6 = $r7.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z1 = interfaceinvoke result.<java.util.List: boolean contains(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        $r8 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r9 = $r8.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        interfaceinvoke result.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        i#1 = i#1 + 1;

        goto label1;

     label4:
        return result;
    }

    private boolean packageIsBrowser(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r3;
        int userId, N, i#1;
        java.util.List list;
        android.content.pm.ResolveInfo info;
        android.content.Intent $r0;
        java.lang.Object $r1;
        android.content.pm.ActivityInfo $r2;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = <com.android.server.pm.PackageManagerService: android.content.Intent sBrowserIntent>;

        list = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>($r0, null, 131072, userId);

        N = interfaceinvoke list.<java.util.List: int size()>();

        i#1 = 0;

     label1:
        if i#1 >= N goto label3;

        $r1 = interfaceinvoke list.<java.util.List: java.lang.Object get(int)>(i#1);

        info = (android.content.pm.ResolveInfo) $r1;

        $r2 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r3 = $r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z0 = virtualinvoke packageName.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i#1 = i#1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void checkDefaultBrowser()
    {
        com.android.server.pm.PackageManagerService this;
        int myUserId;
        java.lang.String packageName, $r3;
        android.content.pm.PackageInfo info;
        android.util.ArrayMap l4, $r4;
        java.lang.Throwable l5, $r5;
        java.lang.StringBuilder $r0, $r1, $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        myUserId = staticinvoke <android.os.UserHandle: int myUserId()>();

        packageName = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.lang.String getDefaultBrowserPackageName(int)>(myUserId);

        if packageName == null goto label5;

        info = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(packageName, 0, myUserId);

        if info != null goto label5;

        $r0 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default browser no longer installed: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r3);

        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void applyFactoryDefaultBrowserLPw(int)>(myUserId);

        exitmonitor l4;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        l5 = $r5;

        exitmonitor l4;

     label4:
        throw l5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService this;
        int code, flags;
        android.os.Parcel data, reply;
        java.lang.RuntimeException e, $r0;
        boolean $z0, $z1, $z2;

        this := @this: com.android.server.pm.PackageManagerService;

        code := @parameter0: int;

        data := @parameter1: android.os.Parcel;

        reply := @parameter2: android.os.Parcel;

        flags := @parameter3: int;

     label1:
        $z0 = specialinvoke this.<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(code, data, reply, flags);

     label2:
        return $z0;

     label3:
        $r0 := @caughtexception;

        e = $r0;

        $z1 = e instanceof java.lang.SecurityException;

        if $z1 != 0 goto label4;

        $z2 = e instanceof java.lang.IllegalArgumentException;

        if $z2 != 0 goto label4;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Package Manager Crash", e);

     label4:
        throw e;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    void cleanupInstallFailedPackage(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting ps;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4, $r5, $r6, $r9, $r19;
        java.io.File $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        com.android.server.pm.Settings $r10;
        boolean $z0, $z1, $z4;
        com.android.server.pm.Installer $r20;

        this := @this: com.android.server.pm.PackageManagerService;

        ps := @parameter0: com.android.server.pm.PackageSetting;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cleaning up incompletely installed app: ");

        $r2 = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r4);

        $r6 = ps.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        $r5 = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: int removeDataDirsLI(java.lang.String,java.lang.String)>($r6, $r5);

        $r7 = ps.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        if $r7 == null goto label2;

        $r16 = ps.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $z4 = virtualinvoke $r16.<java.io.File: boolean isDirectory()>();

        if $z4 == 0 goto label1;

        $r20 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r18 = ps.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $r19 = virtualinvoke $r18.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r20.<com.android.server.pm.Installer: int rmPackageDir(java.lang.String)>($r19);

        goto label2;

     label1:
        $r17 = ps.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        virtualinvoke $r17.<java.io.File: boolean delete()>();

     label2:
        $r8 = ps.<com.android.server.pm.PackageSetting: java.io.File resourcePath>;

        if $r8 == null goto label4;

        $r11 = ps.<com.android.server.pm.PackageSetting: java.io.File resourcePath>;

        $r12 = ps.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $z0 = virtualinvoke $r11.<java.io.File: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label4;

        $r13 = ps.<com.android.server.pm.PackageSetting: java.io.File resourcePath>;

        $z1 = virtualinvoke $r13.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label3;

        $r15 = ps.<com.android.server.pm.PackageSetting: java.io.File resourcePath>;

        staticinvoke <android.os.FileUtils: boolean deleteContents(java.io.File)>($r15);

     label3:
        $r14 = ps.<com.android.server.pm.PackageSetting: java.io.File resourcePath>;

        virtualinvoke $r14.<java.io.File: boolean delete()>();

     label4:
        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r10.<com.android.server.pm.Settings: int removePackageLPw(java.lang.String)>($r9);

        return;
    }

    static int[] appendInts(int[], int[])
    {
        int[] add, cur#1;
        int N, $i0, i#2;

        cur#1 := @parameter0: int[];

        add := @parameter1: int[];

        if add != null goto label1;

        return cur#1;

     label1:
        if cur#1 != null goto label2;

        return add;

     label2:
        N = lengthof add;

        i#2 = 0;

     label3:
        if i#2 >= N goto label4;

        $i0 = add[i#2];

        cur#1 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(cur#1, $i0);

        i#2 = i#2 + 1;

        goto label3;

     label4:
        return cur#1;
    }

    android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package p;
        int flags, userId;
        com.android.server.pm.PackageSetting ps;
        com.android.server.pm.PermissionsState permissionsState;
        int[] gids;
        java.util.Set permissions;
        android.content.pm.PackageUserState state;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        java.lang.Object $r1;
        long $l0, $l1;
        android.content.pm.PackageInfo $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        p := @parameter0: android.content.pm.PackageParser$Package;

        flags := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = p.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        ps = (com.android.server.pm.PackageSetting) $r1;

        if ps != null goto label2;

        return null;

     label2:
        permissionsState = virtualinvoke ps.<com.android.server.pm.PackageSetting: com.android.server.pm.PermissionsState getPermissionsState()>();

        gids = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int[] computeGids(int)>(userId);

        permissions = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: java.util.Set getPermissions(int)>(userId);

        state = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        $l0 = ps.<com.android.server.pm.PackageSetting: long firstInstallTime>;

        $l1 = ps.<com.android.server.pm.PackageSetting: long lastUpdateTime>;

        $r2 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int)>(p, gids, flags, $l0, $l1, permissions, state, userId);

        return $r2;
    }

    public boolean isPackageFrozen(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r8;
        android.util.ArrayMap l2, $r0, $r2;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l4, $r9;
        com.android.server.pm.Settings $r1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = $r1.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r3;

        if ps == null goto label3;

        $z0 = ps.<com.android.server.pm.PackageSetting: boolean frozen>;

        exitmonitor l2;

     label2:
        return $z0;

     label3:
        exitmonitor l2;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        l4 = $r9;

        exitmonitor l2;

     label6:
        throw l4;

     label7:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is missing; assuming frozen");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r8);

        return 1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean isPackageAvailable(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int userId, $i0;
        android.util.ArrayMap l3, $r1, $r2;
        android.content.pm.PackageParser$Package p;
        com.android.server.pm.PackageSetting ps;
        android.content.pm.PackageUserState state;
        java.lang.Throwable l7, $r5;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1;
        java.lang.Object $r3, $r4;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 0, 0, "is package available");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r1;

        entermonitor $r1;

     label2:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        p = (android.content.pm.PackageParser$Package) $r3;

        if p == null goto label4;

        $r4 = p.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        ps = (com.android.server.pm.PackageSetting) $r4;

        if ps == null goto label4;

        state = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        if state == null goto label4;

        $z1 = staticinvoke <android.content.pm.PackageParser: boolean isAvailable(android.content.pm.PackageUserState)>(state);

        exitmonitor l3;

     label3:
        return $z1;

     label4:
        exitmonitor l3;

     label5:
        goto label8;

     label6:
        $r5 := @caughtexception;

        l7 = $r5;

        exitmonitor l3;

     label7:
        throw l7;

     label8:
        return 0;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.content.pm.PackageInfo getPackageInfo(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int flags, userId, $i0, $i1;
        android.util.ArrayMap l4, $r1, $r2;
        android.content.pm.PackageParser$Package p;
        java.lang.Throwable l6, $r6;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        java.lang.Object $r3;
        android.content.pm.PackageInfo $r4, $r5;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        flags := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 0, 0, "get package info");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label2:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        p = (android.content.pm.PackageParser$Package) $r3;

        if p == null goto label4;

        $r5 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package,int,int)>(p, 0, userId);

        exitmonitor l4;

     label3:
        return $r5;

     label4:
        $i1 = 0;

        goto label5;

     label5:
        exitmonitor l4;

     label6:
        goto label9;

     label7:
        $r6 := @caughtexception;

        l6 = $r6;

        exitmonitor l4;

     label8:
        throw l6;

     label9:
        return null;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String[] names, out;
        android.util.ArrayMap l3, $r0, $r3;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l6, $r5;
        int $i0, $i1, i#1;
        com.android.server.pm.Settings $r1;
        java.lang.String $r2, $r6, $r7;
        java.lang.Object $r4;

        this := @this: com.android.server.pm.PackageManagerService;

        names := @parameter0: java.lang.String[];

        $i0 = lengthof names;

        out = newarray (java.lang.String)[$i0];

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $i1 = lengthof names;

        i#1 = $i1 - 1;

     label2:
        if i#1 < 0 goto label5;

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r1.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r2 = names[i#1];

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r2);

        ps = (com.android.server.pm.PackageSetting) $r4;

        if ps == null goto label3;

        $r6 = ps.<com.android.server.pm.PackageSetting: java.lang.String realName>;

        if $r6 == null goto label3;

        $r7 = ps.<com.android.server.pm.PackageSetting: java.lang.String realName>;

        goto label4;

     label3:
        $r7 = names[i#1];

     label4:
        out[i#1] = $r7;

        i#1 = i#1 + -1;

        goto label2;

     label5:
        exitmonitor l3;

     label6:
        goto label9;

     label7:
        $r5 := @caughtexception;

        l6 = $r5;

        exitmonitor l3;

     label8:
        throw l6;

     label9:
        return out;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String[] names, out;
        android.util.ArrayMap l3, $r0, $r3;
        java.lang.String cur, $r2, $r6;
        java.lang.Throwable l6, $r5;
        int $i0, $i1, i#1;
        com.android.server.pm.Settings $r1;
        java.lang.Object $r4;

        this := @this: com.android.server.pm.PackageManagerService;

        names := @parameter0: java.lang.String[];

        $i0 = lengthof names;

        out = newarray (java.lang.String)[$i0];

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $i1 = lengthof names;

        i#1 = $i1 - 1;

     label2:
        if i#1 < 0 goto label5;

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r1.<com.android.server.pm.Settings: android.util.ArrayMap mRenamedPackages>;

        $r2 = names[i#1];

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r2);

        cur = (java.lang.String) $r4;

        if cur == null goto label3;

        $r6 = cur;

        goto label4;

     label3:
        $r6 = names[i#1];

     label4:
        out[i#1] = $r6;

        i#1 = i#1 + -1;

        goto label2;

     label5:
        exitmonitor l3;

     label6:
        goto label9;

     label7:
        $r5 := @caughtexception;

        l6 = $r5;

        exitmonitor l3;

     label8:
        throw l6;

     label9:
        return out;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int getPackageUid(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int userId, $i0, $i1, $i2, $i3, $i4;
        android.util.ArrayMap l3, $r1, $r2, $r5;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l6, $r12;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        java.lang.Object $r3, $r6;
        com.android.server.pm.Settings $r4;
        android.content.pm.PackageParser$Package $r7, $r9, p#1, p#2;
        android.content.pm.ApplicationInfo $r8, $r10, $r11;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return -1;

     label01:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 0, 0, "get package uid");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r1;

        entermonitor $r1;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        p#1 = (android.content.pm.PackageParser$Package) $r3;

        if p#1 == null goto label04;

        $r11 = p#1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r11.<android.content.pm.ApplicationInfo: int uid>;

        $i3 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(userId, $i2);

        exitmonitor l3;

     label03:
        return $i3;

     label04:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r6;

        if ps == null goto label05;

        $r7 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r7 == null goto label05;

        $r9 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r8 = $r9.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        if $r8 != null goto label07;

     label05:
        exitmonitor l3;

     label06:
        return -1;

     label07:
        p#2 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if p#2 == null goto label08;

        $r10 = p#2.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r10.<android.content.pm.ApplicationInfo: int uid>;

        $i4 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(userId, $i1);

        goto label09;

     label08:
        $i4 = -1;

     label09:
        exitmonitor l3;

     label10:
        return $i4;

     label11:
        $r12 := @caughtexception;

        l6 = $r12;

        exitmonitor l3;

     label12:
        throw l6;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label06 with label11;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public int[] getPackageGids(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int userId, $i0;
        android.util.ArrayMap l3, $r1, $r2;
        android.content.pm.PackageParser$Package p;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l6, $r7;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        java.lang.Object $r3, $r4;
        com.android.server.pm.PermissionsState $r5;
        int[] $r6;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 0, 0, "getPackageGids");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r1;

        entermonitor $r1;

     label2:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        p = (android.content.pm.PackageParser$Package) $r3;

        if p == null goto label4;

        $r4 = p.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        ps = (com.android.server.pm.PackageSetting) $r4;

        $r5 = virtualinvoke ps.<com.android.server.pm.PackageSetting: com.android.server.pm.PermissionsState getPermissionsState()>();

        $r6 = virtualinvoke $r5.<com.android.server.pm.PermissionsState: int[] computeGids(int)>(userId);

        exitmonitor l3;

     label3:
        return $r6;

     label4:
        exitmonitor l3;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        l6 = $r7;

        exitmonitor l3;

     label7:
        throw l6;

     label8:
        return null;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    static android.content.pm.PermissionInfo generatePermissionInfo(com.android.server.pm.BasePermission, int)
    {
        com.android.server.pm.BasePermission bp;
        int flags, $i0;
        android.content.pm.PermissionInfo pi, $r1, $r6;
        android.content.pm.PackageParser$Permission $r0, $r5;
        java.lang.String $r2, $r3, $r4;

        bp := @parameter0: com.android.server.pm.BasePermission;

        flags := @parameter1: int;

        $r0 = bp.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        if $r0 == null goto label1;

        $r5 = bp.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r6 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PermissionInfo generatePermissionInfo(android.content.pm.PackageParser$Permission,int)>($r5, flags);

        return $r6;

     label1:
        $r1 = new android.content.pm.PermissionInfo;

        specialinvoke $r1.<android.content.pm.PermissionInfo: void <init>()>();

        pi = $r1;

        $r2 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        pi.<android.content.pm.PermissionInfo: java.lang.String name> = $r2;

        $r3 = bp.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        pi.<android.content.pm.PermissionInfo: java.lang.String packageName> = $r3;

        $r4 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        pi.<android.content.pm.PermissionInfo: java.lang.CharSequence nonLocalizedLabel> = $r4;

        $i0 = bp.<com.android.server.pm.BasePermission: int protectionLevel>;

        pi.<android.content.pm.PermissionInfo: int protectionLevel> = $i0;

        return pi;
    }

    public android.content.pm.PermissionInfo getPermissionInfo(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String name;
        int flags;
        android.util.ArrayMap l3, $r0, $r2;
        com.android.server.pm.BasePermission p;
        java.lang.Throwable l5, $r5;
        com.android.server.pm.Settings $r1;
        java.lang.Object $r3;
        android.content.pm.PermissionInfo $r4;

        this := @this: com.android.server.pm.PackageManagerService;

        name := @parameter0: java.lang.String;

        flags := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = $r1.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(name);

        p = (com.android.server.pm.BasePermission) $r3;

        if p == null goto label3;

        $r4 = staticinvoke <com.android.server.pm.PackageManagerService: android.content.pm.PermissionInfo generatePermissionInfo(com.android.server.pm.BasePermission,int)>(p, flags);

        exitmonitor l3;

     label2:
        return $r4;

     label3:
        exitmonitor l3;

     label4:
        return null;

     label5:
        $r5 := @caughtexception;

        l5 = $r5;

        exitmonitor l3;

     label6:
        throw l5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.List queryPermissionsByGroup(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String group, $r9, $r16;
        int flags, $i0;
        android.util.ArrayMap l3, $r0, $r3, $r5;
        java.util.ArrayList out, $r19, tmp$272757319;
        java.util.Iterator i$;
        com.android.server.pm.BasePermission p;
        java.lang.Throwable l7, $r18;
        com.android.server.pm.Settings $r2;
        java.util.Collection $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6;
        android.content.pm.PackageParser$Permission $r7, $r8, $r11, $r14, $r17;
        android.content.pm.PermissionInfo $r10, $r12, $r13, $r15;
        java.util.List tmp$1941429280, tmp$703472209;

        this := @this: com.android.server.pm.PackageManagerService;

        group := @parameter0: java.lang.String;

        flags := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label01:
        tmp$272757319 = new java.util.ArrayList;

        specialinvoke tmp$272757319.<java.util.ArrayList: void <init>(int)>(10);

        out = tmp$272757319;

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.util.Collection values()>();

        i$ = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r6 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        p = (com.android.server.pm.BasePermission) $r6;

        if group != null goto label04;

        $r14 = p.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        if $r14 == null goto label03;

        $r17 = p.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r15 = $r17.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r16 = $r15.<android.content.pm.PermissionInfo: java.lang.String group>;

        if $r16 != null goto label05;

     label03:
        $r13 = staticinvoke <com.android.server.pm.PackageManagerService: android.content.pm.PermissionInfo generatePermissionInfo(com.android.server.pm.BasePermission,int)>(p, flags);

        virtualinvoke out.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        goto label05;

     label04:
        $r8 = p.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        if $r8 == null goto label05;

        $r7 = p.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r10 = $r7.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r9 = $r10.<android.content.pm.PermissionInfo: java.lang.String group>;

        $z2 = virtualinvoke group.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label05;

        $r11 = p.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r12 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PermissionInfo generatePermissionInfo(android.content.pm.PackageParser$Permission,int)>($r11, flags);

        virtualinvoke out.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label05:
        goto label02;

     label06:
        $i0 = virtualinvoke out.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label08;

        exitmonitor l3;

     label07:
        tmp$1941429280 = (java.util.List) out;

        return tmp$1941429280;

     label08:
        $r5 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPermissionGroups>;

        $z1 = virtualinvoke $r5.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(group);

        if $z1 == 0 goto label09;

        $r19 = out;

        goto label10;

     label09:
        $r19 = null;

     label10:
        exitmonitor l3;

     label11:
        tmp$703472209 = (java.util.List) $r19;

        return tmp$703472209;

     label12:
        $r18 := @caughtexception;

        l7 = $r18;

        exitmonitor l3;

     label13:
        throw l7;

        catch java.lang.Throwable from label01 to label07 with label12;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String name;
        int flags;
        android.util.ArrayMap l3, $r0, $r1;
        java.lang.Throwable l4, $r5;
        java.lang.Object $r2;
        android.content.pm.PackageParser$PermissionGroup $r3;
        android.content.pm.PermissionGroupInfo $r4;

        this := @this: com.android.server.pm.PackageManagerService;

        name := @parameter0: java.lang.String;

        flags := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPermissionGroups>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(name);

        $r3 = (android.content.pm.PackageParser$PermissionGroup) $r2;

        $r4 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PermissionGroupInfo generatePermissionGroupInfo(android.content.pm.PackageParser$PermissionGroup,int)>($r3, flags);

        exitmonitor l3;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        l4 = $r5;

        exitmonitor l3;

     label4:
        throw l4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List getAllPermissionGroups(int)
    {
        com.android.server.pm.PackageManagerService this;
        int flags, N;
        android.util.ArrayMap l2, $r0, $r1, $r3;
        java.util.ArrayList out, tmp$864659814;
        java.util.Iterator i$;
        android.content.pm.PackageParser$PermissionGroup pg;
        java.lang.Throwable l7, $r7;
        java.util.Collection $r4;
        boolean $z0;
        java.lang.Object $r5;
        android.content.pm.PermissionGroupInfo $r6;
        java.util.List tmp$744248043;

        this := @this: com.android.server.pm.PackageManagerService;

        flags := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPermissionGroups>;

        N = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        tmp$864659814 = new java.util.ArrayList;

        specialinvoke tmp$864659814.<java.util.ArrayList: void <init>(int)>(N);

        out = tmp$864659814;

        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPermissionGroups>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.util.Collection values()>();

        i$ = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        pg = (android.content.pm.PackageParser$PermissionGroup) $r5;

        $r6 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PermissionGroupInfo generatePermissionGroupInfo(android.content.pm.PackageParser$PermissionGroup,int)>(pg, flags);

        virtualinvoke out.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        goto label2;

     label3:
        exitmonitor l2;

     label4:
        tmp$744248043 = (java.util.List) out;

        return tmp$744248043;

     label5:
        $r7 := @caughtexception;

        l7 = $r7;

        exitmonitor l2;

     label6:
        throw l7;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private android.content.pm.ApplicationInfo generateApplicationInfoFromSettingsLPw(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int flags, userId;
        com.android.server.pm.PackageSetting ps;
        android.content.pm.PackageInfo pInfo;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        com.android.server.pm.Settings $r1;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;
        android.content.pm.PackageParser$Package $r4, $r5;
        android.content.pm.PackageUserState $r6;
        android.content.pm.ApplicationInfo $r7, $r8;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        flags := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = $r1.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r3;

        if ps == null goto label4;

        $r4 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r4 != null goto label3;

        pInfo = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfoFromSettingsLPw(java.lang.String,int,int)>(packageName, flags, userId);

        if pInfo == null goto label2;

        $r8 = pInfo.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        return $r8;

     label2:
        return null;

     label3:
        $r5 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r6 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        $r7 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.PackageParser$Package,int,android.content.pm.PackageUserState,int)>($r5, flags, $r6, userId);

        return $r7;

     label4:
        return null;
    }

    private android.content.pm.PackageInfo generatePackageInfoFromSettingsLPw(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r10, $r11, $r14, $r16;
        int flags, userId, $i0, $i1, $i2, $i3;
        com.android.server.pm.PackageSetting ps;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        com.android.server.pm.Settings $r1;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;
        android.content.pm.PackageInfo $r4;
        android.content.pm.PackageParser$Package $r5, pkg#1;
        android.content.pm.ApplicationInfo $r6, $r7, $r8, $r9, $r13, $r15;
        java.io.File $r12;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        flags := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = $r1.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r3;

        if ps == null goto label3;

        pkg#1 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if pkg#1 != null goto label2;

        $i0 = 0;

        return null;

     label2:
        $r4 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package,int,int)>(pkg#1, 0, userId);

        return $r4;

     label3:
        return null;
    }

    public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r4, $r6;
        int flags, userId, $i0, $i1;
        android.util.ArrayMap l4, $r1, $r2, $r8;
        android.content.pm.PackageParser$Package p;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l7, $r13;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r11;
        android.content.pm.ApplicationInfo $r5, $r7, $r12;
        com.android.server.pm.Settings $r9;
        android.content.pm.PackageUserState $r10;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        flags := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 0, 0, "get application info");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        p = (android.content.pm.PackageParser$Package) $r3;

        if p == null goto label06;

        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r9.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r11 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r11;

        if ps != null goto label04;

        exitmonitor l4;

     label03:
        return null;

     label04:
        $r10 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        $r12 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.PackageParser$Package,int,android.content.pm.PackageUserState,int)>(p, flags, $r10, userId);

        exitmonitor l4;

     label05:
        return $r12;

     label06:
        $r4 = "android";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(packageName);

        if $z1 != 0 goto label07;

        $r6 = "system";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(packageName);

        if $z2 == 0 goto label09;

     label07:
        $r5 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        exitmonitor l4;

     label08:
        return $r5;

     label09:
        $i1 = flags & 8192;

        if $i1 == 0 goto label11;

        $r7 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo generateApplicationInfoFromSettingsLPw(java.lang.String,int,int)>(packageName, flags, userId);

        exitmonitor l4;

     label10:
        return $r7;

     label11:
        exitmonitor l4;

     label12:
        goto label15;

     label13:
        $r13 := @caughtexception;

        l7 = $r13;

        exitmonitor l4;

     label14:
        throw l7;

     label15:
        return null;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void freeStorageAndNotify(java.lang.String, long, android.content.pm.IPackageDataObserver)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String volumeUuid;
        long freeStorageSize;
        android.content.pm.IPackageDataObserver observer;
        android.content.Context $r0;
        com.android.server.pm.PackageManagerService$2 $r1;
        com.android.server.pm.PackageManagerService$PackageHandler $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        volumeUuid := @parameter0: java.lang.String;

        freeStorageSize := @parameter1: long;

        observer := @parameter2: android.content.pm.IPackageDataObserver;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CLEAR_APP_CACHE", null);

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r1 = new com.android.server.pm.PackageManagerService$2;

        specialinvoke $r1.<com.android.server.pm.PackageManagerService$2: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,long,android.content.pm.IPackageDataObserver)>(this, volumeUuid, freeStorageSize, observer);

        virtualinvoke $r2.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public void freeStorage(java.lang.String, long, android.content.IntentSender)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String volumeUuid;
        long freeStorageSize;
        android.content.IntentSender pi;
        android.content.Context $r0;
        com.android.server.pm.PackageManagerService$3 $r1;
        com.android.server.pm.PackageManagerService$PackageHandler $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        volumeUuid := @parameter0: java.lang.String;

        freeStorageSize := @parameter1: long;

        pi := @parameter2: android.content.IntentSender;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CLEAR_APP_CACHE", null);

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r1 = new com.android.server.pm.PackageManagerService$3;

        specialinvoke $r1.<com.android.server.pm.PackageManagerService$3: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,long,android.content.IntentSender)>(this, volumeUuid, freeStorageSize, pi);

        virtualinvoke $r2.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    void freeStorage(java.lang.String, long) throws java.io.IOException
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String volumeUuid;
        long freeStorageSize;
        java.lang.Object l4, $r0;
        java.lang.Throwable l5, $r3;
        com.android.server.pm.Installer $r1;
        int $i0;
        java.io.IOException $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        volumeUuid := @parameter0: java.lang.String;

        freeStorageSize := @parameter1: long;

        $r0 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l4 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $i0 = virtualinvoke $r1.<com.android.server.pm.Installer: int freeCache(java.lang.String,long)>(volumeUuid, freeStorageSize);

        if $i0 >= 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Failed to free enough space");

        throw $r2;

     label2:
        exitmonitor l4;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        l5 = $r3;

        exitmonitor l4;

     label5:
        throw l5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.ComponentName component, $r5;
        int flags, userId, $i0;
        android.util.ArrayMap l4, $r1, $r3, $r13;
        android.content.pm.PackageParser$Activity a;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l7, $r17;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1, $z2;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r2;
        java.lang.Object $r4, $r15;
        android.content.pm.ActivityInfo $r6, $r8, $r10, $r16;
        android.content.pm.PackageUserState $r7, $r14;
        com.android.server.pm.Settings $r9, $r11;
        java.lang.String $r12;

        this := @this: com.android.server.pm.PackageManagerService;

        component := @parameter0: android.content.ComponentName;

        flags := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 0, 0, "get activity info");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities>;

        $r3 = staticinvoke <com.android.server.pm.PackageManagerService$ActivityIntentResolver: android.util.ArrayMap access$2600(com.android.server.pm.PackageManagerService$ActivityIntentResolver)>($r2);

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(component);

        a = (android.content.pm.PackageParser$Activity) $r4;

        if a == null goto label06;

        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r10 = a.<android.content.pm.PackageParser$Activity: android.content.pm.ActivityInfo info>;

        $z2 = virtualinvoke $r9.<com.android.server.pm.Settings: boolean isEnabledLPr(android.content.pm.ComponentInfo,int,int)>($r10, flags, userId);

        if $z2 == 0 goto label06;

        $r11 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r13 = $r11.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r12 = virtualinvoke component.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r15 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r12);

        ps = (com.android.server.pm.PackageSetting) $r15;

        if ps != null goto label04;

        exitmonitor l4;

     label03:
        return null;

     label04:
        $r14 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        $r16 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.PackageParser$Activity,int,android.content.pm.PackageUserState,int)>(a, flags, $r14, userId);

        exitmonitor l4;

     label05:
        return $r16;

     label06:
        $r5 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mResolveComponentName>;

        $z1 = virtualinvoke $r5.<android.content.ComponentName: boolean equals(java.lang.Object)>(component);

        if $z1 == 0 goto label08;

        $r6 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r7 = new android.content.pm.PackageUserState;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r7.<android.content.pm.PackageUserState: void <init>()>();

        $r8 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.ActivityInfo,int,android.content.pm.PackageUserState,int)>($r6, flags, $r7, userId);

        exitmonitor l4;

     label07:
        return $r8;

     label08:
        exitmonitor l4;

     label09:
        goto label12;

     label10:
        $r17 := @caughtexception;

        l7 = $r17;

        exitmonitor l4;

     label11:
        throw l7;

     label12:
        return null;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public boolean activitySupportsIntent(android.content.ComponentName, android.content.Intent, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.ComponentName component, $r1;
        android.content.Intent intent;
        java.lang.String resolvedType, $r9, $r10;
        android.util.ArrayMap l4, $r0, $r3;
        android.content.pm.PackageParser$Activity a;
        java.lang.Throwable l7, $r13;
        boolean $z0;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r2;
        java.lang.Object $r4, $r8;
        java.util.ArrayList $r5, $r6;
        int $i0, $i1, i#1;
        android.content.pm.PackageParser$ActivityIntentInfo $r7;
        java.util.Set $r11;
        android.net.Uri $r12;

        this := @this: com.android.server.pm.PackageManagerService;

        component := @parameter0: android.content.ComponentName;

        intent := @parameter1: android.content.Intent;

        resolvedType := @parameter2: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mResolveComponentName>;

        $z0 = virtualinvoke component.<android.content.ComponentName: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label03;

        exitmonitor l4;

     label02:
        return 1;

     label03:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities>;

        $r3 = staticinvoke <com.android.server.pm.PackageManagerService$ActivityIntentResolver: android.util.ArrayMap access$2600(com.android.server.pm.PackageManagerService$ActivityIntentResolver)>($r2);

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(component);

        a = (android.content.pm.PackageParser$Activity) $r4;

        if a != null goto label05;

        exitmonitor l4;

     label04:
        return 0;

     label05:
        i#1 = 0;

     label06:
        $r5 = a.<android.content.pm.PackageParser$Activity: java.util.ArrayList intents>;

        $i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if i#1 >= $i0 goto label09;

        $r6 = a.<android.content.pm.PackageParser$Activity: java.util.ArrayList intents>;

        $r8 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i#1);

        $r7 = (android.content.pm.PackageParser$ActivityIntentInfo) $r8;

        $r10 = virtualinvoke intent.<android.content.Intent: java.lang.String getAction()>();

        $r9 = virtualinvoke intent.<android.content.Intent: java.lang.String getScheme()>();

        $r12 = virtualinvoke intent.<android.content.Intent: android.net.Uri getData()>();

        $r11 = virtualinvoke intent.<android.content.Intent: java.util.Set getCategories()>();

        $i1 = virtualinvoke $r7.<android.content.pm.PackageParser$ActivityIntentInfo: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>($r10, resolvedType, $r9, $r12, $r11, "PackageManager");

        if $i1 < 0 goto label08;

        exitmonitor l4;

     label07:
        return 1;

     label08:
        i#1 = i#1 + 1;

        goto label06;

     label09:
        exitmonitor l4;

     label10:
        return 0;

     label11:
        $r13 := @caughtexception;

        l7 = $r13;

        exitmonitor l4;

     label12:
        throw l7;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label08 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.ComponentName component;
        int flags, userId, $i0;
        android.util.ArrayMap l4, $r1, $r3, $r9;
        android.content.pm.PackageParser$Activity a;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l7, $r13;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r2;
        java.lang.Object $r4, $r11;
        com.android.server.pm.Settings $r5, $r7;
        android.content.pm.ActivityInfo $r6, $r12;
        java.lang.String $r8;
        android.content.pm.PackageUserState $r10;

        this := @this: com.android.server.pm.PackageManagerService;

        component := @parameter0: android.content.ComponentName;

        flags := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(0);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, 0, 0, 0, "get receiver info");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mReceivers>;

        $r3 = staticinvoke <com.android.server.pm.PackageManagerService$ActivityIntentResolver: android.util.ArrayMap access$2600(com.android.server.pm.PackageManagerService$ActivityIntentResolver)>($r2);

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(component);

        a = (android.content.pm.PackageParser$Activity) $r4;

        if a == null goto label06;

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = a.<android.content.pm.PackageParser$Activity: android.content.pm.ActivityInfo info>;

        $z1 = virtualinvoke $r5.<com.android.server.pm.Settings: boolean isEnabledLPr(android.content.pm.ComponentInfo,int,int)>($r6, 512, 0);

        if $z1 == 0 goto label06;

        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke component.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r11 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r8);

        ps = (com.android.server.pm.PackageSetting) $r11;

        if ps != null goto label04;

        exitmonitor l4;

     label03:
        return null;

     label04:
        $r10 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(0);

        $r12 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.PackageParser$Activity,int,android.content.pm.PackageUserState,int)>(a, 512, $r10, 0);

        exitmonitor l4;

     label05:
        return $r12;

     label06:
        exitmonitor l4;

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        l7 = $r13;

        exitmonitor l4;

     label09:
        throw l7;

     label10:
        return null;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.ComponentName component;
        int flags, userId, $i0;
        android.util.ArrayMap l4, $r1, $r3, $r9;
        android.content.pm.PackageParser$Service s;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l7, $r13;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerService$ServiceIntentResolver $r2;
        java.lang.Object $r4, $r11;
        com.android.server.pm.Settings $r5, $r7;
        android.content.pm.ServiceInfo $r6, $r12;
        java.lang.String $r8;
        android.content.pm.PackageUserState $r10;

        this := @this: com.android.server.pm.PackageManagerService;

        component := @parameter0: android.content.ComponentName;

        flags := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 0, 0, "get service info");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ServiceIntentResolver mServices>;

        $r3 = staticinvoke <com.android.server.pm.PackageManagerService$ServiceIntentResolver: android.util.ArrayMap access$2700(com.android.server.pm.PackageManagerService$ServiceIntentResolver)>($r2);

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(component);

        s = (android.content.pm.PackageParser$Service) $r4;

        if s == null goto label06;

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = s.<android.content.pm.PackageParser$Service: android.content.pm.ServiceInfo info>;

        $z1 = virtualinvoke $r5.<com.android.server.pm.Settings: boolean isEnabledLPr(android.content.pm.ComponentInfo,int,int)>($r6, flags, userId);

        if $z1 == 0 goto label06;

        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke component.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r11 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r8);

        ps = (com.android.server.pm.PackageSetting) $r11;

        if ps != null goto label04;

        exitmonitor l4;

     label03:
        return null;

     label04:
        $r10 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        $r12 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ServiceInfo generateServiceInfo(android.content.pm.PackageParser$Service,int,android.content.pm.PackageUserState,int)>(s, flags, $r10, userId);

        exitmonitor l4;

     label05:
        return $r12;

     label06:
        exitmonitor l4;

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        l7 = $r13;

        exitmonitor l4;

     label09:
        throw l7;

     label10:
        return null;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.ComponentName component;
        int flags, userId, $i0;
        android.util.ArrayMap l4, $r1, $r3, $r9;
        android.content.pm.PackageParser$Provider p;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l7, $r13;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerService$ProviderIntentResolver $r2;
        java.lang.Object $r4, $r11;
        com.android.server.pm.Settings $r5, $r7;
        android.content.pm.ProviderInfo $r6, $r12;
        java.lang.String $r8;
        android.content.pm.PackageUserState $r10;

        this := @this: com.android.server.pm.PackageManagerService;

        component := @parameter0: android.content.ComponentName;

        flags := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 0, 0, "get provider info");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ProviderIntentResolver mProviders>;

        $r3 = staticinvoke <com.android.server.pm.PackageManagerService$ProviderIntentResolver: android.util.ArrayMap access$2800(com.android.server.pm.PackageManagerService$ProviderIntentResolver)>($r2);

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(component);

        p = (android.content.pm.PackageParser$Provider) $r4;

        if p == null goto label06;

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = p.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $z1 = virtualinvoke $r5.<com.android.server.pm.Settings: boolean isEnabledLPr(android.content.pm.ComponentInfo,int,int)>($r6, flags, userId);

        if $z1 == 0 goto label06;

        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke component.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r11 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r8);

        ps = (com.android.server.pm.PackageSetting) $r11;

        if ps != null goto label04;

        exitmonitor l4;

     label03:
        return null;

     label04:
        $r10 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        $r12 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ProviderInfo generateProviderInfo(android.content.pm.PackageParser$Provider,int,android.content.pm.PackageUserState,int)>(p, flags, $r10, userId);

        exitmonitor l4;

     label05:
        return $r12;

     label06:
        exitmonitor l4;

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        l7 = $r13;

        exitmonitor l4;

     label09:
        throw l7;

     label10:
        return null;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public java.lang.String[] getSystemSharedLibraryNames()
    {
        com.android.server.pm.PackageManagerService this;
        java.util.Set libSet;
        android.util.ArrayMap l2, $r0, $r1;
        int size;
        java.lang.String[] libs;
        java.lang.Throwable l5, $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        libSet = virtualinvoke $r1.<android.util.ArrayMap: java.util.Set keySet()>();

        size = interfaceinvoke libSet.<java.util.Set: int size()>();

        if size <= 0 goto label3;

        libs = newarray (java.lang.String)[size];

        interfaceinvoke libSet.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(libs);

        exitmonitor l2;

     label2:
        return libs;

     label3:
        exitmonitor l2;

     label4:
        goto label7;

     label5:
        $r3 := @caughtexception;

        l5 = $r3;

        exitmonitor l2;

     label6:
        throw l5;

     label7:
        return null;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    android.content.pm.PackageParser$Package findSharedNonSystemLibrary(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String libName, $r3, $r4;
        android.util.ArrayMap l2, $r0, $r1, $r5;
        com.android.server.pm.PackageManagerService$SharedLibraryEntry lib;
        java.lang.Throwable l4, $r8;
        java.lang.Object $r2, $r6;
        android.content.pm.PackageParser$Package $r7;

        this := @this: com.android.server.pm.PackageManagerService;

        libName := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(libName);

        lib = (com.android.server.pm.PackageManagerService$SharedLibraryEntry) $r2;

        if lib == null goto label3;

        $r3 = lib.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String apk>;

        if $r3 == null goto label3;

        $r5 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = lib.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String apk>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r4);

        $r7 = (android.content.pm.PackageParser$Package) $r6;

        exitmonitor l2;

     label2:
        return $r7;

     label3:
        exitmonitor l2;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        l4 = $r8;

        exitmonitor l2;

     label6:
        throw l4;

     label7:
        return null;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.content.pm.FeatureInfo[] getSystemAvailableFeatures()
    {
        com.android.server.pm.PackageManagerService this;
        java.util.Collection featSet;
        android.util.ArrayMap l2, $r0, $r1;
        int size, $i0, $i1;
        android.content.pm.FeatureInfo[] features;
        android.content.pm.FeatureInfo fi, $r3;
        java.lang.Throwable l6, $r4;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        featSet = virtualinvoke $r1.<android.util.ArrayMap: java.util.Collection values()>();

        size = interfaceinvoke featSet.<java.util.Collection: int size()>();

        if size <= 0 goto label3;

        $i0 = size + 1;

        features = newarray (android.content.pm.FeatureInfo)[$i0];

        interfaceinvoke featSet.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(features);

        $r3 = new android.content.pm.FeatureInfo;

        specialinvoke $r3.<android.content.pm.FeatureInfo: void <init>()>();

        fi = $r3;

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.opengles.version", 0);

        fi.<android.content.pm.FeatureInfo: int reqGlEsVersion> = $i1;

        features[size] = fi;

        exitmonitor l2;

     label2:
        return features;

     label3:
        exitmonitor l2;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        l6 = $r4;

        exitmonitor l2;

     label6:
        throw l6;

     label7:
        return null;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean hasSystemFeature(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String name;
        android.util.ArrayMap l2, $r0, $r1;
        java.lang.Throwable l3, $r2;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        name := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        $z0 = virtualinvoke $r1.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(name);

        exitmonitor l2;

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        l3 = $r2;

        exitmonitor l2;

     label4:
        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void checkValidCaller(int, int)
    {
        com.android.server.pm.PackageManagerService this;
        int uid, userId, $i0;
        java.lang.SecurityException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        this := @this: com.android.server.pm.PackageManagerService;

        uid := @parameter0: int;

        userId := @parameter1: int;

        $i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(uid);

        if $i0 == userId goto label1;

        if uid == 1000 goto label1;

        if uid != 0 goto label2;

     label1:
        return;

     label2:
        $r0 = new java.lang.SecurityException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller uid=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(uid);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not privileged to communicate with user=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public int checkPermission(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String permName, pkgName, $r6;
        int userId;
        android.util.ArrayMap l4, $r1, $r2;
        android.content.pm.PackageParser$Package p;
        com.android.server.pm.PackageSetting ps;
        com.android.server.pm.PermissionsState permissionsState;
        java.lang.Throwable l8, $r7;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r3, $r4, $r5;

        this := @this: com.android.server.pm.PackageManagerService;

        permName := @parameter0: java.lang.String;

        pkgName := @parameter1: java.lang.String;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(0);

        if $z0 != 0 goto label01;

        return -1;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(pkgName);

        p = (android.content.pm.PackageParser$Package) $r3;

        if p == null goto label06;

        $r4 = p.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        if $r4 == null goto label06;

        $r5 = p.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        ps = (com.android.server.pm.PackageSetting) $r5;

        permissionsState = virtualinvoke ps.<com.android.server.pm.PackageSetting: com.android.server.pm.PermissionsState getPermissionsState()>();

        $z1 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: boolean hasPermission(java.lang.String,int)>(permName, 0);

        if $z1 == 0 goto label04;

        exitmonitor l4;

     label03:
        return 0;

     label04:
        $r6 = "android.permission.ACCESS_COARSE_LOCATION";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(permName);

        if $z3 == 0 goto label06;

        $z2 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: boolean hasPermission(java.lang.String,int)>("android.permission.ACCESS_FINE_LOCATION", 0);

        if $z2 == 0 goto label06;

        exitmonitor l4;

     label05:
        return 0;

     label06:
        exitmonitor l4;

     label07:
        goto label10;

     label08:
        $r7 := @caughtexception;

        l8 = $r7;

        exitmonitor l4;

     label09:
        throw l8;

     label10:
        return -1;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public int checkUidPermission(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String permName, $r5, $r6;
        int uid, userId, $i0;
        android.util.ArrayMap l4, $r1;
        java.lang.Object obj, $r3;
        com.android.server.pm.PermissionsState permissionsState;
        java.lang.Throwable l8, $r7;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.pm.Settings $r2;
        android.util.SparseArray $r4;
        com.android.server.pm.SettingBase ps#1;
        android.util.ArraySet ps#2;

        this := @this: com.android.server.pm.PackageManagerService;

        permName := @parameter0: java.lang.String;

        uid := @parameter1: int;

        userId = staticinvoke <android.os.UserHandle: int getUserId(int)>(uid);

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return -1;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i0 = staticinvoke <android.os.UserHandle: int getAppId(int)>(uid);

        obj = virtualinvoke $r2.<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>($i0);

        if obj == null goto label07;

        ps#1 = (com.android.server.pm.SettingBase) obj;

        permissionsState = virtualinvoke ps#1.<com.android.server.pm.SettingBase: com.android.server.pm.PermissionsState getPermissionsState()>();

        $z4 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: boolean hasPermission(java.lang.String,int)>(permName, userId);

        if $z4 == 0 goto label04;

        exitmonitor l4;

     label03:
        return 0;

     label04:
        $r6 = "android.permission.ACCESS_COARSE_LOCATION";

        $z6 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(permName);

        if $z6 == 0 goto label06;

        $z5 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: boolean hasPermission(java.lang.String,int)>("android.permission.ACCESS_FINE_LOCATION", userId);

        if $z5 == 0 goto label06;

        exitmonitor l4;

     label05:
        return 0;

     label06:
        goto label11;

     label07:
        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.SparseArray mSystemPermissions>;

        $r3 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(uid);

        ps#2 = (android.util.ArraySet) $r3;

        if ps#2 == null goto label11;

        $z1 = virtualinvoke ps#2.<android.util.ArraySet: boolean contains(java.lang.Object)>(permName);

        if $z1 == 0 goto label09;

        exitmonitor l4;

     label08:
        return 0;

     label09:
        $r5 = "android.permission.ACCESS_COARSE_LOCATION";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(permName);

        if $z2 == 0 goto label11;

        $z3 = virtualinvoke ps#2.<android.util.ArraySet: boolean contains(java.lang.Object)>("android.permission.ACCESS_FINE_LOCATION");

        if $z3 == 0 goto label11;

        exitmonitor l4;

     label10:
        return 0;

     label11:
        exitmonitor l4;

     label12:
        goto label15;

     label13:
        $r7 := @caughtexception;

        l8 = $r7;

        exitmonitor l4;

     label14:
        throw l8;

     label15:
        return -1;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public boolean isPermissionRevokedByPolicy(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String permission, packageName, $r5;
        int userId, flags, $i0, $i1, $i2;
        long identity;
        boolean l7, $z0;
        java.lang.Throwable l8, $r4;
        java.lang.StringBuilder $r0, $r2, $r3;
        android.content.Context $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        permission := @parameter0: java.lang.String;

        packageName := @parameter1: java.lang.String;

        userId := @parameter2: int;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i0 == userId goto label1;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isPermissionRevokedByPolicy for user ");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", $r5);

     label1:
        $i1 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int checkPermission(java.lang.String,java.lang.String,int)>(permission, packageName, userId);

        if $i1 != 0 goto label2;

        return 0;

     label2:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        flags = virtualinvoke this.<com.android.server.pm.PackageManagerService: int getPermissionFlags(java.lang.String,java.lang.String,int)>(permission, packageName, userId);

        $i2 = flags & 4;

        if $i2 == 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        l7 = $z0;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return l7;

     label7:
        $r4 := @caughtexception;

        l8 = $r4;

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l8;

        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.lang.String getPermissionControllerPackageName()
    {
        com.android.server.pm.PackageManagerService this;
        android.util.ArrayMap l1, $r0;
        java.lang.Throwable l2, $r2;
        java.lang.String $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l1 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredInstallerPackage>;

        exitmonitor l1;

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        l2 = $r2;

        exitmonitor l1;

     label4:
        throw l2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void enforceCrossUserPermission(int, int, boolean, boolean, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        int callingUid, userId, $i0;
        boolean requireFullPermission, checkShell;
        java.lang.String message, $r6;
        java.lang.SecurityException se, $r7;
        android.content.Context $r0, $r1, $r8;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        this := @this: com.android.server.pm.PackageManagerService;

        callingUid := @parameter0: int;

        userId := @parameter1: int;

        requireFullPermission := @parameter2: boolean;

        checkShell := @parameter3: boolean;

        message := @parameter4: java.lang.String;

        if userId >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw5()>();

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid userId ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        goto label2;

     label2:
        $i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(callingUid);

        if userId != $i0 goto label3;

        return;

     label3:
        if callingUid == 1000 goto label7;

        if callingUid == 0 goto label7;

        goto label4;

     label4:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", message);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        $r8 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r8.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS", message);

     label7:
        return;

        catch java.lang.SecurityException from label4 to label5 with label6;
    }

    void enforceShellRestriction(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String restriction, $r4, $r6, $r11;
        int callingUid, userHandle;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r5, $r9, $r10, $r12;
        com.android.server.pm.UserManagerService $r7;
        boolean $z0;
        java.lang.SecurityException $r8;

        this := @this: com.android.server.pm.PackageManagerService;

        restriction := @parameter0: java.lang.String;

        callingUid := @parameter1: int;

        userHandle := @parameter2: int;

        if callingUid != 2000 goto label2;

        if userHandle < 0 goto label1;

        $r7 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r7.<com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>("no_debugging_features", userHandle);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.SecurityException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Shell does not have permission to access user ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userHandle);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label1:
        if userHandle >= 0 goto label2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to check shell permission for user ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userHandle);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t");

        $r4 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(3);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r6);

     label2:
        return;
    }

    private com.android.server.pm.BasePermission findPermissionTreeLP(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String permName, $r4, $r5, $r6;
        java.util.Iterator i$;
        com.android.server.pm.BasePermission bp;
        com.android.server.pm.Settings $r0;
        android.util.ArrayMap $r1;
        java.util.Collection $r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        int $i0, $i1, $i3;
        char $c2;

        this := @this: com.android.server.pm.PackageManagerService;

        permName := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r1 = $r0.<com.android.server.pm.Settings: android.util.ArrayMap mPermissionTrees>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.util.Collection values()>();

        i$ = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        bp = (com.android.server.pm.BasePermission) $r3;

        $r4 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        $z1 = virtualinvoke permName.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke permName.<java.lang.String: int length()>();

        $r5 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 <= $i1 goto label2;

        $r6 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        $c2 = virtualinvoke permName.<java.lang.String: char charAt(int)>($i3);

        if $c2 != 46 goto label2;

        return bp;

     label2:
        goto label1;

     label3:
        return null;
    }

    private com.android.server.pm.BasePermission checkPermissionTreeLP(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String permName, $r4, $r11, $r13;
        com.android.server.pm.BasePermission bp;
        java.lang.SecurityException $r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r12, $r14;
        int $i0, $i1, $i2, $i3, $i4;

        this := @this: com.android.server.pm.PackageManagerService;

        permName := @parameter0: java.lang.String;

        if permName == null goto label2;

        bp = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.BasePermission findPermissionTreeLP(java.lang.String)>(permName);

        if bp == null goto label2;

        $i0 = bp.<com.android.server.pm.BasePermission: int uid>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        if $i0 != $i2 goto label1;

        return bp;

     label1:
        $r5 = new java.lang.SecurityException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling uid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not allowed to add to permission tree ");

        $r11 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" owned by uid ");

        $i4 = bp.<com.android.server.pm.BasePermission: int uid>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r5;

     label2:
        $r0 = new java.lang.SecurityException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No permission tree found for ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(permName);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.SecurityException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    static boolean compareStrings(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence s1, s2;
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        s1 := @parameter0: java.lang.CharSequence;

        s2 := @parameter1: java.lang.CharSequence;

        if s1 != null goto label3;

        if s2 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        if s2 != null goto label4;

        return 0;

     label4:
        $r0 = virtualinvoke s1.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke s2.<java.lang.Object: java.lang.Class getClass()>();

        if $r0 == $r1 goto label5;

        return 0;

     label5:
        $z0 = virtualinvoke s1.<java.lang.Object: boolean equals(java.lang.Object)>(s2);

        return $z0;
    }

    static boolean comparePermissionInfos(android.content.pm.PermissionInfo, android.content.pm.PermissionInfo)
    {
        android.content.pm.PermissionInfo pi1, pi2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r0, $r1, $r4, $r5;
        boolean $z0, $z1, $z2;
        java.lang.CharSequence $r2, $r3;

        pi1 := @parameter0: android.content.pm.PermissionInfo;

        pi2 := @parameter1: android.content.pm.PermissionInfo;

        $i1 = pi1.<android.content.pm.PermissionInfo: int icon>;

        $i0 = pi2.<android.content.pm.PermissionInfo: int icon>;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        $i3 = pi1.<android.content.pm.PermissionInfo: int logo>;

        $i2 = pi2.<android.content.pm.PermissionInfo: int logo>;

        if $i3 == $i2 goto label2;

        return 0;

     label2:
        $i5 = pi1.<android.content.pm.PermissionInfo: int protectionLevel>;

        $i4 = pi2.<android.content.pm.PermissionInfo: int protectionLevel>;

        if $i5 == $i4 goto label3;

        return 0;

     label3:
        $r1 = pi1.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r0 = pi2.<android.content.pm.PermissionInfo: java.lang.String name>;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean compareStrings(java.lang.CharSequence,java.lang.CharSequence)>($r1, $r0);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $r3 = pi1.<android.content.pm.PermissionInfo: java.lang.CharSequence nonLocalizedLabel>;

        $r2 = pi2.<android.content.pm.PermissionInfo: java.lang.CharSequence nonLocalizedLabel>;

        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean compareStrings(java.lang.CharSequence,java.lang.CharSequence)>($r3, $r2);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        $r5 = pi1.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        $r4 = pi2.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        $z2 = staticinvoke <com.android.server.pm.PackageManagerService: boolean compareStrings(java.lang.CharSequence,java.lang.CharSequence)>($r5, $r4);

        if $z2 != 0 goto label6;

        return 0;

     label6:
        return 1;
    }

    int permissionInfoFootprint(android.content.pm.PermissionInfo)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PermissionInfo info;
        java.lang.String $r0;
        java.lang.CharSequence $r1, $r2, $r3, $r4;
        int $i0, $i1, size#1;

        this := @this: com.android.server.pm.PackageManagerService;

        info := @parameter0: android.content.pm.PermissionInfo;

        $r0 = info.<android.content.pm.PermissionInfo: java.lang.String name>;

        size#1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r1 = info.<android.content.pm.PermissionInfo: java.lang.CharSequence nonLocalizedLabel>;

        if $r1 == null goto label1;

        $r4 = info.<android.content.pm.PermissionInfo: java.lang.CharSequence nonLocalizedLabel>;

        $i1 = interfaceinvoke $r4.<java.lang.CharSequence: int length()>();

        size#1 = size#1 + $i1;

     label1:
        $r2 = info.<android.content.pm.PermissionInfo: java.lang.CharSequence nonLocalizedDescription>;

        if $r2 == null goto label2;

        $r3 = info.<android.content.pm.PermissionInfo: java.lang.CharSequence nonLocalizedDescription>;

        $i0 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        size#1 = size#1 + $i0;

     label2:
        return size#1;
    }

    int calculateCurrentPermissionFootprintLocked(com.android.server.pm.BasePermission)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.BasePermission tree, perm;
        java.util.Iterator i$;
        com.android.server.pm.Settings $r0;
        android.util.ArrayMap $r1;
        java.util.Collection $r2;
        boolean $z0;
        java.lang.Object $r3;
        int $i0, $i1, $i2, $i3, $i4, size#1;
        java.lang.String $r4;
        android.content.pm.PackageParser$Permission $r5;
        android.content.pm.PermissionInfo $r6;

        this := @this: com.android.server.pm.PackageManagerService;

        tree := @parameter0: com.android.server.pm.BasePermission;

        size#1 = 0;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r1 = $r0.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.util.Collection values()>();

        i$ = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        perm = (com.android.server.pm.BasePermission) $r3;

        $i1 = perm.<com.android.server.pm.BasePermission: int uid>;

        $i0 = tree.<com.android.server.pm.BasePermission: int uid>;

        if $i1 != $i0 goto label2;

        $r4 = perm.<com.android.server.pm.BasePermission: java.lang.String name>;

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r5 = perm.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r6 = $r5.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $i3 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int permissionInfoFootprint(android.content.pm.PermissionInfo)>($r6);

        $i4 = $i2 + $i3;

        size#1 = size#1 + $i4;

     label2:
        goto label1;

     label3:
        return size#1;
    }

    void enforcePermissionCapLocked(android.content.pm.PermissionInfo, com.android.server.pm.BasePermission)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PermissionInfo info;
        com.android.server.pm.BasePermission tree;
        int curTreeSize, $i0, $i1, $i2;
        java.lang.SecurityException $r0;

        this := @this: com.android.server.pm.PackageManagerService;

        info := @parameter0: android.content.pm.PermissionInfo;

        tree := @parameter1: com.android.server.pm.BasePermission;

        $i0 = tree.<com.android.server.pm.BasePermission: int uid>;

        if $i0 == 1000 goto label1;

        curTreeSize = virtualinvoke this.<com.android.server.pm.PackageManagerService: int calculateCurrentPermissionFootprintLocked(com.android.server.pm.BasePermission)>(tree);

        $i1 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int permissionInfoFootprint(android.content.pm.PermissionInfo)>(info);

        $i2 = curTreeSize + $i1;

        if $i2 <= 32768 goto label1;

        $r0 = new java.lang.SecurityException;

        specialinvoke $r0.<java.lang.SecurityException: void <init>(java.lang.String)>("Permission tree size cap exceeded");

        throw $r0;

     label1:
        return;
    }

    boolean addPermissionLocked(android.content.pm.PermissionInfo, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        boolean async, added, $z0, $z1, $z2, changed#4;
        com.android.server.pm.BasePermission tree, $r30, bp#2;
        int fixedLevel, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r0, $r2, $r13, $r15, $r26, $r29, $r31, $r35;
        com.android.server.pm.Settings $r1, $r14, $r16;
        android.util.ArrayMap $r3, $r19;
        java.lang.Object $r4;
        android.content.pm.PermissionInfo $r5, $r10, $r12, $r23, info#1, info#5;
        android.content.pm.PackageParser$Permission $r6, $r7, $r8, $r11, $r17, $r18, $r24;
        android.content.pm.PackageParser$Package $r9, $r21, $r22;
        java.lang.StringBuilder $r25, $r28, $r32;
        java.lang.SecurityException $r27, $r33;
        java.lang.CharSequence $r34;

        this := @this: com.android.server.pm.PackageManagerService;

        info#1 := @parameter0: android.content.pm.PermissionInfo;

        async := @parameter1: boolean;

        $i0 = info#1.<android.content.pm.PermissionInfo: int labelRes>;

        if $i0 != 0 goto label1;

        $r34 = info#1.<android.content.pm.PermissionInfo: java.lang.CharSequence nonLocalizedLabel>;

        if $r34 != null goto label1;

        $r33 = new java.lang.SecurityException;

        specialinvoke $r33.<java.lang.SecurityException: void <init>(java.lang.String)>("Label must be specified in permission");

        throw $r33;

     label1:
        $r0 = info#1.<android.content.pm.PermissionInfo: java.lang.String name>;

        tree = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.BasePermission checkPermissionTreeLP(java.lang.String)>($r0);

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r1.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r2 = info#1.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r2);

        bp#2 = (com.android.server.pm.BasePermission) $r4;

        if bp#2 != null goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        added = $z2;

        changed#4 = 1;

        $i1 = info#1.<android.content.pm.PermissionInfo: int protectionLevel>;

        fixedLevel = staticinvoke <android.content.pm.PermissionInfo: int fixProtectionLevel(int)>($i1);

        if added == 0 goto label4;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforcePermissionCapLocked(android.content.pm.PermissionInfo,com.android.server.pm.BasePermission)>(info#1, tree);

        $r30 = new com.android.server.pm.BasePermission;

        $r35 = info#1.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r29 = tree.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        specialinvoke $r30.<com.android.server.pm.BasePermission: void <init>(java.lang.String,java.lang.String,int)>($r35, $r29, 2);

        bp#2 = $r30;

        goto label6;

     label4:
        $i2 = bp#2.<com.android.server.pm.BasePermission: int type>;

        if $i2 == 2 goto label5;

        $r27 = new java.lang.SecurityException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to modify non-dynamic permission ");

        $r26 = info#1.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r32 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.SecurityException: void <init>(java.lang.String)>($r31);

        throw $r27;

     label5:
        $i3 = bp#2.<com.android.server.pm.BasePermission: int protectionLevel>;

        if $i3 != fixedLevel goto label6;

        $r17 = bp#2.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r22 = $r17.<android.content.pm.PackageParser$Permission: android.content.pm.PackageParser$Package owner>;

        $r18 = tree.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r21 = $r18.<android.content.pm.PackageParser$Permission: android.content.pm.PackageParser$Package owner>;

        $z0 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>($r21);

        if $z0 == 0 goto label6;

        $i6 = bp#2.<com.android.server.pm.BasePermission: int uid>;

        $i5 = tree.<com.android.server.pm.BasePermission: int uid>;

        if $i6 != $i5 goto label6;

        $r24 = bp#2.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r23 = $r24.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean comparePermissionInfos(android.content.pm.PermissionInfo,android.content.pm.PermissionInfo)>($r23, info#1);

        if $z1 == 0 goto label6;

        changed#4 = 0;

     label6:
        bp#2.<com.android.server.pm.BasePermission: int protectionLevel> = fixedLevel;

        $r5 = new android.content.pm.PermissionInfo;

        specialinvoke $r5.<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)>(info#1);

        info#5 = $r5;

        info#5.<android.content.pm.PermissionInfo: int protectionLevel> = fixedLevel;

        $r7 = new android.content.pm.PackageParser$Permission;

        $r6 = tree.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r9 = $r6.<android.content.pm.PackageParser$Permission: android.content.pm.PackageParser$Package owner>;

        specialinvoke $r7.<android.content.pm.PackageParser$Permission: void <init>(android.content.pm.PackageParser$Package,android.content.pm.PermissionInfo)>($r9, info#5);

        bp#2.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm> = $r7;

        $r8 = bp#2.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r12 = $r8.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r11 = tree.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r10 = $r11.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r13 = $r10.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        $r12.<android.content.pm.PermissionInfo: java.lang.String packageName> = $r13;

        $i4 = tree.<com.android.server.pm.BasePermission: int uid>;

        bp#2.<com.android.server.pm.BasePermission: int uid> = $i4;

        if added == 0 goto label7;

        $r16 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r19 = $r16.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r15 = info#5.<android.content.pm.PermissionInfo: java.lang.String name>;

        virtualinvoke $r19.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, bp#2);

     label7:
        if changed#4 == 0 goto label9;

        if async != 0 goto label8;

        $r14 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r14.<com.android.server.pm.Settings: void writeLPr()>();

        goto label9;

     label8:
        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>();

     label9:
        return added;
    }

    public boolean addPermission(android.content.pm.PermissionInfo)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PermissionInfo info;
        android.util.ArrayMap l2, $r0;
        java.lang.Throwable l3, $r1;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        info := @parameter0: android.content.pm.PermissionInfo;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean addPermissionLocked(android.content.pm.PermissionInfo,boolean)>(info, 0);

        exitmonitor l2;

     label2:
        return $z0;

     label3:
        $r1 := @caughtexception;

        l3 = $r1;

        exitmonitor l2;

     label4:
        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean addPermissionAsync(android.content.pm.PermissionInfo)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PermissionInfo info;
        android.util.ArrayMap l2, $r0;
        java.lang.Throwable l3, $r1;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        info := @parameter0: android.content.pm.PermissionInfo;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean addPermissionLocked(android.content.pm.PermissionInfo,boolean)>(info, 1);

        exitmonitor l2;

     label2:
        return $z0;

     label3:
        $r1 := @caughtexception;

        l3 = $r1;

        exitmonitor l2;

     label4:
        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removePermission(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String name, $r14;
        android.util.ArrayMap l2, $r0, $r3, $r6;
        com.android.server.pm.BasePermission bp;
        java.lang.Throwable l4, $r13;
        com.android.server.pm.Settings $r2, $r5, $r8;
        java.lang.Object $r4;
        int $i0;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.lang.SecurityException $r10;

        this := @this: com.android.server.pm.PackageManagerService;

        name := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.BasePermission checkPermissionTreeLP(java.lang.String)>(name);

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(name);

        bp = (com.android.server.pm.BasePermission) $r4;

        if bp == null goto label3;

        $i0 = bp.<com.android.server.pm.BasePermission: int type>;

        if $i0 == 2 goto label2;

        $r10 = new java.lang.SecurityException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to modify non-dynamic permission ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(name);

        $r8 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r8.<com.android.server.pm.Settings: void writeLPr()>();

     label3:
        exitmonitor l2;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        l4 = $r13;

        exitmonitor l2;

     label6:
        throw l4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static void enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(android.content.pm.PackageParser$Package, com.android.server.pm.BasePermission)
    {
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.BasePermission bp;
        int index;
        java.lang.String $r0, $r5, $r8, $r13, $r14, $r16;
        java.util.ArrayList $r1;
        boolean $z0, $z1;
        java.lang.SecurityException $r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r10, $r11, $r12, $r15, $r17;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        bp := @parameter1: com.android.server.pm.BasePermission;

        $r1 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        $r0 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        index = virtualinvoke $r1.<java.util.ArrayList: int indexOf(java.lang.Object)>($r0);

        if index != -1 goto label1;

        $r9 = new java.lang.SecurityException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r13 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has not requested permission ");

        $r14 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>($r16);

        throw $r9;

     label1:
        $z0 = virtualinvoke bp.<com.android.server.pm.BasePermission: boolean isRuntime()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke bp.<com.android.server.pm.BasePermission: boolean isDevelopment()>();

        if $z1 != 0 goto label2;

        $r2 = new java.lang.SecurityException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission ");

        $r5 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a changeable permission type");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label2:
        return;
    }

    public void grantRuntimePermission(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, name, $r13, $r17, $r28, $r31, $r34, $r43, $r45;
        int userId, uid, flags, result, appId, $i0, $i1, $i2, $i3, $i4;
        com.android.server.pm.SettingBase sb;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.PermissionsState permissionsState;
        java.lang.Throwable l13, l14, $r44, $r46;
        com.android.server.pm.UserManagerService $r0, $r16;
        android.content.Context $r1;
        boolean $z0, $z1, $z3, $z4, $z5;
        android.util.ArrayMap $r2, $r4, $r5, token#1;
        java.lang.Object $r3, $r8, $r9, $r18;
        com.android.server.pm.Settings $r6, $r15;
        android.content.pm.ApplicationInfo $r7, $r10;
        com.android.server.pm.PackageManagerService$PackageHandler $r11;
        com.android.server.pm.PackageManagerService$4 $r12;
        com.android.server.pm.PackageManagerService$OnPermissionChangeListeners $r14;
        java.lang.StringBuilder $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r29, $r30, $r33, $r36, $r37, $r38, $r39, $r40, $r41, $r42;
        java.lang.SecurityException $r20;
        java.lang.IllegalArgumentException $r27, $r32, $r35;
        com.android.server.pm.BasePermission bp#2;
        long token#3;
        android.os.storage.MountServiceInternal bp#4;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        name := @parameter1: java.lang.String;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such user:");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r45);

        return;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.GRANT_RUNTIME_PERMISSIONS", "grantRuntimePermission");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 1, 0, "grantRuntimePermission");

        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        token#1 = $r2;

        entermonitor $r2;

     label02:
        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r3;

        if pkg != null goto label03;

        $r32 = new java.lang.IllegalArgumentException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r43);

        throw $r32;

     label03:
        $r6 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r8 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(name);

        bp#2 = (com.android.server.pm.BasePermission) $r8;

        if bp#2 != null goto label04;

        $r35 = new java.lang.IllegalArgumentException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);

        throw $r35;

     label04:
        staticinvoke <com.android.server.pm.PackageManagerService: void enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(android.content.pm.PackageParser$Package,com.android.server.pm.BasePermission)>(pkg, bp#2);

        $r7 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r7.<android.content.pm.ApplicationInfo: int uid>;

        uid = staticinvoke <android.os.UserHandle: int getUid(int,int)>(userId, $i1);

        $r9 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        sb = (com.android.server.pm.SettingBase) $r9;

        if sb != null goto label05;

        $r27 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r33 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34);

        throw $r27;

     label05:
        permissionsState = virtualinvoke sb.<com.android.server.pm.SettingBase: com.android.server.pm.PermissionsState getPermissionsState()>();

        flags = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int getPermissionFlags(java.lang.String,int)>(name, userId);

        $i2 = flags & 16;

        if $i2 == 0 goto label06;

        $r20 = new java.lang.SecurityException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot grant system fixed permission: ");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package: ");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r28 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.SecurityException: void <init>(java.lang.String)>($r28);

        throw $r20;

     label06:
        $z1 = virtualinvoke bp#2.<com.android.server.pm.BasePermission: boolean isDevelopment()>();

        if $z1 == 0 goto label09;

        $i4 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int grantInstallPermission(com.android.server.pm.BasePermission)>(bp#2);

        if $i4 == -1 goto label07;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>();

     label07:
        exitmonitor token#1;

     label08:
        return;

     label09:
        result = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int grantRuntimePermission(com.android.server.pm.BasePermission,int)>(bp#2, userId);

        lookupswitch(result)
        {
            case -1: goto label10;
            case 1: goto label12;
            default: goto label13;
        };

     label10:
        exitmonitor token#1;

     label11:
        return;

     label12:
        $r10 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r10.<android.content.pm.ApplicationInfo: int uid>;

        appId = staticinvoke <android.os.UserHandle: int getAppId(int)>($i3);

        $r11 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r12 = new com.android.server.pm.PackageManagerService$4;

        specialinvoke $r12.<com.android.server.pm.PackageManagerService$4: void <init>(com.android.server.pm.PackageManagerService,int,int)>(this, appId, userId);

        virtualinvoke $r11.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r12);

     label13:
        $r14 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners>;

        virtualinvoke $r14.<com.android.server.pm.PackageManagerService$OnPermissionChangeListeners: void onPermissionsChanged(int)>(uid);

        $r15 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r15.<com.android.server.pm.Settings: void writeRuntimePermissionsForUserLPr(int,boolean)>(userId, 0);

        exitmonitor token#1;

     label14:
        goto label17;

     label15:
        $r46 := @caughtexception;

        l13 = $r46;

        exitmonitor token#1;

     label16:
        throw l13;

     label17:
        $r13 = "android.permission.READ_EXTERNAL_STORAGE";

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z4 != 0 goto label18;

        $r17 = "android.permission.WRITE_EXTERNAL_STORAGE";

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z5 == 0 goto label23;

     label18:
        token#3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label19:
        $r16 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z3 = virtualinvoke $r16.<com.android.server.pm.UserManagerService: boolean isInitialized(int)>(userId);

        if $z3 == 0 goto label20;

        $r18 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/os/storage/MountServiceInternal");

        bp#4 = (android.os.storage.MountServiceInternal) $r18;

        virtualinvoke bp#4.<android.os.storage.MountServiceInternal: void onExternalStoragePolicyChanged(int,java.lang.String)>(uid, packageName);

     label20:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token#3);

        goto label23;

     label21:
        $r44 := @caughtexception;

        l14 = $r44;

     label22:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token#3);

        throw l14;

     label23:
        return;

        catch java.lang.Throwable from label02 to label08 with label15;
        catch java.lang.Throwable from label09 to label11 with label15;
        catch java.lang.Throwable from label12 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    public void revokeRuntimePermission(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, name, $r21, $r23, $r26, $r36, $r38;
        int userId, appId, flags, $i0, $i1, $i2, $i3, $i4, $i5;
        android.util.ArrayMap l5, $r2, $r3, $r7;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.BasePermission bp;
        com.android.server.pm.SettingBase sb;
        com.android.server.pm.PermissionsState permissionsState;
        java.lang.Throwable l11, $r39;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1;
        android.content.Context $r1;
        com.android.server.pm.Settings $r4, $r10;
        java.lang.Object $r5, $r6, $r8;
        android.content.pm.ApplicationInfo $r9, $r12;
        com.android.server.pm.PackageManagerService$OnPermissionChangeListeners $r11;
        java.lang.SecurityException $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r19, $r20, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r32, $r34, $r35, $r37;
        java.lang.IllegalArgumentException $r18, $r22, $r33;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        name := @parameter1: java.lang.String;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such user:");

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r38);

        return;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.REVOKE_RUNTIME_PERMISSIONS", "revokeRuntimePermission");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 1, 0, "revokeRuntimePermission");

        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l5 = $r3;

        entermonitor $r3;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r5;

        if pkg != null goto label03;

        $r33 = new java.lang.IllegalArgumentException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);

        throw $r33;

     label03:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r6 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(name);

        bp = (com.android.server.pm.BasePermission) $r6;

        if bp != null goto label04;

        $r22 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission: ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label04:
        staticinvoke <com.android.server.pm.PackageManagerService: void enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(android.content.pm.PackageParser$Package,com.android.server.pm.BasePermission)>(pkg, bp);

        $r8 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        sb = (com.android.server.pm.SettingBase) $r8;

        if sb != null goto label05;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label05:
        permissionsState = virtualinvoke sb.<com.android.server.pm.SettingBase: com.android.server.pm.PermissionsState getPermissionsState()>();

        flags = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int getPermissionFlags(java.lang.String,int)>(name, userId);

        $i1 = flags & 16;

        if $i1 == 0 goto label06;

        $r13 = new java.lang.SecurityException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot revoke system fixed permission: ");

        $r14 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package: ");

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r21);

        throw $r13;

     label06:
        $z1 = virtualinvoke bp.<com.android.server.pm.BasePermission: boolean isDevelopment()>();

        if $z1 == 0 goto label09;

        $i5 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int revokeInstallPermission(com.android.server.pm.BasePermission)>(bp);

        if $i5 == -1 goto label07;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>();

     label07:
        exitmonitor l5;

     label08:
        return;

     label09:
        $i2 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int revokeRuntimePermission(com.android.server.pm.BasePermission,int)>(bp, userId);

        if $i2 != -1 goto label11;

        exitmonitor l5;

     label10:
        return;

     label11:
        $r11 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners>;

        $r9 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r9.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke $r11.<com.android.server.pm.PackageManagerService$OnPermissionChangeListeners: void onPermissionsChanged(int)>($i3);

        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r10.<com.android.server.pm.Settings: void writeRuntimePermissionsForUserLPr(int,boolean)>(userId, 1);

        $r12 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r12.<android.content.pm.ApplicationInfo: int uid>;

        appId = staticinvoke <android.os.UserHandle: int getAppId(int)>($i4);

        exitmonitor l5;

     label12:
        goto label15;

     label13:
        $r39 := @caughtexception;

        l11 = $r39;

        exitmonitor l5;

     label14:
        throw l11;

     label15:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void killUid(int,int,java.lang.String)>(appId, userId, "permissions revoked");

        return;

        catch java.lang.Throwable from label02 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void resetRuntimePermissions()
    {
        com.android.server.pm.PackageManagerService this;
        int callingUid, len$, userId, packageCount, i$#1, i#2;
        android.util.ArrayMap l2, $r1, $r3, $r5;
        int[] arr$;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l11, $r9;
        android.content.Context $r0, $r7;
        com.android.server.pm.UserManagerService $r2;
        java.lang.Object $r4, $r6, $r8;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.REVOKE_RUNTIME_PERMISSIONS", "revokeRuntimePermission");

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        if callingUid == 1000 goto label01;

        if callingUid == 0 goto label01;

        $r7 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", "resetRuntimePermissions");

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r1;

        entermonitor $r1;

     label02:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void updatePermissionsLPw(java.lang.String,android.content.pm.PackageParser$Package,int)>(null, null, 1);

        $r2 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        arr$ = virtualinvoke $r2.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        len$ = lengthof arr$;

        i$#1 = 0;

     label03:
        if i$#1 >= len$ goto label08;

        userId = arr$[i$#1];

        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        packageCount = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        i#2 = 0;

     label04:
        if i#2 >= packageCount goto label07;

        $r5 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i#2);

        pkg = (android.content.pm.PackageParser$Package) $r4;

        $r6 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        $z0 = $r6 instanceof com.android.server.pm.PackageSetting;

        if $z0 != 0 goto label05;

        goto label06;

     label05:
        $r8 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        ps = (com.android.server.pm.PackageSetting) $r8;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void resetUserChangesToRuntimePermissionsAndFlagsLPw(com.android.server.pm.PackageSetting,int)>(ps, userId);

     label06:
        i#2 = i#2 + 1;

        goto label04;

     label07:
        i$#1 = i$#1 + 1;

        goto label03;

     label08:
        exitmonitor l2;

     label09:
        goto label12;

     label10:
        $r9 := @caughtexception;

        l11 = $r9;

        exitmonitor l2;

     label11:
        throw l11;

     label12:
        return;

        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public int getPermissionFlags(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String name, packageName, $r11, $r19, $r23;
        int userId, $i0, $i1;
        android.util.ArrayMap l4, $r1, $r2, $r4;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.BasePermission bp;
        com.android.server.pm.SettingBase sb;
        com.android.server.pm.PermissionsState permissionsState;
        java.lang.Throwable l9, $r21;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        java.lang.Object $r3, $r6, $r7;
        com.android.server.pm.Settings $r5;
        java.lang.IllegalArgumentException $r8, $r14, $r20;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r15, $r16, $r17, $r18, $r22;

        this := @this: com.android.server.pm.PackageManagerService;

        name := @parameter0: java.lang.String;

        packageName := @parameter1: java.lang.String;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void enforceGrantRevokeRuntimePermissionPermissions(java.lang.String)>("getPermissionFlags");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 1, 0, "getPermissionFlags");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label2:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r3;

        if pkg != null goto label3;

        $r20 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label3:
        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r7 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(name);

        bp = (com.android.server.pm.BasePermission) $r7;

        if bp != null goto label4;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission: ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label4:
        $r6 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        sb = (com.android.server.pm.SettingBase) $r6;

        if sb != null goto label5;

        $r8 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label5:
        permissionsState = virtualinvoke sb.<com.android.server.pm.SettingBase: com.android.server.pm.PermissionsState getPermissionsState()>();

        $i1 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int getPermissionFlags(java.lang.String,int)>(name, userId);

        exitmonitor l4;

     label6:
        return $i1;

     label7:
        $r21 := @caughtexception;

        l9 = $r21;

        exitmonitor l4;

     label8:
        throw l9;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void updatePermissionFlags(java.lang.String, java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String name, packageName, $r8, $r19, $r20, $r24;
        int userId, flags, $i0, $i1, $i2, flagMask#1, flagValues#2, flagMask#3, flagValues#4;
        android.util.ArrayMap l6, $r1, $r2, $r6;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.BasePermission bp;
        com.android.server.pm.SettingBase sb;
        com.android.server.pm.PermissionsState permissionsState;
        boolean hadState, $z0, $z1, $z2;
        java.lang.Throwable l13, $r28;
        com.android.server.pm.UserManagerService $r0;
        com.android.server.pm.Settings $r3, $r10;
        java.lang.Object $r4, $r5, $r7;
        com.android.server.pm.PermissionsState$PermissionState $r9, $r11, $r12;
        java.lang.StringBuilder $r13, $r14, $r17, $r18, $r22, $r23, $r25, $r26, $r27;
        java.lang.IllegalArgumentException $r15, $r16, $r21;

        this := @this: com.android.server.pm.PackageManagerService;

        name := @parameter0: java.lang.String;

        packageName := @parameter1: java.lang.String;

        flagMask#1 := @parameter2: int;

        flagValues#2 := @parameter3: int;

        userId := @parameter4: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void enforceGrantRevokeRuntimePermissionPermissions(java.lang.String)>("updatePermissionFlags");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i1, userId, 1, 0, "updatePermissionFlags");

        $i0 = staticinvoke <com.android.server.pm.PackageManagerService: int getCallingUid()>();

        if $i0 == 1000 goto label02;

        flagMask#3 = flagMask#1 & -17;

        flagValues#4 = flagValues#2 & -17;

        flagMask#1 = flagMask#3 & -33;

        flagValues#2 = flagValues#4 & -33;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l6 = $r2;

        entermonitor $r2;

     label03:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r4;

        if pkg != null goto label04;

        $r21 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r21;

     label04:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r5 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(name);

        bp = (com.android.server.pm.BasePermission) $r5;

        if bp != null goto label05;

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label05:
        $r7 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        sb = (com.android.server.pm.SettingBase) $r7;

        if sb != null goto label06;

        $r15 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label06:
        permissionsState = virtualinvoke sb.<com.android.server.pm.SettingBase: com.android.server.pm.PermissionsState getPermissionsState()>();

        $r8 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        flags = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int getPermissionFlags(java.lang.String,int)>($r8, userId);

        $i2 = flags & 16;

        if $i2 == 0 goto label08;

        exitmonitor l6;

     label07:
        return;

     label08:
        $r9 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: com.android.server.pm.PermissionsState$PermissionState getRuntimePermissionState(java.lang.String,int)>(name, userId);

        if $r9 == null goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        hadState = $z2;

        $z1 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.BasePermission,int,int,int)>(bp, userId, flagMask#1, flagValues#2);

        if $z1 == 0 goto label13;

        $r11 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: com.android.server.pm.PermissionsState$PermissionState getInstallPermissionState(java.lang.String)>(name);

        if $r11 == null goto label11;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>();

        goto label13;

     label11:
        $r12 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: com.android.server.pm.PermissionsState$PermissionState getRuntimePermissionState(java.lang.String,int)>(name, userId);

        if $r12 != null goto label12;

        if hadState == 0 goto label13;

     label12:
        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r10.<com.android.server.pm.Settings: void writeRuntimePermissionsForUserLPr(int,boolean)>(userId, 0);

     label13:
        exitmonitor l6;

     label14:
        goto label17;

     label15:
        $r28 := @caughtexception;

        l13 = $r28;

        exitmonitor l6;

     label16:
        throw l13;

     label17:
        return;

        catch java.lang.Throwable from label03 to label07 with label15;
        catch java.lang.Throwable from label08 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public void updatePermissionFlagsForAllApps(int, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, packageCount, $i0, $i1, flagMask#1, flagValues#2, pkgIndex#4;
        android.util.ArrayMap l4, $r1, $r2, $r3;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.SettingBase sb;
        com.android.server.pm.PermissionsState permissionsState;
        java.lang.Throwable l11, $r7;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1, changed#3;
        com.android.server.pm.Settings $r4;
        java.lang.Object $r5, $r6;

        this := @this: com.android.server.pm.PackageManagerService;

        flagMask#1 := @parameter0: int;

        flagValues#2 := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void enforceGrantRevokeRuntimePermissionPermissions(java.lang.String)>("updatePermissionFlagsForAllApps");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 1, 0, "updatePermissionFlagsForAllApps");

        $i1 = staticinvoke <com.android.server.pm.PackageManagerService: int getCallingUid()>();

        if $i1 == 1000 goto label02;

        flagMask#1 = flagMask#1 & -17;

        flagValues#2 = flagValues#2 & -17;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r2;

        entermonitor $r2;

     label03:
        changed#3 = 0;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        packageCount = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        pkgIndex#4 = 0;

     label04:
        if pkgIndex#4 >= packageCount goto label07;

        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object valueAt(int)>(pkgIndex#4);

        pkg = (android.content.pm.PackageParser$Package) $r6;

        $r5 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        sb = (com.android.server.pm.SettingBase) $r5;

        if sb != null goto label05;

        goto label06;

     label05:
        permissionsState = virtualinvoke sb.<com.android.server.pm.SettingBase: com.android.server.pm.PermissionsState getPermissionsState()>();

        $z1 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: boolean updatePermissionFlagsForAllPermissions(int,int,int)>(userId, flagMask#1, flagValues#2);

        changed#3 = changed#3 | $z1;

     label06:
        pkgIndex#4 = pkgIndex#4 + 1;

        goto label04;

     label07:
        if changed#3 == 0 goto label08;

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r4.<com.android.server.pm.Settings: void writeRuntimePermissionsForUserLPr(int,boolean)>(userId, 0);

     label08:
        exitmonitor l4;

     label09:
        goto label12;

     label10:
        $r7 := @caughtexception;

        l11 = $r7;

        exitmonitor l4;

     label11:
        throw l11;

     label12:
        return;

        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void enforceGrantRevokeRuntimePermissionPermissions(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String message, $r9;
        android.content.Context $r0, $r1;
        int $i0, $i1;
        java.lang.SecurityException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: com.android.server.pm.PackageManagerService;

        message := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.GRANT_RUNTIME_PERMISSIONS");

        if $i0 == 0 goto label1;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.REVOKE_RUNTIME_PERMISSIONS");

        if $i1 == 0 goto label1;

        $r2 = new java.lang.SecurityException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(message);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.GRANT_RUNTIME_PERMISSIONS");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.REVOKE_RUNTIME_PERMISSIONS");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return;
    }

    public boolean shouldShowRequestPermissionRationale(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String permissionName, packageName, $r3;
        int userId, uid, flags, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        long identity;
        android.content.Context $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.Throwable $r5, fixedFlags#1;
        byte fixedFlags#2;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        permissionName := @parameter0: java.lang.String;

        packageName := @parameter1: java.lang.String;

        userId := @parameter2: int;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i0 == userId goto label01;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("canShowRequestPermissionRationale for user ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", $r3);

     label01:
        uid = virtualinvoke this.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>(packageName, userId);

        $i1 = staticinvoke <com.android.server.pm.PackageManagerService: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        $i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>(uid);

        if $i2 == $i3 goto label02;

        return 0;

     label02:
        $i4 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int checkPermission(java.lang.String,java.lang.String,int)>(permissionName, packageName, userId);

        if $i4 != 0 goto label03;

        return 0;

     label03:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        flags = virtualinvoke this.<com.android.server.pm.PackageManagerService: int getPermissionFlags(java.lang.String,java.lang.String,int)>(permissionName, packageName, userId);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        goto label08;

     label06:
        $r5 := @caughtexception;

        fixedFlags#1 = $r5;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw fixedFlags#1;

     label08:
        fixedFlags#2 = 22;

        $i5 = flags & 22;

        if $i5 == 0 goto label09;

        return 0;

     label09:
        $i6 = flags & 1;

        if $i6 == 0 goto label10;

        $z0 = 1;

        goto label11;

     label10:
        $z0 = 0;

     label11:
        return $z0;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public void addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.IOnPermissionsChangeListener listener;
        android.util.ArrayMap l2, $r1;
        java.lang.Throwable l3, $r3;
        android.content.Context $r0;
        com.android.server.pm.PackageManagerService$OnPermissionChangeListeners $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        listener := @parameter0: android.content.pm.IOnPermissionsChangeListener;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS", "addOnPermissionsChangeListener");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners>;

        virtualinvoke $r2.<com.android.server.pm.PackageManagerService$OnPermissionChangeListeners: void addListenerLocked(android.content.pm.IOnPermissionsChangeListener)>(listener);

        exitmonitor l2;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        l3 = $r3;

        exitmonitor l2;

     label4:
        throw l3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.IOnPermissionsChangeListener listener;
        android.util.ArrayMap l2, $r0;
        java.lang.Throwable l3, $r2;
        com.android.server.pm.PackageManagerService$OnPermissionChangeListeners $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        listener := @parameter0: android.content.pm.IOnPermissionsChangeListener;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners>;

        virtualinvoke $r1.<com.android.server.pm.PackageManagerService$OnPermissionChangeListeners: void removeListenerLocked(android.content.pm.IOnPermissionsChangeListener)>(listener);

        exitmonitor l2;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        l3 = $r2;

        exitmonitor l2;

     label4:
        throw l3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isProtectedBroadcast(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String actionName;
        android.util.ArrayMap l2, $r0;
        java.lang.Throwable l3, $r2;
        android.util.ArraySet $r1;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        actionName := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mProtectedBroadcasts>;

        $z0 = virtualinvoke $r1.<android.util.ArraySet: boolean contains(java.lang.Object)>(actionName);

        exitmonitor l2;

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        l3 = $r2;

        exitmonitor l2;

     label4:
        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int checkSignatures(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String pkg1, pkg2;
        android.util.ArrayMap l3, $r0, $r1, $r3;
        android.content.pm.PackageParser$Package p1, p2;
        java.lang.Throwable l6, $r9;
        java.lang.Object $r2, $r4, $r5, $r6;
        android.content.pm.Signature[] $r7, $r8;
        int $i0;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg1 := @parameter0: java.lang.String;

        pkg2 := @parameter1: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(pkg1);

        p1 = (android.content.pm.PackageParser$Package) $r2;

        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(pkg2);

        p2 = (android.content.pm.PackageParser$Package) $r4;

        if p1 == null goto label2;

        $r5 = p1.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        if $r5 == null goto label2;

        if p2 == null goto label2;

        $r6 = p2.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        if $r6 != null goto label4;

     label2:
        exitmonitor l3;

     label3:
        return -4;

     label4:
        $r8 = p1.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $r7 = p2.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $i0 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r8, $r7);

        exitmonitor l3;

     label5:
        return $i0;

     label6:
        $r9 := @caughtexception;

        l6 = $r9;

        exitmonitor l3;

     label7:
        throw l6;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int checkUidSignatures(int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.util.ArrayMap l3, $r0;
        java.lang.Throwable l7, $r11;
        com.android.server.pm.Settings $r1, $r3;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.pm.PackageSetting $r2, $r5;
        com.android.server.pm.PackageSignatures $r4, $r6, $r9, $r10;
        int $i0, uid1#1, uid2#2, uid1#3, uid2#4;
        com.android.server.pm.SharedUserSetting $r7, $r8;
        java.lang.Object obj#5, obj#7;
        android.content.pm.Signature[] s1#6, s2#8;

        this := @this: com.android.server.pm.PackageManagerService;

        uid1#1 := @parameter0: int;

        uid2#2 := @parameter1: int;

        uid1#3 = staticinvoke <android.os.UserHandle: int getAppId(int)>(uid1#1);

        uid2#4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(uid2#2);

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        obj#5 = virtualinvoke $r1.<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>(uid1#3);

        if obj#5 == null goto label05;

        $z0 = obj#5 instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label02;

        $r8 = (com.android.server.pm.SharedUserSetting) obj#5;

        $r10 = $r8.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        s1#6 = $r10.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        goto label07;

     label02:
        $z1 = obj#5 instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label03;

        $r2 = (com.android.server.pm.PackageSetting) obj#5;

        $r4 = $r2.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        s1#6 = $r4.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        goto label07;

     label03:
        exitmonitor l3;

     label04:
        return -4;

     label05:
        exitmonitor l3;

     label06:
        return -4;

     label07:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        obj#7 = virtualinvoke $r3.<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>(uid2#4);

        if obj#7 == null goto label11;

        $z3 = obj#7 instanceof com.android.server.pm.SharedUserSetting;

        if $z3 == 0 goto label08;

        $r7 = (com.android.server.pm.SharedUserSetting) obj#7;

        $r9 = $r7.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        s2#8 = $r9.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        goto label13;

     label08:
        $z2 = obj#7 instanceof com.android.server.pm.PackageSetting;

        if $z2 == 0 goto label09;

        $r5 = (com.android.server.pm.PackageSetting) obj#7;

        $r6 = $r5.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        s2#8 = $r6.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        goto label13;

     label09:
        exitmonitor l3;

     label10:
        return -4;

     label11:
        exitmonitor l3;

     label12:
        return -4;

     label13:
        $i0 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>(s1#6, s2#8);

        exitmonitor l3;

     label14:
        return $i0;

     label15:
        $r11 := @caughtexception;

        l7 = $r11;

        exitmonitor l3;

     label16:
        throw l7;

        catch java.lang.Throwable from label01 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private void killUid(int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        int appId, userId;
        java.lang.String reason;
        long identity;
        android.app.IActivityManager am;
        android.os.RemoteException l7, $r0;
        java.lang.Throwable l8, $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        appId := @parameter0: int;

        userId := @parameter1: int;

        reason := @parameter2: java.lang.String;

        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        am = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        if am == null goto label5;

     label2:
        interfaceinvoke am.<android.app.IActivityManager: void killUid(int,int,java.lang.String)>(appId, userId, "permission grant or revoke changed gids");

     label3:
        goto label5;

     label4:
        $r0 := @caughtexception;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        goto label8;

     label6:
        $r1 := @caughtexception;

        l8 = $r1;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l8;

     label8:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    static int compareSignatures(android.content.pm.Signature[], android.content.pm.Signature[])
    {
        android.content.pm.Signature[] s1, s2, arr$#3, len$#8;
        android.util.ArraySet set1, $r0, $r1, arr$#7;
        android.content.pm.Signature sig, $r2, $r3, sig#6;
        int $i0, $i1, $i2, len$#4, i$#5, i$#9, sig#10;
        boolean $z0, $z3;
        byte $b3, $b4;

        s1 := @parameter0: android.content.pm.Signature[];

        s2 := @parameter1: android.content.pm.Signature[];

        if s1 != null goto label03;

        if s2 != null goto label01;

        $b3 = 1;

        goto label02;

     label01:
        $b3 = -1;

     label02:
        return $b3;

     label03:
        if s2 != null goto label04;

        return -2;

     label04:
        $i1 = lengthof s1;

        $i0 = lengthof s2;

        if $i1 == $i0 goto label05;

        return -3;

     label05:
        $i2 = lengthof s1;

        if $i2 != 1 goto label08;

        $r2 = s1[0];

        $r3 = s2[0];

        $z3 = virtualinvoke $r2.<android.content.pm.Signature: boolean equals(java.lang.Object)>($r3);

        if $z3 == 0 goto label06;

        $b4 = 0;

        goto label07;

     label06:
        $b4 = -3;

     label07:
        return $b4;

     label08:
        $r0 = new android.util.ArraySet;

        specialinvoke $r0.<android.util.ArraySet: void <init>()>();

        set1 = $r0;

        arr$#3 = s1;

        len$#4 = lengthof arr$#3;

        i$#5 = 0;

     label09:
        if i$#5 >= len$#4 goto label10;

        sig#6 = arr$#3[i$#5];

        virtualinvoke set1.<android.util.ArraySet: boolean add(java.lang.Object)>(sig#6);

        i$#5 = i$#5 + 1;

        goto label09;

     label10:
        $r1 = new android.util.ArraySet;

        specialinvoke $r1.<android.util.ArraySet: void <init>()>();

        arr$#7 = $r1;

        len$#8 = s2;

        i$#9 = lengthof len$#8;

        sig#10 = 0;

     label11:
        if sig#10 >= i$#9 goto label12;

        sig = len$#8[sig#10];

        virtualinvoke arr$#7.<android.util.ArraySet: boolean add(java.lang.Object)>(sig);

        sig#10 = sig#10 + 1;

        goto label11;

     label12:
        $z0 = virtualinvoke set1.<android.util.ArraySet: boolean equals(java.lang.Object)>(arr$#7);

        if $z0 == 0 goto label13;

        return 0;

     label13:
        return -3;
    }

    private boolean isCompatSignatureUpdateNeeded(android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package scannedPkg;
        com.android.server.pm.Settings$VersionInfo ver;
        int $i0;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        scannedPkg := @parameter0: android.content.pm.PackageParser$Package;

        ver = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings$VersionInfo getSettingsVersionForPackage(android.content.pm.PackageParser$Package)>(scannedPkg);

        $i0 = ver.<com.android.server.pm.Settings$VersionInfo: int databaseVersion>;

        if $i0 >= 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int compareSignaturesCompat(com.android.server.pm.PackageSignatures, android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSignatures existingSigs;
        android.content.pm.PackageParser$Package scannedPkg;
        android.util.ArraySet existingSet, $r0, $r1, arr$#5;
        android.content.pm.Signature sig, chainSig, sig#4;
        android.content.pm.Signature[] arr$, $r2, arr$#1, len$#6, chainSignatures#9;
        int len$, len$#2, i$#3, i$#7, sig#8, i$#10;
        java.lang.Throwable l14, $r8;
        boolean $z0, $z1;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4, len$#12;
        com.android.server.pm.KeySetManagerService $r5;
        java.lang.String $r6;
        java.security.cert.CertificateEncodingException $r7, chainSignatures#11;

        this := @this: com.android.server.pm.PackageManagerService;

        existingSigs := @parameter0: com.android.server.pm.PackageSignatures;

        scannedPkg := @parameter1: android.content.pm.PackageParser$Package;

        $z0 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean isCompatSignatureUpdateNeeded(android.content.pm.PackageParser$Package)>(scannedPkg);

        if $z0 != 0 goto label01;

        return -3;

     label01:
        $r1 = new android.util.ArraySet;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw8()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r1.<android.util.ArraySet: void <init>()>();

        existingSet = $r1;

        arr$#1 = existingSigs.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        len$#2 = lengthof arr$#1;

        i$#3 = 0;

     label02:
        if i$#3 >= len$#2 goto label03;

        sig#4 = arr$#1[i$#3];

        virtualinvoke existingSet.<android.util.ArraySet: boolean add(java.lang.Object)>(sig#4);

        i$#3 = i$#3 + 1;

        goto label02;

     label03:
        $r0 = new android.util.ArraySet;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw8()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r0.<android.util.ArraySet: void <init>()>();

        arr$#5 = $r0;

        len$#6 = scannedPkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        i$#7 = lengthof len$#6;

        sig#8 = 0;

     label04:
        if sig#8 >= i$#7 goto label10;

        sig = len$#6[sig#8];

     label05:
        chainSignatures#9 = virtualinvoke sig.<android.content.pm.Signature: android.content.pm.Signature[] getChainSignatures()>();

        arr$ = chainSignatures#9;

        len$ = lengthof arr$;

        i$#10 = 0;

     label06:
        if i$#10 >= len$ goto label07;

        chainSig = arr$[i$#10];

        virtualinvoke arr$#5.<android.util.ArraySet: boolean add(java.lang.Object)>(chainSig);

        i$#10 = i$#10 + 1;

        goto label06;

     label07:
        goto label09;

     label08:
        $r7 := @caughtexception;

        virtualinvoke arr$#5.<android.util.ArraySet: boolean add(java.lang.Object)>(sig);

     label09:
        sig#8 = sig#8 + 1;

        goto label04;

     label10:
        $z1 = virtualinvoke arr$#5.<android.util.ArraySet: boolean equals(java.lang.Object)>(existingSet);

        if $z1 == 0 goto label16;

        $r2 = scannedPkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        virtualinvoke existingSigs.<com.android.server.pm.PackageSignatures: void assignSignatures(android.content.pm.Signature[])>($r2);

        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        len$#12 = $r4;

        entermonitor $r4;

     label11:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r3.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        $r6 = scannedPkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke $r5.<com.android.server.pm.KeySetManagerService: void removeAppKeySetDataLPw(java.lang.String)>($r6);

        exitmonitor len$#12;

     label12:
        goto label15;

     label13:
        $r8 := @caughtexception;

        l14 = $r8;

        exitmonitor len$#12;

     label14:
        throw l14;

     label15:
        return 0;

     label16:
        return -3;

        catch java.security.cert.CertificateEncodingException from label05 to label07 with label08;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private boolean isRecoverSignatureUpdateNeeded(android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package scannedPkg;
        com.android.server.pm.Settings$VersionInfo ver;
        int $i0;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        scannedPkg := @parameter0: android.content.pm.PackageParser$Package;

        ver = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings$VersionInfo getSettingsVersionForPackage(android.content.pm.PackageParser$Package)>(scannedPkg);

        $i0 = ver.<com.android.server.pm.Settings$VersionInfo: int databaseVersion>;

        if $i0 >= 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int compareSignaturesRecover(com.android.server.pm.PackageSignatures, android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSignatures existingSigs;
        android.content.pm.PackageParser$Package scannedPkg;
        java.security.cert.CertificateException e, $r13;
        boolean $z0, $z1;
        android.content.pm.Signature[] $r0, $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r8, $r10, $r11;
        java.lang.String $r4, $r9, $r12, $r14, msg#1;

        this := @this: com.android.server.pm.PackageManagerService;

        existingSigs := @parameter0: com.android.server.pm.PackageSignatures;

        scannedPkg := @parameter1: android.content.pm.PackageParser$Package;

        $z0 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean isRecoverSignatureUpdateNeeded(android.content.pm.PackageParser$Package)>(scannedPkg);

        if $z0 != 0 goto label1;

        return -3;

     label1:
        msg#1 = null;

     label2:
        $r1 = existingSigs.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        $r0 = scannedPkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $z1 = staticinvoke <android.content.pm.Signature: boolean areEffectiveMatch(android.content.pm.Signature[],android.content.pm.Signature[])>($r1, $r0);

        if $z1 == 0 goto label4;

        $r8 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw9()>();

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recovered effectively matching certificates for ");

        $r12 = scannedPkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(4, $r14);

     label3:
        return 0;

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        e = $r13;

        msg#1 = virtualinvoke e.<java.security.cert.CertificateException: java.lang.String getMessage()>();

     label6:
        $r2 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw9()>();

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to recover certificates for ");

        $r4 = scannedPkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg#1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(4, $r9);

        return -3;

        catch java.security.cert.CertificateException from label2 to label3 with label5;
    }

    public java.lang.String[] getPackagesForUid(int)
    {
        com.android.server.pm.PackageManagerService this;
        android.util.ArrayMap l2, $r0;
        java.lang.Object obj, $r6;
        int N, $i0, uid#1, uid#2, i#4;
        java.lang.String[] res, $r2;
        java.util.Iterator it;
        java.lang.Throwable l9, $r9;
        com.android.server.pm.Settings $r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r7;
        android.util.ArraySet $r4, $r5;
        com.android.server.pm.PackageSetting $r8, sus#5;
        com.android.server.pm.SharedUserSetting sus#3;

        this := @this: com.android.server.pm.PackageManagerService;

        uid#1 := @parameter0: int;

        uid#2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(uid#1);

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        obj = virtualinvoke $r1.<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>(uid#2);

        $z0 = obj instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label05;

        sus#3 = (com.android.server.pm.SharedUserSetting) obj;

        $r4 = sus#3.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        N = virtualinvoke $r4.<android.util.ArraySet: int size()>();

        res = newarray (java.lang.String)[N];

        $r5 = sus#3.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        it = virtualinvoke $r5.<android.util.ArraySet: java.util.Iterator iterator()>();

        i#4 = 0;

     label02:
        $z2 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label03;

        $i0 = i#4;

        i#4 = i#4 + 1;

        $r6 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.android.server.pm.PackageSetting) $r6;

        $r7 = $r8.<com.android.server.pm.PackageSetting: java.lang.String name>;

        res[$i0] = $r7;

        goto label02;

     label03:
        exitmonitor l2;

     label04:
        return res;

     label05:
        $z1 = obj instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label07;

        sus#5 = (com.android.server.pm.PackageSetting) obj;

        $r2 = newarray (java.lang.String)[1];

        $r3 = sus#5.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r2[0] = $r3;

        exitmonitor l2;

     label06:
        return $r2;

     label07:
        exitmonitor l2;

     label08:
        goto label11;

     label09:
        $r9 := @caughtexception;

        l9 = $r9;

        exitmonitor l2;

     label10:
        throw l9;

     label11:
        return null;

        catch java.lang.Throwable from label01 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public java.lang.String getNameForUid(int)
    {
        com.android.server.pm.PackageManagerService this;
        int uid, $i0, $i1;
        android.util.ArrayMap l2, $r0;
        java.lang.Object obj;
        java.lang.Throwable l5, $r9;
        com.android.server.pm.Settings $r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r5, $r7;
        java.lang.StringBuilder $r3, $r4, $r6, $r8;
        com.android.server.pm.SharedUserSetting sus#1;
        com.android.server.pm.PackageSetting sus#2;

        this := @this: com.android.server.pm.PackageManagerService;

        uid := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i0 = staticinvoke <android.os.UserHandle: int getAppId(int)>(uid);

        obj = virtualinvoke $r1.<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>($i0);

        $z0 = obj instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label3;

        sus#1 = (com.android.server.pm.SharedUserSetting) obj;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = sus#1.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i1 = sus#1.<com.android.server.pm.SharedUserSetting: int userId>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor l2;

     label2:
        return $r7;

     label3:
        $z1 = obj instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label5;

        sus#2 = (com.android.server.pm.PackageSetting) obj;

        $r2 = sus#2.<com.android.server.pm.PackageSetting: java.lang.String name>;

        exitmonitor l2;

     label4:
        return $r2;

     label5:
        exitmonitor l2;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        l5 = $r9;

        exitmonitor l2;

     label8:
        throw l5;

     label9:
        return null;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int getUidForSharedUser(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String sharedUserName;
        android.util.ArrayMap l2, $r0;
        com.android.server.pm.SharedUserSetting suid;
        java.lang.Throwable l4, $r2;
        com.android.server.pm.Settings $r1;
        int $i0;

        this := @this: com.android.server.pm.PackageManagerService;

        sharedUserName := @parameter0: java.lang.String;

        if sharedUserName != null goto label1;

        return -1;

     label1:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label2:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        suid = virtualinvoke $r1.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>(sharedUserName, 0, 0, 0);

        if suid != null goto label4;

        exitmonitor l2;

     label3:
        return -1;

     label4:
        $i0 = suid.<com.android.server.pm.SharedUserSetting: int userId>;

        exitmonitor l2;

     label5:
        return $i0;

     label6:
        $r2 := @caughtexception;

        l4 = $r2;

        exitmonitor l2;

     label7:
        throw l4;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getFlagsForUid(int)
    {
        com.android.server.pm.PackageManagerService this;
        int uid, $i0, $i1, $i2;
        android.util.ArrayMap l2, $r0;
        java.lang.Object obj;
        java.lang.Throwable l5, $r2;
        com.android.server.pm.Settings $r1;
        boolean $z0, $z1;
        com.android.server.pm.SharedUserSetting sus#1;
        com.android.server.pm.PackageSetting sus#2;

        this := @this: com.android.server.pm.PackageManagerService;

        uid := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i0 = staticinvoke <android.os.UserHandle: int getAppId(int)>(uid);

        obj = virtualinvoke $r1.<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>($i0);

        $z0 = obj instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label3;

        sus#1 = (com.android.server.pm.SharedUserSetting) obj;

        $i2 = sus#1.<com.android.server.pm.SharedUserSetting: int pkgFlags>;

        exitmonitor l2;

     label2:
        return $i2;

     label3:
        $z1 = obj instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label5;

        sus#2 = (com.android.server.pm.PackageSetting) obj;

        $i1 = sus#2.<com.android.server.pm.PackageSetting: int pkgFlags>;

        exitmonitor l2;

     label4:
        return $i1;

     label5:
        exitmonitor l2;

     label6:
        goto label9;

     label7:
        $r2 := @caughtexception;

        l5 = $r2;

        exitmonitor l2;

     label8:
        throw l5;

     label9:
        return 0;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int getPrivateFlagsForUid(int)
    {
        com.android.server.pm.PackageManagerService this;
        int uid, $i0, $i1, $i2;
        android.util.ArrayMap l2, $r0;
        java.lang.Object obj;
        java.lang.Throwable l5, $r2;
        com.android.server.pm.Settings $r1;
        boolean $z0, $z1;
        com.android.server.pm.SharedUserSetting sus#1;
        com.android.server.pm.PackageSetting sus#2;

        this := @this: com.android.server.pm.PackageManagerService;

        uid := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i0 = staticinvoke <android.os.UserHandle: int getAppId(int)>(uid);

        obj = virtualinvoke $r1.<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>($i0);

        $z0 = obj instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label3;

        sus#1 = (com.android.server.pm.SharedUserSetting) obj;

        $i2 = sus#1.<com.android.server.pm.SharedUserSetting: int pkgPrivateFlags>;

        exitmonitor l2;

     label2:
        return $i2;

     label3:
        $z1 = obj instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label5;

        sus#2 = (com.android.server.pm.PackageSetting) obj;

        $i1 = sus#2.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        exitmonitor l2;

     label4:
        return $i1;

     label5:
        exitmonitor l2;

     label6:
        goto label9;

     label7:
        $r2 := @caughtexception;

        l5 = $r2;

        exitmonitor l2;

     label8:
        throw l5;

     label9:
        return 0;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean isUidPrivileged(int)
    {
        com.android.server.pm.PackageManagerService this;
        android.util.ArrayMap l2, $r0;
        java.lang.Object obj, $r3;
        java.util.Iterator it;
        java.lang.Throwable l6, $r5;
        com.android.server.pm.Settings $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.util.ArraySet $r2;
        com.android.server.pm.PackageSetting $r4, sus#4;
        int uid#1, uid#2;
        com.android.server.pm.SharedUserSetting sus#3;

        this := @this: com.android.server.pm.PackageManagerService;

        uid#1 := @parameter0: int;

        uid#2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(uid#1);

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        obj = virtualinvoke $r1.<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>(uid#2);

        $z0 = obj instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label05;

        sus#3 = (com.android.server.pm.SharedUserSetting) obj;

        $r2 = sus#3.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        it = virtualinvoke $r2.<android.util.ArraySet: java.util.Iterator iterator()>();

     label02:
        $z3 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label04;

        $r3 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.android.server.pm.PackageSetting) $r3;

        $z4 = virtualinvoke $r4.<com.android.server.pm.PackageSetting: boolean isPrivileged()>();

        if $z4 == 0 goto label02;

        exitmonitor l2;

     label03:
        return 1;

     label04:
        goto label07;

     label05:
        $z1 = obj instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label07;

        sus#4 = (com.android.server.pm.PackageSetting) obj;

        $z2 = virtualinvoke sus#4.<com.android.server.pm.PackageSetting: boolean isPrivileged()>();

        exitmonitor l2;

     label06:
        return $z2;

     label07:
        exitmonitor l2;

     label08:
        goto label11;

     label09:
        $r5 := @caughtexception;

        l6 = $r5;

        exitmonitor l2;

     label10:
        throw l6;

     label11:
        return 0;

        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public java.lang.String[] getAppOpPermissionPackages(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String permissionName;
        android.util.ArrayMap l2, $r0, $r1;
        android.util.ArraySet pkgs;
        java.lang.Throwable l4, $r6;
        java.lang.Object $r2;
        int $i0;
        java.lang.String[] $r3, $r5;
        java.lang.Object[] $r4;

        this := @this: com.android.server.pm.PackageManagerService;

        permissionName := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAppOpPermissionPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(permissionName);

        pkgs = (android.util.ArraySet) $r2;

        if pkgs != null goto label3;

        exitmonitor l2;

     label2:
        return null;

     label3:
        $i0 = virtualinvoke pkgs.<android.util.ArraySet: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = virtualinvoke pkgs.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        exitmonitor l2;

     label4:
        return $r5;

     label5:
        $r6 := @caughtexception;

        l4 = $r6;

        exitmonitor l2;

     label6:
        throw l4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.content.pm.ResolveInfo resolveIntent(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent intent;
        java.lang.String resolvedType;
        int flags, userId, $i0;
        java.util.List query;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        android.content.pm.ResolveInfo $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        intent := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        userId := @parameter3: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 0, 0, "resolve intent");

        query = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>(intent, resolvedType, flags, userId);

        $r1 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo chooseBestActivity(android.content.Intent,java.lang.String,int,java.util.List,int)>(intent, resolvedType, flags, query, userId);

        return $r1;
    }

    public void setLastChosenActivity(android.content.Intent, java.lang.String, int, android.content.IntentFilter, int, android.content.ComponentName)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent intent;
        java.lang.String resolvedType;
        int flags, match, userId;
        android.content.IntentFilter filter;
        android.content.ComponentName activity;
        java.util.List query;

        this := @this: com.android.server.pm.PackageManagerService;

        intent := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        filter := @parameter3: android.content.IntentFilter;

        match := @parameter4: int;

        activity := @parameter5: android.content.ComponentName;

        userId = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke intent.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(null);

        query = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>(intent, resolvedType, flags, userId);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPreferredActivity(android.content.Intent,java.lang.String,int,java.util.List,int,boolean,boolean,boolean,int)>(intent, resolvedType, flags, query, 0, 0, 1, 0, userId);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void addPreferredActivityInternal(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,boolean,int,java.lang.String)>(filter, match, null, activity, 0, userId, "Setting last chosen");

        return;
    }

    public android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent intent;
        java.lang.String resolvedType;
        int flags, userId;
        java.util.List query;
        android.content.pm.ResolveInfo $r0;

        this := @this: com.android.server.pm.PackageManagerService;

        intent := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        userId = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        query = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>(intent, resolvedType, flags, userId);

        $r0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPreferredActivity(android.content.Intent,java.lang.String,int,java.util.List,int,boolean,boolean,boolean,int)>(intent, resolvedType, flags, query, 0, 0, 0, 0, userId);

        return $r0;
    }

    private android.content.pm.ResolveInfo chooseBestActivity(android.content.Intent, java.lang.String, int, java.util.List, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent intent;
        java.lang.String resolvedType, $r24, $r31, $r33;
        int flags, userId, N, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        java.util.List query;
        boolean debug, $z0, $z1, $z2;
        android.content.pm.ResolveInfo r0, r1, $r2, $r4, $r5, $r36, ri#2, ri#3;
        java.lang.Object $r0, $r1, $r3, $r35;
        android.content.pm.ActivityInfo $r6, $r7, $r8, $r10, $r13, $r15, $r16, $r19, $r20, $r25, $r32;
        android.content.pm.ApplicationInfo $r9, $r12, $r18, $r22;
        android.os.Bundle $r11, $r14, $r17;
        java.lang.StringBuilder $r21, $r23, $r26, $r27, $r28, $r29, $r30, $r34;

        this := @this: com.android.server.pm.PackageManagerService;

        intent := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        query := @parameter3: java.util.List;

        userId := @parameter4: int;

        if query == null goto label10;

        N = interfaceinvoke query.<java.util.List: int size()>();

        if N != 1 goto label01;

        $r35 = interfaceinvoke query.<java.util.List: java.lang.Object get(int)>(0);

        $r36 = (android.content.pm.ResolveInfo) $r35;

        return $r36;

     label01:
        if N <= 1 goto label10;

        $i0 = virtualinvoke intent.<android.content.Intent: int getFlags()>();

        $i1 = $i0 & 8;

        if $i1 == 0 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        debug = $z2;

        $r0 = interfaceinvoke query.<java.util.List: java.lang.Object get(int)>(0);

        r0 = (android.content.pm.ResolveInfo) $r0;

        $r1 = interfaceinvoke query.<java.util.List: java.lang.Object get(int)>(1);

        r1 = (android.content.pm.ResolveInfo) $r1;

        if debug == 0 goto label04;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r25 = r0.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r24 = $r25.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $i10 = r0.<android.content.pm.ResolveInfo: int priority>;

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r32 = r1.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r31 = $r32.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $i12 = r1.<android.content.pm.ResolveInfo: int priority>;

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r33);

     label04:
        $i2 = r0.<android.content.pm.ResolveInfo: int priority>;

        $i3 = r1.<android.content.pm.ResolveInfo: int priority>;

        if $i2 != $i3 goto label05;

        $i4 = r0.<android.content.pm.ResolveInfo: int preferredOrder>;

        $i5 = r1.<android.content.pm.ResolveInfo: int preferredOrder>;

        if $i4 != $i5 goto label05;

        $z0 = r0.<android.content.pm.ResolveInfo: boolean isDefault>;

        $z1 = r1.<android.content.pm.ResolveInfo: boolean isDefault>;

        if $z0 == $z1 goto label06;

     label05:
        $r3 = interfaceinvoke query.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (android.content.pm.ResolveInfo) $r3;

        return $r2;

     label06:
        $i6 = r0.<android.content.pm.ResolveInfo: int priority>;

        ri#2 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPreferredActivity(android.content.Intent,java.lang.String,int,java.util.List,int,boolean,boolean,boolean,int)>(intent, resolvedType, flags, query, $i6, 1, 0, debug, userId);

        if ri#2 == null goto label07;

        return ri#2;

     label07:
        $r5 = new android.content.pm.ResolveInfo;

        $r4 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        specialinvoke $r5.<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>($r4);

        ri#3 = $r5;

        $r7 = new android.content.pm.ActivityInfo;

        $r6 = ri#3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        specialinvoke $r7.<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>($r6);

        ri#3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = $r7;

        $r13 = ri#3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r9 = new android.content.pm.ApplicationInfo;

        $r8 = ri#3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r12 = $r8.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        specialinvoke $r9.<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>($r12);

        $r13.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo> = $r9;

        if userId == 0 goto label08;

        $r19 = ri#3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r22 = $r19.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r20 = ri#3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r18 = $r20.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i7 = $r18.<android.content.pm.ApplicationInfo: int uid>;

        $i9 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i7);

        $i8 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(userId, $i9);

        $r22.<android.content.pm.ApplicationInfo: int uid> = $i8;

     label08:
        $r10 = ri#3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r11 = $r10.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        if $r11 != null goto label09;

        $r15 = ri#3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r14 = new android.os.Bundle;

        specialinvoke $r14.<android.os.Bundle: void <init>()>();

        $r15.<android.content.pm.ActivityInfo: android.os.Bundle metaData> = $r14;

     label09:
        $r16 = ri#3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r17 = $r16.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        virtualinvoke $r17.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.dock_home", 1);

        return ri#3;

     label10:
        return null;
    }

    private android.content.pm.ResolveInfo findPersistentPreferredActivityLP(android.content.Intent, java.lang.String, int, java.util.List, boolean, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent intent;
        java.lang.String resolvedType, $r9, $r10, $r11, $r12, $r19, $r21, $r23, $r33, $r35;
        int flags, userId, N, M, $i0, $i1, $i5, $i7, i#3, j#5;
        java.util.List query, pprefs, $r34;
        boolean debug, $z0, $z1, $z2;
        com.android.server.pm.PersistentPreferredIntentResolver ppir;
        com.android.server.pm.PersistentPreferredActivity ppa;
        android.content.pm.ActivityInfo ai, $r5, $r13, $r18, $r22;
        android.content.pm.ResolveInfo ri;
        com.android.server.pm.Settings $r0;
        java.lang.Object $r1, $r3, $r6;
        android.util.SparseArray $r2;
        android.content.ComponentName $r4, $r29;
        android.content.pm.ApplicationInfo $r7, $r8;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r20, $r25, $r27, $r28, $r30, $r31;
        android.util.LogPrinter $r24, $r32;

        this := @this: com.android.server.pm.PackageManagerService;

        intent := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        query := @parameter3: java.util.List;

        debug := @parameter4: boolean;

        userId := @parameter5: int;

        N = interfaceinvoke query.<java.util.List: int size()>();

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = $r0.<com.android.server.pm.Settings: android.util.SparseArray mPersistentPreferredActivities>;

        $r1 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(userId);

        ppir = (com.android.server.pm.PersistentPreferredIntentResolver) $r1;

        if debug == 0 goto label01;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Looking for presistent preferred activities...");

     label01:
        if ppir == null goto label04;

        $i7 = flags & 65536;

        if $i7 == 0 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        $r34 = virtualinvoke ppir.<com.android.server.pm.PersistentPreferredIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,boolean,int)>(intent, resolvedType, $z2, userId);

        goto label05;

     label04:
        $r34 = null;

     label05:
        pprefs = $r34;

        if pprefs == null goto label19;

        $i0 = interfaceinvoke pprefs.<java.util.List: int size()>();

        if $i0 <= 0 goto label19;

        M = interfaceinvoke pprefs.<java.util.List: int size()>();

        i#3 = 0;

     label06:
        if i#3 >= M goto label19;

        $r3 = interfaceinvoke pprefs.<java.util.List: java.lang.Object get(int)>(i#3);

        ppa = (com.android.server.pm.PersistentPreferredActivity) $r3;

        if debug == 0 goto label09;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking PersistentPreferredActivity ds=");

        $i5 = virtualinvoke ppa.<com.android.server.pm.PersistentPreferredActivity: int countDataSchemes()>();

        if $i5 <= 0 goto label07;

        $r35 = virtualinvoke ppa.<com.android.server.pm.PersistentPreferredActivity: java.lang.String getDataScheme(int)>(0);

        goto label08;

     label07:
        $r35 = "<none>";

     label08:
        $r31 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  component=");

        $r29 = ppa.<com.android.server.pm.PersistentPreferredActivity: android.content.ComponentName mComponent>;

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r33);

        $r32 = new android.util.LogPrinter;

        specialinvoke $r32.<android.util.LogPrinter: void <init>(int,java.lang.String,int)>(2, "PackageManager", 3);

        virtualinvoke ppa.<com.android.server.pm.PersistentPreferredActivity: void dump(android.util.Printer,java.lang.String)>($r32, "  ");

     label09:
        $r4 = ppa.<com.android.server.pm.PersistentPreferredActivity: android.content.ComponentName mComponent>;

        $i1 = flags | 512;

        ai = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>($r4, $i1, userId);

        if debug == 0 goto label11;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Found persistent preferred activity:");

        if ai == null goto label10;

        $r24 = new android.util.LogPrinter;

        specialinvoke $r24.<android.util.LogPrinter: void <init>(int,java.lang.String,int)>(2, "PackageManager", 3);

        virtualinvoke ai.<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>($r24, "  ");

        goto label11;

     label10:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "  null");

     label11:
        if ai != null goto label12;

        goto label18;

     label12:
        j#5 = 0;

     label13:
        if j#5 >= N goto label18;

        $r6 = interfaceinvoke query.<java.util.List: java.lang.Object get(int)>(j#5);

        ri = (android.content.pm.ResolveInfo) $r6;

        $r5 = ri.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r8 = $r5.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r9 = $r8.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r7 = ai.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r10 = $r7.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label14;

        goto label17;

     label14:
        $r13 = ri.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r12 = $r13.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r11 = ai.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label15;

        goto label17;

     label15:
        if debug == 0 goto label16;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Returning persistent preferred activity: ");

        $r18 = ri.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r19 = $r18.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r22 = ri.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r23 = $r22.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r21);

     label16:
        return ri;

     label17:
        j#5 = j#5 + 1;

        goto label13;

     label18:
        i#3 = i#3 + 1;

        goto label06;

     label19:
        return null;
    }

    android.content.pm.ResolveInfo findPreferredActivity(android.content.Intent, java.lang.String, int, java.util.List, int, boolean, boolean, boolean, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String resolvedType, $r11, $r15, $r17, $r19, $r20, $r24, $r29, $r33, $r41, $r51, $r52, $r55, $r63, $r70, $r71, $r72, $r80;
        int flags, priority, userId, N, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, match#5, j#6, match#8, j#9, ri#10, j#12;
        java.util.List query, prefs, $r79;
        boolean always, removeMatches, debug, $z0, $z1, $z2, $z3, $z4, $z5, changed#4;
        android.util.ArrayMap l10, $r1;
        android.content.pm.ResolveInfo pri, ri, ri#7, lastChosen#15;
        com.android.server.pm.PreferredIntentResolver pir;
        com.android.server.pm.PreferredActivity pa, $r38, lastChosen#13;
        android.content.pm.ActivityInfo ai, $r14, $r16, $r21, $r28, $r75;
        java.lang.Throwable l25, l26, $r77, $r78;
        com.android.server.pm.UserManagerService $r0;
        android.content.Intent $r2, intent#1;
        java.lang.Object $r3, $r7, $r9, $r73;
        com.android.server.pm.Settings $r4;
        android.util.SparseArray $r5;
        com.android.server.pm.PreferredComponent $r6, $r8, $r25, $r39, $r40, $r45, $r48, $r54, $r58;
        android.content.ComponentName $r10, $r36, $r44, $r57;
        android.content.pm.ApplicationInfo $r12, $r13;
        java.lang.StringBuilder $r18, $r22, $r23, $r26, $r27, $r30, $r31, $r32, $r34, $r35, $r37, $r42, $r43, $r46, $r47, $r50, $r53, $r56, $r59, $r60, $r61, $r62, $r64, $r65, $r67, $r68, $r69, $r74, $r76;
        android.util.LogPrinter $r49, $r66;

        this := @this: com.android.server.pm.PackageManagerService;

        intent#1 := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        query := @parameter3: java.util.List;

        priority := @parameter4: int;

        always := @parameter5: boolean;

        removeMatches := @parameter6: boolean;

        debug := @parameter7: boolean;

        userId := @parameter8: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l10 = $r1;

        entermonitor $r1;

     label02:
        $r2 = virtualinvoke intent#1.<android.content.Intent: android.content.Intent getSelector()>();

        if $r2 == null goto label03;

        intent#1 = virtualinvoke intent#1.<android.content.Intent: android.content.Intent getSelector()>();

     label03:
        pri = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPersistentPreferredActivityLP(android.content.Intent,java.lang.String,int,java.util.List,boolean,int)>(intent#1, resolvedType, flags, query, debug, userId);

        if pri == null goto label05;

        exitmonitor l10;

     label04:
        return pri;

     label05:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $r3 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(userId);

        pir = (com.android.server.pm.PreferredIntentResolver) $r3;

        if debug == 0 goto label06;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Looking for preferred activities...");

     label06:
        if pir == null goto label09;

        $i6 = flags & 65536;

        if $i6 == 0 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        $r79 = virtualinvoke pir.<com.android.server.pm.PreferredIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,boolean,int)>(intent#1, resolvedType, $z5, userId);

        goto label10;

     label09:
        $r79 = null;

     label10:
        prefs = $r79;

        if prefs == null goto label45;

        $i0 = interfaceinvoke prefs.<java.util.List: int size()>();

        if $i0 <= 0 goto label45;

        changed#4 = 0;

     label11:
        match#5 = 0;

        if debug == 0 goto label12;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Figuring out best match...");

     label12:
        N = interfaceinvoke query.<java.util.List: int size()>();

        j#6 = 0;

     label13:
        if j#6 >= N goto label16;

        $r73 = interfaceinvoke query.<java.util.List: java.lang.Object get(int)>(j#6);

        ri#7 = (android.content.pm.ResolveInfo) $r73;

        if debug == 0 goto label14;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Match for ");

        $r75 = ri#7.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r68 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r75);

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": 0x");

        $r70 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(match#5);

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r71);

     label14:
        $i7 = ri#7.<android.content.pm.ResolveInfo: int match>;

        if $i7 <= match#5 goto label15;

        match#5 = ri#7.<android.content.pm.ResolveInfo: int match>;

     label15:
        j#6 = j#6 + 1;

        goto label13;

     label16:
        if debug == 0 goto label17;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Best match: 0x");

        $r63 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(match#5);

        $r62 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r72 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r72);

     label17:
        match#8 = match#5 & 268369920;

        j#9 = interfaceinvoke prefs.<java.util.List: int size()>();

        ri#10 = 0;

     label18:
        if ri#10 >= j#9 goto label41;

        $r7 = interfaceinvoke prefs.<java.util.List: java.lang.Object get(int)>(ri#10);

        pa = (com.android.server.pm.PreferredActivity) $r7;

        if debug == 0 goto label21;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking PreferredActivity ds=");

        $i5 = virtualinvoke pa.<com.android.server.pm.PreferredActivity: int countDataSchemes()>();

        if $i5 <= 0 goto label19;

        $r80 = virtualinvoke pa.<com.android.server.pm.PreferredActivity: java.lang.String getDataScheme(int)>(0);

        goto label20;

     label19:
        $r80 = "<none>";

     label20:
        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r80);

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  component=");

        $r58 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r57 = $r58.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $r56 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r57);

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r55);

        $r66 = new android.util.LogPrinter;

        specialinvoke $r66.<android.util.LogPrinter: void <init>(int,java.lang.String,int)>(2, "PackageManager", 3);

        virtualinvoke pa.<com.android.server.pm.PreferredActivity: void dump(android.util.Printer,java.lang.String)>($r66, "  ");

     label21:
        $r8 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $i1 = $r8.<com.android.server.pm.PreferredComponent: int mMatch>;

        if $i1 == match#8 goto label22;

        if debug == 0 goto label40;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping bad match ");

        $r54 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $i4 = $r54.<com.android.server.pm.PreferredComponent: int mMatch>;

        $r52 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        $r53 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r51 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r51);

        goto label40;

     label22:
        if always == 0 goto label23;

        $r48 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z4 = $r48.<com.android.server.pm.PreferredComponent: boolean mAlways>;

        if $z4 != 0 goto label23;

        if debug == 0 goto label40;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Skipping mAlways=false entry");

        goto label40;

     label23:
        $r6 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r10 = $r6.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $i2 = flags | 512;

        ai = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>($r10, $i2, userId);

        if debug == 0 goto label25;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Found preferred activity:");

        if ai == null goto label24;

        $r49 = new android.util.LogPrinter;

        specialinvoke $r49.<android.util.LogPrinter: void <init>(int,java.lang.String,int)>(2, "PackageManager", 3);

        virtualinvoke ai.<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>($r49, "  ");

        goto label25;

     label24:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "  null");

     label25:
        if ai != null goto label26;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing dangling preferred activity: ");

        $r45 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r44 = $r45.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r41);

        virtualinvoke pir.<com.android.server.pm.PreferredIntentResolver: void removeFilter(android.content.IntentFilter)>(pa);

        changed#4 = 1;

        goto label40;

     label26:
        j#12 = 0;

     label27:
        if j#12 >= N goto label40;

        $r9 = interfaceinvoke query.<java.util.List: java.lang.Object get(int)>(j#12);

        ri = (android.content.pm.ResolveInfo) $r9;

        $r14 = ri.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r13 = $r14.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r17 = $r13.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r12 = ai.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r11 = $r12.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label28;

        goto label39;

     label28:
        $r16 = ri.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r19 = $r16.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r15 = ai.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z2 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 != 0 goto label29;

        goto label39;

     label29:
        if removeMatches == 0 goto label30;

        virtualinvoke pir.<com.android.server.pm.PreferredIntentResolver: void removeFilter(android.content.IntentFilter)>(pa);

        changed#4 = 1;

        goto label40;

     label30:
        if always == 0 goto label34;

        $r25 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z3 = virtualinvoke $r25.<com.android.server.pm.PreferredComponent: boolean sameSet(java.util.List)>(query);

        if $z3 != 0 goto label34;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result set changed, dropping preferred activity for ");

        $r30 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(intent#1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(resolvedType);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r33);

        virtualinvoke pir.<com.android.server.pm.PreferredIntentResolver: void removeFilter(android.content.IntentFilter)>(pa);

        $r38 = new com.android.server.pm.PreferredActivity;

        $r40 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $i3 = $r40.<com.android.server.pm.PreferredComponent: int mMatch>;

        $r39 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r36 = $r39.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        specialinvoke $r38.<com.android.server.pm.PreferredActivity: void <init>(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,boolean)>(pa, $i3, null, $r36, 0);

        lastChosen#13 = $r38;

        virtualinvoke pir.<com.android.server.pm.PreferredIntentResolver: void addFilter(android.content.IntentFilter)>(lastChosen#13);

     label31:
        if 1 == 0 goto label32;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

     label32:
        exitmonitor l10;

     label33:
        return null;

     label34:
        if debug == 0 goto label35;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Returning preferred activity: ");

        $r21 = ri.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r20 = $r21.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r28 = ri.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r29 = $r28.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r23 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r24);

     label35:
        lastChosen#15 = ri;

     label36:
        if changed#4 == 0 goto label37;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

     label37:
        exitmonitor l10;

     label38:
        return lastChosen#15;

     label39:
        j#12 = j#12 + 1;

        goto label27;

     label40:
        ri#10 = ri#10 + 1;

        goto label18;

     label41:
        if changed#4 == 0 goto label45;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

        goto label45;

     label42:
        $r77 := @caughtexception;

        l25 = $r77;

     label43:
        if changed#4 == 0 goto label44;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

     label44:
        throw l25;

     label45:
        exitmonitor l10;

     label46:
        goto label49;

     label47:
        $r78 := @caughtexception;

        l26 = $r78;

        exitmonitor l10;

     label48:
        throw l26;

     label49:
        if debug == 0 goto label50;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "No preferred activity to return");

     label50:
        return null;

        catch java.lang.Throwable from label11 to label31 with label42;
        catch java.lang.Throwable from label34 to label36 with label42;
        catch java.lang.Throwable from label39 to label41 with label42;
        catch java.lang.Throwable from label42 to label43 with label42;
        catch java.lang.Throwable from label02 to label04 with label47;
        catch java.lang.Throwable from label05 to label33 with label47;
        catch java.lang.Throwable from label34 to label38 with label47;
        catch java.lang.Throwable from label39 to label46 with label47;
        catch java.lang.Throwable from label47 to label48 with label47;
    }

    public boolean canForwardTo(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent intent;
        java.lang.String resolvedType;
        int sourceUserId, targetUserId, $i0, $i1, size#1, i#2;
        java.util.List matches;
        com.android.server.pm.PackageManagerService$CrossProfileDomainInfo xpDomainInfo;
        java.lang.Throwable l9, $r4;
        android.content.Context $r0;
        boolean $z0, $z1;
        android.util.ArrayMap $r1, i#4;
        com.android.server.pm.CrossProfileIntentFilter $r2;
        java.lang.Object $r3;
        android.content.pm.UserInfo size#3;

        this := @this: com.android.server.pm.PackageManagerService;

        intent := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        sourceUserId := @parameter2: int;

        targetUserId := @parameter3: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", null);

        matches = specialinvoke this.<com.android.server.pm.PackageManagerService: java.util.List getMatchingCrossProfileIntentFilters(android.content.Intent,java.lang.String,int)>(intent, resolvedType, sourceUserId);

        if matches == null goto label03;

        size#1 = interfaceinvoke matches.<java.util.List: int size()>();

        i#2 = 0;

     label01:
        if i#2 >= size#1 goto label03;

        $r3 = interfaceinvoke matches.<java.util.List: java.lang.Object get(int)>(i#2);

        $r2 = (com.android.server.pm.CrossProfileIntentFilter) $r3;

        $i1 = virtualinvoke $r2.<com.android.server.pm.CrossProfileIntentFilter: int getTargetUserId()>();

        if $i1 != targetUserId goto label02;

        return 1;

     label02:
        i#2 = i#2 + 1;

        goto label01;

     label03:
        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasWebURI(android.content.Intent)>(intent);

        if $z0 == 0 goto label10;

        size#3 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.UserInfo getProfileParent(int)>(sourceUserId);

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        i#4 = $r1;

        entermonitor $r1;

     label04:
        $i0 = size#3.<android.content.pm.UserInfo: int id>;

        xpDomainInfo = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$CrossProfileDomainInfo getCrossProfileDomainPreferredLpr(android.content.Intent,java.lang.String,int,int,int)>(intent, resolvedType, 0, sourceUserId, $i0);

        if xpDomainInfo == null goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        exitmonitor i#4;

     label07:
        return $z1;

     label08:
        $r4 := @caughtexception;

        l9 = $r4;

        exitmonitor i#4;

     label09:
        throw l9;

     label10:
        return 0;

        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private android.content.pm.UserInfo getProfileParent(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId;
        long identity;
        android.content.pm.UserInfo l4;
        java.lang.Throwable l5, $r1;
        com.android.server.pm.UserManagerService $r0;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        l4 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getProfileParent(int)>(userId);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return l4;

     label3:
        $r1 := @caughtexception;

        l5 = $r1;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.util.List getMatchingCrossProfileIntentFilters(android.content.Intent, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent intent;
        java.lang.String resolvedType;
        int userId;
        com.android.server.pm.CrossProfileIntentResolver resolver;
        com.android.server.pm.Settings $r0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        java.util.List $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        intent := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        userId := @parameter2: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r1 = $r0.<com.android.server.pm.Settings: android.util.SparseArray mCrossProfileIntentResolvers>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(userId);

        resolver = (com.android.server.pm.CrossProfileIntentResolver) $r2;

        if resolver == null goto label1;

        $r3 = virtualinvoke resolver.<com.android.server.pm.CrossProfileIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,boolean,int)>(intent, resolvedType, 0, userId);

        return $r3;

     label1:
        return null;
    }

    public java.util.List queryIntentActivities(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String resolvedType, ai#7;
        int flags, userId, $i0, $i1, $i2, $i3, $i4, $i5;
        android.content.pm.UserInfo parent;
        java.lang.Throwable l13, $r19;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1, $z5, $z6;
        android.util.ArrayMap $r1, $r3, list#6;
        java.lang.Object $r2;
        java.util.ArrayList $r4, $r6, $r12, $r14, list#3, result#10;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r5, $r9;
        java.util.List $r7, $r8, $r15, $r18, ri#8, result#11, result#13;
        android.content.pm.ResolveInfo $r10, $r17, ri#5, xpResolveInfo#9, xpResolveInfo#12;
        java.util.Comparator $r11, $r13;
        android.content.Intent $r16, intent#1;
        android.content.ComponentName comp#2;
        android.content.pm.ActivityInfo ai#4;
        com.android.server.pm.PackageManagerService$CrossProfileDomainInfo xpDomainInfo#14;
        android.content.pm.PackageParser$Package ri#15;

        this := @this: com.android.server.pm.PackageManagerService;

        intent#1 := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        userId := @parameter3: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        $r18 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r18;

     label01:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 0, 0, "query intent activities");

        comp#2 = virtualinvoke intent#1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if comp#2 != null goto label02;

        $r16 = virtualinvoke intent#1.<android.content.Intent: android.content.Intent getSelector()>();

        if $r16 == null goto label02;

        intent#1 = virtualinvoke intent#1.<android.content.Intent: android.content.Intent getSelector()>();

        comp#2 = virtualinvoke intent#1.<android.content.Intent: android.content.ComponentName getComponent()>();

     label02:
        if comp#2 == null goto label04;

        $r14 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>(1);

        list#3 = $r14;

        ai#4 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>(comp#2, flags, userId);

        if ai#4 == null goto label03;

        $r17 = new android.content.pm.ResolveInfo;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r17.<android.content.pm.ResolveInfo: void <init>()>();

        ri#5 = $r17;

        ri#5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = ai#4;

        interfaceinvoke list#3.<java.util.List: boolean add(java.lang.Object)>(ri#5);

     label03:
        return list#3;

     label04:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        list#6 = $r1;

        entermonitor $r1;

     label05:
        ai#7 = virtualinvoke intent#1.<android.content.Intent: java.lang.String getPackage()>();

        if ai#7 != null goto label17;

        ri#8 = specialinvoke this.<com.android.server.pm.PackageManagerService: java.util.List getMatchingCrossProfileIntentFilters(android.content.Intent,java.lang.String,int)>(intent#1, resolvedType, userId);

        xpResolveInfo#9 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo querySkipCurrentProfileIntents(java.util.List,android.content.Intent,java.lang.String,int,int)>(ri#8, intent#1, resolvedType, flags, userId);

        if xpResolveInfo#9 == null goto label07;

        $i5 = xpResolveInfo#9.<android.content.pm.ResolveInfo: int targetUserId>;

        $z6 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean isUserEnabled(int)>($i5);

        if $z6 == 0 goto label07;

        $r12 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(1);

        result#10 = $r12;

        interfaceinvoke result#10.<java.util.List: boolean add(java.lang.Object)>(xpResolveInfo#9);

        $r15 = specialinvoke this.<com.android.server.pm.PackageManagerService: java.util.List filterIfNotPrimaryUser(java.util.List,int)>(result#10, userId);

        exitmonitor list#6;

     label06:
        return $r15;

     label07:
        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities>;

        result#11 = virtualinvoke $r9.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,int,int)>(intent#1, resolvedType, flags, userId);

        xpResolveInfo#12 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo queryCrossProfileIntents(java.util.List,android.content.Intent,java.lang.String,int,int)>(ri#8, intent#1, resolvedType, flags, userId);

        if xpResolveInfo#12 == null goto label08;

        $i4 = xpResolveInfo#12.<android.content.pm.ResolveInfo: int targetUserId>;

        $z5 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean isUserEnabled(int)>($i4);

        if $z5 == 0 goto label08;

        interfaceinvoke result#11.<java.util.List: boolean add(java.lang.Object)>(xpResolveInfo#12);

        $r13 = <com.android.server.pm.PackageManagerService: java.util.Comparator mResolvePrioritySorter>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(result#11, $r13);

     label08:
        result#13 = specialinvoke this.<com.android.server.pm.PackageManagerService: java.util.List filterIfNotPrimaryUser(java.util.List,int)>(result#11, userId);

        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasWebURI(android.content.Intent)>(intent#1);

        if $z1 == 0 goto label15;

        xpDomainInfo#14 = null;

        parent = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.UserInfo getProfileParent(int)>(userId);

        if parent == null goto label09;

        $i3 = parent.<android.content.pm.UserInfo: int id>;

        xpDomainInfo#14 = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$CrossProfileDomainInfo getCrossProfileDomainPreferredLpr(android.content.Intent,java.lang.String,int,int,int)>(intent#1, resolvedType, flags, userId, $i3);

     label09:
        if xpDomainInfo#14 == null goto label12;

        if xpResolveInfo#12 == null goto label10;

        interfaceinvoke result#13.<java.util.List: boolean remove(java.lang.Object)>(xpResolveInfo#12);

     label10:
        $i2 = interfaceinvoke result#13.<java.util.List: int size()>();

        if $i2 != 0 goto label14;

        $r10 = xpDomainInfo#14.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: android.content.pm.ResolveInfo resolveInfo>;

        interfaceinvoke result#13.<java.util.List: boolean add(java.lang.Object)>($r10);

        exitmonitor list#6;

     label11:
        return result#13;

     label12:
        $i1 = interfaceinvoke result#13.<java.util.List: int size()>();

        if $i1 > 1 goto label14;

        exitmonitor list#6;

     label13:
        return result#13;

     label14:
        result#13 = specialinvoke this.<com.android.server.pm.PackageManagerService: java.util.List filterCandidatesWithDomainPreferredActivitiesLPr(android.content.Intent,int,java.util.List,com.android.server.pm.PackageManagerService$CrossProfileDomainInfo,int)>(intent#1, flags, result#13, xpDomainInfo#14, userId);

        $r11 = <com.android.server.pm.PackageManagerService: java.util.Comparator mResolvePrioritySorter>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(result#13, $r11);

     label15:
        exitmonitor list#6;

     label16:
        return result#13;

     label17:
        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(ai#7);

        ri#15 = (android.content.pm.PackageParser$Package) $r2;

        if ri#15 == null goto label19;

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities>;

        $r6 = ri#15.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        $r8 = virtualinvoke $r5.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.util.List queryIntentForPackage(android.content.Intent,java.lang.String,int,java.util.ArrayList,int)>(intent#1, resolvedType, flags, $r6, userId);

        $r7 = specialinvoke this.<com.android.server.pm.PackageManagerService: java.util.List filterIfNotPrimaryUser(java.util.List,int)>($r8, userId);

        exitmonitor list#6;

     label18:
        return $r7;

     label19:
        $r4 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        exitmonitor list#6;

     label20:
        return $r4;

     label21:
        $r19 := @caughtexception;

        l13 = $r19;

        exitmonitor list#6;

     label22:
        throw l13;

        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label07 to label11 with label21;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label14 to label16 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    private com.android.server.pm.PackageManagerService$CrossProfileDomainInfo getCrossProfileDomainPreferredLpr(android.content.Intent, java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent intent;
        java.lang.String resolvedType, packageName;
        int flags, sourceUserId, parentUserId, size, status, $i0, $i1, $i3, i#2;
        java.util.List resultTargetUser;
        android.content.pm.ResolveInfo riTargetUser, $r8;
        com.android.server.pm.PackageSetting ps;
        long verificationState, $l2;
        boolean $z0, $z1, $z2;
        com.android.server.pm.UserManagerService $r0;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r1;
        java.lang.Object $r2, $r6;
        android.content.pm.ActivityInfo $r3;
        android.util.ArrayMap $r4;
        com.android.server.pm.Settings $r5;
        android.content.IntentFilter $r7;
        com.android.server.pm.PackageManagerService$CrossProfileDomainInfo $r9, result#1;

        this := @this: com.android.server.pm.PackageManagerService;

        intent := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        sourceUserId := @parameter3: int;

        parentUserId := @parameter4: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>("allow_parent_profile_app_linking", sourceUserId);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities>;

        resultTargetUser = virtualinvoke $r1.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,int,int)>(intent, resolvedType, flags, parentUserId);

        if resultTargetUser == null goto label02;

        $z1 = interfaceinvoke resultTargetUser.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label03;

     label02:
        return null;

     label03:
        result#1 = null;

        size = interfaceinvoke resultTargetUser.<java.util.List: int size()>();

        i#2 = 0;

     label04:
        if i#2 >= size goto label09;

        $r2 = interfaceinvoke resultTargetUser.<java.util.List: java.lang.Object get(int)>(i#2);

        riTargetUser = (android.content.pm.ResolveInfo) $r2;

        $z2 = riTargetUser.<android.content.pm.ResolveInfo: boolean handleAllWebDataURI>;

        if $z2 == 0 goto label05;

        goto label08;

     label05:
        $r3 = riTargetUser.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        packageName = $r3.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r6;

        if ps != null goto label06;

        goto label08;

     label06:
        verificationState = specialinvoke this.<com.android.server.pm.PackageManagerService: long getDomainVerificationStatusLPr(com.android.server.pm.PackageSetting,int)>(ps, parentUserId);

        $l2 = verificationState >> 32;

        status = (int) $l2;

        if result#1 != null goto label07;

        $r9 = new com.android.server.pm.PackageManagerService$CrossProfileDomainInfo;

        specialinvoke $r9.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: void <init>(com.android.server.pm.PackageManagerService$1)>(null);

        result#1 = $r9;

        $r7 = new android.content.IntentFilter;

        specialinvoke $r7.<android.content.IntentFilter: void <init>()>();

        $r8 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo createForwardingResolveInfo(android.content.IntentFilter,int,int)>($r7, sourceUserId, parentUserId);

        result#1.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: android.content.pm.ResolveInfo resolveInfo> = $r8;

        result#1.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus> = status;

        goto label08;

     label07:
        $i1 = result#1.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus>;

        $i3 = specialinvoke this.<com.android.server.pm.PackageManagerService: int bestDomainVerificationStatus(int,int)>(status, $i1);

        result#1.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus> = $i3;

     label08:
        i#2 = i#2 + 1;

        goto label04;

     label09:
        if result#1 == null goto label10;

        $i0 = result#1.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus>;

        if $i0 != 3 goto label10;

        return null;

     label10:
        return result#1;
    }

    private int bestDomainVerificationStatus(int, int)
    {
        com.android.server.pm.PackageManagerService this;
        int status1, status2, $i0;
        float $f0;

        this := @this: com.android.server.pm.PackageManagerService;

        status1 := @parameter0: int;

        status2 := @parameter1: int;

        if status1 != 3 goto label1;

        return status2;

     label1:
        if status2 != 3 goto label2;

        return status1;

     label2:
        $f0 = staticinvoke <android.util.MathUtils: float max(int,int)>(status1, status2);

        $i0 = (int) $f0;

        return $i0;
    }

    private boolean isUserEnabled(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId;
        long callingId;
        android.content.pm.UserInfo userInfo;
        boolean l5, $z0, $z1;
        java.lang.Throwable l6, $r1;
        com.android.server.pm.UserManagerService $r0;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        callingId = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        userInfo = virtualinvoke $r0.<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>(userId);

        if userInfo == null goto label2;

        $z0 = virtualinvoke userInfo.<android.content.pm.UserInfo: boolean isEnabled()>();

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        l5 = $z1;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        return l5;

     label5:
        $r1 := @caughtexception;

        l6 = $r1;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        throw l6;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.util.List filterIfNotPrimaryUser(java.util.List, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.util.List resolveInfos;
        int userId, $i0, $i1, $i2, i#1;
        android.content.pm.ResolveInfo info;
        java.lang.Object $r0;
        android.content.pm.ActivityInfo $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        resolveInfos := @parameter0: java.util.List;

        userId := @parameter1: int;

        if userId != 0 goto label1;

        return resolveInfos;

     label1:
        $i0 = interfaceinvoke resolveInfos.<java.util.List: int size()>();

        i#1 = $i0 - 1;

     label2:
        if i#1 < 0 goto label4;

        $r0 = interfaceinvoke resolveInfos.<java.util.List: java.lang.Object get(int)>(i#1);

        info = (android.content.pm.ResolveInfo) $r0;

        $r1 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $i1 = $r1.<android.content.pm.ActivityInfo: int flags>;

        $i2 = $i1 & 536870912;

        if $i2 == 0 goto label3;

        interfaceinvoke resolveInfos.<java.util.List: java.lang.Object remove(int)>(i#1);

     label3:
        i#1 = i#1 + -1;

        goto label2;

     label4:
        return resolveInfos;
    }

    private static boolean hasWebURI(android.content.Intent)
    {
        android.content.Intent intent;
        java.lang.String scheme;
        android.net.Uri $r0;
        boolean $z0, $z1, $z2, $z3;

        intent := @parameter0: android.content.Intent;

        $r0 = virtualinvoke intent.<android.content.Intent: android.net.Uri getData()>();

        if $r0 != null goto label1;

        return 0;

     label1:
        scheme = virtualinvoke intent.<android.content.Intent: java.lang.String getScheme()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(scheme);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke scheme.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke scheme.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z2 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    private java.util.List filterCandidatesWithDomainPreferredActivitiesLPr(android.content.Intent, int, java.util.List, com.android.server.pm.PackageManagerService$CrossProfileDomainInfo, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent intent;
        int matchFlags, userId, count, linkGeneration, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13, $i14, n#2, status#7, packageName#12, packedStatus#14, n#15;
        java.util.List candidates;
        com.android.server.pm.PackageManagerService$CrossProfileDomainInfo xpDomainInfo;
        boolean debug, $z3, $z6, $z7, $z13, $z19, n#8;
        java.util.ArrayList result, alwaysList, undefinedList, alwaysAskList, neverList, matchAllList, $r0, $r1, $r2, $r3, $r4, $r5;
        android.util.ArrayMap l13, $r6, $r24;
        java.lang.Throwable l23, $r26;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r16, $r17;
        java.lang.Object $r10, $r18, $r21, $r23;
        java.lang.String $r11, $r13, $r15, packageName#4, info#11;
        android.content.pm.ActivityInfo $r14, $r22;
        android.content.pm.ResolveInfo $r19, $r20, info#3, packageName#10, ps#13, status#16;
        long $l15, $l16, packedStatus#6;
        com.android.server.pm.Settings $r25;
        com.android.server.pm.PackageSetting ps#5;
        java.util.Iterator info#9;

        this := @this: com.android.server.pm.PackageManagerService;

        intent := @parameter0: android.content.Intent;

        matchFlags := @parameter1: int;

        candidates := @parameter2: java.util.List;

        xpDomainInfo := @parameter3: com.android.server.pm.PackageManagerService$CrossProfileDomainInfo;

        userId := @parameter4: int;

        $i1 = virtualinvoke intent.<android.content.Intent: int getFlags()>();

        $i0 = $i1 & 8;

        if $i0 == 0 goto label01;

        $z19 = 1;

        goto label02;

     label01:
        $z19 = 0;

     label02:
        debug = $z19;

        $r1 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        result = $r1;

        $r0 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        alwaysList = $r0;

        $r3 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        undefinedList = $r3;

        $r2 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        alwaysAskList = $r2;

        $r5 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        neverList = $r5;

        $r4 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        matchAllList = $r4;

        $r6 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l13 = $r6;

        entermonitor $r6;

     label03:
        count = interfaceinvoke candidates.<java.util.List: int size()>();

        n#2 = 0;

     label04:
        if n#2 >= count goto label11;

        $r23 = interfaceinvoke candidates.<java.util.List: java.lang.Object get(int)>(n#2);

        info#3 = (android.content.pm.ResolveInfo) $r23;

        $r22 = info#3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        packageName#4 = $r22.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r25 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r24 = $r25.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r21 = virtualinvoke $r24.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName#4);

        ps#5 = (com.android.server.pm.PackageSetting) $r21;

        if ps#5 == null goto label10;

        $z13 = info#3.<android.content.pm.ResolveInfo: boolean handleAllWebDataURI>;

        if $z13 == 0 goto label05;

        virtualinvoke matchAllList.<java.util.ArrayList: boolean add(java.lang.Object)>(info#3);

        goto label10;

     label05:
        packedStatus#6 = specialinvoke this.<com.android.server.pm.PackageManagerService: long getDomainVerificationStatusLPr(com.android.server.pm.PackageSetting,int)>(ps#5, userId);

        $l15 = packedStatus#6 >> 32;

        status#7 = (int) $l15;

        $l16 = packedStatus#6 & -1L;

        linkGeneration = (int) $l16;

        if status#7 != 2 goto label06;

        info#3.<android.content.pm.ResolveInfo: int preferredOrder> = linkGeneration;

        virtualinvoke alwaysList.<java.util.ArrayList: boolean add(java.lang.Object)>(info#3);

        goto label10;

     label06:
        if status#7 != 3 goto label07;

        virtualinvoke neverList.<java.util.ArrayList: boolean add(java.lang.Object)>(info#3);

        goto label10;

     label07:
        if status#7 != 4 goto label08;

        virtualinvoke alwaysAskList.<java.util.ArrayList: boolean add(java.lang.Object)>(info#3);

        goto label10;

     label08:
        if status#7 == 0 goto label09;

        if status#7 != 1 goto label10;

     label09:
        virtualinvoke undefinedList.<java.util.ArrayList: boolean add(java.lang.Object)>(info#3);

     label10:
        n#2 = n#2 + 1;

        goto label04;

     label11:
        n#8 = 0;

        $i2 = virtualinvoke alwaysList.<java.util.ArrayList: int size()>();

        if $i2 <= 0 goto label12;

        virtualinvoke result.<java.util.ArrayList: boolean addAll(java.util.Collection)>(alwaysList);

        goto label16;

     label12:
        if xpDomainInfo == null goto label13;

        $i12 = xpDomainInfo.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus>;

        if $i12 != 2 goto label13;

        $r19 = xpDomainInfo.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: android.content.pm.ResolveInfo resolveInfo>;

        virtualinvoke result.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        goto label16;

     label13:
        virtualinvoke result.<java.util.ArrayList: boolean addAll(java.util.Collection)>(undefinedList);

        if xpDomainInfo == null goto label15;

        $i13 = xpDomainInfo.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus>;

        if $i13 == 0 goto label14;

        $i14 = xpDomainInfo.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus>;

        if $i14 != 1 goto label15;

     label14:
        $r20 = xpDomainInfo.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: android.content.pm.ResolveInfo resolveInfo>;

        virtualinvoke result.<java.util.ArrayList: boolean add(java.lang.Object)>($r20);

     label15:
        n#8 = 1;

     label16:
        $i4 = virtualinvoke alwaysAskList.<java.util.ArrayList: int size()>();

        if $i4 <= 0 goto label19;

        info#9 = virtualinvoke result.<java.util.ArrayList: java.util.Iterator iterator()>();

     label17:
        $z7 = interfaceinvoke info#9.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label18;

        $r18 = interfaceinvoke info#9.<java.util.Iterator: java.lang.Object next()>();

        packageName#10 = (android.content.pm.ResolveInfo) $r18;

        packageName#10.<android.content.pm.ResolveInfo: int preferredOrder> = 0;

        goto label17;

     label18:
        virtualinvoke result.<java.util.ArrayList: boolean addAll(java.util.Collection)>(alwaysAskList);

        n#8 = 1;

     label19:
        if n#8 == 0 goto label30;

        $i3 = matchFlags & 131072;

        if $i3 == 0 goto label20;

        virtualinvoke result.<java.util.ArrayList: boolean addAll(java.util.Collection)>(matchAllList);

        goto label29;

     label20:
        info#11 = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.lang.String getDefaultBrowserPackageName(int)>(userId);

        packageName#12 = 0;

        ps#13 = null;

        packedStatus#14 = virtualinvoke matchAllList.<java.util.ArrayList: int size()>();

        n#15 = 0;

     label21:
        if n#15 >= packedStatus#14 goto label26;

        $r10 = virtualinvoke matchAllList.<java.util.ArrayList: java.lang.Object get(int)>(n#15);

        status#16 = (android.content.pm.ResolveInfo) $r10;

        $i7 = status#16.<android.content.pm.ResolveInfo: int priority>;

        if $i7 <= packageName#12 goto label22;

        packageName#12 = status#16.<android.content.pm.ResolveInfo: int priority>;

     label22:
        $r14 = status#16.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r13 = $r14.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z6 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(info#11);

        if $z6 == 0 goto label25;

        if ps#13 == null goto label23;

        $i11 = ps#13.<android.content.pm.ResolveInfo: int priority>;

        $i10 = status#16.<android.content.pm.ResolveInfo: int priority>;

        if $i11 >= $i10 goto label25;

     label23:
        if debug == 0 goto label24;

        $r12 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Considering default browser match ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(status#16);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r15);

     label24:
        ps#13 = status#16;

     label25:
        n#15 = n#15 + 1;

        goto label21;

     label26:
        if ps#13 == null goto label28;

        $i6 = ps#13.<android.content.pm.ResolveInfo: int priority>;

        if $i6 < packageName#12 goto label28;

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(info#11);

        if $z3 != 0 goto label28;

        if debug == 0 goto label27;

        $r9 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default browser match ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(ps#13);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r11);

     label27:
        virtualinvoke result.<java.util.ArrayList: boolean add(java.lang.Object)>(ps#13);

        goto label29;

     label28:
        virtualinvoke result.<java.util.ArrayList: boolean addAll(java.util.Collection)>(matchAllList);

     label29:
        $i5 = virtualinvoke result.<java.util.ArrayList: int size()>();

        if $i5 != 0 goto label30;

        virtualinvoke result.<java.util.ArrayList: boolean addAll(java.util.Collection)>(candidates);

        virtualinvoke result.<java.util.ArrayList: boolean removeAll(java.util.Collection)>(neverList);

     label30:
        exitmonitor l13;

     label31:
        goto label34;

     label32:
        $r26 := @caughtexception;

        l23 = $r26;

        exitmonitor l13;

     label33:
        throw l23;

     label34:
        return result;

        catch java.lang.Throwable from label03 to label31 with label32;
        catch java.lang.Throwable from label32 to label33 with label32;
    }

    private long getDomainVerificationStatusLPr(com.android.server.pm.PackageSetting, int)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting ps;
        int userId, $i2;
        long $l0, $l3, result#1;
        byte $b1;
        android.content.pm.IntentFilterVerificationInfo $r0, $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        ps := @parameter0: com.android.server.pm.PackageSetting;

        userId := @parameter1: int;

        result#1 = virtualinvoke ps.<com.android.server.pm.PackageSetting: long getDomainVerificationStatusForUser(int)>(userId);

        $l0 = result#1 >> 32;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r0 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.IntentFilterVerificationInfo getIntentFilterVerificationInfo()>();

        if $r0 == null goto label1;

        $r1 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.IntentFilterVerificationInfo getIntentFilterVerificationInfo()>();

        $i2 = virtualinvoke $r1.<android.content.pm.IntentFilterVerificationInfo: int getStatus()>();

        $l3 = (long) $i2;

        result#1 = $l3 << 32;

     label1:
        return result#1;
    }

    private android.content.pm.ResolveInfo querySkipCurrentProfileIntents(java.util.List, android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.util.List matchingFilters;
        android.content.Intent intent;
        java.lang.String resolvedType;
        int flags, sourceUserId, size, $i0, $i1, i#1;
        com.android.server.pm.CrossProfileIntentFilter filter;
        android.content.pm.ResolveInfo resolveInfo;
        java.lang.Object $r0;

        this := @this: com.android.server.pm.PackageManagerService;

        matchingFilters := @parameter0: java.util.List;

        intent := @parameter1: android.content.Intent;

        resolvedType := @parameter2: java.lang.String;

        flags := @parameter3: int;

        sourceUserId := @parameter4: int;

        if matchingFilters == null goto label3;

        size = interfaceinvoke matchingFilters.<java.util.List: int size()>();

        i#1 = 0;

     label1:
        if i#1 >= size goto label3;

        $r0 = interfaceinvoke matchingFilters.<java.util.List: java.lang.Object get(int)>(i#1);

        filter = (com.android.server.pm.CrossProfileIntentFilter) $r0;

        $i0 = virtualinvoke filter.<com.android.server.pm.CrossProfileIntentFilter: int getFlags()>();

        $i1 = $i0 & 2;

        if $i1 == 0 goto label2;

        resolveInfo = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo checkTargetCanHandle(com.android.server.pm.CrossProfileIntentFilter,android.content.Intent,java.lang.String,int,int)>(filter, intent, resolvedType, flags, sourceUserId);

        if resolveInfo == null goto label2;

        return resolveInfo;

     label2:
        i#1 = i#1 + 1;

        goto label1;

     label3:
        return null;
    }

    private android.content.pm.ResolveInfo queryCrossProfileIntents(java.util.List, android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.util.List matchingFilters;
        android.content.Intent intent;
        java.lang.String resolvedType;
        int flags, sourceUserId, size, targetUserId, $i0, $i1, i#1;
        android.util.SparseBooleanArray alreadyTriedUserIds, $r0;
        com.android.server.pm.CrossProfileIntentFilter filter;
        android.content.pm.ResolveInfo resolveInfo;
        java.lang.Object $r1;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        matchingFilters := @parameter0: java.util.List;

        intent := @parameter1: android.content.Intent;

        resolvedType := @parameter2: java.lang.String;

        flags := @parameter3: int;

        sourceUserId := @parameter4: int;

        if matchingFilters == null goto label4;

        $r0 = new android.util.SparseBooleanArray;

        specialinvoke $r0.<android.util.SparseBooleanArray: void <init>()>();

        alreadyTriedUserIds = $r0;

        size = interfaceinvoke matchingFilters.<java.util.List: int size()>();

        i#1 = 0;

     label1:
        if i#1 >= size goto label4;

        $r1 = interfaceinvoke matchingFilters.<java.util.List: java.lang.Object get(int)>(i#1);

        filter = (com.android.server.pm.CrossProfileIntentFilter) $r1;

        targetUserId = virtualinvoke filter.<com.android.server.pm.CrossProfileIntentFilter: int getTargetUserId()>();

        $i1 = virtualinvoke filter.<com.android.server.pm.CrossProfileIntentFilter: int getFlags()>();

        $i0 = $i1 & 2;

        if $i0 != 0 goto label3;

        $z0 = virtualinvoke alreadyTriedUserIds.<android.util.SparseBooleanArray: boolean get(int)>(targetUserId);

        if $z0 != 0 goto label3;

        resolveInfo = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo checkTargetCanHandle(com.android.server.pm.CrossProfileIntentFilter,android.content.Intent,java.lang.String,int,int)>(filter, intent, resolvedType, flags, sourceUserId);

        if resolveInfo == null goto label2;

        return resolveInfo;

     label2:
        virtualinvoke alreadyTriedUserIds.<android.util.SparseBooleanArray: void put(int,boolean)>(targetUserId, 1);

     label3:
        i#1 = i#1 + 1;

        goto label1;

     label4:
        return null;
    }

    private android.content.pm.ResolveInfo checkTargetCanHandle(com.android.server.pm.CrossProfileIntentFilter, android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.CrossProfileIntentFilter filter;
        android.content.Intent intent;
        java.lang.String resolvedType;
        int flags, sourceUserId, $i0, $i1;
        java.util.List resultTargetUser;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r0;
        boolean $z0;
        android.content.pm.ResolveInfo $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        filter := @parameter0: com.android.server.pm.CrossProfileIntentFilter;

        intent := @parameter1: android.content.Intent;

        resolvedType := @parameter2: java.lang.String;

        flags := @parameter3: int;

        sourceUserId := @parameter4: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities>;

        $i0 = virtualinvoke filter.<com.android.server.pm.CrossProfileIntentFilter: int getTargetUserId()>();

        resultTargetUser = virtualinvoke $r0.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,int,int)>(intent, resolvedType, flags, $i0);

        if resultTargetUser == null goto label1;

        $z0 = interfaceinvoke resultTargetUser.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke filter.<com.android.server.pm.CrossProfileIntentFilter: int getTargetUserId()>();

        $r1 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo createForwardingResolveInfo(android.content.IntentFilter,int,int)>(filter, sourceUserId, $i1);

        return $r1;

     label1:
        return null;
    }

    private android.content.pm.ResolveInfo createForwardingResolveInfo(android.content.IntentFilter, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.IntentFilter filter;
        int sourceUserId, targetUserId;
        android.content.pm.ResolveInfo forwardingResolveInfo, $r0;
        android.content.ComponentName forwardingActivityComponentName, $r1;
        android.content.pm.ActivityInfo forwardingActivityInfo;
        android.content.pm.ApplicationInfo $r2;
        java.lang.String $r3, className#1;

        this := @this: com.android.server.pm.PackageManagerService;

        filter := @parameter0: android.content.IntentFilter;

        sourceUserId := @parameter1: int;

        targetUserId := @parameter2: int;

        $r0 = new android.content.pm.ResolveInfo;

        specialinvoke $r0.<android.content.pm.ResolveInfo: void <init>()>();

        forwardingResolveInfo = $r0;

        if targetUserId != 0 goto label1;

        className#1 = <com.android.internal.app.IntentForwarderActivity: java.lang.String FORWARD_INTENT_TO_USER_OWNER>;

        goto label2;

     label1:
        className#1 = <com.android.internal.app.IntentForwarderActivity: java.lang.String FORWARD_INTENT_TO_MANAGED_PROFILE>;

     label2:
        $r1 = new android.content.ComponentName;

        $r2 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        $r3 = $r2.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        specialinvoke $r1.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r3, className#1);

        forwardingActivityComponentName = $r1;

        forwardingActivityInfo = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>(forwardingActivityComponentName, 0, sourceUserId);

        if targetUserId != 0 goto label3;

        forwardingActivityInfo.<android.content.pm.ActivityInfo: int showUserIcon> = 0;

        forwardingResolveInfo.<android.content.pm.ResolveInfo: boolean noResourceId> = 1;

     label3:
        forwardingResolveInfo.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = forwardingActivityInfo;

        forwardingResolveInfo.<android.content.pm.ResolveInfo: int priority> = 0;

        forwardingResolveInfo.<android.content.pm.ResolveInfo: int preferredOrder> = 0;

        forwardingResolveInfo.<android.content.pm.ResolveInfo: int match> = 0;

        forwardingResolveInfo.<android.content.pm.ResolveInfo: boolean isDefault> = 1;

        forwardingResolveInfo.<android.content.pm.ResolveInfo: android.content.IntentFilter filter> = filter;

        forwardingResolveInfo.<android.content.pm.ResolveInfo: int targetUserId> = targetUserId;

        return forwardingResolveInfo;
    }

    public java.util.List queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], java.lang.String[], android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.ComponentName caller, $r26, comp#7;
        android.content.Intent[] specifics;
        java.lang.String[] specificTypes;
        android.content.Intent intent, sintent#3;
        java.lang.String resolvedType, resultsAction, $r4, $r6, $r8, $r10, $r22, $r23, $r28, $r29, $r30, $r31, action#4, $r33, ri#16;
        int flags, userId, $i0, $i1, $i2, $i3, $i4, $i5, specificsPos#1, i#2, N#10, j#11, N#12, i#13, ai#17, N#19, i#20, N#22, i#23;
        java.util.List results, $r32;
        android.content.pm.ResolveInfo sri, $r1, $r3, $r19, $r25, ri#5, sintent#14, comp#18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.android.server.pm.UserManagerService $r0;
        java.lang.Object $r2, $r5, $r9, $r14, $r15, $r18;
        android.content.pm.ApplicationInfo $r7, $r21, $r27;
        android.content.IntentFilter $r11, $r12, $r13, $r16, $r24;
        android.content.pm.ActivityInfo $r17, $r20, ai#9, sintent#21;
        java.util.Iterator action#15;

        this := @this: com.android.server.pm.PackageManagerService;

        caller := @parameter0: android.content.ComponentName;

        specifics := @parameter1: android.content.Intent[];

        specificTypes := @parameter2: java.lang.String[];

        intent := @parameter3: android.content.Intent;

        resolvedType := @parameter4: java.lang.String;

        flags := @parameter5: int;

        userId := @parameter6: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        $r32 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r32;

     label01:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 0, 0, "query intent activity options");

        resultsAction = virtualinvoke intent.<android.content.Intent: java.lang.String getAction()>();

        $i1 = flags | 64;

        results = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>(intent, resolvedType, $i1, userId);

        specificsPos#1 = 0;

        if specifics == null goto label19;

        i#2 = 0;

     label02:
        $i5 = lengthof specifics;

        if i#2 >= $i5 goto label19;

        sintent#3 = specifics[i#2];

        if sintent#3 != null goto label03;

        goto label18;

     label03:
        action#4 = virtualinvoke sintent#3.<android.content.Intent: java.lang.String getAction()>();

        if resultsAction == null goto label04;

        $z9 = virtualinvoke resultsAction.<java.lang.String: boolean equals(java.lang.Object)>(action#4);

        if $z9 == 0 goto label04;

        action#4 = null;

     label04:
        ri#5 = null;

        comp#7 = virtualinvoke sintent#3.<android.content.Intent: android.content.ComponentName getComponent()>();

        if comp#7 != null goto label09;

        if specificTypes == null goto label05;

        $r33 = specificTypes[i#2];

        goto label06;

     label05:
        $r33 = null;

     label06:
        ri#5 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>(sintent#3, $r33, flags, userId);

        if ri#5 != null goto label07;

        goto label18;

     label07:
        $r25 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        if ri#5 != $r25 goto label08;

     label08:
        ai#9 = ri#5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r26 = new android.content.ComponentName;

        $r27 = ai#9.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r31 = $r27.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r28 = ai#9.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r26.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r31, $r28);

        comp#7 = $r26;

        goto label10;

     label09:
        ai#9 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>(comp#7, flags, userId);

        if ai#9 != null goto label10;

        goto label18;

     label10:
        N#10 = interfaceinvoke results.<java.util.List: int size()>();

        j#11 = specificsPos#1;

     label11:
        if j#11 >= N#10 goto label16;

        $r18 = interfaceinvoke results.<java.util.List: java.lang.Object get(int)>(j#11);

        sri = (android.content.pm.ResolveInfo) $r18;

        $r17 = sri.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r22 = $r17.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r23 = virtualinvoke comp#7.<android.content.ComponentName: java.lang.String getClassName()>();

        $z7 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z7 == 0 goto label12;

        $r20 = sri.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r21 = $r20.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r29 = $r21.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r30 = virtualinvoke comp#7.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z8 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z8 != 0 goto label13;

     label12:
        if action#4 == null goto label15;

        $r24 = sri.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        $z6 = virtualinvoke $r24.<android.content.IntentFilter: boolean matchAction(java.lang.String)>(action#4);

        if $z6 == 0 goto label15;

     label13:
        interfaceinvoke results.<java.util.List: java.lang.Object remove(int)>(j#11);

        if ri#5 != null goto label14;

        ri#5 = sri;

     label14:
        j#11 = j#11 + -1;

        N#10 = N#10 + -1;

     label15:
        j#11 = j#11 + 1;

        goto label11;

     label16:
        if ri#5 != null goto label17;

        $r19 = new android.content.pm.ResolveInfo;

        specialinvoke $r19.<android.content.pm.ResolveInfo: void <init>()>();

        ri#5 = $r19;

        ri#5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = ai#9;

     label17:
        interfaceinvoke results.<java.util.List: void add(int,java.lang.Object)>(specificsPos#1, ri#5);

        ri#5.<android.content.pm.ResolveInfo: int specificIndex> = i#2;

        specificsPos#1 = specificsPos#1 + 1;

     label18:
        i#2 = i#2 + 1;

        goto label02;

     label19:
        N#12 = interfaceinvoke results.<java.util.List: int size()>();

        i#13 = specificsPos#1;

     label20:
        $i2 = N#12 - 1;

        if i#13 >= $i2 goto label29;

        $r9 = interfaceinvoke results.<java.util.List: java.lang.Object get(int)>(i#13);

        sintent#14 = (android.content.pm.ResolveInfo) $r9;

        $r11 = sintent#14.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        if $r11 != null goto label21;

        goto label28;

     label21:
        $r12 = sintent#14.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        action#15 = virtualinvoke $r12.<android.content.IntentFilter: java.util.Iterator actionsIterator()>();

        if action#15 != null goto label22;

        goto label28;

     label22:
        $z3 = interfaceinvoke action#15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label27;

        $r15 = interfaceinvoke action#15.<java.util.Iterator: java.lang.Object next()>();

        ri#16 = (java.lang.String) $r15;

        if resultsAction == null goto label23;

        $z4 = virtualinvoke resultsAction.<java.lang.String: boolean equals(java.lang.Object)>(ri#16);

        if $z4 == 0 goto label23;

        goto label22;

     label23:
        ai#17 = i#13 + 1;

     label24:
        if ai#17 >= N#12 goto label26;

        $r14 = interfaceinvoke results.<java.util.List: java.lang.Object get(int)>(ai#17);

        comp#18 = (android.content.pm.ResolveInfo) $r14;

        $r13 = comp#18.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        if $r13 == null goto label25;

        $r16 = comp#18.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        $z5 = virtualinvoke $r16.<android.content.IntentFilter: boolean hasAction(java.lang.String)>(ri#16);

        if $z5 == 0 goto label25;

        interfaceinvoke results.<java.util.List: java.lang.Object remove(int)>(ai#17);

        ai#17 = ai#17 + -1;

        N#12 = N#12 + -1;

     label25:
        ai#17 = ai#17 + 1;

        goto label24;

     label26:
        goto label22;

     label27:
        $i4 = flags & 64;

        if $i4 != 0 goto label28;

        sintent#14.<android.content.pm.ResolveInfo: android.content.IntentFilter filter> = null;

     label28:
        i#13 = i#13 + 1;

        goto label20;

     label29:
        if caller == null goto label32;

        N#19 = interfaceinvoke results.<java.util.List: int size()>();

        i#20 = 0;

     label30:
        if i#20 >= N#19 goto label32;

        $r5 = interfaceinvoke results.<java.util.List: java.lang.Object get(int)>(i#20);

        $r3 = (android.content.pm.ResolveInfo) $r5;

        sintent#21 = $r3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r4 = virtualinvoke caller.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r7 = sintent#21.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r8 = $r7.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label31;

        $r6 = virtualinvoke caller.<android.content.ComponentName: java.lang.String getClassName()>();

        $r10 = sintent#21.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label31;

        interfaceinvoke results.<java.util.List: java.lang.Object remove(int)>(i#20);

        goto label32;

     label31:
        i#20 = i#20 + 1;

        goto label30;

     label32:
        $i3 = flags & 64;

        if $i3 != 0 goto label34;

        N#22 = interfaceinvoke results.<java.util.List: int size()>();

        i#23 = 0;

     label33:
        if i#23 >= N#22 goto label34;

        $r2 = interfaceinvoke results.<java.util.List: java.lang.Object get(int)>(i#23);

        $r1 = (android.content.pm.ResolveInfo) $r2;

        $r1.<android.content.pm.ResolveInfo: android.content.IntentFilter filter> = null;

        i#23 = i#23 + 1;

        goto label33;

     label34:
        return results;
    }

    public java.util.List queryIntentReceivers(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String resolvedType, ai#7;
        int flags, userId;
        java.lang.Throwable l9, $r13;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        android.util.ArrayMap $r1, $r2, list#6;
        java.lang.Object $r3;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r4, $r8;
        java.util.ArrayList $r5, $r9, list#3;
        java.util.List $r6, $r7, $r12;
        android.content.pm.ResolveInfo $r10, ri#5;
        android.content.Intent $r11, intent#1;
        android.content.ComponentName comp#2;
        android.content.pm.ActivityInfo ai#4;
        android.content.pm.PackageParser$Package ri#8;

        this := @this: com.android.server.pm.PackageManagerService;

        intent#1 := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        userId := @parameter3: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(0);

        if $z0 != 0 goto label01;

        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r12;

     label01:
        comp#2 = virtualinvoke intent#1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if comp#2 != null goto label02;

        $r11 = virtualinvoke intent#1.<android.content.Intent: android.content.Intent getSelector()>();

        if $r11 == null goto label02;

        intent#1 = virtualinvoke intent#1.<android.content.Intent: android.content.Intent getSelector()>();

        comp#2 = virtualinvoke intent#1.<android.content.Intent: android.content.ComponentName getComponent()>();

     label02:
        if comp#2 == null goto label04;

        $r9 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(1);

        list#3 = $r9;

        ai#4 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>(comp#2, 512, 0);

        if ai#4 == null goto label03;

        $r10 = new android.content.pm.ResolveInfo;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r10.<android.content.pm.ResolveInfo: void <init>()>();

        ri#5 = $r10;

        ri#5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = ai#4;

        interfaceinvoke list#3.<java.util.List: boolean add(java.lang.Object)>(ri#5);

     label03:
        return list#3;

     label04:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        list#6 = $r1;

        entermonitor $r1;

     label05:
        ai#7 = virtualinvoke intent#1.<android.content.Intent: java.lang.String getPackage()>();

        if ai#7 != null goto label07;

        $r8 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mReceivers>;

        $r7 = virtualinvoke $r8.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,int,int)>(intent#1, "application/vnd.android.package-archive", 512, 0);

        exitmonitor list#6;

     label06:
        return $r7;

     label07:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(ai#7);

        ri#8 = (android.content.pm.PackageParser$Package) $r3;

        if ri#8 == null goto label09;

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mReceivers>;

        $r5 = ri#8.<android.content.pm.PackageParser$Package: java.util.ArrayList receivers>;

        $r6 = virtualinvoke $r4.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.util.List queryIntentForPackage(android.content.Intent,java.lang.String,int,java.util.ArrayList,int)>(intent#1, "application/vnd.android.package-archive", 512, $r5, 0);

        exitmonitor list#6;

     label08:
        return $r6;

     label09:
        exitmonitor list#6;

     label10:
        return null;

     label11:
        $r13 := @caughtexception;

        l9 = $r13;

        exitmonitor list#6;

     label12:
        throw l9;

        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public android.content.pm.ResolveInfo resolveService(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent intent;
        java.lang.String resolvedType;
        int flags, userId, $i0;
        java.util.List query;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        java.lang.Object $r1;
        android.content.pm.ResolveInfo $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        intent := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        userId := @parameter3: int;

        query = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)>(intent, resolvedType, flags, userId);

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return null;

     label1:
        if query == null goto label2;

        $i0 = interfaceinvoke query.<java.util.List: int size()>();

        if $i0 < 1 goto label2;

        $r1 = interfaceinvoke query.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (android.content.pm.ResolveInfo) $r1;

        return $r2;

     label2:
        return null;
    }

    public java.util.List queryIntentServices(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String resolvedType, si#7;
        int flags, userId;
        java.lang.Throwable l9, $r13;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        android.util.ArrayMap $r1, $r2, list#6;
        java.lang.Object $r3;
        com.android.server.pm.PackageManagerService$ServiceIntentResolver $r4, $r8;
        java.util.ArrayList $r5, list#3, tmp$1777418595;
        java.util.List $r6, $r7, $r12, tmp$1252346432, tmp$1405025855;
        android.content.Intent $r11, intent#1;
        android.content.ComponentName comp#2;
        android.content.pm.ServiceInfo si#4;
        android.content.pm.ResolveInfo ri#5, tmp$1268806785;
        android.content.pm.PackageParser$Package ri#8;

        this := @this: com.android.server.pm.PackageManagerService;

        intent#1 := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        userId := @parameter3: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r12;

     label01:
        comp#2 = virtualinvoke intent#1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if comp#2 != null goto label02;

        $r11 = virtualinvoke intent#1.<android.content.Intent: android.content.Intent getSelector()>();

        if $r11 == null goto label02;

        intent#1 = virtualinvoke intent#1.<android.content.Intent: android.content.Intent getSelector()>();

        comp#2 = virtualinvoke intent#1.<android.content.Intent: android.content.ComponentName getComponent()>();

     label02:
        if comp#2 == null goto label04;

        tmp$1777418595 = new java.util.ArrayList;

        specialinvoke tmp$1777418595.<java.util.ArrayList: void <init>(int)>(1);

        list#3 = tmp$1777418595;

        si#4 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>(comp#2, flags, userId);

        if si#4 == null goto label03;

        tmp$1268806785 = new android.content.pm.ResolveInfo;

        specialinvoke tmp$1268806785.<android.content.pm.ResolveInfo: void <init>()>();

        ri#5 = tmp$1268806785;

        ri#5.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo> = si#4;

        tmp$1252346432 = (java.util.List) list#3;

        interfaceinvoke tmp$1252346432.<java.util.List: boolean add(java.lang.Object)>(ri#5);

     label03:
        tmp$1405025855 = (java.util.List) list#3;

        return tmp$1405025855;

     label04:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        list#6 = $r1;

        entermonitor $r1;

     label05:
        si#7 = virtualinvoke intent#1.<android.content.Intent: java.lang.String getPackage()>();

        if si#7 != null goto label07;

        $r8 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ServiceIntentResolver mServices>;

        $r7 = virtualinvoke $r8.<com.android.server.pm.PackageManagerService$ServiceIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,int,int)>(intent#1, resolvedType, flags, userId);

        exitmonitor list#6;

     label06:
        return $r7;

     label07:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(si#7);

        ri#8 = (android.content.pm.PackageParser$Package) $r3;

        if ri#8 == null goto label09;

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ServiceIntentResolver mServices>;

        $r5 = ri#8.<android.content.pm.PackageParser$Package: java.util.ArrayList services>;

        $r6 = virtualinvoke $r4.<com.android.server.pm.PackageManagerService$ServiceIntentResolver: java.util.List queryIntentForPackage(android.content.Intent,java.lang.String,int,java.util.ArrayList,int)>(intent#1, resolvedType, flags, $r5, userId);

        exitmonitor list#6;

     label08:
        return $r6;

     label09:
        exitmonitor list#6;

     label10:
        return null;

     label11:
        $r13 := @caughtexception;

        l9 = $r13;

        exitmonitor list#6;

     label12:
        throw l9;

        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public java.util.List queryIntentContentProviders(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String resolvedType, pi#7;
        int flags, userId;
        java.lang.Throwable l9, $r13;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        android.util.ArrayMap $r1, $r2, list#6;
        java.lang.Object $r3;
        com.android.server.pm.PackageManagerService$ProviderIntentResolver $r4, $r8;
        java.util.ArrayList $r5, list#3, tmp$905306993;
        java.util.List $r6, $r7, $r12, tmp$1439947955, tmp$90141652;
        android.content.Intent $r11, intent#1;
        android.content.ComponentName comp#2;
        android.content.pm.ProviderInfo pi#4;
        android.content.pm.ResolveInfo ri#5, tmp$965854144;
        android.content.pm.PackageParser$Package ri#8;

        this := @this: com.android.server.pm.PackageManagerService;

        intent#1 := @parameter0: android.content.Intent;

        resolvedType := @parameter1: java.lang.String;

        flags := @parameter2: int;

        userId := @parameter3: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r12;

     label01:
        comp#2 = virtualinvoke intent#1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if comp#2 != null goto label02;

        $r11 = virtualinvoke intent#1.<android.content.Intent: android.content.Intent getSelector()>();

        if $r11 == null goto label02;

        intent#1 = virtualinvoke intent#1.<android.content.Intent: android.content.Intent getSelector()>();

        comp#2 = virtualinvoke intent#1.<android.content.Intent: android.content.ComponentName getComponent()>();

     label02:
        if comp#2 == null goto label04;

        tmp$905306993 = new java.util.ArrayList;

        specialinvoke tmp$905306993.<java.util.ArrayList: void <init>(int)>(1);

        list#3 = tmp$905306993;

        pi#4 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>(comp#2, flags, userId);

        if pi#4 == null goto label03;

        tmp$965854144 = new android.content.pm.ResolveInfo;

        specialinvoke tmp$965854144.<android.content.pm.ResolveInfo: void <init>()>();

        ri#5 = tmp$965854144;

        ri#5.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo> = pi#4;

        tmp$1439947955 = (java.util.List) list#3;

        interfaceinvoke tmp$1439947955.<java.util.List: boolean add(java.lang.Object)>(ri#5);

     label03:
        tmp$90141652 = (java.util.List) list#3;

        return tmp$90141652;

     label04:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        list#6 = $r1;

        entermonitor $r1;

     label05:
        pi#7 = virtualinvoke intent#1.<android.content.Intent: java.lang.String getPackage()>();

        if pi#7 != null goto label07;

        $r8 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ProviderIntentResolver mProviders>;

        $r7 = virtualinvoke $r8.<com.android.server.pm.PackageManagerService$ProviderIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,int,int)>(intent#1, resolvedType, flags, userId);

        exitmonitor list#6;

     label06:
        return $r7;

     label07:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(pi#7);

        ri#8 = (android.content.pm.PackageParser$Package) $r3;

        if ri#8 == null goto label09;

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ProviderIntentResolver mProviders>;

        $r5 = ri#8.<android.content.pm.PackageParser$Package: java.util.ArrayList providers>;

        $r6 = virtualinvoke $r4.<com.android.server.pm.PackageManagerService$ProviderIntentResolver: java.util.List queryIntentForPackage(android.content.Intent,java.lang.String,int,java.util.ArrayList,int)>(intent#1, resolvedType, flags, $r5, userId);

        exitmonitor list#6;

     label08:
        return $r6;

     label09:
        exitmonitor list#6;

     label10:
        return null;

     label11:
        $r13 := @caughtexception;

        l9 = $r13;

        exitmonitor list#6;

     label12:
        throw l9;

        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public android.content.pm.ParceledListSlice getInstalledPackages(int, int)
    {
        com.android.server.pm.PackageManagerService this;
        int flags, userId, $i0, $i1, $i2, $i3;
        boolean listUninstalled, $z0, $z2, $z4;
        android.util.ArrayMap l4, $r0, $r2, $r4, $r8, $r12;
        java.lang.Throwable l9, $r17;
        java.util.Collection $r3, $r11;
        java.lang.Object $r6, $r13;
        com.android.server.pm.Settings $r9, $r10;
        android.content.pm.PackageParser$Package $r14, $r15, ps#7;
        java.lang.String $r16;
        java.util.ArrayList list#2, tmp$757984314, tmp$237887926;
        java.util.Iterator i$#3, i$#6;
        com.android.server.pm.PackageSetting ps#4;
        android.content.pm.PackageInfo pi#5, pi#8;
        android.content.pm.ParceledListSlice tmp$1314271177;
        java.util.List tmp$319396409;

        this := @this: com.android.server.pm.PackageManagerService;

        flags := @parameter0: int;

        userId := @parameter1: int;

        $i0 = flags & 8192;

        if $i0 == 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        listUninstalled = $z4;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i1, userId, 1, 0, "get installed packages");

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r0;

        entermonitor $r0;

     label03:
        if listUninstalled == 0 goto label09;

        tmp$757984314 = new java.util.ArrayList;

        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r9.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $i3 = virtualinvoke $r8.<android.util.ArrayMap: int size()>();

        specialinvoke tmp$757984314.<java.util.ArrayList: void <init>(int)>($i3);

        list#2 = tmp$757984314;

        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r12 = $r10.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r11 = virtualinvoke $r12.<android.util.ArrayMap: java.util.Collection values()>();

        i$#3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke i$#3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r13 = interfaceinvoke i$#3.<java.util.Iterator: java.lang.Object next()>();

        ps#4 = (com.android.server.pm.PackageSetting) $r13;

        $r14 = ps#4.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r14 == null goto label05;

        $r15 = ps#4.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        pi#5 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package,int,int)>($r15, flags, userId);

        goto label06;

     label05:
        $r16 = ps#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        pi#5 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfoFromSettingsLPw(java.lang.String,int,int)>($r16, flags, userId);

     label06:
        if pi#5 == null goto label07;

        virtualinvoke list#2.<java.util.ArrayList: boolean add(java.lang.Object)>(pi#5);

     label07:
        goto label04;

     label08:
        goto label12;

     label09:
        tmp$237887926 = new java.util.ArrayList;

        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $i2 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        specialinvoke tmp$237887926.<java.util.ArrayList: void <init>(int)>($i2);

        list#2 = tmp$237887926;

        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r4.<android.util.ArrayMap: java.util.Collection values()>();

        i$#6 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke i$#6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r6 = interfaceinvoke i$#6.<java.util.Iterator: java.lang.Object next()>();

        ps#7 = (android.content.pm.PackageParser$Package) $r6;

        pi#8 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package,int,int)>(ps#7, flags, userId);

        if pi#8 == null goto label11;

        virtualinvoke list#2.<java.util.ArrayList: boolean add(java.lang.Object)>(pi#8);

     label11:
        goto label10;

     label12:
        tmp$1314271177 = new android.content.pm.ParceledListSlice;

        tmp$319396409 = (java.util.List) list#2;

        specialinvoke tmp$1314271177.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(tmp$319396409);

        exitmonitor l4;

     label13:
        return tmp$1314271177;

     label14:
        $r17 := @caughtexception;

        l9 = $r17;

        exitmonitor l4;

     label15:
        throw l9;

        catch java.lang.Throwable from label03 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private void addPackageHoldingPermissions(java.util.ArrayList, com.android.server.pm.PackageSetting, java.lang.String[], boolean[], int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.util.ArrayList list;
        com.android.server.pm.PackageSetting ps;
        java.lang.String[] permissions, $r2, $r3;
        boolean[] tmp;
        int flags, userId, $i0, $i1, $i2, $i3, numMatch#1, i#2, numMatch#5, permission#6;
        com.android.server.pm.PermissionsState permissionsState;
        android.content.pm.PackageParser$Package $r0, $r5;
        java.lang.String $r1, $r4, permission#3;
        boolean $z1, $z2;
        android.content.pm.PackageInfo i#4;

        this := @this: com.android.server.pm.PackageManagerService;

        list := @parameter0: java.util.ArrayList;

        ps := @parameter1: com.android.server.pm.PackageSetting;

        permissions := @parameter2: java.lang.String[];

        tmp := @parameter3: boolean[];

        flags := @parameter4: int;

        userId := @parameter5: int;

        numMatch#1 = 0;

        permissionsState = virtualinvoke ps.<com.android.server.pm.PackageSetting: com.android.server.pm.PermissionsState getPermissionsState()>();

        i#2 = 0;

     label01:
        $i0 = lengthof permissions;

        if i#2 >= $i0 goto label04;

        permission#3 = permissions[i#2];

        $z2 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: boolean hasPermission(java.lang.String,int)>(permission#3, userId);

        if $z2 == 0 goto label02;

        tmp[i#2] = 1;

        numMatch#1 = numMatch#1 + 1;

        goto label03;

     label02:
        tmp[i#2] = 0;

     label03:
        i#2 = i#2 + 1;

        goto label01;

     label04:
        if numMatch#1 != 0 goto label05;

        return;

     label05:
        $r0 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r0 == null goto label06;

        $r5 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        i#4 = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package,int,int)>($r5, flags, userId);

        goto label07;

     label06:
        $r1 = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        i#4 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfoFromSettingsLPw(java.lang.String,int,int)>($r1, flags, userId);

     label07:
        if i#4 == null goto label12;

        $i1 = flags & 4096;

        if $i1 != 0 goto label11;

        $i2 = lengthof permissions;

        if numMatch#1 != $i2 goto label08;

        i#4.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions> = permissions;

        goto label11;

     label08:
        $r2 = newarray (java.lang.String)[numMatch#1];

        i#4.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions> = $r2;

        numMatch#5 = 0;

        permission#6 = 0;

     label09:
        $i3 = lengthof permissions;

        if permission#6 >= $i3 goto label11;

        $z1 = tmp[permission#6];

        if $z1 == 0 goto label10;

        $r3 = i#4.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        $r4 = permissions[permission#6];

        $r3[numMatch#5] = $r4;

        numMatch#5 = numMatch#5 + 1;

     label10:
        permission#6 = permission#6 + 1;

        goto label09;

     label11:
        virtualinvoke list.<java.util.ArrayList: boolean add(java.lang.Object)>(i#4);

     label12:
        return;
    }

    public android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[], int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String[] permissions;
        int flags, userId, $i0, $i1;
        boolean listUninstalled, $z0, $z1, $z2, $z3;
        android.util.ArrayMap l5, $r1, $r4, $r8;
        java.util.ArrayList list, tmp$425552533;
        boolean[] tmpBools;
        com.android.server.pm.PackageSetting ps, ps#3;
        java.lang.Throwable l11, $r12;
        com.android.server.pm.UserManagerService $r0;
        java.util.Collection $r3, $r10;
        java.lang.Object $r6, $r7, $r11;
        com.android.server.pm.Settings $r9;
        java.util.Iterator i$#2, i$#4;
        android.content.pm.PackageParser$Package ps#5;
        android.content.pm.ParceledListSlice tmp$1996175731;
        java.util.List tmp$816389481;

        this := @this: com.android.server.pm.PackageManagerService;

        permissions := @parameter0: java.lang.String[];

        flags := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $i0 = flags & 8192;

        if $i0 == 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        listUninstalled = $z3;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l5 = $r1;

        entermonitor $r1;

     label04:
        tmp$425552533 = new java.util.ArrayList;

        specialinvoke tmp$425552533.<java.util.ArrayList: void <init>()>();

        list = tmp$425552533;

        $i1 = lengthof permissions;

        tmpBools = newarray (boolean)[$i1];

        if listUninstalled == 0 goto label07;

        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r9.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r10 = virtualinvoke $r8.<android.util.ArrayMap: java.util.Collection values()>();

        i$#2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke i$#2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r11 = interfaceinvoke i$#2.<java.util.Iterator: java.lang.Object next()>();

        ps#3 = (com.android.server.pm.PackageSetting) $r11;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void addPackageHoldingPermissions(java.util.ArrayList,com.android.server.pm.PackageSetting,java.lang.String[],boolean[],int,int)>(list, ps#3, permissions, tmpBools, flags, userId);

        goto label05;

     label06:
        goto label10;

     label07:
        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r4.<android.util.ArrayMap: java.util.Collection values()>();

        i$#4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke i$#4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r7 = interfaceinvoke i$#4.<java.util.Iterator: java.lang.Object next()>();

        ps#5 = (android.content.pm.PackageParser$Package) $r7;

        $r6 = ps#5.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        ps = (com.android.server.pm.PackageSetting) $r6;

        if ps == null goto label09;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void addPackageHoldingPermissions(java.util.ArrayList,com.android.server.pm.PackageSetting,java.lang.String[],boolean[],int,int)>(list, ps, permissions, tmpBools, flags, userId);

     label09:
        goto label08;

     label10:
        tmp$1996175731 = new android.content.pm.ParceledListSlice;

        tmp$816389481 = (java.util.List) list;

        specialinvoke tmp$1996175731.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(tmp$816389481);

        exitmonitor l5;

     label11:
        return tmp$1996175731;

     label12:
        $r12 := @caughtexception;

        l11 = $r12;

        exitmonitor l5;

     label13:
        throw l11;

        catch java.lang.Throwable from label04 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public android.content.pm.ParceledListSlice getInstalledApplications(int, int)
    {
        com.android.server.pm.PackageManagerService this;
        int flags, userId, $i0, $i1, $i2;
        boolean listUninstalled, $z0, $z1, $z3, $z5;
        android.util.ArrayMap l4, $r1, $r3, $r4, $r15, $r16;
        java.lang.Throwable l9, $r23;
        com.android.server.pm.UserManagerService $r0;
        java.util.Collection $r5, $r18;
        java.lang.Object $r7, $r8, $r9, $r17;
        android.content.pm.PackageUserState $r10, $r22;
        com.android.server.pm.PackageSetting $r11, ps#4;
        com.android.server.pm.Settings $r12, $r14;
        android.content.pm.PackageParser$Package $r19, $r21, ps#7;
        java.lang.String $r20;
        java.util.ArrayList list#2, tmp$120649103, tmp$322287995;
        java.util.Iterator i$#3, i$#6;
        android.content.pm.ApplicationInfo ai#5, ai#8;
        android.content.pm.ParceledListSlice tmp$15882405;
        java.util.List tmp$1604722202;

        this := @this: com.android.server.pm.PackageManagerService;

        flags := @parameter0: int;

        userId := @parameter1: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $i0 = flags & 8192;

        if $i0 == 0 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        listUninstalled = $z5;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label04:
        if listUninstalled == 0 goto label10;

        tmp$120649103 = new java.util.ArrayList;

        $r12 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r16 = $r12.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $i2 = virtualinvoke $r16.<android.util.ArrayMap: int size()>();

        specialinvoke tmp$120649103.<java.util.ArrayList: void <init>(int)>($i2);

        list#2 = tmp$120649103;

        $r14 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r15 = $r14.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r18 = virtualinvoke $r15.<android.util.ArrayMap: java.util.Collection values()>();

        i$#3 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke i$#3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r17 = interfaceinvoke i$#3.<java.util.Iterator: java.lang.Object next()>();

        ps#4 = (com.android.server.pm.PackageSetting) $r17;

        $r19 = ps#4.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r19 == null goto label06;

        $r21 = ps#4.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r22 = virtualinvoke ps#4.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        ai#5 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.PackageParser$Package,int,android.content.pm.PackageUserState,int)>($r21, flags, $r22, userId);

        goto label07;

     label06:
        $r20 = ps#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        ai#5 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo generateApplicationInfoFromSettingsLPw(java.lang.String,int,int)>($r20, flags, userId);

     label07:
        if ai#5 == null goto label08;

        virtualinvoke list#2.<java.util.ArrayList: boolean add(java.lang.Object)>(ai#5);

     label08:
        goto label05;

     label09:
        goto label13;

     label10:
        tmp$322287995 = new java.util.ArrayList;

        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $i1 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        specialinvoke tmp$322287995.<java.util.ArrayList: void <init>(int)>($i1);

        list#2 = tmp$322287995;

        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.util.Collection values()>();

        i$#6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke i$#6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r7 = interfaceinvoke i$#6.<java.util.Iterator: java.lang.Object next()>();

        ps#7 = (android.content.pm.PackageParser$Package) $r7;

        $r9 = ps#7.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        if $r9 == null goto label12;

        $r8 = ps#7.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        $r11 = (com.android.server.pm.PackageSetting) $r8;

        $r10 = virtualinvoke $r11.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        ai#8 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.PackageParser$Package,int,android.content.pm.PackageUserState,int)>(ps#7, flags, $r10, userId);

        if ai#8 == null goto label12;

        virtualinvoke list#2.<java.util.ArrayList: boolean add(java.lang.Object)>(ai#8);

     label12:
        goto label11;

     label13:
        tmp$15882405 = new android.content.pm.ParceledListSlice;

        tmp$1604722202 = (java.util.List) list#2;

        specialinvoke tmp$15882405.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(tmp$1604722202);

        exitmonitor l4;

     label14:
        return tmp$15882405;

     label15:
        $r23 := @caughtexception;

        l9 = $r23;

        exitmonitor l4;

     label16:
        throw l9;

        catch java.lang.Throwable from label04 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public java.util.List getPersistentApplications(int)
    {
        com.android.server.pm.PackageManagerService this;
        int flags, userId, $i0, $i1;
        java.util.ArrayList finalList, tmp$125301153;
        android.util.ArrayMap l3, $r1, $r2, $r10;
        java.util.Iterator i;
        android.content.pm.PackageParser$Package p;
        com.android.server.pm.PackageSetting ps;
        android.content.pm.ApplicationInfo ai, $r4, $r6;
        java.lang.Throwable l9, $r12;
        java.util.Collection $r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5, $r9;
        java.lang.String $r7;
        com.android.server.pm.Settings $r8;
        android.content.pm.PackageUserState $r11;
        java.util.List tmp$180333123;

        this := @this: com.android.server.pm.PackageManagerService;

        flags := @parameter0: int;

        tmp$125301153 = new java.util.ArrayList;

        specialinvoke tmp$125301153.<java.util.ArrayList: void <init>()>();

        finalList = tmp$125301153;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.util.Collection values()>();

        i = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        userId = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

     label2:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        p = (android.content.pm.PackageParser$Package) $r5;

        $r4 = p.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        if $r4 == null goto label4;

        $r6 = p.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r6.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label4;

        $z1 = this.<com.android.server.pm.PackageManagerService: boolean mSafeMode>;

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>(p);

        if $z2 == 0 goto label4;

     label3:
        $r8 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r10 = $r8.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = p.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r9 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r7);

        ps = (com.android.server.pm.PackageSetting) $r9;

        if ps == null goto label4;

        $r11 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        ai = staticinvoke <android.content.pm.PackageParser: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.PackageParser$Package,int,android.content.pm.PackageUserState,int)>(p, flags, $r11, userId);

        if ai == null goto label4;

        virtualinvoke finalList.<java.util.ArrayList: boolean add(java.lang.Object)>(ai);

     label4:
        goto label2;

     label5:
        exitmonitor l3;

     label6:
        goto label9;

     label7:
        $r12 := @caughtexception;

        l9 = $r12;

        exitmonitor l3;

     label8:
        throw l9;

     label9:
        tmp$180333123 = (java.util.List) finalList;

        return tmp$180333123;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String name, $r12;
        int flags, userId, $i0, $i1;
        android.util.ArrayMap l4, $r1, $r2, $r11;
        android.content.pm.PackageParser$Provider provider;
        com.android.server.pm.PackageSetting ps, $r15;
        java.lang.Throwable l7, $r14;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r13;
        android.content.pm.ProviderInfo $r4, $r8, $r16;
        com.android.server.pm.Settings $r5, $r10;
        android.content.pm.PackageUserState $r6;
        android.content.pm.ApplicationInfo $r7;
        android.content.pm.PackageParser$Package $r9;

        this := @this: com.android.server.pm.PackageManagerService;

        name := @parameter0: java.lang.String;

        flags := @parameter1: int;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mProvidersByAuthority>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(name);

        provider = (android.content.pm.PackageParser$Provider) $r3;

        if provider == null goto label03;

        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r11 = $r10.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r9 = provider.<android.content.pm.PackageParser$Provider: android.content.pm.PackageParser$Package owner>;

        $r12 = $r9.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r13 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r12);

        $r15 = (com.android.server.pm.PackageSetting) $r13;

        goto label04;

     label03:
        $r15 = null;

     label04:
        ps = $r15;

        if ps == null goto label06;

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = provider.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $z2 = virtualinvoke $r5.<com.android.server.pm.Settings: boolean isEnabledLPr(android.content.pm.ComponentInfo,int,int)>($r4, flags, userId);

        if $z2 == 0 goto label06;

        $z1 = this.<com.android.server.pm.PackageManagerService: boolean mSafeMode>;

        if $z1 == 0 goto label05;

        $r8 = provider.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r7 = $r8.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r7.<android.content.pm.ApplicationInfo: int flags>;

        $i0 = $i1 & 1;

        if $i0 == 0 goto label06;

     label05:
        $r6 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        $r16 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ProviderInfo generateProviderInfo(android.content.pm.PackageParser$Provider,int,android.content.pm.PackageUserState,int)>(provider, flags, $r6, userId);

        goto label07;

     label06:
        $r16 = null;

     label07:
        exitmonitor l4;

     label08:
        return $r16;

     label09:
        $r14 := @caughtexception;

        l7 = $r14;

        exitmonitor l4;

     label10:
        throw l7;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void querySyncProviders(java.util.List, java.util.List)
    {
        com.android.server.pm.PackageManagerService this;
        java.util.List outNames, outInfo;
        android.util.ArrayMap l3, $r0, $r1, $r7;
        java.util.Iterator i;
        int userId, $i0, $i1;
        java.util.Map$Entry entry;
        android.content.pm.PackageParser$Provider p;
        com.android.server.pm.PackageSetting ps;
        android.content.pm.ProviderInfo info, $r13;
        java.lang.Throwable l10, $r14;
        java.util.Set $r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r4, $r9, $r11;
        android.content.pm.PackageParser$Package $r5;
        com.android.server.pm.Settings $r6;
        java.lang.String $r8;
        android.content.pm.PackageUserState $r10;
        android.content.pm.ApplicationInfo $r12;

        this := @this: com.android.server.pm.PackageManagerService;

        outNames := @parameter0: java.util.List;

        outInfo := @parameter1: java.util.List;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mProvidersByAuthority>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.util.Set entrySet()>();

        i = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        userId = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

     label2:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r4;

        $r3 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        p = (android.content.pm.PackageParser$Provider) $r3;

        $r6 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = p.<android.content.pm.PackageParser$Provider: android.content.pm.PackageParser$Package owner>;

        $r8 = $r5.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r9 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r8);

        ps = (com.android.server.pm.PackageSetting) $r9;

        if ps == null goto label4;

        $z1 = p.<android.content.pm.PackageParser$Provider: boolean syncable>;

        if $z1 == 0 goto label4;

        $z2 = this.<com.android.server.pm.PackageManagerService: boolean mSafeMode>;

        if $z2 == 0 goto label3;

        $r13 = p.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r12 = $r13.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r12.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label4;

     label3:
        $r10 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        info = staticinvoke <android.content.pm.PackageParser: android.content.pm.ProviderInfo generateProviderInfo(android.content.pm.PackageParser$Provider,int,android.content.pm.PackageUserState,int)>(p, 0, $r10, userId);

        if info == null goto label4;

        $r11 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke outNames.<java.util.List: boolean add(java.lang.Object)>($r11);

        interfaceinvoke outInfo.<java.util.List: boolean add(java.lang.Object)>(info);

     label4:
        goto label2;

     label5:
        exitmonitor l3;

     label6:
        goto label9;

     label7:
        $r14 := @caughtexception;

        l10 = $r14;

        exitmonitor l3;

     label8:
        throw l10;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public android.content.pm.ParceledListSlice queryContentProviders(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String processName, $r8, $r12, $r21;
        int uid, flags, userId, $i0, $i1, $i2, $i3;
        android.util.ArrayMap l5, $r0, $r2, $r11;
        java.util.Iterator i;
        android.content.pm.PackageParser$Provider p;
        com.android.server.pm.PackageSetting ps;
        android.content.pm.ProviderInfo info, $r13, $r15, $r17, $r20, $r23;
        java.lang.Throwable l11, $r24;
        com.android.server.pm.PackageManagerService$ProviderIntentResolver $r1;
        java.util.Collection $r3;
        boolean $z0, $z1, $z2, $z4, $z5;
        java.util.Comparator $r5;
        com.android.server.pm.Settings $r6, $r14;
        java.lang.Object $r7, $r10;
        android.content.pm.PackageParser$Package $r9;
        android.content.pm.PackageUserState $r16;
        android.content.pm.ApplicationInfo $r18, $r22;
        java.util.ArrayList finalList#1, tmp$840707939;
        android.content.pm.ParceledListSlice tmp$1654550097;
        java.util.List tmp$282412308, tmp$727409862;

        this := @this: com.android.server.pm.PackageManagerService;

        processName := @parameter0: java.lang.String;

        uid := @parameter1: int;

        flags := @parameter2: int;

        finalList#1 = null;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l5 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ProviderIntentResolver mProviders>;

        $r2 = staticinvoke <com.android.server.pm.PackageManagerService$ProviderIntentResolver: android.util.ArrayMap access$2800(com.android.server.pm.PackageManagerService$ProviderIntentResolver)>($r1);

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.util.Collection values()>();

        i = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        if processName == null goto label02;

        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(uid);

        goto label03;

     label02:
        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

     label03:
        userId = $i3;

     label04:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r7 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        p = (android.content.pm.PackageParser$Provider) $r7;

        $r6 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r11 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r9 = p.<android.content.pm.PackageParser$Provider: android.content.pm.PackageParser$Package owner>;

        $r8 = $r9.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r10 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r8);

        ps = (com.android.server.pm.PackageSetting) $r10;

        if ps == null goto label08;

        $r13 = p.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r12 = $r13.<android.content.pm.ProviderInfo: java.lang.String authority>;

        if $r12 == null goto label08;

        if processName == null goto label05;

        $r20 = p.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r21 = $r20.<android.content.pm.ProviderInfo: java.lang.String processName>;

        $z4 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(processName);

        if $z4 == 0 goto label08;

        $r23 = p.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r22 = $r23.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r22.<android.content.pm.ApplicationInfo: int uid>;

        $z5 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>($i2, uid);

        if $z5 == 0 goto label08;

     label05:
        $r14 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r15 = p.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $z1 = virtualinvoke $r14.<com.android.server.pm.Settings: boolean isEnabledLPr(android.content.pm.ComponentInfo,int,int)>($r15, flags, userId);

        if $z1 == 0 goto label08;

        $z2 = this.<com.android.server.pm.PackageManagerService: boolean mSafeMode>;

        if $z2 == 0 goto label06;

        $r17 = p.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r18 = $r17.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r18.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label08;

     label06:
        if finalList#1 != null goto label07;

        tmp$840707939 = new java.util.ArrayList;

        specialinvoke tmp$840707939.<java.util.ArrayList: void <init>(int)>(3);

        finalList#1 = tmp$840707939;

     label07:
        $r16 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        info = staticinvoke <android.content.pm.PackageParser: android.content.pm.ProviderInfo generateProviderInfo(android.content.pm.PackageParser$Provider,int,android.content.pm.PackageUserState,int)>(p, flags, $r16, userId);

        if info == null goto label08;

        virtualinvoke finalList#1.<java.util.ArrayList: boolean add(java.lang.Object)>(info);

     label08:
        goto label04;

     label09:
        exitmonitor l5;

     label10:
        goto label13;

     label11:
        $r24 := @caughtexception;

        l11 = $r24;

        exitmonitor l5;

     label12:
        throw l11;

     label13:
        if finalList#1 == null goto label14;

        $r5 = <com.android.server.pm.PackageManagerService: java.util.Comparator mProviderInitOrderSorter>;

        tmp$282412308 = (java.util.List) finalList#1;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(tmp$282412308, $r5);

        tmp$1654550097 = new android.content.pm.ParceledListSlice;

        tmp$727409862 = (java.util.List) finalList#1;

        specialinvoke tmp$1654550097.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(tmp$727409862);

        return tmp$1654550097;

     label14:
        return null;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.ComponentName name;
        int flags;
        android.util.ArrayMap l3, $r0, $r1;
        android.content.pm.PackageParser$Instrumentation i;
        java.lang.Throwable l5, $r4;
        java.lang.Object $r2;
        android.content.pm.InstrumentationInfo $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        name := @parameter0: android.content.ComponentName;

        flags := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(name);

        i = (android.content.pm.PackageParser$Instrumentation) $r2;

        $r3 = staticinvoke <android.content.pm.PackageParser: android.content.pm.InstrumentationInfo generateInstrumentationInfo(android.content.pm.PackageParser$Instrumentation,int)>(i, flags);

        exitmonitor l3;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        l5 = $r4;

        exitmonitor l3;

     label4:
        throw l5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List queryInstrumentation(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String targetPackage, $r6;
        int flags;
        java.util.ArrayList finalList, tmp$1922167614;
        android.util.ArrayMap l4, $r1, $r2;
        java.util.Iterator i;
        android.content.pm.PackageParser$Instrumentation p;
        android.content.pm.InstrumentationInfo ii, $r5;
        java.lang.Throwable l8, $r7;
        java.util.Collection $r3;
        boolean $z0, $z2;
        java.lang.Object $r4;
        java.util.List tmp$621327709;

        this := @this: com.android.server.pm.PackageManagerService;

        targetPackage := @parameter0: java.lang.String;

        flags := @parameter1: int;

        tmp$1922167614 = new java.util.ArrayList;

        specialinvoke tmp$1922167614.<java.util.ArrayList: void <init>()>();

        finalList = tmp$1922167614;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.util.Collection values()>();

        i = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        p = (android.content.pm.PackageParser$Instrumentation) $r4;

        if targetPackage == null goto label3;

        $r5 = p.<android.content.pm.PackageParser$Instrumentation: android.content.pm.InstrumentationInfo info>;

        $r6 = $r5.<android.content.pm.InstrumentationInfo: java.lang.String targetPackage>;

        $z2 = virtualinvoke targetPackage.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label4;

     label3:
        ii = staticinvoke <android.content.pm.PackageParser: android.content.pm.InstrumentationInfo generateInstrumentationInfo(android.content.pm.PackageParser$Instrumentation,int)>(p, flags);

        if ii == null goto label4;

        virtualinvoke finalList.<java.util.ArrayList: boolean add(java.lang.Object)>(ii);

     label4:
        goto label2;

     label5:
        exitmonitor l4;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        l8 = $r7;

        exitmonitor l4;

     label8:
        throw l8;

     label9:
        tmp$621327709 = (java.util.List) finalList;

        return tmp$621327709;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void createIdmapsForPackageLI(android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg, opkg;
        android.util.ArrayMap overlays, $r1;
        java.util.Iterator i$;
        java.lang.String $r0, $r8, $r9;
        java.lang.Object $r2, $r4;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7, $r10;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mOverlays>;

        $r0 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r0);

        overlays = (android.util.ArrayMap) $r2;

        if overlays != null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create idmap for ");

        $r8 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": no overlay packages");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r9);

        return;

     label1:
        $r3 = virtualinvoke overlays.<android.util.ArrayMap: java.util.Collection values()>();

        i$ = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        opkg = (android.content.pm.PackageParser$Package) $r4;

        specialinvoke this.<com.android.server.pm.PackageManagerService: boolean createIdmapForPackagePairLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package)>(pkg, opkg);

        goto label2;

     label3:
        return;
    }

    private boolean createIdmapForPackagePairLI(android.content.pm.PackageParser$Package, android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg, opkg, p;
        android.util.ArrayMap overlaySet, $r1;
        int sharedGid, len$, $i0, $i1, $i2, $i3, i#1, i$#2;
        android.content.pm.PackageParser$Package[] overlayArray, arr$, $r9;
        com.android.server.pm.PackageManagerService$5 'cmp', $r10;
        boolean $z0;
        java.lang.String $r0, $r4, $r6, $r15, $r20, $r21, $r22, $r25, $r28, $r32, $r35, $r39, $r41;
        java.lang.Object $r2;
        android.content.pm.ApplicationInfo $r3, $r11, $r13;
        com.android.server.pm.Installer $r5;
        java.util.Collection $r7;
        java.lang.Object[] $r8;
        java.lang.String[] $r12, $r16;
        java.lang.StringBuilder $r14, $r17, $r18, $r19, $r23, $r24, $r26, $r27, $r29, $r30, $r31, $r33, $r34, $r36, $r37, $r38, $r40;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        opkg := @parameter1: android.content.pm.PackageParser$Package;

        $z0 = opkg.<android.content.pm.PackageParser$Package: boolean mTrustedOverlay>;

        if $z0 != 0 goto label1;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping target and overlay pair ");

        $r35 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r39 = opkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r38 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": overlay not trusted");

        $r41 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r41);

        return 0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mOverlays>;

        $r0 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r0);

        overlaySet = (android.util.ArrayMap) $r2;

        if overlaySet != null goto label2;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("was about to create idmap for ");

        $r25 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r30 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r28 = opkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r33 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but target package has no known overlays");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r32);

        return 0;

     label2:
        $r3 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r3.<android.content.pm.ApplicationInfo: int uid>;

        sharedGid = staticinvoke <android.os.UserHandle: int getSharedAppGid(int)>($i0);

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r6 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r4 = opkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $i1 = virtualinvoke $r5.<com.android.server.pm.Installer: int idmap(java.lang.String,java.lang.String,int)>($r6, $r4, sharedGid);

        if $i1 == 0 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to generate idmap for ");

        $r20 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r22 = opkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r21);

        return 0;

     label3:
        $r7 = virtualinvoke overlaySet.<android.util.ArrayMap: java.util.Collection values()>();

        $r9 = newarray (android.content.pm.PackageParser$Package)[0];

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        overlayArray = (android.content.pm.PackageParser$Package[]) $r8;

        $r10 = new com.android.server.pm.PackageManagerService$5;

        specialinvoke $r10.<com.android.server.pm.PackageManagerService$5: void <init>(com.android.server.pm.PackageManagerService)>(this);

        'cmp' = $r10;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(overlayArray, 'cmp');

        $r11 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = lengthof overlayArray;

        $r12 = newarray (java.lang.String)[$i2];

        $r11.<android.content.pm.ApplicationInfo: java.lang.String[] resourceDirs> = $r12;

        i#1 = 0;

        arr$ = overlayArray;

        len$ = lengthof arr$;

        i$#2 = 0;

     label4:
        if i$#2 >= len$ goto label5;

        p = arr$[i$#2];

        $r13 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r16 = $r13.<android.content.pm.ApplicationInfo: java.lang.String[] resourceDirs>;

        $i3 = i#1;

        i#1 = i#1 + 1;

        $r15 = p.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r16[$i3] = $r15;

        i$#2 = i$#2 + 1;

        goto label4;

     label5:
        return 1;
    }

    private void scanDirLI(java.io.File, int, int, long)
    {
        com.android.server.pm.PackageManagerService this;
        java.io.File dir, file;
        int parseFlags, scanFlags, len$, $i0, $i2, $i3, i$#1;
        long currentTime;
        java.io.File[] files, arr$;
        boolean isPackage, $z0, $z1, $z2, $z3, $z5, $z6;
        com.android.server.pm.PackageManagerException e, $r7;
        java.lang.String $r0, $r5, $r9, $r13, $r18, $r19;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r8, $r10, $r11, $r12, $r14, $r15, $r16;
        com.android.server.pm.Installer $r17;

        this := @this: com.android.server.pm.PackageManagerService;

        dir := @parameter0: java.io.File;

        parseFlags := @parameter1: int;

        scanFlags := @parameter2: int;

        currentTime := @parameter3: long;

        files = virtualinvoke dir.<java.io.File: java.io.File[] listFiles()>();

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(files);

        if $z0 == 0 goto label01;

        $r2 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No files in app dir ");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(dir);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PackageManager", $r5);

        return;

     label01:
        arr$ = files;

        len$ = lengthof arr$;

        i$#1 = 0;

     label02:
        if i$#1 >= len$ goto label11;

        file = arr$[i$#1];

        $z1 = staticinvoke <android.content.pm.PackageParser: boolean isApkFile(java.io.File)>(file);

        if $z1 != 0 goto label03;

        $z3 = virtualinvoke file.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label04;

     label03:
        $r0 = virtualinvoke file.<java.io.File: java.lang.String getName()>();

        $z2 = staticinvoke <com.android.server.pm.PackageInstallerService: boolean isStageName(java.lang.String)>($r0);

        if $z2 != 0 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        isPackage = $z6;

        if isPackage != 0 goto label06;

        goto label10;

     label06:
        $i0 = parseFlags | 4;

        specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)>(file, $i0, scanFlags, 0L, null);

     label07:
        goto label10;

     label08:
        $r7 := @caughtexception;

        e = $r7;

        $r6 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(file);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r9 = virtualinvoke e.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r13);

        $i2 = parseFlags & 1;

        if $i2 != 0 goto label10;

        $i3 = e.<com.android.server.pm.PackageManagerException: int error>;

        if $i3 != -2 goto label10;

        $r16 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting invalid package at ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(file);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r18);

        $z5 = virtualinvoke file.<java.io.File: boolean isDirectory()>();

        if $z5 == 0 goto label09;

        $r17 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r19 = virtualinvoke file.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r17.<com.android.server.pm.Installer: int rmPackageDir(java.lang.String)>($r19);

        goto label10;

     label09:
        virtualinvoke file.<java.io.File: boolean delete()>();

     label10:
        i$#1 = i$#1 + 1;

        goto label02;

     label11:
        return;

        catch com.android.server.pm.PackageManagerException from label06 to label07 with label08;
    }

    private static java.io.File getSettingsProblemFile()
    {
        java.io.File dataDir, systemDir, fname, $r0, $r1;

        dataDir = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>(dataDir, "system");

        systemDir = $r0;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(systemDir, "uiderrors.txt");

        fname = $r1;

        return fname;
    }

    static void reportSettingsProblem(int, java.lang.String)
    {
        int priority;
        java.lang.String msg;

        priority := @parameter0: int;

        msg := @parameter1: java.lang.String;

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(priority, msg);

        return;
    }

    static void logCriticalInfo(int, java.lang.String)
    {
        int priority;
        java.lang.String msg, dateString, $r7, $r9;
        java.io.FileOutputStream out, $r0;
        com.android.internal.util.FastPrintWriter pw, $r1;
        java.text.SimpleDateFormat formatter, $r2;
        java.util.Date $r3;
        long $l1;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;
        java.io.IOException $r10, fname#2;
        java.io.File fname#1;

        priority := @parameter0: int;

        msg := @parameter1: java.lang.String;

        staticinvoke <android.util.Slog: int println(int,java.lang.String,java.lang.String)>(priority, "PackageManager", msg);

        staticinvoke <com.android.server.EventLogTags: void writePmCriticalInfo(java.lang.String)>(msg);

     label1:
        fname#1 = staticinvoke <com.android.server.pm.PackageManagerService: java.io.File getSettingsProblemFile()>();

        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(fname#1, 1);

        out = $r0;

        $r1 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r1.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(out);

        pw = $r1;

        $r2 = new java.text.SimpleDateFormat;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>()>();

        formatter = $r2;

        $r3 = new java.util.Date;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r3.<java.util.Date: void <init>(long)>($l1);

        dateString = virtualinvoke formatter.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3);

        $r4 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(dateString);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        virtualinvoke pw.<java.io.PrintWriter: void close()>();

        $r9 = virtualinvoke fname#1.<java.io.File: java.lang.String toString()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r9, 508, -1, -1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void collectCertificatesLI(android.content.pm.PackageParser, com.android.server.pm.PackageSetting, android.content.pm.PackageParser$Package, java.io.File, int) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser pp;
        com.android.server.pm.PackageSetting ps;
        android.content.pm.PackageParser$Package pkg;
        java.io.File srcFile, $r5;
        int parseFlags, $i5;
        com.android.server.pm.KeySetManagerService ksms;
        android.util.ArraySet signingKs;
        android.util.ArrayMap l10, $r7;
        java.lang.Throwable l11, $r22;
        java.lang.StringBuilder $r0, $r2, $r4, $r9, $r12, $r13, $r14;
        java.lang.String $r1, $r3, $r15, $r18;
        long $l1, $l3, mSigningKeySetId#1;
        boolean $z0, $z1, $z2;
        byte $b2;
        com.android.server.pm.PackageKeySetData $r6;
        com.android.server.pm.Settings $r8;
        com.android.server.pm.PackageSignatures $r10, $r16, $r21;
        android.content.pm.Signature[] $r11, $r17, $r19;
        android.content.pm.PackageParser$PackageParserException $r20, mSigningKeySetId#2;
        com.android.server.pm.PackageManagerException $r23;

        this := @this: com.android.server.pm.PackageManagerService;

        pp := @parameter0: android.content.pm.PackageParser;

        ps := @parameter1: com.android.server.pm.PackageSetting;

        pkg := @parameter2: android.content.pm.PackageParser$Package;

        srcFile := @parameter3: java.io.File;

        parseFlags := @parameter4: int;

        if ps == null goto label07;

        $r5 = ps.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $z0 = virtualinvoke $r5.<java.io.File: boolean equals(java.lang.Object)>(srcFile);

        if $z0 == 0 goto label07;

        $l1 = ps.<com.android.server.pm.PackageSetting: long timeStamp>;

        $l3 = virtualinvoke srcFile.<java.io.File: long lastModified()>();

        $b2 = $l1 cmp $l3;

        if $b2 != 0 goto label07;

        $z2 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean isCompatSignatureUpdateNeeded(android.content.pm.PackageParser$Package)>(pkg);

        if $z2 != 0 goto label07;

        $z1 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean isRecoverSignatureUpdateNeeded(android.content.pm.PackageParser$Package)>(pkg);

        if $z1 != 0 goto label07;

        $r6 = ps.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageKeySetData keySetData>;

        mSigningKeySetId#1 = virtualinvoke $r6.<com.android.server.pm.PackageKeySetData: long getProperSigningKeySet()>();

        $r8 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        ksms = $r8.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        $r7 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l10 = $r7;

        entermonitor $r7;

     label01:
        signingKs = virtualinvoke ksms.<com.android.server.pm.KeySetManagerService: android.util.ArraySet getPublicKeysFromKeySetLPr(long)>(mSigningKeySetId#1);

        exitmonitor l10;

     label02:
        goto label05;

     label03:
        $r22 := @caughtexception;

        l11 = $r22;

        exitmonitor l10;

     label04:
        throw l11;

     label05:
        $r10 = ps.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r11 = $r10.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        if $r11 == null goto label06;

        $r16 = ps.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r17 = $r16.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        $i5 = lengthof $r17;

        if $i5 == 0 goto label06;

        if signingKs == null goto label06;

        $r21 = ps.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r19 = $r21.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures> = $r19;

        pkg.<android.content.pm.PackageParser$Package: android.util.ArraySet mSigningKeys> = signingKs;

        return;

     label06:
        $r9 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PackageSetting for ");

        $r15 = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is missing signatures.  Collecting certs again to recover them.");

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r18);

        goto label08;

     label07:
        $r0 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke srcFile.<java.io.File: java.lang.String toString()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changed; collecting certs");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r3);

     label08:
        virtualinvoke pp.<android.content.pm.PackageParser: void collectCertificates(android.content.pm.PackageParser$Package,int)>(pkg, parseFlags);

        virtualinvoke pp.<android.content.pm.PackageParser: void collectManifestDigest(android.content.pm.PackageParser$Package)>(pkg);

     label09:
        goto label11;

     label10:
        $r20 := @caughtexception;

        mSigningKeySetId#2 = $r20;

        $r23 = staticinvoke <com.android.server.pm.PackageManagerException: com.android.server.pm.PackageManagerException 'from'(android.content.pm.PackageParser$PackageParserException)>(mSigningKeySetId#2);

        throw $r23;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch android.content.pm.PackageParser$PackageParserException from label08 to label09 with label10;
    }

    private android.content.pm.PackageParser$Package scanPackageLI(java.io.File, int, int, long, android.os.UserHandle) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService this;
        java.io.File scanFile, $r33, $r34, $r80, $r96;
        int scanFlags, $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, parseFlags#1, parseFlags#2;
        long currentTime;
        android.os.UserHandle user;
        android.content.pm.PackageParser pp, $r1;
        android.content.pm.PackageParser$Package pkg, scannedPkg#22;
        com.android.server.pm.PackageSetting updatedPkg, e#4;
        java.lang.Throwable l17, l18, $r130, $r131, $r132, $r133, $r134, $r137, args#8, baseResourcePath#11, scannedPkg#14, l16#16;
        java.lang.String[] $r0, $r18, $r21, $r56, $r101;
        android.util.DisplayMetrics $r2;
        boolean $z0, $z2, $z3, $z5, $z6, $z7, $z8, updatedPkgBetter#9, oldName#17;
        com.android.server.pm.Settings $r3, $r9, $r22, $r103, $r120, $r121;
        android.util.ArrayMap $r4, $r5, $r24, $r74, $r81, $r105, updatedPkgBetter#5, oldName#10, args#15, l16#23;
        java.lang.String $r6, $r10, $r12, $r14, $r23, $r27, $r29, $r32, $r37, $r40, $r46, $r47, $r48, $r53, $r64, $r67, $r70, $r71, $r75, $r78, $r85, $r86, $r87, $r92, $r97, $r104, $r108, $r112, $r122, $r123, $r124, $r125, $r127, oldName#6, $r138, args#20, baseResourcePath#21;
        java.util.ArrayList $r7, $r119;
        java.lang.Object $r8, $r55, $r100, args#13, baseResourcePath#19;
        android.content.pm.ApplicationInfo $r11, $r13, $r15, $r16, $r17, $r19, $r20;
        java.lang.StringBuilder $r25, $r26, $r28, $r35, $r36, $r39, $r41, $r42, $r43, $r44, $r45, $r49, $r50, $r51, $r52, $r54, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r65, $r66, $r68, $r69, $r72, $r73, $r77, $r79, $r82, $r83, $r84, $r88, $r89, $r90, $r91, $r93, $r94, $r98, $r99, $r106, $r107, $r109, $r110, $r111, $r113, $r114, $r115, $r116, $r117, $r118, $r126, $r128, $r129;
        com.android.server.pm.PackageSignatures $r30;
        android.content.pm.Signature[] $r31, $r38;
        com.android.server.pm.PackageManagerException $r95, $r136;
        android.content.pm.PackageParser$PackageParserException $r135, e#3;
        com.android.server.pm.PackageManagerService$InstallArgs oldName#12, args#18;

        this := @this: com.android.server.pm.PackageManagerService;

        scanFile := @parameter0: java.io.File;

        parseFlags#1 := @parameter1: int;

        scanFlags := @parameter2: int;

        currentTime := @parameter3: long;

        user := @parameter4: android.os.UserHandle;

        $i0 = this.<com.android.server.pm.PackageManagerService: int mDefParseFlags>;

        parseFlags#2 = parseFlags#1 | $i0;

        $r1 = new android.content.pm.PackageParser;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r1.<android.content.pm.PackageParser: void <init>()>();

        pp = $r1;

        $r0 = this.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses>;

        virtualinvoke pp.<android.content.pm.PackageParser: void setSeparateProcesses(java.lang.String[])>($r0);

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        virtualinvoke pp.<android.content.pm.PackageParser: void setOnlyCoreApps(boolean)>($z0);

        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.DisplayMetrics mMetrics>;

        virtualinvoke pp.<android.content.pm.PackageParser: void setDisplayMetrics(android.util.DisplayMetrics)>($r2);

        $i1 = scanFlags & 512;

        if $i1 == 0 goto label01;

        parseFlags#2 = parseFlags#2 | 512;

     label01:
        pkg = virtualinvoke pp.<android.content.pm.PackageParser: android.content.pm.PackageParser$Package parsePackage(java.io.File,int)>(scanFile, parseFlags#2);

     label02:
        goto label04;

     label03:
        $r135 := @caughtexception;

        e#3 = $r135;

        $r136 = staticinvoke <com.android.server.pm.PackageManagerException: com.android.server.pm.PackageManagerException 'from'(android.content.pm.PackageParser$PackageParserException)>(e#3);

        throw $r136;

     label04:
        e#4 = null;

        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        updatedPkgBetter#5 = $r4;

        entermonitor $r4;

     label05:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mRenamedPackages>;

        $r6 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r8 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r6);

        oldName#6 = (java.lang.String) $r8;

        $r7 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mOriginalPackages>;

        if $r7 == null goto label06;

        $r119 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mOriginalPackages>;

        $z8 = virtualinvoke $r119.<java.util.ArrayList: boolean contains(java.lang.Object)>(oldName#6);

        if $z8 == 0 goto label06;

        $r120 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        e#4 = virtualinvoke $r120.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting peekPackageLPr(java.lang.String)>(oldName#6);

     label06:
        if e#4 != null goto label07;

        $r121 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r122 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        e#4 = virtualinvoke $r121.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting peekPackageLPr(java.lang.String)>($r122);

     label07:
        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        if e#4 == null goto label08;

        $r138 = e#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        goto label09;

     label08:
        $r138 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

     label09:
        updatedPkg = virtualinvoke $r9.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>($r138);

        exitmonitor updatedPkgBetter#5;

     label10:
        goto label13;

     label11:
        $r131 := @caughtexception;

        args#8 = $r131;

        exitmonitor updatedPkgBetter#5;

     label12:
        throw args#8;

     label13:
        updatedPkgBetter#9 = 0;

        if updatedPkg == null goto label33;

        $i15 = parseFlags#2 & 1;

        if $i15 == 0 goto label33;

        $z5 = staticinvoke <com.android.server.pm.PackageManagerService: boolean locationIsPrivileged(java.io.File)>(scanFile);

        if $z5 == 0 goto label14;

        $i28 = updatedPkg.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $i27 = $i28 | 8;

        updatedPkg.<com.android.server.pm.PackageSetting: int pkgPrivateFlags> = $i27;

        goto label15;

     label14:
        $i18 = updatedPkg.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $i19 = $i18 & -9;

        updatedPkg.<com.android.server.pm.PackageSetting: int pkgPrivateFlags> = $i19;

     label15:
        if e#4 == null goto label33;

        $r80 = e#4.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $z6 = virtualinvoke $r80.<java.io.File: boolean equals(java.lang.Object)>(scanFile);

        if $z6 != 0 goto label33;

        $i21 = pkg.<android.content.pm.PackageParser$Package: int mVersionCode>;

        $i20 = e#4.<com.android.server.pm.PackageSetting: int versionCode>;

        if $i21 > $i20 goto label17;

        $r96 = updatedPkg.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $z7 = virtualinvoke $r96.<java.io.File: boolean equals(java.lang.Object)>(scanFile);

        if $z7 != 0 goto label16;

        $r106 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r106.<java.lang.StringBuilder: void <init>()>();

        $r111 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Code path for hidden system pkg : ");

        $r112 = e#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r109 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r112);

        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changing from ");

        $r127 = updatedPkg.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r126 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r127);

        $r129 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r128 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(scanFile);

        $r123 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r123);

        updatedPkg.<com.android.server.pm.PackageSetting: java.io.File codePath> = scanFile;

        $r125 = virtualinvoke scanFile.<java.io.File: java.lang.String toString()>();

        updatedPkg.<com.android.server.pm.PackageSetting: java.lang.String codePathString> = $r125;

        updatedPkg.<com.android.server.pm.PackageSetting: java.io.File resourcePath> = scanFile;

        $r124 = virtualinvoke scanFile.<java.io.File: java.lang.String toString()>();

        updatedPkg.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString> = $r124;

     label16:
        updatedPkg.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg> = pkg;

        $r95 = new com.android.server.pm.PackageManagerException;

        $r99 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r97 = e#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r115 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r97);

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r113 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(scanFile);

        $r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ignored: updated version ");

        $i26 = e#4.<com.android.server.pm.PackageSetting: int versionCode>;

        $r118 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r117 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" better than this ");

        $i25 = pkg.<android.content.pm.PackageParser$Package: int mVersionCode>;

        $r107 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i25);

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r95.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-5, $r108);

        throw $r95;

     label17:
        $r81 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        oldName#10 = $r81;

        entermonitor $r81;

     label18:
        $r74 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r75 = e#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r74.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r75);

        exitmonitor oldName#10;

     label19:
        goto label22;

     label20:
        $r132 := @caughtexception;

        baseResourcePath#11 = $r132;

        exitmonitor oldName#10;

     label21:
        throw baseResourcePath#11;

     label22:
        $r77 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r78 = e#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r88 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(scanFile);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reverting from ");

        $r92 = e#4.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r93 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": new version ");

        $i24 = pkg.<android.content.pm.PackageParser$Package: int mVersionCode>;

        $r82 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" better than installed ");

        $i22 = e#4.<com.android.server.pm.PackageSetting: int versionCode>;

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r85);

        $i23 = specialinvoke this.<com.android.server.pm.PackageManagerService: int packageFlagsToInstallFlags(com.android.server.pm.PackageSetting)>(e#4);

        $r86 = e#4.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r87 = e#4.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString>;

        $r101 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(com.android.server.pm.PackageSetting)>(e#4);

        oldName#12 = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgsForExisting(int,java.lang.String,java.lang.String,java.lang.String[])>($i23, $r86, $r87, $r101);

        $r100 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        args#13 = $r100;

        entermonitor $r100;

     label23:
        virtualinvoke oldName#12.<com.android.server.pm.PackageManagerService$InstallArgs: void cleanUpResourcesLI()>();

        exitmonitor args#13;

     label24:
        goto label27;

     label25:
        $r130 := @caughtexception;

        scannedPkg#14 = $r130;

        exitmonitor args#13;

     label26:
        throw scannedPkg#14;

     label27:
        $r105 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        args#15 = $r105;

        entermonitor $r105;

     label28:
        $r103 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r104 = e#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r103.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting enableSystemPackageLPw(java.lang.String)>($r104);

        exitmonitor args#15;

     label29:
        goto label32;

     label30:
        $r137 := @caughtexception;

        l16#16 = $r137;

        exitmonitor args#15;

     label31:
        throw l16#16;

     label32:
        updatedPkgBetter#9 = 1;

     label33:
        if updatedPkg == null goto label34;

        parseFlags#2 = parseFlags#2 | 1;

        $i17 = updatedPkg.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $i16 = $i17 & 8;

        if $i16 == 0 goto label34;

        parseFlags#2 = parseFlags#2 | 128;

     label34:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void collectCertificatesLI(android.content.pm.PackageParser,com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package,java.io.File,int)>(pp, e#4, pkg, scanFile, parseFlags#2);

        oldName#17 = 0;

        if updatedPkg != null goto label41;

        if e#4 == null goto label41;

        $i6 = parseFlags#2 & 64;

        if $i6 == 0 goto label41;

        $z2 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(e#4);

        if $z2 != 0 goto label41;

        $r30 = e#4.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r38 = $r30.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        $r31 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $i7 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r38, $r31);

        if $i7 == 0 goto label35;

        $r66 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r64 = e#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r63 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r73 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appeared on system, but");

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signatures don\'t match existing userdata copy; removing");

        $r71 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r71);

        $r70 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>($r70, null, 1, null, null, 0, null, 0);

        e#4 = null;

        goto label41;

     label35:
        $i9 = pkg.<android.content.pm.PackageParser$Package: int mVersionCode>;

        $i8 = e#4.<com.android.server.pm.PackageSetting: int versionCode>;

        if $i9 > $i8 goto label36;

        oldName#17 = 1;

        $r54 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r53 = e#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r61 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appeared at ");

        $r59 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(scanFile);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but new version ");

        $i14 = pkg.<android.content.pm.PackageParser$Package: int mVersionCode>;

        $r58 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" better than installed ");

        $i13 = e#4.<com.android.server.pm.PackageSetting: int versionCode>;

        $r69 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r68 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; hiding system");

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(4, $r67);

        goto label41;

     label36:
        $r35 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r37 = e#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r43 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r45 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(scanFile);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reverting from ");

        $r40 = e#4.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r39 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": new version ");

        $i10 = pkg.<android.content.pm.PackageParser$Package: int mVersionCode>;

        $r50 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" better than installed ");

        $i12 = e#4.<com.android.server.pm.PackageSetting: int versionCode>;

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r46 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r46);

        $i11 = specialinvoke this.<com.android.server.pm.PackageManagerService: int packageFlagsToInstallFlags(com.android.server.pm.PackageSetting)>(e#4);

        $r48 = e#4.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r47 = e#4.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString>;

        $r56 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(com.android.server.pm.PackageSetting)>(e#4);

        args#18 = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgsForExisting(int,java.lang.String,java.lang.String,java.lang.String[])>($i11, $r48, $r47, $r56);

        $r55 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        baseResourcePath#19 = $r55;

        entermonitor $r55;

     label37:
        virtualinvoke args#18.<com.android.server.pm.PackageManagerService$InstallArgs: void cleanUpResourcesLI()>();

        exitmonitor baseResourcePath#19;

     label38:
        goto label41;

     label39:
        $r134 := @caughtexception;

        l17 = $r134;

        exitmonitor baseResourcePath#19;

     label40:
        throw l17;

     label41:
        $i2 = parseFlags#2 & 64;

        if $i2 != 0 goto label42;

        if e#4 == null goto label42;

        $r34 = e#4.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $r33 = e#4.<com.android.server.pm.PackageSetting: java.io.File resourcePath>;

        $z3 = virtualinvoke $r34.<java.io.File: boolean equals(java.lang.Object)>($r33);

        if $z3 != 0 goto label42;

        parseFlags#2 = parseFlags#2 | 16;

     label42:
        args#20 = null;

        baseResourcePath#21 = null;

        $i3 = parseFlags#2 & 16;

        if $i3 == 0 goto label44;

        if updatedPkgBetter#9 != 0 goto label44;

        if e#4 == null goto label43;

        $r32 = e#4.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString>;

        if $r32 == null goto label43;

        args#20 = e#4.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString>;

        baseResourcePath#21 = e#4.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString>;

        goto label45;

     label43:
        $r26 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource path not set for pkg : ");

        $r29 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r27);

        goto label45;

     label44:
        args#20 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        baseResourcePath#21 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

     label45:
        $r11 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r10 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r11.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid> = $r10;

        $r15 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r14 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        virtualinvoke $r15.<android.content.pm.ApplicationInfo: void setCodePath(java.lang.String)>($r14);

        $r13 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r12 = pkg.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        virtualinvoke $r13.<android.content.pm.ApplicationInfo: void setBaseCodePath(java.lang.String)>($r12);

        $r19 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r18 = pkg.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        virtualinvoke $r19.<android.content.pm.ApplicationInfo: void setSplitCodePaths(java.lang.String[])>($r18);

        $r16 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        virtualinvoke $r16.<android.content.pm.ApplicationInfo: void setResourcePath(java.lang.String)>(args#20);

        $r17 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        virtualinvoke $r17.<android.content.pm.ApplicationInfo: void setBaseResourcePath(java.lang.String)>(baseResourcePath#21);

        $r20 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r21 = pkg.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        virtualinvoke $r20.<android.content.pm.ApplicationInfo: void setSplitResourcePaths(java.lang.String[])>($r21);

        $i4 = scanFlags | 8;

        scannedPkg#22 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)>(pkg, parseFlags#2, $i4, currentTime, null);

        if oldName#17 == 0 goto label50;

        $r24 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l16#23 = $r24;

        entermonitor $r24;

     label46:
        $r22 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r23 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke $r22.<com.android.server.pm.Settings: boolean disableSystemPackageLPw(java.lang.String)>($r23);

        exitmonitor l16#23;

     label47:
        goto label50;

     label48:
        $r133 := @caughtexception;

        l18 = $r133;

        exitmonitor l16#23;

     label49:
        throw l18;

     label50:
        return scannedPkg#22;

        catch android.content.pm.PackageParser$PackageParserException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label30 to label31 with label30;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label39 to label40 with label39;
        catch java.lang.Throwable from label46 to label47 with label48;
        catch java.lang.Throwable from label48 to label49 with label48;
    }

    private static java.lang.String fixProcessName(java.lang.String, java.lang.String, int)
    {
        java.lang.String defProcessName, processName;
        int uid;

        defProcessName := @parameter0: java.lang.String;

        processName := @parameter1: java.lang.String;

        uid := @parameter2: int;

        if processName != null goto label1;

        return defProcessName;

     label1:
        return processName;
    }

    private void verifySignaturesLP(com.android.server.pm.PackageSetting, android.content.pm.PackageParser$Package) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting pkgSetting;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.PackageSignatures $r0, $r4, $r7, $r22, $r24, $r26, $r35, $r37;
        android.content.pm.Signature[] $r1, $r5, $r8, $r9, $r25, $r27;
        com.android.server.pm.SharedUserSetting $r2, $r3, $r6, $r17, $r20, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.server.pm.PackageManagerException $r10, $r29;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r18, $r19, $r28, $r30, $r31, $r32, $r34;
        java.lang.String $r12, $r16, $r21, $r33, $r36;
        boolean $z0, match#2, $z1, $z2, $z3, match#6, $z4, $z5;

        this := @this: com.android.server.pm.PackageManagerService;

        pkgSetting := @parameter0: com.android.server.pm.PackageSetting;

        pkg := @parameter1: android.content.pm.PackageParser$Package;

        $r0 = pkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r1 = $r0.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        if $r1 == null goto label09;

        $r26 = pkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r25 = $r26.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        $r27 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $i3 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r25, $r27);

        if $i3 != 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        match#2 = $z0;

        if match#2 != 0 goto label05;

        $r37 = pkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $i5 = specialinvoke this.<com.android.server.pm.PackageManagerService: int compareSignaturesCompat(com.android.server.pm.PackageSignatures,android.content.pm.PackageParser$Package)>($r37, pkg);

        if $i5 != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        match#2 = $z1;

     label05:
        if match#2 != 0 goto label08;

        $r35 = pkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $i4 = specialinvoke this.<com.android.server.pm.PackageManagerService: int compareSignaturesRecover(com.android.server.pm.PackageSignatures,android.content.pm.PackageParser$Package)>($r35, pkg);

        if $i4 != 0 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        match#2 = $z2;

     label08:
        if match#2 != 0 goto label09;

        $r29 = new com.android.server.pm.PackageManagerException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r33 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r34 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r31 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signatures do not match the ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("previously installed version; ignoring!");

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-7, $r36);

        throw $r29;

     label09:
        $r2 = pkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r2 == null goto label18;

        $r3 = pkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r4 = $r3.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r5 = $r4.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        if $r5 == null goto label18;

        $r6 = pkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r7 = $r6.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r9 = $r7.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        $r8 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $i0 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r9, $r8);

        if $i0 != 0 goto label10;

        $z3 = 1;

        goto label11;

     label10:
        $z3 = 0;

     label11:
        match#6 = $z3;

        if match#6 != 0 goto label14;

        $r23 = pkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r24 = $r23.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $i2 = specialinvoke this.<com.android.server.pm.PackageManagerService: int compareSignaturesCompat(com.android.server.pm.PackageSignatures,android.content.pm.PackageParser$Package)>($r24, pkg);

        if $i2 != 0 goto label12;

        $z4 = 1;

        goto label13;

     label12:
        $z4 = 0;

     label13:
        match#6 = $z4;

     label14:
        if match#6 != 0 goto label17;

        $r20 = pkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r22 = $r20.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $i1 = specialinvoke this.<com.android.server.pm.PackageManagerService: int compareSignaturesRecover(com.android.server.pm.PackageSignatures,android.content.pm.PackageParser$Package)>($r22, pkg);

        if $i1 != 0 goto label15;

        $z5 = 1;

        goto label16;

     label15:
        $z5 = 0;

     label16:
        match#6 = $z5;

     label17:
        if match#6 != 0 goto label18;

        $r10 = new com.android.server.pm.PackageManagerException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r12 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no signatures that match those in shared user ");

        $r17 = pkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r16 = $r17.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring!");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-8, $r21);

        throw $r10;

     label18:
        return;
    }

    private static final void enforceSystemOrRoot(java.lang.String)
    {
        java.lang.String message;
        int uid;
        java.lang.SecurityException $r0;

        message := @parameter0: java.lang.String;

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        if uid == 1000 goto label1;

        if uid == 0 goto label1;

        $r0 = new java.lang.SecurityException;

        specialinvoke $r0.<java.lang.SecurityException: void <init>(java.lang.String)>(message);

        throw $r0;

     label1:
        return;
    }

    public void performBootDexOpt()
    {
        com.android.server.pm.PackageManagerService this;
        java.io.File dataDir;
        java.util.Iterator i$, doTrim#12, it#16, it#18, it#20, it#24, it#26;
        android.content.pm.PackageParser$Package pkg, interval#13, timeSinceLast#17, timeSinceLast#19, timeSinceLast#21, timeSinceLast#25, timeSinceLast#27;
        long usableSpace, $l4, $l5, interval#4, timeSinceLast#5, lowThreshold#30;
        com.android.server.pm.PackageDexOptimizer $r0;
        android.util.ArrayMap $r1, isUpgrade#8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z11, $z13, $z15, $z16, $z18, $z20, isUpgrade#2, doTrim#3;
        byte $b1, $b2, $b6, $b8;
        android.content.Context $r5, $r20, $r25;
        android.os.storage.StorageManager $r6;
        java.lang.Object $r7, $r14, $r15, $r16, $r17, $r19, $r22;
        java.lang.StringBuilder $r8, $r12, $r27, $r28, $r31, tmp$2016689102, tmp$2063059846;
        java.lang.String $r11, $r13, $r18, $r23, $r29;
        android.content.ContentResolver $r21;
        android.content.res.Resources $r24;
        android.app.IActivityManager $r26;
        android.os.RemoteException $r32, $r33, interval#6, ms#7;
        java.lang.Throwable $r34, lowThreshold#10;
        android.os.storage.IMountService ms#1;
        android.util.ArraySet ms#9, interval#15, interval#23;
        java.util.ArrayList isUpgrade#11, tmp$1824304917;
        android.content.Intent doTrim#14, doTrim#22, tmp$1462183982, tmp$1826750956;
        int it#28, timeSinceLast#29;
        java.lang.IllegalStateException tmp$516801384;
        java.util.Collection tmp$1383979405, tmp$1652263762;

        this := @this: com.android.server.pm.PackageManagerService;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("Only the system can request dexopt be performed");

     label01:
        ms#1 = staticinvoke <com.android.internal.content.PackageHelper: android.os.storage.IMountService getMountService()>();

        if ms#1 == null goto label09;

        isUpgrade#2 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean isUpgrade()>();

        doTrim#3 = isUpgrade#2;

        if doTrim#3 == 0 goto label02;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Running disk maintenance immediately due to system update");

        goto label03;

     label02:
        $r20 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r21 = virtualinvoke $r20.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        interval#4 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r21, "fstrim_mandatory_interval", 259200000L);

        $b6 = interval#4 cmp 0L;

        if $b6 <= 0 goto label03;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l4 = interfaceinvoke ms#1.<android.os.storage.IMountService: long lastMaintenance()>();

        timeSinceLast#5 = $l5 - $l4;

        $b8 = timeSinceLast#5 cmp interval#4;

        if $b8 <= 0 goto label03;

        doTrim#3 = 1;

        tmp$2016689102 = new java.lang.StringBuilder;

        specialinvoke tmp$2016689102.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke tmp$2016689102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No disk maintenance in ");

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(timeSinceLast#5);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; running immediately");

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r29);

     label03:
        if doTrim#3 == 0 goto label08;

        $z20 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>();

        if $z20 != 0 goto label07;

     label04:
        $r26 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r25 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r24 = virtualinvoke $r25.<android.content.Context: android.content.res.Resources getResources()>();

        $r23 = virtualinvoke $r24.<android.content.res.Resources: java.lang.String getString(int)>(17040237);

        interfaceinvoke $r26.<android.app.IActivityManager: void showBootMessage(java.lang.CharSequence,boolean)>($r23, 1);

     label05:
        goto label07;

     label06:
        $r33 := @caughtexception;

        interval#6 = $r33;

     label07:
        interfaceinvoke ms#1.<android.os.storage.IMountService: void runMaintenance()>();

     label08:
        goto label10;

     label09:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "Mount service unavailable!");

     label10:
        goto label12;

     label11:
        $r32 := @caughtexception;

        ms#7 = $r32;

     label12:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        isUpgrade#8 = $r1;

        entermonitor $r1;

     label13:
        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        ms#9 = virtualinvoke $r0.<com.android.server.pm.PackageDexOptimizer: android.util.ArraySet clearDeferredDexOptPackages()>();

        exitmonitor isUpgrade#8;

     label14:
        goto label17;

     label15:
        $r34 := @caughtexception;

        lowThreshold#10 = $r34;

        exitmonitor isUpgrade#8;

     label16:
        throw lowThreshold#10;

     label17:
        if ms#9 == null goto label39;

        tmp$1824304917 = new java.util.ArrayList;

        specialinvoke tmp$1824304917.<java.util.ArrayList: void <init>()>();

        isUpgrade#11 = tmp$1824304917;

        doTrim#12 = virtualinvoke ms#9.<android.util.ArraySet: java.util.Iterator iterator()>();

     label18:
        $z0 = interfaceinvoke doTrim#12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label20;

        $r22 = interfaceinvoke doTrim#12.<java.util.Iterator: java.lang.Object next()>();

        interval#13 = (android.content.pm.PackageParser$Package) $r22;

        $z18 = interval#13.<android.content.pm.PackageParser$Package: boolean coreApp>;

        if $z18 == 0 goto label19;

        virtualinvoke isUpgrade#11.<java.util.ArrayList: boolean add(java.lang.Object)>(interval#13);

        interfaceinvoke doTrim#12.<java.util.Iterator: void remove()>();

     label19:
        goto label18;

     label20:
        tmp$1462183982 = new android.content.Intent;

        specialinvoke tmp$1462183982.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.PRE_BOOT_COMPLETED");

        doTrim#14 = tmp$1462183982;

        interval#15 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.util.ArraySet getPackageNamesForIntent(android.content.Intent)>(doTrim#14);

        it#16 = virtualinvoke ms#9.<android.util.ArraySet: java.util.Iterator iterator()>();

     label21:
        $z1 = interfaceinvoke it#16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label23;

        $r17 = interfaceinvoke it#16.<java.util.Iterator: java.lang.Object next()>();

        timeSinceLast#17 = (android.content.pm.PackageParser$Package) $r17;

        $r18 = timeSinceLast#17.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z13 = virtualinvoke interval#15.<android.util.ArraySet: boolean contains(java.lang.Object)>($r18);

        if $z13 == 0 goto label22;

        virtualinvoke isUpgrade#11.<java.util.ArrayList: boolean add(java.lang.Object)>(timeSinceLast#17);

        interfaceinvoke it#16.<java.util.Iterator: void remove()>();

     label22:
        goto label21;

     label23:
        it#18 = virtualinvoke ms#9.<android.util.ArraySet: java.util.Iterator iterator()>();

     label24:
        $z2 = interfaceinvoke it#18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label26;

        $r19 = interfaceinvoke it#18.<java.util.Iterator: java.lang.Object next()>();

        timeSinceLast#19 = (android.content.pm.PackageParser$Package) $r19;

        $z15 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>(timeSinceLast#19);

        if $z15 == 0 goto label25;

        $z16 = virtualinvoke timeSinceLast#19.<android.content.pm.PackageParser$Package: boolean isUpdatedSystemApp()>();

        if $z16 != 0 goto label25;

        virtualinvoke isUpgrade#11.<java.util.ArrayList: boolean add(java.lang.Object)>(timeSinceLast#19);

        interfaceinvoke it#18.<java.util.Iterator: void remove()>();

     label25:
        goto label24;

     label26:
        it#20 = virtualinvoke ms#9.<android.util.ArraySet: java.util.Iterator iterator()>();

     label27:
        $z3 = interfaceinvoke it#20.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label29;

        $r16 = interfaceinvoke it#20.<java.util.Iterator: java.lang.Object next()>();

        timeSinceLast#21 = (android.content.pm.PackageParser$Package) $r16;

        $z9 = virtualinvoke timeSinceLast#21.<android.content.pm.PackageParser$Package: boolean isUpdatedSystemApp()>();

        if $z9 == 0 goto label28;

        virtualinvoke isUpgrade#11.<java.util.ArrayList: boolean add(java.lang.Object)>(timeSinceLast#21);

        interfaceinvoke it#20.<java.util.Iterator: void remove()>();

     label28:
        goto label27;

     label29:
        tmp$1826750956 = new android.content.Intent;

        specialinvoke tmp$1826750956.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.BOOT_COMPLETED");

        doTrim#22 = tmp$1826750956;

        interval#23 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.util.ArraySet getPackageNamesForIntent(android.content.Intent)>(doTrim#22);

        it#24 = virtualinvoke ms#9.<android.util.ArraySet: java.util.Iterator iterator()>();

     label30:
        $z4 = interfaceinvoke it#24.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label32;

        $r14 = interfaceinvoke it#24.<java.util.Iterator: java.lang.Object next()>();

        timeSinceLast#25 = (android.content.pm.PackageParser$Package) $r14;

        $r13 = timeSinceLast#25.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z11 = virtualinvoke interval#23.<android.util.ArraySet: boolean contains(java.lang.Object)>($r13);

        if $z11 == 0 goto label31;

        virtualinvoke isUpgrade#11.<java.util.ArrayList: boolean add(java.lang.Object)>(timeSinceLast#25);

        interfaceinvoke it#24.<java.util.Iterator: void remove()>();

     label31:
        goto label30;

     label32:
        tmp$1383979405 = (java.util.Collection) ms#9;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void filterRecentlyUsedApps(java.util.Collection)>(tmp$1383979405);

        it#26 = virtualinvoke ms#9.<android.util.ArraySet: java.util.Iterator iterator()>();

     label33:
        $z5 = interfaceinvoke it#26.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label34;

        $r15 = interfaceinvoke it#26.<java.util.Iterator: java.lang.Object next()>();

        timeSinceLast#27 = (android.content.pm.PackageParser$Package) $r15;

        virtualinvoke isUpgrade#11.<java.util.ArrayList: boolean add(java.lang.Object)>(timeSinceLast#27);

        goto label33;

     label34:
        $z6 = this.<com.android.server.pm.PackageManagerService: boolean mLazyDexOpt>;

        if $z6 == 0 goto label35;

        tmp$1652263762 = (java.util.Collection) isUpgrade#11;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void filterRecentlyUsedApps(java.util.Collection)>(tmp$1652263762);

     label35:
        it#28 = 0;

        timeSinceLast#29 = virtualinvoke isUpgrade#11.<java.util.ArrayList: int size()>();

        dataDir = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r5 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r6 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageManager 'from'(android.content.Context)>($r5);

        lowThreshold#30 = virtualinvoke $r6.<android.os.storage.StorageManager: long getStorageLowBytes(java.io.File)>(dataDir);

        $b1 = lowThreshold#30 cmp 0L;

        if $b1 != 0 goto label36;

        tmp$516801384 = new java.lang.IllegalStateException;

        specialinvoke tmp$516801384.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid low memory threshold");

        throw tmp$516801384;

     label36:
        i$ = virtualinvoke isUpgrade#11.<java.util.ArrayList: java.util.Iterator iterator()>();

     label37:
        $z7 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label39;

        $r7 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        pkg = (android.content.pm.PackageParser$Package) $r7;

        usableSpace = virtualinvoke dataDir.<java.io.File: long getUsableSpace()>();

        $b2 = usableSpace cmp lowThreshold#30;

        if $b2 >= 0 goto label38;

        tmp$2063059846 = new java.lang.StringBuilder;

        specialinvoke tmp$2063059846.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke tmp$2063059846.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not running dexopt on remaining apps due to low memory: ");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(usableSpace);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r11);

        goto label39;

     label38:
        it#28 = it#28 + 1;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void performBootDexOpt(android.content.pm.PackageParser$Package,int,int)>(pkg, it#28, timeSinceLast#29);

        goto label37;

     label39:
        return;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch android.os.RemoteException from label01 to label10 with label11;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private void filterRecentlyUsedApps(java.util.Collection)
    {
        com.android.server.pm.PackageManagerService this;
        java.util.Collection pkgs;
        long now, then, $l0, $l1;
        java.util.Iterator i;
        android.content.pm.PackageParser$Package pkg;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r0;
        byte $b2;
        com.android.server.pm.PackageManagerService$PackageUsage $r1;
        int skipped#1;

        this := @this: com.android.server.pm.PackageManagerService;

        pkgs := @parameter0: java.util.Collection;

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mLazyDexOpt>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>();

        if $z2 != 0 goto label4;

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageUsage mPackageUsage>;

        $z3 = virtualinvoke $r1.<com.android.server.pm.PackageManagerService$PackageUsage: boolean isHistoricalPackageUsageAvailable()>();

        if $z3 == 0 goto label4;

     label1:
        interfaceinvoke pkgs.<java.util.Collection: int size()>();

        skipped#1 = 0;

        now = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i = interfaceinvoke pkgs.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r0 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        pkg = (android.content.pm.PackageParser$Package) $r0;

        then = pkg.<android.content.pm.PackageParser$Package: long mLastPackageUsageTimeInMills>;

        $l1 = this.<com.android.server.pm.PackageManagerService: long mDexOptLRUThresholdInMills>;

        $l0 = then + $l1;

        $b2 = $l0 cmp now;

        if $b2 >= 0 goto label3;

        interfaceinvoke i.<java.util.Iterator: void remove()>();

        skipped#1 = skipped#1 + 1;

     label3:
        goto label2;

     label4:
        return;
    }

    private android.util.ArraySet getPackageNamesForIntent(android.content.Intent)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Intent intent;
        java.util.Iterator i$;
        android.content.pm.ResolveInfo ri;
        android.content.pm.IPackageManager $r0;
        android.util.ArraySet $r1, pkgNames#3;
        boolean $z0;
        java.lang.Object $r2;
        android.content.pm.ActivityInfo $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5, pkgNames#2;
        java.util.List ris#1;

        this := @this: com.android.server.pm.PackageManagerService;

        intent := @parameter0: android.content.Intent;

        ris#1 = null;

     label1:
        $r0 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        ris#1 = interfaceinvoke $r0.<android.content.pm.IPackageManager: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>(intent, null, 0, 0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        pkgNames#2 = $r5;

     label4:
        $r1 = new android.util.ArraySet;

        specialinvoke $r1.<android.util.ArraySet: void <init>()>();

        pkgNames#3 = $r1;

        if ris#1 == null goto label6;

        i$ = interfaceinvoke ris#1.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r2 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        ri = (android.content.pm.ResolveInfo) $r2;

        $r3 = ri.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r4 = $r3.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke pkgNames#3.<android.util.ArraySet: boolean add(java.lang.Object)>($r4);

        goto label5;

     label6:
        return pkgNames#3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void performBootDexOpt(android.content.pm.PackageParser$Package, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg, p#2;
        int curr, total;
        java.lang.Object l5, $r0;
        java.lang.Throwable l6, $r9;
        boolean $z0;
        com.android.server.pm.PackageDexOptimizer $r1;
        android.app.IActivityManager $r2;
        android.content.Context $r3;
        android.content.res.Resources $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6, $r8;
        java.lang.String $r7;
        android.os.RemoteException $r10, p#1;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        curr := @parameter1: int;

        total := @parameter2: int;

        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>();

        if $z0 != 0 goto label4;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(curr);

        $r5[0] = $r6;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(total);

        $r5[1] = $r8;

        $r7 = virtualinvoke $r4.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040238, $r5);

        interfaceinvoke $r2.<android.app.IActivityManager: void showBootMessage(java.lang.CharSequence,boolean)>($r7, 1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        p#1 = $r10;

     label4:
        p#2 = pkg;

        $r0 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l5 = $r0;

        entermonitor $r0;

     label5:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        virtualinvoke $r1.<com.android.server.pm.PackageDexOptimizer: int performDexOpt(android.content.pm.PackageParser$Package,java.lang.String[],boolean,boolean,boolean)>(p#2, null, 0, 0, 1);

        exitmonitor l5;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        l6 = $r9;

        exitmonitor l5;

     label8:
        throw l6;

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean performDexOptIfNeeded(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, instructionSet;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        instructionSet := @parameter1: java.lang.String;

        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean performDexOpt(java.lang.String,java.lang.String,boolean)>(packageName, instructionSet, 0);

        return $z0;
    }

    public boolean performDexOpt(java.lang.String, java.lang.String, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, instructionSet, targetInstructionSet, $r12;
        boolean backgroundDexopt, dexopt, updateUsage, l13, $z0, $z1, $z2, $z3, $z4;
        android.content.pm.PackageParser$Package p;
        java.lang.Throwable l9, l14, l15, $r9, $r10, $r11;
        java.lang.Object l10, $r1, $r6;
        java.lang.String[] instructionSets, $r8;
        int result;
        android.util.ArrayMap $r0, $r2, callingId#3;
        android.content.pm.ApplicationInfo $r3;
        com.android.server.pm.PackageManagerService$PackageUsage $r4;
        android.util.ArraySet $r5;
        com.android.server.pm.PackageDexOptimizer $r7;
        long $l0, callingId#5;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        instructionSet := @parameter1: java.lang.String;

        backgroundDexopt := @parameter2: boolean;

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mLazyDexOpt>;

        if $z0 != 0 goto label01;

        if backgroundDexopt == 0 goto label02;

     label01:
        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        dexopt = $z2;

        if backgroundDexopt != 0 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        updateUsage = $z3;

        if dexopt != 0 goto label06;

        if updateUsage != 0 goto label06;

        return 0;

     label06:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        callingId#3 = $r0;

        entermonitor $r0;

     label07:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r1 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        p = (android.content.pm.PackageParser$Package) $r1;

        if p != null goto label09;

        exitmonitor callingId#3;

     label08:
        return 0;

     label09:
        if updateUsage == 0 goto label10;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        p.<android.content.pm.PackageParser$Package: long mLastPackageUsageTimeInMills> = $l0;

     label10:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageUsage mPackageUsage>;

        virtualinvoke $r4.<com.android.server.pm.PackageManagerService$PackageUsage: void write(boolean)>(0);

        if dexopt != 0 goto label12;

        exitmonitor callingId#3;

     label11:
        return 0;

     label12:
        if instructionSet == null goto label13;

        $r12 = instructionSet;

        goto label14;

     label13:
        $r3 = p.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r12 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getPrimaryInstructionSet(android.content.pm.ApplicationInfo)>($r3);

     label14:
        targetInstructionSet = $r12;

        $r5 = p.<android.content.pm.PackageParser$Package: android.util.ArraySet mDexOptPerformed>;

        $z1 = virtualinvoke $r5.<android.util.ArraySet: boolean contains(java.lang.Object)>(targetInstructionSet);

        if $z1 == 0 goto label16;

        exitmonitor callingId#3;

     label15:
        return 0;

     label16:
        exitmonitor callingId#3;

     label17:
        goto label20;

     label18:
        $r9 := @caughtexception;

        l9 = $r9;

        exitmonitor callingId#3;

     label19:
        throw l9;

     label20:
        callingId#5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label21:
        $r6 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l10 = $r6;

        entermonitor $r6;

     label22:
        $r8 = newarray (java.lang.String)[1];

        $r8[0] = targetInstructionSet;

        instructionSets = $r8;

        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        result = virtualinvoke $r7.<com.android.server.pm.PackageDexOptimizer: int performDexOpt(android.content.pm.PackageParser$Package,java.lang.String[],boolean,boolean,boolean)>(p, instructionSets, 0, 0, 1);

        if result != 1 goto label23;

        $z4 = 1;

        goto label24;

     label23:
        $z4 = 0;

     label24:
        l13 = $z4;

        exitmonitor l10;

     label25:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId#5);

        return l13;

     label26:
        $r11 := @caughtexception;

        l14 = $r11;

        exitmonitor l10;

     label27:
        throw l14;

     label28:
        $r10 := @caughtexception;

        l15 = $r10;

     label29:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId#5);

        throw l15;

        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label11 with label18;
        catch java.lang.Throwable from label12 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label22 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
        catch java.lang.Throwable from label21 to label25 with label28;
        catch java.lang.Throwable from label26 to label29 with label28;
    }

    public android.util.ArraySet getPackagesThatNeedDexOpt()
    {
        com.android.server.pm.PackageManagerService this;
        android.util.ArrayMap l2, $r0, $r1;
        java.util.Iterator i$;
        android.content.pm.PackageParser$Package p;
        java.lang.Throwable l5, $r7;
        java.util.Collection $r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        android.util.ArraySet $r4, $r6, pkgs#1;
        java.lang.String $r5;

        this := @this: com.android.server.pm.PackageManagerService;

        pkgs#1 = null;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.util.Collection values()>();

        i$ = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        p = (android.content.pm.PackageParser$Package) $r3;

        $r4 = p.<android.content.pm.PackageParser$Package: android.util.ArraySet mDexOptPerformed>;

        $z1 = virtualinvoke $r4.<android.util.ArraySet: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        goto label2;

     label3:
        if pkgs#1 != null goto label4;

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        pkgs#1 = $r6;

     label4:
        $r5 = p.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke pkgs#1.<android.util.ArraySet: boolean add(java.lang.Object)>($r5);

        goto label2;

     label5:
        exitmonitor l2;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        l5 = $r7;

        exitmonitor l2;

     label8:
        throw l5;

     label9:
        return pkgs#1;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void shutdown()
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageManagerService$PackageUsage $r0;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageUsage mPackageUsage>;

        virtualinvoke $r0.<com.android.server.pm.PackageManagerService$PackageUsage: void write(boolean)>(1);

        return;
    }

    public void forceDexOpt(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r6, $r11, $r18;
        android.content.pm.PackageParser$Package pkg;
        int res;
        java.lang.Throwable l6, $r17, $r19, instructionSets#2;
        android.util.ArrayMap $r0, $r1, l3#1;
        java.lang.Object $r2, $r3, l3#3;
        java.lang.String[] $r4, instructionSets#4;
        android.content.pm.ApplicationInfo $r5;
        com.android.server.pm.PackageDexOptimizer $r7;
        java.lang.IllegalStateException $r8;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r15, $r16;
        java.lang.IllegalArgumentException $r14;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("forceDexOpt");

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3#1 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r2;

        if pkg != null goto label02;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing package: ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label02:
        exitmonitor l3#1;

     label03:
        goto label06;

     label04:
        $r17 := @caughtexception;

        instructionSets#2 = $r17;

        exitmonitor l3#1;

     label05:
        throw instructionSets#2;

     label06:
        $r3 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l3#3 = $r3;

        entermonitor $r3;

     label07:
        $r4 = newarray (java.lang.String)[1];

        $r5 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r6 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getPrimaryInstructionSet(android.content.pm.ApplicationInfo)>($r5);

        $r4[0] = $r6;

        instructionSets#4 = $r4;

        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        res = virtualinvoke $r7.<com.android.server.pm.PackageDexOptimizer: int performDexOpt(android.content.pm.PackageParser$Package,java.lang.String[],boolean,boolean,boolean)>(pkg, instructionSets#4, 1, 0, 1);

        if res == 1 goto label08;

        $r8 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to dexopt: ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(res);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label08:
        exitmonitor l3#3;

     label09:
        goto label12;

     label10:
        $r19 := @caughtexception;

        l6 = $r19;

        exitmonitor l3#3;

     label11:
        throw l6;

     label12:
        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private boolean verifyPackageUpdateLPr(com.android.server.pm.PackageSetting, android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting oldPkg;
        android.content.pm.PackageParser$Package newPkg;
        int $i0, $i1;
        java.lang.String $r0, $r5, $r8, $r10, $r15, $r16, $r20;
        android.util.ArrayMap $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r11, $r12, $r13, $r14, $r17, $r18, $r19;

        this := @this: com.android.server.pm.PackageManagerService;

        oldPkg := @parameter0: com.android.server.pm.PackageSetting;

        newPkg := @parameter1: android.content.pm.PackageParser$Package;

        $i0 = oldPkg.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to update from ");

        $r15 = oldPkg.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r16 = newPkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": old package not in system partition");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r20);

        return 0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r0 = oldPkg.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r0);

        if $r2 == null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to update from ");

        $r5 = oldPkg.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r8 = newPkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": old package still exists");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r10);

        return 0;

     label2:
        return 1;
    }

    private int createDataDirsLI(java.lang.String, java.lang.String, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String volumeUuid, packageName, seinfo;
        int uid, len$, user, $i0, res#1, i$#2;
        int[] users, arr$;
        com.android.server.pm.UserManagerService $r0;
        com.android.server.pm.Installer $r1, $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        volumeUuid := @parameter0: java.lang.String;

        packageName := @parameter1: java.lang.String;

        uid := @parameter2: int;

        seinfo := @parameter3: java.lang.String;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        users = virtualinvoke $r0.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        res#1 = virtualinvoke $r1.<com.android.server.pm.Installer: int install(java.lang.String,java.lang.String,int,int,java.lang.String)>(volumeUuid, packageName, uid, uid, seinfo);

        if res#1 >= 0 goto label1;

        return res#1;

     label1:
        arr$ = users;

        len$ = lengthof arr$;

        i$#2 = 0;

     label2:
        if i$#2 >= len$ goto label4;

        user = arr$[i$#2];

        if user == 0 goto label3;

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $i0 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(user, uid);

        res#1 = virtualinvoke $r2.<com.android.server.pm.Installer: int createUserData(java.lang.String,java.lang.String,int,int,java.lang.String)>(volumeUuid, packageName, $i0, user, seinfo);

        if res#1 >= 0 goto label3;

        return res#1;

     label3:
        i$#2 = i$#2 + 1;

        goto label2;

     label4:
        return res#1;
    }

    private int removeDataDirsLI(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String volumeUuid, packageName;
        int[] users, arr$;
        int len$, user, resInner, res#1, i$#2;
        com.android.server.pm.UserManagerService $r0;
        com.android.server.pm.Installer $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        volumeUuid := @parameter0: java.lang.String;

        packageName := @parameter1: java.lang.String;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        users = virtualinvoke $r0.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        res#1 = 0;

        arr$ = users;

        len$ = lengthof arr$;

        i$#2 = 0;

     label1:
        if i$#2 >= len$ goto label3;

        user = arr$[i$#2];

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        resInner = virtualinvoke $r1.<com.android.server.pm.Installer: int remove(java.lang.String,java.lang.String,int)>(volumeUuid, packageName, user);

        if resInner >= 0 goto label2;

        res#1 = resInner;

     label2:
        i$#2 = i$#2 + 1;

        goto label1;

     label3:
        return res#1;
    }

    private int deleteCodeCacheDirsLI(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String volumeUuid, packageName;
        int[] users, arr$;
        int len$, user, resInner, res#1, i$#2;
        com.android.server.pm.UserManagerService $r0;
        com.android.server.pm.Installer $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        volumeUuid := @parameter0: java.lang.String;

        packageName := @parameter1: java.lang.String;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        users = virtualinvoke $r0.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        res#1 = 0;

        arr$ = users;

        len$ = lengthof arr$;

        i$#2 = 0;

     label1:
        if i$#2 >= len$ goto label3;

        user = arr$[i$#2];

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        resInner = virtualinvoke $r1.<com.android.server.pm.Installer: int deleteCodeCacheFiles(java.lang.String,java.lang.String,int)>(volumeUuid, packageName, user);

        if resInner >= 0 goto label2;

        res#1 = resInner;

     label2:
        i$#2 = i$#2 + 1;

        goto label1;

     label3:
        return res#1;
    }

    private void addSharedLibraryLPw(android.util.ArraySet, com.android.server.pm.PackageManagerService$SharedLibraryEntry, android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        android.util.ArraySet usesLibraryFiles;
        com.android.server.pm.PackageManagerService$SharedLibraryEntry file;
        android.content.pm.PackageParser$Package changingLib, p#1;
        java.lang.String $r0, $r1, $r5, $r6, $r7, $r8, $r9;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;
        java.util.List $r4;
        boolean $z1, $z2;

        this := @this: com.android.server.pm.PackageManagerService;

        usesLibraryFiles := @parameter0: android.util.ArraySet;

        file := @parameter1: com.android.server.pm.PackageManagerService$SharedLibraryEntry;

        changingLib := @parameter2: android.content.pm.PackageParser$Package;

        $r0 = file.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String path>;

        if $r0 == null goto label1;

        $r9 = file.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String path>;

        virtualinvoke usesLibraryFiles.<android.util.ArraySet: boolean add(java.lang.Object)>($r9);

        return;

     label1:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r1 = file.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String apk>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r1);

        p#1 = (android.content.pm.PackageParser$Package) $r3;

        if changingLib == null goto label3;

        $r6 = changingLib.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r5 = file.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String apk>;

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        if p#1 == null goto label2;

        $r8 = p#1.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r7 = changingLib.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label3;

     label2:
        p#1 = changingLib;

     label3:
        if p#1 == null goto label4;

        $r4 = virtualinvoke p#1.<android.content.pm.PackageParser$Package: java.util.List getAllCodePaths()>();

        virtualinvoke usesLibraryFiles.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r4);

     label4:
        return;
    }

    private void updateSharedLibrariesLPw(android.content.pm.PackageParser$Package, android.content.pm.PackageParser$Package) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg, changingLib;
        android.util.ArraySet usesLibraryFiles, $r1;
        java.util.ArrayList $r0, $r2, $r3, $r7, $r15, $r22, $r24, $r35, $r36, $r40;
        java.lang.String[] $r4, $r6;
        java.lang.Object[] $r5;
        java.lang.Object $r8, $r11, $r18, $r27, $r28, $r32;
        android.util.ArrayMap $r9, $r23;
        java.lang.StringBuilder $r10, $r12, $r13, $r16, $r19, $r20, $r26, $r30, $r31, $r34, $r38, $r39;
        java.lang.String $r14, $r17, $r21, $r29, $r33, $r37;
        com.android.server.pm.PackageManagerException $r25;
        int $i1, N#2, i#3, $i2, N#6, i#7, N#9;
        com.android.server.pm.PackageManagerService$SharedLibraryEntry file#4, file#8;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        changingLib := @parameter1: android.content.pm.PackageParser$Package;

        $r0 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesLibraries>;

        if $r0 != null goto label01;

        $r40 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesOptionalLibraries>;

        if $r40 == null goto label14;

     label01:
        $r1 = new android.util.ArraySet;

        specialinvoke $r1.<android.util.ArraySet: void <init>()>();

        usesLibraryFiles = $r1;

        $r2 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesLibraries>;

        if $r2 == null goto label02;

        $r36 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesLibraries>;

        $i1 = virtualinvoke $r36.<java.util.ArrayList: int size()>();

        goto label03;

     label02:
        $i1 = 0;

     label03:
        N#2 = $i1;

        i#3 = 0;

     label04:
        if i#3 >= N#2 goto label06;

        $r23 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r22 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesLibraries>;

        $r27 = virtualinvoke $r22.<java.util.ArrayList: java.lang.Object get(int)>(i#3);

        $r28 = virtualinvoke $r23.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r27);

        file#4 = (com.android.server.pm.PackageManagerService$SharedLibraryEntry) $r28;

        if file#4 != null goto label05;

        $r25 = new com.android.server.pm.PackageManagerException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r29 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires unavailable shared library ");

        $r35 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesLibraries>;

        $r32 = virtualinvoke $r35.<java.util.ArrayList: java.lang.Object get(int)>(i#3);

        $r33 = (java.lang.String) $r32;

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; failing!");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-9, $r37);

        throw $r25;

     label05:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void addSharedLibraryLPw(android.util.ArraySet,com.android.server.pm.PackageManagerService$SharedLibraryEntry,android.content.pm.PackageParser$Package)>(usesLibraryFiles, file#4, changingLib);

        i#3 = i#3 + 1;

        goto label04;

     label06:
        $r3 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesOptionalLibraries>;

        if $r3 == null goto label07;

        $r24 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesOptionalLibraries>;

        $i2 = virtualinvoke $r24.<java.util.ArrayList: int size()>();

        goto label08;

     label07:
        $i2 = 0;

     label08:
        N#6 = $i2;

        i#7 = 0;

     label09:
        if i#7 >= N#6 goto label12;

        $r9 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r7 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesOptionalLibraries>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i#7);

        $r11 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r8);

        file#8 = (com.android.server.pm.PackageManagerService$SharedLibraryEntry) $r11;

        if file#8 != null goto label10;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r14 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" desires unavailable shared library ");

        $r15 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesOptionalLibraries>;

        $r18 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i#7);

        $r17 = (java.lang.String) $r18;

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring!");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r21);

        goto label11;

     label10:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void addSharedLibraryLPw(android.util.ArraySet,com.android.server.pm.PackageManagerService$SharedLibraryEntry,android.content.pm.PackageParser$Package)>(usesLibraryFiles, file#8, changingLib);

     label11:
        i#7 = i#7 + 1;

        goto label09;

     label12:
        N#9 = virtualinvoke usesLibraryFiles.<android.util.ArraySet: int size()>();

        if N#9 <= 0 goto label13;

        $r4 = newarray (java.lang.String)[N#9];

        $r5 = virtualinvoke usesLibraryFiles.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        pkg.<android.content.pm.PackageParser$Package: java.lang.String[] usesLibraryFiles> = $r6;

        goto label14;

     label13:
        pkg.<android.content.pm.PackageParser$Package: java.lang.String[] usesLibraryFiles> = null;

     label14:
        return;
    }

    private static boolean hasString(java.util.List, java.util.List)
    {
        java.util.List list, which;
        int $i0, $i1, i#1, j#2;
        java.lang.Object $r0, $r2;
        java.lang.String $r1;
        boolean $z0;

        list := @parameter0: java.util.List;

        which := @parameter1: java.util.List;

        if list != null goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke list.<java.util.List: int size()>();

        i#1 = $i0 - 1;

     label2:
        if i#1 < 0 goto label6;

        $i1 = interfaceinvoke which.<java.util.List: int size()>();

        j#2 = $i1 - 1;

     label3:
        if j#2 < 0 goto label5;

        $r0 = interfaceinvoke which.<java.util.List: java.lang.Object get(int)>(j#2);

        $r1 = (java.lang.String) $r0;

        $r2 = interfaceinvoke list.<java.util.List: java.lang.Object get(int)>(i#1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        j#2 = j#2 + -1;

        goto label3;

     label5:
        i#1 = i#1 + -1;

        goto label2;

     label6:
        return 0;
    }

    private void updateAllSharedLibrariesLPw()
    {
        com.android.server.pm.PackageManagerService this;
        java.util.Iterator i$;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.PackageManagerException e, $r3;
        android.util.ArrayMap $r0;
        java.util.Collection $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r1 = virtualinvoke $r0.<android.util.ArrayMap: java.util.Collection values()>();

        i$ = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r2 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        pkg = (android.content.pm.PackageParser$Package) $r2;

     label2:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void updateSharedLibrariesLPw(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package)>(pkg, null);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        e = $r3;

        $r4 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAllSharedLibrariesLPw failed: ");

        $r6 = virtualinvoke e.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r8);

     label5:
        goto label1;

     label6:
        return;

        catch com.android.server.pm.PackageManagerException from label2 to label3 with label4;
    }

    private java.util.ArrayList updateAllSharedLibrariesLPw(android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package changingPkg, pkg;
        java.util.Iterator i$;
        com.android.server.pm.PackageManagerException e, $r8;
        android.util.ArrayMap $r0;
        java.util.Collection $r1;
        boolean $z0, $z1, $z3;
        java.lang.Object $r2;
        java.util.ArrayList $r3, $r4, $r5, $r6, $r7, res#1;
        java.lang.StringBuilder $r9, $r11, $r13;
        java.lang.String $r10, $r12;

        this := @this: com.android.server.pm.PackageManagerService;

        changingPkg := @parameter0: android.content.pm.PackageParser$Package;

        res#1 = null;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r1 = virtualinvoke $r0.<android.util.ArrayMap: java.util.Collection values()>();

        i$ = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r2 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        pkg = (android.content.pm.PackageParser$Package) $r2;

        $r4 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesLibraries>;

        $r3 = changingPkg.<android.content.pm.PackageParser$Package: java.util.ArrayList libraryNames>;

        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasString(java.util.List,java.util.List)>($r4, $r3);

        if $z1 != 0 goto label2;

        $r6 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList usesOptionalLibraries>;

        $r7 = changingPkg.<android.content.pm.PackageParser$Package: java.util.ArrayList libraryNames>;

        $z3 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasString(java.util.List,java.util.List)>($r6, $r7);

        if $z3 == 0 goto label7;

     label2:
        if res#1 != null goto label3;

        $r5 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        res#1 = $r5;

     label3:
        virtualinvoke res#1.<java.util.ArrayList: boolean add(java.lang.Object)>(pkg);

     label4:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void updateSharedLibrariesLPw(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package)>(pkg, changingPkg);

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        e = $r8;

        $r9 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAllSharedLibrariesLPw failed: ");

        $r10 = virtualinvoke e.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r12);

     label7:
        goto label1;

     label8:
        return res#1;

        catch com.android.server.pm.PackageManagerException from label4 to label5 with label6;
    }

    private static java.lang.String deriveAbiOverride(java.lang.String, com.android.server.pm.PackageSetting)
    {
        java.lang.String abiOverride, $r0, cpuAbiOverride#1;
        com.android.server.pm.PackageSetting settings;
        boolean $z0;

        abiOverride := @parameter0: java.lang.String;

        settings := @parameter1: com.android.server.pm.PackageSetting;

        cpuAbiOverride#1 = null;

        $r0 = "-";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(abiOverride);

        if $z0 == 0 goto label1;

        cpuAbiOverride#1 = null;

        goto label3;

     label1:
        if abiOverride == null goto label2;

        cpuAbiOverride#1 = abiOverride;

        goto label3;

     label2:
        if settings == null goto label3;

        cpuAbiOverride#1 = settings.<com.android.server.pm.PackageSetting: java.lang.String cpuAbiOverrideString>;

     label3:
        return cpuAbiOverride#1;
    }

    private android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package, int, int, long, android.os.UserHandle) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg, res, l9;
        int parseFlags, scanFlags, $i0, $i2;
        long currentTime;
        android.os.UserHandle user;
        java.lang.Throwable l10, $r2;
        java.lang.String $r0, $r1, $r3, $r4;
        boolean success#1, success#2;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        parseFlags := @parameter1: int;

        scanFlags := @parameter2: int;

        currentTime := @parameter3: long;

        user := @parameter4: android.os.UserHandle;

     label1:
        res = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageDirtyLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)>(pkg, parseFlags, scanFlags, currentTime, user);

        l9 = res;

     label2:
        goto label3;

     label3:
        return l9;

     label4:
        $r2 := @caughtexception;

        l10 = $r2;

     label5:
        $i2 = scanFlags & 1024;

        if $i2 == 0 goto label6;

        $r3 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r4 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: int removeDataDirsLI(java.lang.String,java.lang.String)>($r3, $r4);

     label6:
        throw l10;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private android.content.pm.PackageParser$Package scanPackageDirtyLI(android.content.pm.PackageParser$Package, int, int, long, android.os.UserHandle) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg, $r53, $r69, $r204, $r222, $r236, $r400, $r402, $r403, $r405, msg#81, msg#85, names#132;
        int parseFlags, scanFlags, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, i#12, renamed#18, i#19, j#22, renamed#26, names#37, other#41, other#43, other#47, names#52, msg#58, i$#59, userId#60, i$#63, userId#64, userId#65, other#70, msg#73, j#77, otherPackageName#80, i$#83, otherPackageName#84, userId#90, j#92, j#95, userId#98, j#100, userId#102, j#104, userId#106, j#108, userId#110, j#112, userId#115, j#117, userId#125, j#127, userId#129, j#130;
        long currentTime, $l20, $l47, $l49, origPackage#31;
        android.os.UserHandle user;
        java.io.File scanFile, $r2, $r20, $r23, $r544, $r548, known#4, destResourceFile#5, i#34, i#35;
        java.lang.String msg, $r0, $r4, $r5, $r8, $r10, $r14, $r17, $r19, $r21, $r24, $r26, $r29, $r38, $r39, $r40, $r42, $r50, $r51, $r52, $r54, $r56, $r57, $r58, $r62, $r66, $r67, $r71, $r78, $r80, $r82, $r86, $r94, $r95, $r100, $r102, $r103, $r106, $r108, $r109, $r110, $r118, $r123, $r132, $r135, $r138, $r143, $r147, $r152, $r154, $r156, $r157, $r163, $r169, $r174, $r175, $r177, $r180, $r181, $r184, $r187, $r188, $r192, $r195, $r197, $r199, $r200, $r206, $r208, $r212, $r216, $r217, $r227, $r228, $r232, $r235, $r241, $r246, $r250, $r255, $r264, $r265, $r267, $r274, $r279, $r280, $r283, $r287, $r291, $r295, $r296, $r297, $r304, $r308, $r309, $r310, $r317, $r320, $r321, $r324, $r329, $r330, $r332, $r339, $r342, $r344, $r346, $r348, $r349, $r354, $r359, $r361, $r364, $r365, $r367, $r368, $r371, $r377, $r380, $r386, $r389, $r395, $r396, $r397, $r420, $r426, $r428, $r430, $r432, $r433, $r435, $r436, $r439, $r445, $r449, $r451, $r456, $r457, $r459, $r465, $r468, $r471, $r473, $r482, $r488, $r493, $r495, $r504, $r505, $r508, $r510, $r519, $r521, $r522, $r523, $r532, $r533, $r537, $r546, $r551, $r554, $r555, $r563, $r567, $r573, $r577, $r580, $r583, $r589, $r600, $r603, $r607, $r611, $r614, $r618, $r619, $r620, $r622, $r623, $r626, $r631, $r632, $r635, $r640, $r641, $r642, $r652, $r653, $r657, $r660, $r662, $r667, $r669, $r672, $r674, $r676, $r688, $r690, $r695, $r696, $r698, $r700, $r704, $r708, $r709, $r710, $r714, $r715, $r719, $r723, $r724, $r730, $r740, $r741, $r751, $r752, $r756, $r761, $r765, $r776, realName#10, renamed#11, renamed#14, renamed#15, i#17, $r781, otherPackageName#25, i#27, pkgName#30, otherPackageName#42, $r782, otherPackageName#45, msg#46, msg#48, other#49, names#54, otherPackageName#61, $r783, i$#74, $r784;
        android.content.pm.ApplicationInfo $r1, $r3, $r22, $r28, $r31, $r32, $r33, $r34, $r35, $r43, $r46, $r47, $r48, $r55, $r59, $r60, $r61, $r68, $r70, $r75, $r79, $r81, $r87, $r113, $r124, $r127, $r130, $r133, $r136, $r150, $r159, $r161, $r245, $r276, $r278, $r299, $r301, $r311, $r313, $r334, $r335, $r356, $r357, $r362, $r363, $r381, $r409, $r434, $r438, $r452, $r453, $r454, $r455, $r472, $r476, $r477, $r484, $r486, $r487, $r489, $r492, $r507, $r509, $r511, $r513, $r515, $r520, $r540, $r545, $r556, $r557, $r560, $r568, $r569, $r579, $r604, $r675, $r682, $r683, $r692, $r699, $r707, $r711, $r738, $r753, $r754;
        java.lang.Throwable l32, $r763, $r766, $r767, $r769, $r777, $r778, destResourceFile#2, msg#29, i$#51, j#66, p#79;
        com.android.server.pm.PackageManagerException $r6, $r13, $r121, $r410, $r414, $r450, $r470, $r494, $r558, $r592, $r596, $r665, $r713, $r721, $r731, $r759, $r780, renamed#16;
        android.content.ComponentName $r7, $r146, $r379, $r387, $r584, $r606, $r737, $r758;
        android.util.ArrayMap $r9, $r18, $r30, $r74, $r77, $r85, $r93, $r101, $r105, $r107, $r117, $r122, $r145, $r231, $r259, $r290, $r366, $r374, $r388, $r399, $r427, $r496, $r598, $r621, $r649, $r693, $r720, known#1, pkgName#8, otherPackageName#50, otherPackageName#72, msg#87, $r785, names#120, p#131;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, renamed#33, p#36, j#40, $z52, $z53, userId#75, $z54, $z55, other#123;
        java.lang.StringBuilder $r11, $r12, $r15, $r16, $r63, $r64, $r65, $r141, $r151, $r171, $r172, $r173, $r176, $r178, $r182, $r185, $r189, $r190, $r193, $r194, $r202, $r203, $r209, $r210, $r213, $r218, $r219, $r220, $r233, $r234, $r237, $r238, $r243, $r247, $r248, $r251, $r252, $r258, $r262, $r263, $r266, $r269, $r270, $r272, $r273, $r284, $r289, $r293, $r294, $r302, $r316, $r322, $r336, $r345, $r347, $r350, $r370, $r372, $r373, $r376, $r378, $r382, $r383, $r385, $r390, $r391, $r392, $r393, $r419, $r421, $r422, $r423, $r424, $r425, $r429, $r431, $r440, $r441, $r442, $r443, $r444, $r446, $r447, $r448, $r458, $r460, $r461, $r462, $r463, $r479, $r480, $r481, $r483, $r485, $r490, $r491, $r498, $r500, $r501, $r502, $r503, $r506, $r512, $r514, $r516, $r517, $r518, $r525, $r527, $r531, $r534, $r535, $r536, $r538, $r539, $r542, $r543, $r547, $r549, $r550, $r552, $r553, $r559, $r561, $r562, $r564, $r565, $r566, $r570, $r571, $r572, $r574, $r575, $r582, $r587, $r588, $r590, $r591, $r593, $r594, $r595, $r599, $r601, $r602, $r605, $r608, $r609, $r624, $r625, $r627, $r628, $r629, $r633, $r634, $r636, $r637, $r654, $r655, $r656, $r658, $r659, $r661, $r663, $r664, $r668, $r670, $r671, $r673, $r687, $r689, $r691, $r694, $r697, $r701, $r702, $r703, $r705, $r706, $r712, $r716, $r717, $r725, $r726, $r727, $r729, $r732, $r742, $r755, $r757, $r760, $r762, $r764, $r770, $r771, $r774, $r775, userId#91, userId#99, userId#103, userId#107, userId#111, userId#116, userId#126;
        java.util.ArrayList $r25, $r49, $r83, $r84, $r89, $r91, $r92, $r96, $r97, $r98, $r99, $r111, $r114, $r119, $r142, $r256, $r285, $r303, $r315, $r338, $r401, $r404, $r406, $r408, $r415, $r416, $r417, $r528, $r530, $r610, $r615, $r645, $r647, $r648, other#71;
        android.util.ArraySet $r27, $r115, $r464, $r581, $r666;
        com.android.server.pm.PackageSettingBase $r36;
        com.android.server.pm.Settings $r37, $r41, $r76, $r88, $r90, $r164, $r221, $r398, $r497, $r499, $r526, $r612, $r646, $r651, $r718, $r722;
        com.android.server.pm.PackageSignatures $r44, $r578, $r586, $r734, $r773;
        android.content.pm.Signature[] $r45, $r576, $r585, $r735, $r736, $r779;
        com.android.server.pm.UserManagerService $r72;
        java.lang.Object $r73, $r104, $r112, $r116, $r120, $r139, $r166, $r230, $r257, $r260, $r275, $r300, $r314, $r337, $r358, $r360, $r375, $r407, $r412, $r418, $r529, $r597, $r616, $r643, $r650, other#56;
        byte $b19, $b21, $b48, $b50;
        android.content.pm.InstrumentationInfo $r125, $r128, $r131, $r134, $r137, $r144, $r148, $r149;
        java.lang.String[] $r126, $r129, $r474, $r475, names#21, names#94;
        android.content.pm.PermissionInfo $r140, $r153, $r155, $r158, $r160, $r162, $r168, $r170, $r179, $r183, $r186, $r191, $r196, $r198, $r201, $r207, $r211, $r215, $r224, $r229, $r239, $r240, $r242, $r261, $r268, $r271;
        android.content.pm.PackageParser$Permission $r165, $r167, $r205, $r223, $r244, p#118;
        com.android.server.pm.BasePermission $r214, j#121, other#124;
        android.content.pm.PackageParser$PermissionGroup $r225, $r226, p#113, names#114;
        android.content.pm.PermissionGroupInfo $r249, $r253, $r254, $r282, $r286, $r288, $r292;
        android.content.pm.ActivityInfo $r277, $r281, $r305, $r307, $r312, $r318, $r677, $r678, $r679, $r680, $r681, $r684, $r686, $r739, $r743, $r744, $r745, $r746;
        android.content.pm.ServiceInfo $r298, $r340, $r341;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r306, $r319;
        android.content.pm.ProviderInfo $r323, $r325, $r327, $r328, $r331, $r333, $r351, $r352, $r355, $r369, $r384, $r613, $r617;
        com.android.server.pm.PackageManagerService$ProviderIntentResolver $r326;
        com.android.server.pm.PackageManagerService$ServiceIntentResolver $r343;
        android.content.pm.PackageParser$Provider $r353, p#20, other#23, p#93, other#96;
        com.android.server.pm.PackageManagerService$SharedLibraryEntry $r394;
        com.android.server.pm.PackageDexOptimizer $r411, $r413;
        com.android.server.pm.Installer $r437, $r469, $r524, $r541;
        com.android.server.pm.SharedUserSetting $r466, $r467, $r630, $r638, $r639, $r728, $r733, $r772, suid#6;
        dalvik.system.VMRuntime $r478;
        com.android.server.pm.PackageSetting $r644, known#3, origPackage#9, pkgSetting#13, p#28, userId#76;
        java.lang.Class $r685;
        android.content.pm.ResolveInfo $r747, $r748, $r749, $r750;
        android.system.ErrnoException $r768, j#39;
        android.system.StructStat j#38;
        int[] j#55, otherPackageName#57, msg#62;
        com.android.server.pm.KeySetManagerService otherPackageName#86;
        java.util.Iterator i$#88;
        android.content.pm.PackageCleanItem userId#89;
        android.content.pm.PackageParser$Service p#101;
        android.content.pm.PackageParser$Activity p#105, p#109;
        android.content.pm.PackageParser$Instrumentation p#128;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        parseFlags := @parameter1: int;

        scanFlags := @parameter2: int;

        currentTime := @parameter3: long;

        user := @parameter4: android.os.UserHandle;

        $r2 = new java.io.File;

        $r0 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r0);

        scanFile = $r2;

        $r1 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r5 = virtualinvoke $r1.<android.content.pm.ApplicationInfo: java.lang.String getCodePath()>();

        if $r5 == null goto label001;

        $r3 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r4 = virtualinvoke $r3.<android.content.pm.ApplicationInfo: java.lang.String getResourcePath()>();

        if $r4 != null goto label002;

     label001:
        $r6 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r6.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, "Code and resource paths haven\'t been set correctly");

        throw $r6;

     label002:
        $i0 = parseFlags & 1;

        if $i0 == 0 goto label003;

        $r754 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i92 = $r754.<android.content.pm.ApplicationInfo: int flags>;

        $i93 = $i92 | 1;

        $r754.<android.content.pm.ApplicationInfo: int flags> = $i93;

        goto label004;

     label003:
        pkg.<android.content.pm.PackageParser$Package: boolean coreApp> = 0;

     label004:
        $i1 = parseFlags & 128;

        if $i1 == 0 goto label005;

        $r753 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i91 = $r753.<android.content.pm.ApplicationInfo: int privateFlags>;

        $i90 = $i91 | 8;

        $r753.<android.content.pm.ApplicationInfo: int privateFlags> = $i90;

     label005:
        $r7 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mCustomResolverComponentName>;

        if $r7 == null goto label006;

        $r758 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mCustomResolverComponentName>;

        $r752 = virtualinvoke $r758.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r751 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z50 = virtualinvoke $r752.<java.lang.String: boolean equals(java.lang.Object)>($r751);

        if $z50 == 0 goto label006;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void setUpCustomResolverActivity(android.content.pm.PackageParser$Package)>(pkg);

     label006:
        $r8 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z1 == 0 goto label013;

        $r693 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        known#1 = $r693;

        entermonitor $r693;

     label007:
        $r692 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        if $r692 == null goto label008;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "*************************************************");

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Core android package being redefined.  Skipping.");

        $r742 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r742.<java.lang.StringBuilder: void <init>()>();

        $r755 = virtualinvoke $r742.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" file=");

        $r757 = virtualinvoke $r755.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(scanFile);

        $r756 = virtualinvoke $r757.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r756);

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "*************************************************");

        $r759 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r759.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-5, "Core android package being redefined.  Skipping.");

        throw $r759;

     label008:
        this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package mPlatformPackage> = pkg;

        $i88 = this.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        pkg.<android.content.pm.PackageParser$Package: int mVersionCode> = $i88;

        $r682 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        this.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication> = $r682;

        $z46 = this.<com.android.server.pm.PackageManagerService: boolean mResolverReplaced>;

        if $z46 != 0 goto label009;

        $r684 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r683 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        $r684.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo> = $r683;

        $r686 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r685 = class "com/android/internal/app/ResolverActivity";

        $r674 = virtualinvoke $r685.<java.lang.Class: java.lang.String getName()>();

        $r686.<android.content.pm.ActivityInfo: java.lang.String name> = $r674;

        $r677 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r675 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        $r676 = $r675.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r677.<android.content.pm.ActivityInfo: java.lang.String packageName> = $r676;

        $r678 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r678.<android.content.pm.ActivityInfo: java.lang.String processName> = "system:ui";

        $r679 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r679.<android.content.pm.ActivityInfo: int launchMode> = 0;

        $r680 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r680.<android.content.pm.ActivityInfo: int documentLaunchMode> = 3;

        $r681 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r681.<android.content.pm.ActivityInfo: int flags> = 32;

        $r743 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r743.<android.content.pm.ActivityInfo: int theme> = 16974971;

        $r744 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r744.<android.content.pm.ActivityInfo: boolean exported> = 1;

        $r745 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r745.<android.content.pm.ActivityInfo: boolean enabled> = 1;

        $r747 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r746 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r747.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = $r746;

        $r748 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r748.<android.content.pm.ResolveInfo: int priority> = 0;

        $r749 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r749.<android.content.pm.ResolveInfo: int preferredOrder> = 0;

        $r750 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r750.<android.content.pm.ResolveInfo: int match> = 0;

        $r737 = new android.content.ComponentName;

        $r738 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        $r741 = $r738.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r739 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r740 = $r739.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r737.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r741, $r740);

        this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mResolveComponentName> = $r737;

     label009:
        exitmonitor known#1;

     label010:
        goto label013;

     label011:
        $r767 := @caughtexception;

        destResourceFile#2 = $r767;

        exitmonitor known#1;

     label012:
        throw destResourceFile#2;

     label013:
        $r9 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r10 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z0 = virtualinvoke $r9.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r10);

        if $z0 != 0 goto label014;

        $r18 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r19 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z2 = virtualinvoke $r18.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r19);

        if $z2 == 0 goto label015;

     label014:
        $r13 = new com.android.server.pm.PackageManagerException;

        $r12 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application package ");

        $r17 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already installed.  Skipping duplicate.");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-5, $r14);

        throw $r13;

     label015:
        $i2 = scanFlags & 4096;

        if $i2 == 0 goto label018;

        $r720 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        $r714 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z49 = virtualinvoke $r720.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r714);

        if $z49 == 0 goto label016;

        $r687 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r687.<java.lang.StringBuilder: void <init>()>();

        $r689 = virtualinvoke $r687.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Relax SCAN_REQUIRE_KNOWN requirement for package ");

        $r688 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r691 = virtualinvoke $r689.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r688);

        $r690 = virtualinvoke $r691.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r690);

        goto label018;

     label016:
        $r718 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r719 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        known#3 = virtualinvoke $r718.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting peekPackageLPr(java.lang.String)>($r719);

        if known#3 == null goto label018;

        $r711 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r709 = virtualinvoke $r711.<android.content.pm.ApplicationInfo: java.lang.String getCodePath()>();

        $r710 = known#3.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $z48 = virtualinvoke $r709.<java.lang.String: boolean equals(java.lang.Object)>($r710);

        if $z48 == 0 goto label017;

        $r699 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r698 = virtualinvoke $r699.<android.content.pm.ApplicationInfo: java.lang.String getResourcePath()>();

        $r700 = known#3.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString>;

        $z47 = virtualinvoke $r698.<java.lang.String: boolean equals(java.lang.Object)>($r700);

        if $z47 != 0 goto label018;

     label017:
        $r713 = new com.android.server.pm.PackageManagerException;

        $r712 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r712.<java.lang.StringBuilder: void <init>()>();

        $r703 = virtualinvoke $r712.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application package ");

        $r704 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r701 = virtualinvoke $r703.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r704);

        $r702 = virtualinvoke $r701.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found at ");

        $r707 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r708 = virtualinvoke $r707.<android.content.pm.ApplicationInfo: java.lang.String getCodePath()>();

        $r705 = virtualinvoke $r702.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r708);

        $r706 = virtualinvoke $r705.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but expected at ");

        $r695 = known#3.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r694 = virtualinvoke $r706.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r695);

        $r697 = virtualinvoke $r694.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring.");

        $r696 = virtualinvoke $r697.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r713.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-23, $r696);

        throw $r713;

     label018:
        $r23 = new java.io.File;

        $r22 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r21 = virtualinvoke $r22.<android.content.pm.ApplicationInfo: java.lang.String getCodePath()>();

        specialinvoke $r23.<java.io.File: void <init>(java.lang.String)>($r21);

        known#4 = $r23;

        $r20 = new java.io.File;

        $r28 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r29 = virtualinvoke $r28.<android.content.pm.ApplicationInfo: java.lang.String getResourcePath()>();

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>($r29);

        destResourceFile#5 = $r20;

        suid#6 = null;

        $z3 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>(pkg);

        if $z3 != 0 goto label019;

        pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mOriginalPackages> = null;

        pkg.<android.content.pm.PackageParser$Package: java.lang.String mRealPackage> = null;

        pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mAdoptPermissions> = null;

     label019:
        $r30 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        pkgName#8 = $r30;

        entermonitor $r30;

     label020:
        $r24 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mSharedUserId>;

        if $r24 == null goto label021;

        $r722 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r723 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mSharedUserId>;

        suid#6 = virtualinvoke $r722.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>($r723, 0, 0, 1);

        if suid#6 != null goto label021;

        $r721 = new com.android.server.pm.PackageManagerException;

        $r726 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r726.<java.lang.StringBuilder: void <init>()>();

        $r725 = virtualinvoke $r726.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating application package ");

        $r724 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r717 = virtualinvoke $r725.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r724);

        $r716 = virtualinvoke $r717.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for shared user failed");

        $r715 = virtualinvoke $r716.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r721.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-4, $r715);

        throw $r721;

     label021:
        origPackage#9 = null;

        realName#10 = null;

        $r25 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mOriginalPackages>;

        if $r25 == null goto label026;

        $r651 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r649 = $r651.<com.android.server.pm.Settings: android.util.ArrayMap mRenamedPackages>;

        $r652 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mRealPackage>;

        $r650 = virtualinvoke $r649.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r652);

        renamed#11 = (java.lang.String) $r650;

        $r648 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mOriginalPackages>;

        $z45 = virtualinvoke $r648.<java.util.ArrayList: boolean contains(java.lang.Object)>(renamed#11);

        if $z45 == 0 goto label022;

        realName#10 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mRealPackage>;

        $r623 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z42 = virtualinvoke $r623.<java.lang.String: boolean equals(java.lang.Object)>(renamed#11);

        if $z42 != 0 goto label026;

        virtualinvoke pkg.<android.content.pm.PackageParser$Package: void setPackageName(java.lang.String)>(renamed#11);

        goto label026;

     label022:
        $r645 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mOriginalPackages>;

        $i87 = virtualinvoke $r645.<java.util.ArrayList: int size()>();

        i#12 = $i87 - 1;

     label023:
        if i#12 < 0 goto label026;

        $r646 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r647 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mOriginalPackages>;

        $r643 = virtualinvoke $r647.<java.util.ArrayList: java.lang.Object get(int)>(i#12);

        $r642 = (java.lang.String) $r643;

        $r644 = virtualinvoke $r646.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting peekPackageLPr(java.lang.String)>($r642);

        origPackage#9 = $r644;

        if $r644 == null goto label025;

        $z44 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean verifyPackageUpdateLPr(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>(origPackage#9, pkg);

        if $z44 != 0 goto label024;

        origPackage#9 = null;

        goto label025;

     label024:
        $r639 = origPackage#9.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r639 == null goto label026;

        $r638 = origPackage#9.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r640 = $r638.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        $r641 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mSharedUserId>;

        $z43 = virtualinvoke $r640.<java.lang.String: boolean equals(java.lang.Object)>($r641);

        if $z43 != 0 goto label026;

        $r636 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r636.<java.lang.StringBuilder: void <init>()>();

        $r637 = virtualinvoke $r636.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to migrate data from ");

        $r632 = origPackage#9.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r633 = virtualinvoke $r637.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r632);

        $r634 = virtualinvoke $r633.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r635 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r628 = virtualinvoke $r634.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r635);

        $r629 = virtualinvoke $r628.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": old uid ");

        $r630 = origPackage#9.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r631 = $r630.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        $r624 = virtualinvoke $r629.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r631);

        $r625 = virtualinvoke $r624.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" differs from ");

        $r626 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mSharedUserId>;

        $r627 = virtualinvoke $r625.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r626);

        $r622 = virtualinvoke $r627.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r622);

        origPackage#9 = null;

     label025:
        i#12 = i#12 + -1;

        goto label023;

     label026:
        $r27 = this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mTransferedPackages>;

        $r26 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z4 = virtualinvoke $r27.<android.util.ArraySet: boolean contains(java.lang.Object)>($r26);

        if $z4 == 0 goto label027;

        $r658 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r658.<java.lang.StringBuilder: void <init>()>();

        $r656 = virtualinvoke $r658.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r657 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r654 = virtualinvoke $r656.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r657);

        $r655 = virtualinvoke $r654.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was transferred to another, but its .apk remains");

        $r653 = virtualinvoke $r655.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r653);

     label027:
        $r41 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r33 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r42 = $r33.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir>;

        $r34 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r39 = $r34.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        $r35 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r40 = $r35.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        $r31 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r31.<android.content.pm.ApplicationInfo: int flags>;

        $r32 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r32.<android.content.pm.ApplicationInfo: int privateFlags>;

        pkgSetting#13 = virtualinvoke $r41.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPw(android.content.pm.PackageParser$Package,com.android.server.pm.PackageSetting,java.lang.String,com.android.server.pm.SharedUserSetting,java.io.File,java.io.File,java.lang.String,java.lang.String,java.lang.String,int,int,android.os.UserHandle,boolean)>(pkg, origPackage#9, realName#10, suid#6, known#4, destResourceFile#5, $r42, $r39, $r40, $i4, $i3, user, 0);

        if pkgSetting#13 != null goto label028;

        $r665 = new com.android.server.pm.PackageManagerException;

        $r664 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r664.<java.lang.StringBuilder: void <init>()>();

        $r663 = virtualinvoke $r664.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating application package ");

        $r662 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r661 = virtualinvoke $r663.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r662);

        $r659 = virtualinvoke $r661.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed");

        $r660 = virtualinvoke $r659.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r665.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-4, $r660);

        throw $r665;

     label028:
        $r36 = pkgSetting#13.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSettingBase origPackage>;

        if $r36 == null goto label029;

        $r583 = origPackage#9.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke pkg.<android.content.pm.PackageParser$Package: void setPackageName(java.lang.String)>($r583);

        $r582 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r582.<java.lang.StringBuilder: void <init>()>();

        $r673 = virtualinvoke $r582.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New package ");

        $r672 = pkgSetting#13.<com.android.server.pm.PackageSetting: java.lang.String realName>;

        $r671 = virtualinvoke $r673.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r672);

        $r670 = virtualinvoke $r671.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" renamed to replace old package ");

        $r669 = pkgSetting#13.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r668 = virtualinvoke $r670.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r669);

        renamed#14 = virtualinvoke $r668.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(5, renamed#14);

        $r666 = this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mTransferedPackages>;

        $r667 = origPackage#9.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r666.<android.util.ArraySet: boolean add(java.lang.Object)>($r667);

        pkgSetting#13.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSettingBase origPackage> = null;

     label029:
        if realName#10 == null goto label030;

        $r581 = this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mTransferedPackages>;

        $r580 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke $r581.<android.util.ArraySet: boolean add(java.lang.Object)>($r580);

     label030:
        $r37 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r38 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z6 = virtualinvoke $r37.<com.android.server.pm.Settings: boolean isDisabledSystemPackageLPr(java.lang.String)>($r38);

        if $z6 == 0 goto label031;

        $r579 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i83 = $r579.<android.content.pm.ApplicationInfo: int flags>;

        $i84 = $i83 | 128;

        $r579.<android.content.pm.ApplicationInfo: int flags> = $i84;

     label031:
        $i5 = parseFlags & 64;

        if $i5 != 0 goto label032;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void updateSharedLibrariesLPw(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package)>(pkg, null);

     label032:
        $z7 = this.<com.android.server.pm.PackageManagerService: boolean mFoundPolicyFile>;

        if $z7 == 0 goto label033;

        staticinvoke <com.android.server.pm.SELinuxMMAC: boolean assignSeinfoValue(android.content.pm.PackageParser$Package)>(pkg);

     label033:
        $r43 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i6 = pkgSetting#13.<com.android.server.pm.PackageSetting: int appId>;

        $r43.<android.content.pm.ApplicationInfo: int uid> = $i6;

        pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras> = pkgSetting#13;

        $z5 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean shouldCheckUpgradeKeySetLP(com.android.server.pm.PackageSetting,int)>(pkgSetting#13, scanFlags);

        if $z5 == 0 goto label036;

        $z40 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean checkUpgradeKeySetLP(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>(pkgSetting#13, pkg);

        if $z40 == 0 goto label034;

        $r578 = pkgSetting#13.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r576 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $r578.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures> = $r576;

        goto label041;

     label034:
        $i85 = parseFlags & 64;

        if $i85 != 0 goto label035;

        $r592 = new com.android.server.pm.PackageManagerException;

        $r593 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r593.<java.lang.StringBuilder: void <init>()>();

        $r594 = virtualinvoke $r593.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r573 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r572 = virtualinvoke $r594.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r573);

        $r575 = virtualinvoke $r572.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" upgrade keys do not match the ");

        $r574 = virtualinvoke $r575.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("previously installed version");

        $r577 = virtualinvoke $r574.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r592.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-7, $r577);

        throw $r592;

     label035:
        $r586 = pkgSetting#13.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r585 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $r586.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures> = $r585;

        $r587 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r587.<java.lang.StringBuilder: void <init>()>();

        $r588 = virtualinvoke $r587.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System package ");

        $r589 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r590 = virtualinvoke $r588.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r589);

        $r591 = virtualinvoke $r590.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature changed; retaining data.");

        renamed#15 = virtualinvoke $r591.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(5, renamed#15);

        goto label041;

     label036:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void verifySignaturesLP(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>(pkgSetting#13, pkg);

        $r44 = pkgSetting#13.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r45 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $r44.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures> = $r45;

     label037:
        goto label041;

     label038:
        $r780 := @caughtexception;

        renamed#16 = $r780;

        $i94 = parseFlags & 64;

        if $i94 != 0 goto label039;

        throw renamed#16;

     label039:
        $r773 = pkgSetting#13.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r779 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $r773.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures> = $r779;

        $r772 = pkgSetting#13.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r772 == null goto label040;

        $r733 = pkgSetting#13.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r734 = $r733.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r736 = $r734.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        $r735 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $i89 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r736, $r735);

        if $i89 == 0 goto label040;

        $r731 = new com.android.server.pm.PackageManagerException;

        $r732 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r732.<java.lang.StringBuilder: void <init>()>();

        $r727 = virtualinvoke $r732.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature mismatch for shared user : ");

        $r728 = pkgSetting#13.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r729 = virtualinvoke $r727.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r728);

        $r730 = virtualinvoke $r729.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r731.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-104, $r730);

        throw $r731;

     label040:
        $r771 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r771.<java.lang.StringBuilder: void <init>()>();

        $r770 = virtualinvoke $r771.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System package ");

        $r776 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r775 = virtualinvoke $r770.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r776);

        $r774 = virtualinvoke $r775.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature changed; retaining data.");

        i#17 = virtualinvoke $r774.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(5, i#17);

     label041:
        $i8 = scanFlags & 16;

        if $i8 == 0 goto label048;

        $r610 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList providers>;

        renamed#18 = virtualinvoke $r610.<java.util.ArrayList: int size()>();

        i#19 = 0;

     label042:
        if i#19 >= renamed#18 goto label048;

        $r615 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList providers>;

        $r616 = virtualinvoke $r615.<java.util.ArrayList: java.lang.Object get(int)>(i#19);

        p#20 = (android.content.pm.PackageParser$Provider) $r616;

        $r613 = p#20.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r614 = $r613.<android.content.pm.ProviderInfo: java.lang.String authority>;

        if $r614 == null goto label047;

        $r617 = p#20.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r618 = $r617.<android.content.pm.ProviderInfo: java.lang.String authority>;

        names#21 = virtualinvoke $r618.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        j#22 = 0;

     label043:
        $i86 = lengthof names#21;

        if j#22 >= $i86 goto label047;

        $r621 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mProvidersByAuthority>;

        $r620 = names#21[j#22];

        $z41 = virtualinvoke $r621.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r620);

        if $z41 == 0 goto label046;

        $r598 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mProvidersByAuthority>;

        $r619 = names#21[j#22];

        $r597 = virtualinvoke $r598.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r619);

        other#23 = (android.content.pm.PackageParser$Provider) $r597;

        if other#23 == null goto label044;

        $r606 = virtualinvoke other#23.<android.content.pm.PackageParser$Provider: android.content.ComponentName getComponentName()>();

        if $r606 == null goto label044;

        $r584 = virtualinvoke other#23.<android.content.pm.PackageParser$Provider: android.content.ComponentName getComponentName()>();

        $r781 = virtualinvoke $r584.<android.content.ComponentName: java.lang.String getPackageName()>();

        goto label045;

     label044:
        $r781 = "?";

     label045:
        otherPackageName#25 = $r781;

        $r596 = new com.android.server.pm.PackageManagerException;

        $r595 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r595.<java.lang.StringBuilder: void <init>()>();

        $r601 = virtualinvoke $r595.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t install because provider name ");

        $r600 = names#21[j#22];

        $r599 = virtualinvoke $r601.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r600);

        $r605 = virtualinvoke $r599.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (in package ");

        $r604 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r603 = $r604.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r602 = virtualinvoke $r605.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r603);

        $r609 = virtualinvoke $r602.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is already used by ");

        $r608 = virtualinvoke $r609.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(otherPackageName#25);

        $r607 = virtualinvoke $r608.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r596.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-13, $r607);

        throw $r596;

     label046:
        j#22 = j#22 + 1;

        goto label043;

     label047:
        i#19 = i#19 + 1;

        goto label042;

     label048:
        $r49 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mAdoptPermissions>;

        if $r49 == null goto label051;

        $r528 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mAdoptPermissions>;

        $i76 = virtualinvoke $r528.<java.util.ArrayList: int size()>();

        renamed#26 = $i76 - 1;

     label049:
        if renamed#26 < 0 goto label051;

        $r530 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mAdoptPermissions>;

        $r529 = virtualinvoke $r530.<java.util.ArrayList: java.lang.Object get(int)>(renamed#26);

        i#27 = (java.lang.String) $r529;

        $r526 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        p#28 = virtualinvoke $r526.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting peekPackageLPr(java.lang.String)>(i#27);

        if p#28 == null goto label050;

        $z39 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean verifyPackageUpdateLPr(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>(p#28, pkg);

        if $z39 == 0 goto label050;

        $r527 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r527.<java.lang.StringBuilder: void <init>()>();

        $r534 = virtualinvoke $r527.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adopting permissions from ");

        $r536 = virtualinvoke $r534.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(i#27);

        $r535 = virtualinvoke $r536.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r532 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r531 = virtualinvoke $r535.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r532);

        $r533 = virtualinvoke $r531.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r533);

        $r612 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r611 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke $r612.<com.android.server.pm.Settings: void transferPermissionsLPw(java.lang.String,java.lang.String)>(i#27, $r611);

     label050:
        renamed#26 = renamed#26 + -1;

        goto label049;

     label051:
        exitmonitor pkgName#8;

     label052:
        goto label055;

     label053:
        $r777 := @caughtexception;

        msg#29 = $r777;

        exitmonitor pkgName#8;

     label054:
        throw msg#29;

     label055:
        pkgName#30 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        origPackage#31 = virtualinvoke scanFile.<java.io.File: long lastModified()>();

        $i7 = scanFlags & 4;

        if $i7 == 0 goto label056;

        $z51 = 1;

        goto label057;

     label056:
        $z51 = 0;

     label057:
        renamed#33 = $z51;

        $r55 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r48 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r54 = $r48.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r46 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r56 = $r46.<android.content.pm.ApplicationInfo: java.lang.String processName>;

        $r47 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i9 = $r47.<android.content.pm.ApplicationInfo: int uid>;

        $r52 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String fixProcessName(java.lang.String,java.lang.String,int)>($r54, $r56, $i9);

        $r55.<android.content.pm.ApplicationInfo: java.lang.String processName> = $r52;

        $r53 = this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package mPlatformPackage>;

        if $r53 != pkg goto label058;

        $r548 = new java.io.File;

        $r544 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r548.<java.io.File: void <init>(java.io.File,java.lang.String)>($r544, "system");

        i#34 = $r548;

        $r545 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r546 = virtualinvoke i#34.<java.io.File: java.lang.String getPath()>();

        $r545.<android.content.pm.ApplicationInfo: java.lang.String dataDir> = $r546;

        goto label082;

     label058:
        $r51 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r50 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        i#35 = staticinvoke <android.os.Environment: java.io.File getDataUserPackageDirectory(java.lang.String,int,java.lang.String)>($r51, 0, $r50);

        p#36 = 0;

        $z8 = virtualinvoke i#35.<java.io.File: boolean exists()>();

        if $z8 == 0 goto label078;

        names#37 = 0;

     label059:
        $r508 = virtualinvoke i#35.<java.io.File: java.lang.String getPath()>();

        j#38 = staticinvoke <android.system.Os: android.system.StructStat stat(java.lang.String)>($r508);

        names#37 = j#38.<android.system.StructStat: int st_uid>;

     label060:
        goto label062;

     label061:
        $r768 := @caughtexception;

        j#39 = $r768;

        $r762 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r762.<java.lang.StringBuilder: void <init>()>();

        $r760 = virtualinvoke $r762.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t stat path ");

        $r761 = virtualinvoke i#35.<java.io.File: java.lang.String getPath()>();

        $r764 = virtualinvoke $r760.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r761);

        $r765 = virtualinvoke $r764.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r765, j#39);

     label062:
        $r509 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i73 = $r509.<android.content.pm.ApplicationInfo: int uid>;

        if names#37 == $i73 goto label076;

        j#40 = 0;

        if names#37 != 0 goto label063;

        $r541 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r555 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r557 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i78 = $r557.<android.content.pm.ApplicationInfo: int uid>;

        $r556 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i79 = $r556.<android.content.pm.ApplicationInfo: int uid>;

        other#41 = virtualinvoke $r541.<com.android.server.pm.Installer: int fixUid(java.lang.String,java.lang.String,int,int)>($r555, pkgName#30, $i78, $i79);

        if other#41 < 0 goto label063;

        j#40 = 1;

        $r542 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r542.<java.lang.StringBuilder: void <init>()>();

        $r543 = virtualinvoke $r542.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r537 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r538 = virtualinvoke $r543.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r537);

        $r539 = virtualinvoke $r538.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unexpectedly changed to uid 0; recovered to ");

        $r540 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i77 = $r540.<android.content.pm.ApplicationInfo: int uid>;

        $r547 = virtualinvoke $r539.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i77);

        otherPackageName#42 = virtualinvoke $r547.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(5, otherPackageName#42);

     label063:
        if j#40 != 0 goto label069;

        $i72 = parseFlags & 1;

        if $i72 != 0 goto label064;

        $i80 = scanFlags & 256;

        if $i80 == 0 goto label069;

     label064:
        $r495 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        other#43 = specialinvoke this.<com.android.server.pm.PackageManagerService: int removeDataDirsLI(java.lang.String,java.lang.String)>($r495, pkgName#30);

        if other#43 < 0 goto label067;

        $i71 = parseFlags & 1;

        if $i71 == 0 goto label065;

        $r782 = "System package ";

        goto label066;

     label065:
        $r782 = "Third party package ";

     label066:
        otherPackageName#45 = $r782;

        $r565 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r565.<java.lang.StringBuilder: void <init>()>();

        $r566 = virtualinvoke $r565.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(otherPackageName#45);

        $r563 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r564 = virtualinvoke $r566.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r563);

        $r561 = virtualinvoke $r564.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has changed from uid: ");

        $r562 = virtualinvoke $r561.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(names#37);

        $r559 = virtualinvoke $r562.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r560 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i82 = $r560.<android.content.pm.ApplicationInfo: int uid>;

        $r571 = virtualinvoke $r559.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i82);

        $r570 = virtualinvoke $r571.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; old data erased");

        msg#46 = virtualinvoke $r570.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(5, msg#46);

        j#40 = 1;

        $r554 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r568 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i81 = $r568.<android.content.pm.ApplicationInfo: int uid>;

        $r569 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r567 = $r569.<android.content.pm.ApplicationInfo: java.lang.String seinfo>;

        other#47 = specialinvoke this.<com.android.server.pm.PackageManagerService: int createDataDirsLI(java.lang.String,java.lang.String,int,java.lang.String)>($r554, pkgName#30, $i81, $r567);

        if other#47 != -1 goto label067;

        $r553 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r553.<java.lang.StringBuilder: void <init>()>();

        $r552 = virtualinvoke $r553.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(otherPackageName#45);

        $r551 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r550 = virtualinvoke $r552.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r551);

        $r549 = virtualinvoke $r550.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" could not have data directory re-created after delete.");

        msg#48 = virtualinvoke $r549.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(5, msg#48);

        $r558 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r558.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-4, msg#48);

        throw $r558;

     label067:
        if j#40 != 0 goto label068;

        this.<com.android.server.pm.PackageManagerService: boolean mHasSystemUidErrors> = 1;

     label068:
        goto label070;

     label069:
        if j#40 != 0 goto label070;

        $r494 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r494.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-24, "scanPackageLI");

        throw $r494;

     label070:
        if j#40 != 0 goto label076;

        $r513 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r525 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r525.<java.lang.StringBuilder: void <init>()>();

        $r514 = virtualinvoke $r525.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/mismatched_uid/settings_");

        $r515 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i74 = $r515.<android.content.pm.ApplicationInfo: int uid>;

        $r516 = virtualinvoke $r514.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i74);

        $r517 = virtualinvoke $r516.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/fs_");

        $r518 = virtualinvoke $r517.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(names#37);

        $r519 = virtualinvoke $r518.<java.lang.StringBuilder: java.lang.String toString()>();

        $r513.<android.content.pm.ApplicationInfo: java.lang.String dataDir> = $r519;

        $r487 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r489 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r488 = $r489.<android.content.pm.ApplicationInfo: java.lang.String dataDir>;

        $r487.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir> = $r488;

        $r492 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r486 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r493 = $r486.<android.content.pm.ApplicationInfo: java.lang.String dataDir>;

        $r492.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir> = $r493;

        $r491 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r491.<java.lang.StringBuilder: void <init>()>();

        $r490 = virtualinvoke $r491.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r482 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r481 = virtualinvoke $r490.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r482);

        $r480 = virtualinvoke $r481.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has mismatched uid: ");

        $r479 = virtualinvoke $r480.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(names#37);

        $r485 = virtualinvoke $r479.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on disk, ");

        $r484 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i70 = $r484.<android.content.pm.ApplicationInfo: int uid>;

        $r483 = virtualinvoke $r485.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i70);

        $r498 = virtualinvoke $r483.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in settings");

        other#49 = virtualinvoke $r498.<java.lang.StringBuilder: java.lang.String toString()>();

        $r496 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        otherPackageName#50 = $r496;

        entermonitor $r496;

     label071:
        $r497 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r501 = $r497.<com.android.server.pm.Settings: java.lang.StringBuilder mReadMessages>;

        virtualinvoke $r501.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(other#49);

        $r499 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r500 = $r499.<com.android.server.pm.Settings: java.lang.StringBuilder mReadMessages>;

        virtualinvoke $r500.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        p#36 = 1;

        $z37 = pkgSetting#13.<com.android.server.pm.PackageSetting: boolean uidError>;

        if $z37 != 0 goto label072;

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(6, other#49);

     label072:
        exitmonitor otherPackageName#50;

     label073:
        goto label076;

     label074:
        $r766 := @caughtexception;

        i$#51 = $r766;

        exitmonitor otherPackageName#50;

     label075:
        throw i$#51;

     label076:
        $r511 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r510 = virtualinvoke i#35.<java.io.File: java.lang.String getPath()>();

        $r511.<android.content.pm.ApplicationInfo: java.lang.String dataDir> = $r510;

        $z38 = this.<com.android.server.pm.PackageManagerService: boolean mShouldRestoreconData>;

        if $z38 == 0 goto label077;

        $r512 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r512.<java.lang.StringBuilder: void <init>()>();

        $r502 = virtualinvoke $r512.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELinux relabeling of ");

        $r504 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r503 = virtualinvoke $r502.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r504);

        $r506 = virtualinvoke $r503.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" issued.");

        $r505 = virtualinvoke $r506.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r505);

        $r524 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r523 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r522 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r507 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r521 = $r507.<android.content.pm.ApplicationInfo: java.lang.String seinfo>;

        $r520 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i75 = $r520.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke $r524.<com.android.server.pm.Installer: boolean restoreconData(java.lang.String,java.lang.String,java.lang.String,int)>($r523, $r522, $r521, $i75);

     label077:
        goto label081;

     label078:
        $r57 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r60 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i10 = $r60.<android.content.pm.ApplicationInfo: int uid>;

        $r59 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r58 = $r59.<android.content.pm.ApplicationInfo: java.lang.String seinfo>;

        names#52 = specialinvoke this.<com.android.server.pm.PackageManagerService: int createDataDirsLI(java.lang.String,java.lang.String,int,java.lang.String)>($r57, pkgName#30, $i10, $r58);

        if names#52 >= 0 goto label079;

        $r450 = new com.android.server.pm.PackageManagerException;

        $r448 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r448.<java.lang.StringBuilder: void <init>()>();

        $r446 = virtualinvoke $r448.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create data dirs [errorCode=");

        $r447 = virtualinvoke $r446.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(names#52);

        $r444 = virtualinvoke $r447.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r445 = virtualinvoke $r444.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r450.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-4, $r445);

        throw $r450;

     label079:
        $z9 = virtualinvoke i#35.<java.io.File: boolean exists()>();

        if $z9 == 0 goto label080;

        $r452 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r449 = virtualinvoke i#35.<java.io.File: java.lang.String getPath()>();

        $r452.<android.content.pm.ApplicationInfo: java.lang.String dataDir> = $r449;

        goto label081;

     label080:
        $r65 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create data directory: ");

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(i#35);

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r62);

        $r61 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r61.<android.content.pm.ApplicationInfo: java.lang.String dataDir> = null;

     label081:
        pkgSetting#13.<com.android.server.pm.PackageSetting: boolean uidError> = p#36;

     label082:
        virtualinvoke scanFile.<java.io.File: java.lang.String getPath()>();

        $r71 = pkg.<android.content.pm.PackageParser$Package: java.lang.String cpuAbiOverride>;

        names#54 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String deriveAbiOverride(java.lang.String,com.android.server.pm.PackageSetting)>($r71, pkgSetting#13);

        $i12 = scanFlags & 16;

        if $i12 != 0 goto label083;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void derivePackageAbi(android.content.pm.PackageParser$Package,java.io.File,java.lang.String,boolean)>(pkg, scanFile, names#54, 1);

        $z34 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>(pkg);

        if $z34 == 0 goto label085;

        $z33 = virtualinvoke pkg.<android.content.pm.PackageParser$Package: boolean isUpdatedSystemApp()>();

        if $z33 != 0 goto label085;

        $r453 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r451 = $r453.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        if $r451 != null goto label085;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void setBundledAppAbisAndRoots(android.content.pm.PackageParser$Package,com.android.server.pm.PackageSetting)>(pkg, pkgSetting#13);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void setNativeLibraryPaths(android.content.pm.PackageParser$Package)>(pkg);

        goto label085;

     label083:
        $i13 = scanFlags & 8192;

        if $i13 == 0 goto label084;

        $r455 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r432 = pkgSetting#13.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        $r455.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r432;

        $r454 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r456 = pkgSetting#13.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString>;

        $r454.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi> = $r456;

     label084:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void setNativeLibraryPaths(android.content.pm.PackageParser$Package)>(pkg);

     label085:
        $r72 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        j#55 = virtualinvoke $r72.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $r73 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        other#56 = $r73;

        entermonitor $r73;

     label086:
        $r66 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $z10 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r66);

        if $z10 != 0 goto label089;

        otherPackageName#57 = j#55;

        msg#58 = lengthof otherPackageName#57;

        i$#59 = 0;

     label087:
        if i$#59 >= msg#58 goto label089;

        userId#60 = otherPackageName#57[i$#59];

        if userId#60 == 0 goto label088;

        $r437 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r436 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r435 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r438 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i66 = $r438.<android.content.pm.ApplicationInfo: int uid>;

        $i65 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(userId#60, $i66);

        $r434 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r433 = $r434.<android.content.pm.ApplicationInfo: java.lang.String seinfo>;

        virtualinvoke $r437.<com.android.server.pm.Installer: int createUserData(java.lang.String,java.lang.String,int,int,java.lang.String)>($r436, $r435, $i65, userId#60, $r433);

     label088:
        i$#59 = i$#59 + 1;

        goto label087;

     label089:
        $r68 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r67 = $r68.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        if $r67 == null goto label092;

        $r476 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r471 = $r476.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        $z35 = staticinvoke <dalvik.system.VMRuntime: boolean is64BitAbi(java.lang.String)>($r471);

        if $z35 != 0 goto label092;

        $r472 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        otherPackageName#61 = $r472.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        msg#62 = j#55;

        i$#63 = lengthof msg#62;

        userId#64 = 0;

     label090:
        if userId#64 >= i$#63 goto label092;

        userId#65 = msg#62[userId#64];

        $r469 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r468 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r473 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $i69 = virtualinvoke $r469.<com.android.server.pm.Installer: int linkNativeLibraryDirectory(java.lang.String,java.lang.String,java.lang.String,int)>($r468, $r473, otherPackageName#61, userId#65);

        if $i69 >= 0 goto label091;

        $r470 = new com.android.server.pm.PackageManagerException;

        $r443 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r443.<java.lang.StringBuilder: void <init>()>();

        $r442 = virtualinvoke $r443.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed linking native library dir (user=");

        $r441 = virtualinvoke $r442.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId#65);

        $r440 = virtualinvoke $r441.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r439 = virtualinvoke $r440.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r470.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, $r439);

        throw $r470;

     label091:
        userId#64 = userId#64 + 1;

        goto label090;

     label092:
        exitmonitor other#56;

     label093:
        goto label096;

     label094:
        $r763 := @caughtexception;

        j#66 = $r763;

        exitmonitor other#56;

     label095:
        throw j#66;

     label096:
        $r69 = this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package mPlatformPackage>;

        if $r69 != pkg goto label099;

        $r477 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r478 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $z36 = virtualinvoke $r478.<dalvik.system.VMRuntime: boolean is64Bit()>();

        if $z36 == 0 goto label097;

        $r475 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $r783 = $r475[0];

        goto label098;

     label097:
        $r474 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $r783 = $r474[0];

     label098:
        $r477.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r783;

     label099:
        $i11 = scanFlags & 2;

        if $i11 != 0 goto label100;

        $i67 = scanFlags & 16;

        if $i67 == 0 goto label100;

        if names#54 != null goto label100;

        $r465 = pkgSetting#13.<com.android.server.pm.PackageSetting: java.lang.String cpuAbiOverrideString>;

        if $r465 == null goto label100;

        $r461 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r461.<java.lang.StringBuilder: void <init>()>();

        $r463 = virtualinvoke $r461.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring persisted ABI override ");

        $r462 = virtualinvoke $r463.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(names#54);

        $r458 = virtualinvoke $r462.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package: ");

        $r457 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r460 = virtualinvoke $r458.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r457);

        $r459 = virtualinvoke $r460.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r459);

     label100:
        $r70 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r78 = $r70.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        pkgSetting#13.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString> = $r78;

        $r79 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r80 = $r79.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        pkgSetting#13.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString> = $r80;

        pkgSetting#13.<com.android.server.pm.PackageSetting: java.lang.String cpuAbiOverrideString> = names#54;

        pkg.<android.content.pm.PackageParser$Package: java.lang.String cpuAbiOverride> = names#54;

        $r81 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r82 = $r81.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir>;

        pkgSetting#13.<com.android.server.pm.PackageSetting: java.lang.String legacyNativeLibraryPathString> = $r82;

        $i17 = scanFlags & 256;

        if $i17 != 0 goto label103;

        $r466 = pkgSetting#13.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r466 == null goto label103;

        $r467 = pkgSetting#13.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r464 = $r467.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        $i68 = scanFlags & 128;

        if $i68 == 0 goto label101;

        $z52 = 1;

        goto label102;

     label101:
        $z52 = 0;

     label102:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void adjustCpuAbisForSharedUserLPw(java.util.Set,android.content.pm.PackageParser$Package,boolean,boolean)>($r464, pkg, renamed#33, $z52);

     label103:
        $i18 = scanFlags & 2;

        if $i18 != 0 goto label106;

        $r411 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        $i61 = scanFlags & 128;

        if $i61 == 0 goto label104;

        $z53 = 1;

        goto label105;

     label104:
        $z53 = 0;

     label105:
        other#70 = virtualinvoke $r411.<com.android.server.pm.PackageDexOptimizer: int performDexOpt(android.content.pm.PackageParser$Package,java.lang.String[],boolean,boolean,boolean)>(pkg, null, renamed#33, $z53, 0);

        if other#70 != -1 goto label106;

        $r410 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r410.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-11, "scanPackageLI");

        throw $r410;

     label106:
        $z11 = this.<com.android.server.pm.PackageManagerService: boolean mFactoryTest>;

        if $z11 == 0 goto label107;

        $r406 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        $z29 = virtualinvoke $r406.<java.util.ArrayList: boolean contains(java.lang.Object)>("android.permission.FACTORY_TEST");

        if $z29 == 0 goto label107;

        $r409 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i60 = $r409.<android.content.pm.ApplicationInfo: int flags>;

        $i59 = $i60 | 16;

        $r409.<android.content.pm.ApplicationInfo: int flags> = $i59;

     label107:
        other#71 = null;

        $r74 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        otherPackageName#72 = $r74;

        entermonitor $r74;

     label108:
        $r75 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i14 = $r75.<android.content.pm.ApplicationInfo: int flags>;

        $i15 = $i14 & 1;

        if $i15 == 0 goto label119;

        $r415 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList libraryNames>;

        if $r415 == null goto label119;

        msg#73 = 0;

     label109:
        $r416 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList libraryNames>;

        $i63 = virtualinvoke $r416.<java.util.ArrayList: int size()>();

        if msg#73 >= $i63 goto label118;

        $r417 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList libraryNames>;

        $r418 = virtualinvoke $r417.<java.util.ArrayList: java.lang.Object get(int)>(msg#73);

        i$#74 = (java.lang.String) $r418;

        userId#75 = 0;

        $z30 = virtualinvoke pkg.<android.content.pm.PackageParser$Package: boolean isUpdatedSystemApp()>();

        if $z30 == 0 goto label113;

        $r398 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r397 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        userId#76 = virtualinvoke $r398.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>($r397);

        $r402 = userId#76.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r402 == null goto label112;

        $r400 = userId#76.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r401 = $r400.<android.content.pm.PackageParser$Package: java.util.ArrayList libraryNames>;

        if $r401 == null goto label112;

        j#77 = 0;

     label110:
        $r405 = userId#76.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r404 = $r405.<android.content.pm.PackageParser$Package: java.util.ArrayList libraryNames>;

        $i58 = virtualinvoke $r404.<java.util.ArrayList: int size()>();

        if j#77 >= $i58 goto label112;

        $r403 = userId#76.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r408 = $r403.<android.content.pm.PackageParser$Package: java.util.ArrayList libraryNames>;

        $r407 = virtualinvoke $r408.<java.util.ArrayList: java.lang.Object get(int)>(j#77);

        $z28 = virtualinvoke i$#74.<java.lang.String: boolean equals(java.lang.Object)>($r407);

        if $z28 == 0 goto label111;

        userId#75 = 1;

        goto label112;

     label111:
        j#77 = j#77 + 1;

        goto label110;

     label112:
        goto label114;

     label113:
        userId#75 = 1;

     label114:
        if userId#75 == 0 goto label116;

        $r427 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $z31 = virtualinvoke $r427.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(i$#74);

        if $z31 != 0 goto label115;

        $r399 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r394 = new com.android.server.pm.PackageManagerService$SharedLibraryEntry;

        $r395 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        specialinvoke $r394.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: void <init>(java.lang.String,java.lang.String)>(null, $r395);

        virtualinvoke $r399.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(i$#74, $r394);

        goto label117;

     label115:
        $r428 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z32 = virtualinvoke i$#74.<java.lang.String: boolean equals(java.lang.Object)>($r428);

        if $z32 != 0 goto label117;

        $r429 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r429.<java.lang.StringBuilder: void <init>()>();

        $r431 = virtualinvoke $r429.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r430 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r392 = virtualinvoke $r431.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r430);

        $r393 = virtualinvoke $r392.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" library ");

        $r390 = virtualinvoke $r393.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(i$#74);

        $r391 = virtualinvoke $r390.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists; skipping");

        $r396 = virtualinvoke $r391.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r396);

        goto label117;

     label116:
        $r419 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r419.<java.lang.StringBuilder: void <init>()>();

        $r421 = virtualinvoke $r419.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r420 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r423 = virtualinvoke $r421.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r420);

        $r422 = virtualinvoke $r423.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" declares lib ");

        $r425 = virtualinvoke $r422.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(i$#74);

        $r424 = virtualinvoke $r425.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that is not declared on system image; skipping");

        $r426 = virtualinvoke $r424.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r426);

     label117:
        msg#73 = msg#73 + 1;

        goto label109;

     label118:
        $i64 = scanFlags & 256;

        if $i64 != 0 goto label119;

        other#71 = specialinvoke this.<com.android.server.pm.PackageManagerService: java.util.ArrayList updateAllSharedLibrariesLPw(android.content.pm.PackageParser$Package)>(pkg);

     label119:
        exitmonitor otherPackageName#72;

     label120:
        goto label123;

     label121:
        $r769 := @caughtexception;

        p#79 = $r769;

        exitmonitor otherPackageName#72;

     label122:
        throw p#79;

     label123:
        if other#71 == null goto label128;

        $i54 = scanFlags & 2;

        if $i54 != 0 goto label128;

        otherPackageName#80 = 0;

     label124:
        $i53 = virtualinvoke other#71.<java.util.ArrayList: int size()>();

        if otherPackageName#80 >= $i53 goto label128;

        $r412 = virtualinvoke other#71.<java.util.ArrayList: java.lang.Object get(int)>(otherPackageName#80);

        msg#81 = (android.content.pm.PackageParser$Package) $r412;

        $r413 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        $i62 = scanFlags & 128;

        if $i62 == 0 goto label125;

        $z54 = 1;

        goto label126;

     label125:
        $z54 = 0;

     label126:
        i$#83 = virtualinvoke $r413.<com.android.server.pm.PackageDexOptimizer: int performDexOpt(android.content.pm.PackageParser$Package,java.lang.String[],boolean,boolean,boolean)>(msg#81, null, renamed#33, $z54, 0);

        if i$#83 != -1 goto label127;

        $r414 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r414.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-11, "scanPackageLI failed to dexopt clientLibPkgs");

        throw $r414;

     label127:
        otherPackageName#80 = otherPackageName#80 + 1;

        goto label124;

     label128:
        $i16 = scanFlags & 2048;

        if $i16 == 0 goto label129;

        $r363 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r361 = $r363.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r362 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i55 = $r362.<android.content.pm.ApplicationInfo: int uid>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)>($r361, $i55, "replace pkg");

     label129:
        if other#71 == null goto label131;

        otherPackageName#84 = 0;

     label130:
        $i51 = virtualinvoke other#71.<java.util.ArrayList: int size()>();

        if otherPackageName#84 >= $i51 goto label131;

        $r358 = virtualinvoke other#71.<java.util.ArrayList: java.lang.Object get(int)>(otherPackageName#84);

        msg#85 = (android.content.pm.PackageParser$Package) $r358;

        $r357 = msg#85.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r364 = $r357.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r356 = msg#85.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i56 = $r356.<android.content.pm.ApplicationInfo: int uid>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)>($r364, $i56, "update lib");

        otherPackageName#84 = otherPackageName#84 + 1;

        goto label130;

     label131:
        $r76 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        otherPackageName#86 = $r76.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        virtualinvoke otherPackageName#86.<com.android.server.pm.KeySetManagerService: void assertScannedPackageValid(android.content.pm.PackageParser$Package)>(pkg);

        $r77 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        msg#87 = $r77;

        entermonitor $r77;

     label132:
        $r88 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r88.<com.android.server.pm.Settings: void insertPackageSettingLPw(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>(pkgSetting#13, pkg);

        $r85 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r87 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r86 = $r87.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        virtualinvoke $r85.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r86, pkg);

        $r90 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r89 = $r90.<com.android.server.pm.Settings: java.util.ArrayList mPackagesToBeCleaned>;

        i$#88 = virtualinvoke $r89.<java.util.ArrayList: java.util.Iterator iterator()>();

     label133:
        $z12 = interfaceinvoke i$#88.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label135;

        $r360 = interfaceinvoke i$#88.<java.util.Iterator: java.lang.Object next()>();

        userId#89 = (android.content.pm.PackageCleanItem) $r360;

        $r359 = userId#89.<android.content.pm.PackageCleanItem: java.lang.String packageName>;

        $z26 = virtualinvoke pkgName#30.<java.lang.String: boolean equals(java.lang.Object)>($r359);

        if $z26 == 0 goto label134;

        interfaceinvoke i$#88.<java.util.Iterator: void remove()>();

     label134:
        goto label133;

     label135:
        $b21 = currentTime cmp 0L;

        if $b21 == 0 goto label137;

        $l47 = pkgSetting#13.<com.android.server.pm.PackageSetting: long firstInstallTime>;

        $b48 = $l47 cmp 0L;

        if $b48 != 0 goto label136;

        pkgSetting#13.<com.android.server.pm.PackageSetting: long lastUpdateTime> = currentTime;

        pkgSetting#13.<com.android.server.pm.PackageSetting: long firstInstallTime> = currentTime;

        goto label139;

     label136:
        $i52 = scanFlags & 64;

        if $i52 == 0 goto label139;

        pkgSetting#13.<com.android.server.pm.PackageSetting: long lastUpdateTime> = currentTime;

        goto label139;

     label137:
        $l20 = pkgSetting#13.<com.android.server.pm.PackageSetting: long firstInstallTime>;

        $b19 = $l20 cmp 0L;

        if $b19 != 0 goto label138;

        pkgSetting#13.<com.android.server.pm.PackageSetting: long lastUpdateTime> = origPackage#31;

        pkgSetting#13.<com.android.server.pm.PackageSetting: long firstInstallTime> = origPackage#31;

        goto label139;

     label138:
        $i22 = parseFlags & 64;

        if $i22 == 0 goto label139;

        $l49 = pkgSetting#13.<com.android.server.pm.PackageSetting: long timeStamp>;

        $b50 = origPackage#31 cmp $l49;

        if $b50 == 0 goto label139;

        pkgSetting#13.<com.android.server.pm.PackageSetting: long lastUpdateTime> = origPackage#31;

     label139:
        virtualinvoke otherPackageName#86.<com.android.server.pm.KeySetManagerService: void addScannedPackageLPw(android.content.pm.PackageParser$Package)>(pkg);

        $r84 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList providers>;

        userId#90 = virtualinvoke $r84.<java.util.ArrayList: int size()>();

        userId#91 = null;

        j#92 = 0;

     label140:
        if j#92 >= userId#90 goto label152;

        $r338 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList providers>;

        $r337 = virtualinvoke $r338.<java.util.ArrayList: java.lang.Object get(int)>(j#92);

        p#93 = (android.content.pm.PackageParser$Provider) $r337;

        $r331 = p#93.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r334 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r330 = $r334.<android.content.pm.ApplicationInfo: java.lang.String processName>;

        $r333 = p#93.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r329 = $r333.<android.content.pm.ProviderInfo: java.lang.String processName>;

        $r335 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i45 = $r335.<android.content.pm.ApplicationInfo: int uid>;

        $r332 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String fixProcessName(java.lang.String,java.lang.String,int)>($r330, $r329, $i45);

        $r331.<android.content.pm.ProviderInfo: java.lang.String processName> = $r332;

        $r326 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ProviderIntentResolver mProviders>;

        virtualinvoke $r326.<com.android.server.pm.PackageManagerService$ProviderIntentResolver: void addProvider(android.content.pm.PackageParser$Provider)>(p#93);

        $r327 = p#93.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $z24 = $r327.<android.content.pm.ProviderInfo: boolean isSyncable>;

        p#93.<android.content.pm.PackageParser$Provider: boolean syncable> = $z24;

        $r328 = p#93.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r324 = $r328.<android.content.pm.ProviderInfo: java.lang.String authority>;

        if $r324 == null goto label148;

        $r323 = p#93.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r368 = $r323.<android.content.pm.ProviderInfo: java.lang.String authority>;

        names#94 = virtualinvoke $r368.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        $r369 = p#93.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r369.<android.content.pm.ProviderInfo: java.lang.String authority> = null;

        j#95 = 0;

     label141:
        $i57 = lengthof names#94;

        if j#95 >= $i57 goto label148;

        if j#95 != 1 goto label142;

        $z25 = p#93.<android.content.pm.PackageParser$Provider: boolean syncable>;

        if $z25 == 0 goto label142;

        $r353 = new android.content.pm.PackageParser$Provider;

        specialinvoke $r353.<android.content.pm.PackageParser$Provider: void <init>(android.content.pm.PackageParser$Provider)>(p#93);

        p#93 = $r353;

        p#93.<android.content.pm.PackageParser$Provider: boolean syncable> = 0;

     label142:
        $r366 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mProvidersByAuthority>;

        $r365 = names#94[j#95];

        $z27 = virtualinvoke $r366.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r365);

        if $z27 != 0 goto label144;

        $r388 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mProvidersByAuthority>;

        $r389 = names#94[j#95];

        virtualinvoke $r388.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r389, p#93);

        $r384 = p#93.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r386 = $r384.<android.content.pm.ProviderInfo: java.lang.String authority>;

        if $r386 != null goto label143;

        $r355 = p#93.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r354 = names#94[j#95];

        $r355.<android.content.pm.ProviderInfo: java.lang.String authority> = $r354;

        goto label147;

     label143:
        $r351 = p#93.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r385 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r385.<java.lang.StringBuilder: void <init>()>();

        $r352 = p#93.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r349 = $r352.<android.content.pm.ProviderInfo: java.lang.String authority>;

        $r350 = virtualinvoke $r385.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r349);

        $r347 = virtualinvoke $r350.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r348 = names#94[j#95];

        $r345 = virtualinvoke $r347.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r348);

        $r346 = virtualinvoke $r345.<java.lang.StringBuilder: java.lang.String toString()>();

        $r351.<android.content.pm.ProviderInfo: java.lang.String authority> = $r346;

        goto label147;

     label144:
        $r374 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mProvidersByAuthority>;

        $r367 = names#94[j#95];

        $r375 = virtualinvoke $r374.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r367);

        other#96 = (android.content.pm.PackageParser$Provider) $r375;

        $r376 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r376.<java.lang.StringBuilder: void <init>()>();

        $r370 = virtualinvoke $r376.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping provider name ");

        $r371 = names#94[j#95];

        $r372 = virtualinvoke $r370.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r371);

        $r373 = virtualinvoke $r372.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (in package ");

        $r381 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r380 = $r381.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r383 = virtualinvoke $r373.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r380);

        $r382 = virtualinvoke $r383.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): name already used by ");

        if other#96 == null goto label145;

        $r379 = virtualinvoke other#96.<android.content.pm.PackageParser$Provider: android.content.ComponentName getComponentName()>();

        if $r379 == null goto label145;

        $r387 = virtualinvoke other#96.<android.content.pm.PackageParser$Provider: android.content.ComponentName getComponentName()>();

        $r784 = virtualinvoke $r387.<android.content.ComponentName: java.lang.String getPackageName()>();

        goto label146;

     label145:
        $r784 = "?";

     label146:
        $r378 = virtualinvoke $r382.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r784);

        $r377 = virtualinvoke $r378.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r377);

     label147:
        j#95 = j#95 + 1;

        goto label141;

     label148:
        $i44 = parseFlags & 2;

        if $i44 == 0 goto label151;

        if userId#91 != null goto label149;

        $r322 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r322.<java.lang.StringBuilder: void <init>(int)>(256);

        userId#91 = $r322;

        goto label150;

     label149:
        virtualinvoke userId#91.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label150:
        $r325 = p#93.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r321 = $r325.<android.content.pm.ProviderInfo: java.lang.String name>;

        virtualinvoke userId#91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r321);

     label151:
        j#92 = j#92 + 1;

        goto label140;

     label152:
        if userId#91 == null goto label153;

     label153:
        $r83 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList services>;

        userId#98 = virtualinvoke $r83.<java.util.ArrayList: int size()>();

        userId#99 = null;

        j#100 = 0;

     label154:
        if j#100 >= userId#98 goto label158;

        $r303 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList services>;

        $r300 = virtualinvoke $r303.<java.util.ArrayList: java.lang.Object get(int)>(j#100);

        p#101 = (android.content.pm.PackageParser$Service) $r300;

        $r341 = p#101.<android.content.pm.PackageParser$Service: android.content.pm.ServiceInfo info>;

        $r301 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r342 = $r301.<android.content.pm.ApplicationInfo: java.lang.String processName>;

        $r298 = p#101.<android.content.pm.PackageParser$Service: android.content.pm.ServiceInfo info>;

        $r297 = $r298.<android.content.pm.ServiceInfo: java.lang.String processName>;

        $r299 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i40 = $r299.<android.content.pm.ApplicationInfo: int uid>;

        $r344 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String fixProcessName(java.lang.String,java.lang.String,int)>($r342, $r297, $i40);

        $r341.<android.content.pm.ServiceInfo: java.lang.String processName> = $r344;

        $r343 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ServiceIntentResolver mServices>;

        virtualinvoke $r343.<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void addService(android.content.pm.PackageParser$Service)>(p#101);

        $i46 = parseFlags & 2;

        if $i46 == 0 goto label157;

        if userId#99 != null goto label155;

        $r336 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r336.<java.lang.StringBuilder: void <init>(int)>(256);

        userId#99 = $r336;

        goto label156;

     label155:
        virtualinvoke userId#99.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label156:
        $r340 = p#101.<android.content.pm.PackageParser$Service: android.content.pm.ServiceInfo info>;

        $r339 = $r340.<android.content.pm.ServiceInfo: java.lang.String name>;

        virtualinvoke userId#99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r339);

     label157:
        j#100 = j#100 + 1;

        goto label154;

     label158:
        if userId#99 == null goto label159;

     label159:
        $r97 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList receivers>;

        userId#102 = virtualinvoke $r97.<java.util.ArrayList: int size()>();

        userId#103 = null;

        j#104 = 0;

     label160:
        if j#104 >= userId#102 goto label164;

        $r315 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList receivers>;

        $r314 = virtualinvoke $r315.<java.util.ArrayList: java.lang.Object get(int)>(j#104);

        p#105 = (android.content.pm.PackageParser$Activity) $r314;

        $r307 = p#105.<android.content.pm.PackageParser$Activity: android.content.pm.ActivityInfo info>;

        $r313 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r309 = $r313.<android.content.pm.ApplicationInfo: java.lang.String processName>;

        $r312 = p#105.<android.content.pm.PackageParser$Activity: android.content.pm.ActivityInfo info>;

        $r310 = $r312.<android.content.pm.ActivityInfo: java.lang.String processName>;

        $r311 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i42 = $r311.<android.content.pm.ApplicationInfo: int uid>;

        $r308 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String fixProcessName(java.lang.String,java.lang.String,int)>($r309, $r310, $i42);

        $r307.<android.content.pm.ActivityInfo: java.lang.String processName> = $r308;

        $r306 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mReceivers>;

        virtualinvoke $r306.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void addActivity(android.content.pm.PackageParser$Activity,java.lang.String)>(p#105, "receiver");

        $i41 = parseFlags & 2;

        if $i41 == 0 goto label163;

        if userId#103 != null goto label161;

        $r302 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r302.<java.lang.StringBuilder: void <init>(int)>(256);

        userId#103 = $r302;

        goto label162;

     label161:
        virtualinvoke userId#103.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label162:
        $r305 = p#105.<android.content.pm.PackageParser$Activity: android.content.pm.ActivityInfo info>;

        $r304 = $r305.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke userId#103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r304);

     label163:
        j#104 = j#104 + 1;

        goto label160;

     label164:
        if userId#103 == null goto label165;

     label165:
        $r96 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        userId#106 = virtualinvoke $r96.<java.util.ArrayList: int size()>();

        userId#107 = null;

        j#108 = 0;

     label166:
        if j#108 >= userId#106 goto label170;

        $r285 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        $r275 = virtualinvoke $r285.<java.util.ArrayList: java.lang.Object get(int)>(j#108);

        p#109 = (android.content.pm.PackageParser$Activity) $r275;

        $r281 = p#109.<android.content.pm.PackageParser$Activity: android.content.pm.ActivityInfo info>;

        $r276 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r280 = $r276.<android.content.pm.ApplicationInfo: java.lang.String processName>;

        $r277 = p#109.<android.content.pm.PackageParser$Activity: android.content.pm.ActivityInfo info>;

        $r279 = $r277.<android.content.pm.ActivityInfo: java.lang.String processName>;

        $r278 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i37 = $r278.<android.content.pm.ApplicationInfo: int uid>;

        $r320 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String fixProcessName(java.lang.String,java.lang.String,int)>($r280, $r279, $i37);

        $r281.<android.content.pm.ActivityInfo: java.lang.String processName> = $r320;

        $r319 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities>;

        virtualinvoke $r319.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void addActivity(android.content.pm.PackageParser$Activity,java.lang.String)>(p#109, "activity");

        $i43 = parseFlags & 2;

        if $i43 == 0 goto label169;

        if userId#107 != null goto label167;

        $r316 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r316.<java.lang.StringBuilder: void <init>(int)>(256);

        userId#107 = $r316;

        goto label168;

     label167:
        virtualinvoke userId#107.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label168:
        $r318 = p#109.<android.content.pm.PackageParser$Activity: android.content.pm.ActivityInfo info>;

        $r317 = $r318.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke userId#107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r317);

     label169:
        j#108 = j#108 + 1;

        goto label166;

     label170:
        if userId#107 == null goto label171;

     label171:
        $r99 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList permissionGroups>;

        userId#110 = virtualinvoke $r99.<java.util.ArrayList: int size()>();

        userId#111 = null;

        j#112 = 0;

     label172:
        if j#112 >= userId#110 goto label179;

        $r256 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList permissionGroups>;

        $r257 = virtualinvoke $r256.<java.util.ArrayList: java.lang.Object get(int)>(j#112);

        p#113 = (android.content.pm.PackageParser$PermissionGroup) $r257;

        $r259 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPermissionGroups>;

        $r254 = p#113.<android.content.pm.PackageParser$PermissionGroup: android.content.pm.PermissionGroupInfo info>;

        $r255 = $r254.<android.content.pm.PermissionGroupInfo: java.lang.String name>;

        $r260 = virtualinvoke $r259.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r255);

        names#114 = (android.content.pm.PackageParser$PermissionGroup) $r260;

        if names#114 != null goto label175;

        $r290 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPermissionGroups>;

        $r288 = p#113.<android.content.pm.PackageParser$PermissionGroup: android.content.pm.PermissionGroupInfo info>;

        $r291 = $r288.<android.content.pm.PermissionGroupInfo: java.lang.String name>;

        virtualinvoke $r290.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r291, p#113);

        $i38 = parseFlags & 2;

        if $i38 == 0 goto label178;

        if userId#111 != null goto label173;

        $r284 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r284.<java.lang.StringBuilder: void <init>(int)>(256);

        userId#111 = $r284;

        goto label174;

     label173:
        virtualinvoke userId#111.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label174:
        $r282 = p#113.<android.content.pm.PackageParser$PermissionGroup: android.content.pm.PermissionGroupInfo info>;

        $r283 = $r282.<android.content.pm.PermissionGroupInfo: java.lang.String name>;

        virtualinvoke userId#111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r283);

        goto label178;

     label175:
        $r258 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r258.<java.lang.StringBuilder: void <init>()>();

        $r248 = virtualinvoke $r258.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission group ");

        $r249 = p#113.<android.content.pm.PackageParser$PermissionGroup: android.content.pm.PermissionGroupInfo info>;

        $r246 = $r249.<android.content.pm.PermissionGroupInfo: java.lang.String name>;

        $r247 = virtualinvoke $r248.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r246);

        $r252 = virtualinvoke $r247.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r253 = p#113.<android.content.pm.PackageParser$PermissionGroup: android.content.pm.PermissionGroupInfo info>;

        $r250 = $r253.<android.content.pm.PermissionGroupInfo: java.lang.String packageName>;

        $r251 = virtualinvoke $r252.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r250);

        $r293 = virtualinvoke $r251.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ignored: original from ");

        $r292 = names#114.<android.content.pm.PackageParser$PermissionGroup: android.content.pm.PermissionGroupInfo info>;

        $r295 = $r292.<android.content.pm.PermissionGroupInfo: java.lang.String packageName>;

        $r294 = virtualinvoke $r293.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r295);

        $r296 = virtualinvoke $r294.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r296);

        $i39 = parseFlags & 2;

        if $i39 == 0 goto label178;

        if userId#111 != null goto label176;

        $r289 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r289.<java.lang.StringBuilder: void <init>(int)>(256);

        userId#111 = $r289;

        goto label177;

     label176:
        virtualinvoke userId#111.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label177:
        virtualinvoke userId#111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DUP:");

        $r286 = p#113.<android.content.pm.PackageParser$PermissionGroup: android.content.pm.PermissionGroupInfo info>;

        $r287 = $r286.<android.content.pm.PermissionGroupInfo: java.lang.String name>;

        virtualinvoke userId#111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r287);

     label178:
        j#112 = j#112 + 1;

        goto label172;

     label179:
        if userId#111 == null goto label180;

     label180:
        $r98 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList permissions>;

        userId#115 = virtualinvoke $r98.<java.util.ArrayList: int size()>();

        userId#116 = null;

        j#117 = 0;

     label181:
        if j#117 >= userId#115 goto label202;

        $r142 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList permissions>;

        $r139 = virtualinvoke $r142.<java.util.ArrayList: java.lang.Object get(int)>(j#117);

        p#118 = (android.content.pm.PackageParser$Permission) $r139;

        $r140 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $i29 = $r140.<android.content.pm.PermissionInfo: int flags>;

        $i30 = $i29 & -1073741825;

        $r140.<android.content.pm.PermissionInfo: int flags> = $i30;

        $r161 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i28 = $r161.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i28 <= 22 goto label182;

        $r231 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPermissionGroups>;

        $r229 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r228 = $r229.<android.content.pm.PermissionInfo: java.lang.String group>;

        $r230 = virtualinvoke $r231.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r228);

        $r225 = (android.content.pm.PackageParser$PermissionGroup) $r230;

        p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PackageParser$PermissionGroup group> = $r225;

        $r224 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r227 = $r224.<android.content.pm.PermissionInfo: java.lang.String group>;

        if $r227 == null goto label182;

        $r226 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PackageParser$PermissionGroup group>;

        if $r226 != null goto label182;

        $r270 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r270.<java.lang.StringBuilder: void <init>()>();

        $r269 = virtualinvoke $r270.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission ");

        $r268 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r274 = $r268.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r273 = virtualinvoke $r269.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r274);

        $r272 = virtualinvoke $r273.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r271 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r264 = $r271.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        $r263 = virtualinvoke $r272.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r264);

        $r262 = virtualinvoke $r263.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in an unknown group ");

        $r261 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r267 = $r261.<android.content.pm.PermissionInfo: java.lang.String group>;

        $r266 = virtualinvoke $r262.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r267);

        $r265 = virtualinvoke $r266.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r265);

     label182:
        $z18 = p#118.<android.content.pm.PackageParser$Permission: boolean tree>;

        if $z18 == 0 goto label183;

        $r221 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r785 = $r221.<com.android.server.pm.Settings: android.util.ArrayMap mPermissionTrees>;

        goto label184;

     label183:
        $r164 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r785 = $r164.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

     label184:
        names#120 = $r785;

        $r162 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r163 = $r162.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r166 = virtualinvoke names#120.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r163);

        j#121 = (com.android.server.pm.BasePermission) $r166;

        if j#121 == null goto label188;

        $r206 = j#121.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r196 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r195 = $r196.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        $z22 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r206, $r195);

        if $z22 != 0 goto label188;

        $r205 = j#121.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        if $r205 == null goto label185;

        $r223 = j#121.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r222 = $r223.<android.content.pm.PackageParser$Permission: android.content.pm.PackageParser$Package owner>;

        $z23 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>($r222);

        if $z23 == 0 goto label185;

        $z55 = 1;

        goto label186;

     label185:
        $z55 = 0;

     label186:
        other#123 = $z55;

        $r204 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PackageParser$Package owner>;

        $z21 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>($r204);

        if $z21 == 0 goto label188;

        $i33 = j#121.<com.android.server.pm.BasePermission: int type>;

        if $i33 != 1 goto label187;

        $r244 = j#121.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        if $r244 != null goto label187;

        j#121.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting> = pkgSetting#13;

        j#121.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm> = p#118;

        $r245 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i36 = $r245.<android.content.pm.ApplicationInfo: int uid>;

        j#121.<com.android.server.pm.BasePermission: int uid> = $i36;

        $r240 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r241 = $r240.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        j#121.<com.android.server.pm.BasePermission: java.lang.String sourcePackage> = $r241;

        $r242 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $i35 = $r242.<android.content.pm.PermissionInfo: int flags>;

        $i34 = $i35 | 1073741824;

        $r242.<android.content.pm.PermissionInfo: int flags> = $i34;

        goto label188;

     label187:
        if other#123 != 0 goto label188;

        $r203 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r203.<java.lang.StringBuilder: void <init>()>();

        $r202 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New decl ");

        $r236 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PackageParser$Package owner>;

        $r237 = virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r236);

        $r238 = virtualinvoke $r237.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of permission  ");

        $r239 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r232 = $r239.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r233 = virtualinvoke $r238.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r232);

        $r234 = virtualinvoke $r233.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is system; overriding ");

        $r235 = j#121.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r243 = virtualinvoke $r234.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r235);

        msg = virtualinvoke $r243.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(5, msg);

        j#121 = null;

     label188:
        if j#121 != null goto label189;

        $r214 = new com.android.server.pm.BasePermission;

        $r215 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r199 = $r215.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r201 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r200 = $r201.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        specialinvoke $r214.<com.android.server.pm.BasePermission: void <init>(java.lang.String,java.lang.String,int)>($r199, $r200, 0);

        j#121 = $r214;

        $r198 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r197 = $r198.<android.content.pm.PermissionInfo: java.lang.String name>;

        virtualinvoke names#120.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r197, j#121);

     label189:
        $r167 = j#121.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        if $r167 != null goto label197;

        $r156 = j#121.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        if $r156 == null goto label190;

        $r180 = j#121.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r179 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r181 = $r179.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        $z19 = virtualinvoke $r180.<java.lang.String: boolean equals(java.lang.Object)>($r181);

        if $z19 == 0 goto label196;

     label190:
        $r155 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r154 = $r155.<android.content.pm.PermissionInfo: java.lang.String name>;

        other#124 = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.BasePermission findPermissionTreeLP(java.lang.String)>($r154);

        if other#124 == null goto label191;

        $r188 = other#124.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r186 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r187 = $r186.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        $z20 = virtualinvoke $r188.<java.lang.String: boolean equals(java.lang.Object)>($r187);

        if $z20 == 0 goto label194;

     label191:
        j#121.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting> = pkgSetting#13;

        j#121.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm> = p#118;

        $r159 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i24 = $r159.<android.content.pm.ApplicationInfo: int uid>;

        j#121.<com.android.server.pm.BasePermission: int uid> = $i24;

        $r158 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r157 = $r158.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        j#121.<com.android.server.pm.BasePermission: java.lang.String sourcePackage> = $r157;

        $r160 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $i27 = $r160.<android.content.pm.PermissionInfo: int flags>;

        $i26 = $i27 | 1073741824;

        $r160.<android.content.pm.PermissionInfo: int flags> = $i26;

        $i25 = parseFlags & 2;

        if $i25 == 0 goto label195;

        if userId#116 != null goto label192;

        $r185 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r185.<java.lang.StringBuilder: void <init>(int)>(256);

        userId#116 = $r185;

        goto label193;

     label192:
        virtualinvoke userId#116.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label193:
        $r183 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r184 = $r183.<android.content.pm.PermissionInfo: java.lang.String name>;

        virtualinvoke userId#116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r184);

        goto label195;

     label194:
        $r189 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r189.<java.lang.StringBuilder: void <init>()>();

        $r190 = virtualinvoke $r189.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission ");

        $r191 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r192 = $r191.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r193 = virtualinvoke $r190.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r192);

        $r194 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r170 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r169 = $r170.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        $r172 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r169);

        $r171 = virtualinvoke $r172.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ignored: base tree ");

        $r174 = other#124.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r173 = virtualinvoke $r171.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r174);

        $r176 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is from package ");

        $r175 = other#124.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r178 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r175);

        $r177 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r177);

     label195:
        goto label200;

     label196:
        $r182 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r182.<java.lang.StringBuilder: void <init>()>();

        $r213 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission ");

        $r211 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r212 = $r211.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r209 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r212);

        $r210 = virtualinvoke $r209.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r207 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r208 = $r207.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        $r219 = virtualinvoke $r210.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r208);

        $r220 = virtualinvoke $r219.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ignored: original from ");

        $r217 = j#121.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r218 = virtualinvoke $r220.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r217);

        $r216 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r216);

        goto label200;

     label197:
        $i31 = parseFlags & 2;

        if $i31 == 0 goto label200;

        if userId#116 != null goto label198;

        $r151 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r151.<java.lang.StringBuilder: void <init>(int)>(256);

        userId#116 = $r151;

        goto label199;

     label198:
        virtualinvoke userId#116.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label199:
        virtualinvoke userId#116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DUP:");

        $r153 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r152 = $r153.<android.content.pm.PermissionInfo: java.lang.String name>;

        virtualinvoke userId#116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r152);

     label200:
        $r165 = j#121.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        if $r165 != p#118 goto label201;

        $r168 = p#118.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $i32 = $r168.<android.content.pm.PermissionInfo: int protectionLevel>;

        j#121.<com.android.server.pm.BasePermission: int protectionLevel> = $i32;

     label201:
        j#117 = j#117 + 1;

        goto label181;

     label202:
        if userId#116 == null goto label203;

     label203:
        $r92 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList instrumentation>;

        userId#125 = virtualinvoke $r92.<java.util.ArrayList: int size()>();

        userId#126 = null;

        j#127 = 0;

     label204:
        if j#127 >= userId#125 goto label208;

        $r111 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList instrumentation>;

        $r112 = virtualinvoke $r111.<java.util.ArrayList: java.lang.Object get(int)>(j#127);

        p#128 = (android.content.pm.PackageParser$Instrumentation) $r112;

        $r137 = p#128.<android.content.pm.PackageParser$Instrumentation: android.content.pm.InstrumentationInfo info>;

        $r113 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r138 = $r113.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r137.<android.content.pm.InstrumentationInfo: java.lang.String packageName> = $r138;

        $r134 = p#128.<android.content.pm.PackageParser$Instrumentation: android.content.pm.InstrumentationInfo info>;

        $r136 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r135 = $r136.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        $r134.<android.content.pm.InstrumentationInfo: java.lang.String sourceDir> = $r135;

        $r131 = p#128.<android.content.pm.PackageParser$Instrumentation: android.content.pm.InstrumentationInfo info>;

        $r133 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r132 = $r133.<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir>;

        $r131.<android.content.pm.InstrumentationInfo: java.lang.String publicSourceDir> = $r132;

        $r128 = p#128.<android.content.pm.PackageParser$Instrumentation: android.content.pm.InstrumentationInfo info>;

        $r130 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r129 = $r130.<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>;

        $r128.<android.content.pm.InstrumentationInfo: java.lang.String[] splitSourceDirs> = $r129;

        $r125 = p#128.<android.content.pm.PackageParser$Instrumentation: android.content.pm.InstrumentationInfo info>;

        $r127 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r126 = $r127.<android.content.pm.ApplicationInfo: java.lang.String[] splitPublicSourceDirs>;

        $r125.<android.content.pm.InstrumentationInfo: java.lang.String[] splitPublicSourceDirs> = $r126;

        $r149 = p#128.<android.content.pm.PackageParser$Instrumentation: android.content.pm.InstrumentationInfo info>;

        $r124 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r123 = $r124.<android.content.pm.ApplicationInfo: java.lang.String dataDir>;

        $r149.<android.content.pm.InstrumentationInfo: java.lang.String dataDir> = $r123;

        $r148 = p#128.<android.content.pm.PackageParser$Instrumentation: android.content.pm.InstrumentationInfo info>;

        $r150 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r147 = $r150.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        $r148.<android.content.pm.InstrumentationInfo: java.lang.String nativeLibraryDir> = $r147;

        $r145 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation>;

        $r146 = virtualinvoke p#128.<android.content.pm.PackageParser$Instrumentation: android.content.ComponentName getComponentName()>();

        virtualinvoke $r145.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r146, p#128);

        $i23 = parseFlags & 2;

        if $i23 == 0 goto label207;

        if userId#126 != null goto label205;

        $r141 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r141.<java.lang.StringBuilder: void <init>(int)>(256);

        userId#126 = $r141;

        goto label206;

     label205:
        virtualinvoke userId#126.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label206:
        $r144 = p#128.<android.content.pm.PackageParser$Instrumentation: android.content.pm.InstrumentationInfo info>;

        $r143 = $r144.<android.content.pm.InstrumentationInfo: java.lang.String name>;

        virtualinvoke userId#126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r143);

     label207:
        j#127 = j#127 + 1;

        goto label204;

     label208:
        if userId#126 == null goto label209;

     label209:
        $r91 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList protectedBroadcasts>;

        if $r91 == null goto label211;

        $r119 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList protectedBroadcasts>;

        userId#129 = virtualinvoke $r119.<java.util.ArrayList: int size()>();

        j#130 = 0;

     label210:
        if j#130 >= userId#129 goto label211;

        $r115 = this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mProtectedBroadcasts>;

        $r114 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList protectedBroadcasts>;

        $r116 = virtualinvoke $r114.<java.util.ArrayList: java.lang.Object get(int)>(j#130);

        virtualinvoke $r115.<android.util.ArraySet: boolean add(java.lang.Object)>($r116);

        j#130 = j#130 + 1;

        goto label210;

     label211:
        virtualinvoke pkgSetting#13.<com.android.server.pm.PackageSetting: void setTimeStamp(long)>(origPackage#31);

        $r94 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mOverlayTarget>;

        if $r94 == null goto label214;

        $r110 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mOverlayTarget>;

        if $r110 == null goto label215;

        $r106 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mOverlayTarget>;

        $z15 = virtualinvoke $r106.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z15 != 0 goto label215;

        $r107 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mOverlays>;

        $r108 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mOverlayTarget>;

        $z14 = virtualinvoke $r107.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r108);

        if $z14 != 0 goto label212;

        $r117 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mOverlays>;

        $r118 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mOverlayTarget>;

        $r122 = new android.util.ArrayMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw7()>();

        specialinvoke $r122.<android.util.ArrayMap: void <init>()>();

        virtualinvoke $r117.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r118, $r122);

     label212:
        $r105 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mOverlays>;

        $r103 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mOverlayTarget>;

        $r104 = virtualinvoke $r105.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r103);

        p#131 = (android.util.ArrayMap) $r104;

        $r100 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke p#131.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r100, pkg);

        $r101 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r102 = pkg.<android.content.pm.PackageParser$Package: java.lang.String mOverlayTarget>;

        $r120 = virtualinvoke $r101.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r102);

        names#132 = (android.content.pm.PackageParser$Package) $r120;

        if names#132 == null goto label213;

        $z17 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean createIdmapForPackagePairLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package)>(names#132, pkg);

        if $z17 != 0 goto label213;

        $r121 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r121.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-7, "scanPackageLI failed to createIdmap");

        throw $r121;

     label213:
        goto label215;

     label214:
        $r93 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mOverlays>;

        $r95 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z13 = virtualinvoke $r93.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r95);

        if $z13 == 0 goto label215;

        $r109 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z16 = virtualinvoke $r109.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z16 != 0 goto label215;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void createIdmapsForPackageLI(android.content.pm.PackageParser$Package)>(pkg);

     label215:
        exitmonitor msg#87;

     label216:
        goto label219;

     label217:
        $r778 := @caughtexception;

        l32 = $r778;

        exitmonitor msg#87;

     label218:
        throw l32;

     label219:
        return pkg;

        catch java.lang.Throwable from label007 to label010 with label011;
        catch java.lang.Throwable from label011 to label012 with label011;
        catch com.android.server.pm.PackageManagerException from label036 to label037 with label038;
        catch java.lang.Throwable from label020 to label052 with label053;
        catch java.lang.Throwable from label053 to label054 with label053;
        catch android.system.ErrnoException from label059 to label060 with label061;
        catch java.lang.Throwable from label071 to label073 with label074;
        catch java.lang.Throwable from label074 to label075 with label074;
        catch java.lang.Throwable from label086 to label093 with label094;
        catch java.lang.Throwable from label094 to label095 with label094;
        catch java.lang.Throwable from label108 to label120 with label121;
        catch java.lang.Throwable from label121 to label122 with label121;
        catch java.lang.Throwable from label132 to label216 with label217;
        catch java.lang.Throwable from label217 to label218 with label217;
    }

    public void derivePackageAbi(android.content.pm.PackageParser$Package, java.io.File, java.lang.String, boolean) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg;
        java.io.File scanFile, $r2, nativeLibraryRoot#3;
        java.lang.String cpuAbiOverride, nativeLibraryRootStr, $r7, $r11, $r15, $r17, $r26, $r29, $r30, $r33, $r38, abi#6;
        boolean useIsaSpecificSubdirs, $z0, $z1, $z2, $z3, $z4, $z5, $z6, extractLibs#1, abi64#9;
        java.lang.Throwable l12, $r35;
        android.content.pm.ApplicationInfo $r0, $r1, $r3, $r4, $r5, $r8, $r9, $r10, $r20, $r23, $r25;
        int $i0, $i1, $i2, abi32#4, abi64#5, abi#10;
        java.lang.String[] $r6, $r18, $r19, $r21, $r22, $r24, $r27, $r28, $r31, $r39, abi32#8;
        java.lang.StringBuilder $r12, $r14, $r16, $r32, $r34, $r37;
        com.android.server.pm.PackageManagerException $r13;
        java.io.IOException $r36, nativeLibraryRoot#11;
        com.android.internal.content.NativeLibraryHelper$Handle handle#2;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        scanFile := @parameter1: java.io.File;

        cpuAbiOverride := @parameter2: java.lang.String;

        extractLibs#1 := @parameter3: boolean;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void setNativeLibraryPaths(android.content.pm.PackageParser$Package)>(pkg);

        $z0 = virtualinvoke pkg.<android.content.pm.PackageParser$Package: boolean isForwardLocked()>();

        if $z0 != 0 goto label01;

        $z4 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isExternal(android.content.pm.PackageParser$Package)>(pkg);

        if $z4 != 0 goto label01;

        $z3 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>(pkg);

        if $z3 == 0 goto label02;

        $z6 = virtualinvoke pkg.<android.content.pm.PackageParser$Package: boolean isUpdatedSystemApp()>();

        if $z6 != 0 goto label02;

     label01:
        extractLibs#1 = 0;

     label02:
        $r0 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        nativeLibraryRootStr = $r0.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir>;

        $r1 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        useIsaSpecificSubdirs = $r1.<android.content.pm.ApplicationInfo: boolean nativeLibraryRootRequiresIsa>;

        handle#2 = null;

     label03:
        handle#2 = staticinvoke <com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle create(java.io.File)>(scanFile);

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(nativeLibraryRootStr);

        nativeLibraryRoot#3 = $r2;

        $r4 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r4.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = null;

        $r3 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r3.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi> = null;

        $r5 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isMultiArch(android.content.pm.ApplicationInfo)>($r5);

        if $z1 == 0 goto label12;

        $r17 = pkg.<android.content.pm.PackageParser$Package: java.lang.String cpuAbiOverride>;

        if $r17 == null goto label04;

        $r29 = "-";

        $r30 = pkg.<android.content.pm.PackageParser$Package: java.lang.String cpuAbiOverride>;

        $z5 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z5 != 0 goto label04;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Ignoring abiOverride for multi arch application.");

     label04:
        abi32#4 = -114;

        abi64#5 = -114;

        $r19 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $i2 = lengthof $r19;

        if $i2 <= 0 goto label06;

        if extractLibs#1 == 0 goto label05;

        $r31 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        abi32#4 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean)>(handle#2, nativeLibraryRoot#3, $r31, useIsaSpecificSubdirs);

        goto label06;

     label05:
        $r27 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        abi32#4 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(handle#2, $r27);

     label06:
        staticinvoke <com.android.server.pm.PackageManagerService: void maybeThrowExceptionForMultiArchCopy(java.lang.String,int)>("Error unpackaging 32 bit native libs for multiarch app.", abi32#4);

        $r18 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i1 = lengthof $r18;

        if $i1 <= 0 goto label08;

        if extractLibs#1 == 0 goto label07;

        $r28 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        abi64#5 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean)>(handle#2, nativeLibraryRoot#3, $r28, useIsaSpecificSubdirs);

        goto label08;

     label07:
        $r24 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        abi64#5 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(handle#2, $r24);

     label08:
        staticinvoke <com.android.server.pm.PackageManagerService: void maybeThrowExceptionForMultiArchCopy(java.lang.String,int)>("Error unpackaging 64 bit native libs for multiarch app.", abi64#5);

        if abi64#5 < 0 goto label09;

        $r25 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r21 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $r26 = $r21[abi64#5];

        $r25.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r26;

     label09:
        if abi32#4 < 0 goto label11;

        $r22 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        abi#6 = $r22[abi32#4];

        if abi64#5 < 0 goto label10;

        $r20 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r20.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi> = abi#6;

        goto label11;

     label10:
        $r23 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r23.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = abi#6;

     label11:
        goto label21;

     label12:
        if cpuAbiOverride == null goto label13;

        $r39 = newarray (java.lang.String)[1];

        $r39[0] = cpuAbiOverride;

        goto label14;

     label13:
        $r39 = <android.os.Build: java.lang.String[] SUPPORTED_ABIS>;

     label14:
        abi32#8 = $r39;

        abi64#9 = 0;

        $r6 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i0 = lengthof $r6;

        if $i0 <= 0 goto label15;

        if cpuAbiOverride != null goto label15;

        $z2 = staticinvoke <com.android.internal.content.NativeLibraryHelper: boolean hasRenderscriptBitcode(com.android.internal.content.NativeLibraryHelper$Handle)>(handle#2);

        if $z2 == 0 goto label15;

        abi32#8 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        abi64#9 = 1;

     label15:
        if extractLibs#1 == 0 goto label16;

        abi#10 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean)>(handle#2, nativeLibraryRoot#3, abi32#8, useIsaSpecificSubdirs);

        goto label17;

     label16:
        abi#10 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(handle#2, abi32#8);

     label17:
        if abi#10 >= 0 goto label18;

        if abi#10 == -114 goto label18;

        $r13 = new com.android.server.pm.PackageManagerException;

        $r12 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error unpackaging native libs for app, errorCode=");

        $r14 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(abi#10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, $r15);

        throw $r13;

     label18:
        if abi#10 < 0 goto label19;

        $r10 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r11 = abi32#8[abi#10];

        $r10.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r11;

        goto label21;

     label19:
        if abi#10 != -114 goto label20;

        if cpuAbiOverride == null goto label20;

        $r8 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r8.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = cpuAbiOverride;

        goto label21;

     label20:
        if abi64#9 == 0 goto label21;

        $r9 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r7 = abi32#8[0];

        $r9.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r7;

     label21:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(handle#2);

        goto label26;

     label22:
        $r36 := @caughtexception;

        nativeLibraryRoot#11 = $r36;

        $r37 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get canonical file ");

        $r33 = virtualinvoke nativeLibraryRoot#11.<java.io.IOException: java.lang.String toString()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r38);

     label23:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(handle#2);

        goto label26;

     label24:
        $r35 := @caughtexception;

        l12 = $r35;

     label25:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(handle#2);

        throw l12;

     label26:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void setNativeLibraryPaths(android.content.pm.PackageParser$Package)>(pkg);

        return;

        catch java.io.IOException from label03 to label21 with label22;
        catch java.lang.Throwable from label03 to label21 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    private void adjustCpuAbisForSharedUserLPw(java.util.Set, android.content.pm.PackageParser$Package, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        java.util.Set packagesForUser;
        android.content.pm.PackageParser$Package scannedPackage, $r3, $r4, $r5, $r16, $r23;
        boolean forceDexOpt, deferDexOpt, $z0, $z1, $z2, $z3, $z4;
        android.content.pm.ApplicationInfo $r0, $r6, $r8, $r24, $r27, $r39, $r42;
        java.lang.String $r1, $r11, $r14, $r18, $r19, $r20, $r21, $r22, $r26, $r29, $r38, $r40, $r41, $r43, requiredInstructionSet#1, instructionSet#5, errorMessage#7, i$#8;
        java.lang.Object $r2, $r25, $r44;
        java.lang.StringBuilder $r7, $r9, $r10, $r12, $r13, $r28, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37;
        com.android.server.pm.Installer $r15;
        com.android.server.pm.PackageDexOptimizer $r17;
        com.android.server.pm.PackageSetting requirer#2, ps#4, instructionSet#10;
        java.util.Iterator i$#3, ps#9;
        int errorMessage#11;

        this := @this: com.android.server.pm.PackageManagerService;

        packagesForUser := @parameter0: java.util.Set;

        scannedPackage := @parameter1: android.content.pm.PackageParser$Package;

        forceDexOpt := @parameter2: boolean;

        deferDexOpt := @parameter3: boolean;

        requiredInstructionSet#1 = null;

        if scannedPackage == null goto label01;

        $r42 = scannedPackage.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r43 = $r42.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        if $r43 == null goto label01;

        $r39 = scannedPackage.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r40 = $r39.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        requiredInstructionSet#1 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r40);

     label01:
        requirer#2 = null;

        i$#3 = interfaceinvoke packagesForUser.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke i$#3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r25 = interfaceinvoke i$#3.<java.util.Iterator: java.lang.Object next()>();

        ps#4 = (com.android.server.pm.PackageSetting) $r25;

        if scannedPackage == null goto label03;

        $r41 = scannedPackage.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r38 = ps#4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z4 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>($r38);

        if $z4 != 0 goto label08;

     label03:
        $r26 = ps#4.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        if $r26 != null goto label04;

        goto label02;

     label04:
        $r29 = ps#4.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        instructionSet#5 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r29);

        if requiredInstructionSet#1 == null goto label07;

        $z3 = virtualinvoke instructionSet#5.<java.lang.String: boolean equals(java.lang.Object)>(requiredInstructionSet#1);

        if $z3 != 0 goto label07;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instruction set mismatch, ");

        if requirer#2 != null goto label05;

        $r44 = "[caller]";

        goto label06;

     label05:
        $r44 = requirer#2;

     label06:
        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(requiredInstructionSet#1);

        $r37 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" whereas ");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(ps#4);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(instructionSet#5);

        errorMessage#7 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", errorMessage#7);

     label07:
        if requiredInstructionSet#1 != null goto label08;

        requiredInstructionSet#1 = instructionSet#5;

        requirer#2 = ps#4;

     label08:
        goto label02;

     label09:
        if requiredInstructionSet#1 == null goto label17;

        if requirer#2 == null goto label10;

        i$#8 = requirer#2.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        if scannedPackage == null goto label11;

        $r27 = scannedPackage.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r27.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = i$#8;

        goto label11;

     label10:
        $r0 = scannedPackage.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        i$#8 = $r0.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

     label11:
        ps#9 = interfaceinvoke packagesForUser.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke ps#9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $r2 = interfaceinvoke ps#9.<java.util.Iterator: java.lang.Object next()>();

        instructionSet#10 = (com.android.server.pm.PackageSetting) $r2;

        if scannedPackage == null goto label13;

        $r22 = scannedPackage.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r21 = instructionSet#10.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z2 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z2 != 0 goto label16;

     label13:
        $r1 = instructionSet#10.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        if $r1 == null goto label14;

        goto label12;

     label14:
        instructionSet#10.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString> = i$#8;

        $r4 = instructionSet#10.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r4 == null goto label16;

        $r3 = instructionSet#10.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r6 = $r3.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        if $r6 == null goto label16;

        $r5 = instructionSet#10.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r8 = $r5.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r8.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = i$#8;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adjusting ABI for : ");

        $r11 = instructionSet#10.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(i$#8);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r14);

        $r17 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        $r16 = instructionSet#10.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        errorMessage#11 = virtualinvoke $r17.<com.android.server.pm.PackageDexOptimizer: int performDexOpt(android.content.pm.PackageParser$Package,java.lang.String[],boolean,boolean,boolean)>($r16, null, forceDexOpt, deferDexOpt, 1);

        if errorMessage#11 != -1 goto label15;

        instructionSet#10.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString> = null;

        $r23 = instructionSet#10.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r24 = $r23.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r24.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = null;

        return;

     label15:
        $r15 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r19 = instructionSet#10.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r20 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getPreferredInstructionSet()>();

        $r18 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getDexCodeInstructionSet(java.lang.String)>($r20);

        virtualinvoke $r15.<com.android.server.pm.Installer: int rmdex(java.lang.String,java.lang.String)>($r19, $r18);

     label16:
        goto label12;

     label17:
        return;
    }

    private void setUpCustomResolverActivity(android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg;
        android.util.ArrayMap l2, $r0;
        java.lang.Throwable l3, $r27;
        android.content.pm.ApplicationInfo $r1, $r6, $r9;
        android.content.pm.ActivityInfo $r2, $r4, $r8, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        android.content.ComponentName $r3, $r23, $r26;
        java.lang.String $r5, $r7, $r10, $r28;
        android.content.pm.ResolveInfo $r18, $r19, $r20, $r21;
        java.lang.StringBuilder $r22, $r24, $r25;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        this.<com.android.server.pm.PackageManagerService: boolean mResolverReplaced> = 1;

        $r2 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r1 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo> = $r1;

        $r4 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r3 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mCustomResolverComponentName>;

        $r5 = virtualinvoke $r3.<android.content.ComponentName: java.lang.String getClassName()>();

        $r4.<android.content.pm.ActivityInfo: java.lang.String name> = $r5;

        $r8 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r6 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r7 = $r6.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r8.<android.content.pm.ActivityInfo: java.lang.String packageName> = $r7;

        $r11 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r9 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r10 = $r9.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r11.<android.content.pm.ActivityInfo: java.lang.String processName> = $r10;

        $r13 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r13.<android.content.pm.ActivityInfo: int launchMode> = 0;

        $r12 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r12.<android.content.pm.ActivityInfo: int flags> = 288;

        $r15 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r15.<android.content.pm.ActivityInfo: int theme> = 0;

        $r14 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r14.<android.content.pm.ActivityInfo: boolean exported> = 1;

        $r17 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r17.<android.content.pm.ActivityInfo: boolean enabled> = 1;

        $r19 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r16 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r19.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = $r16;

        $r18 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r18.<android.content.pm.ResolveInfo: int priority> = 0;

        $r21 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r21.<android.content.pm.ResolveInfo: int preferredOrder> = 0;

        $r20 = this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r20.<android.content.pm.ResolveInfo: int match> = 0;

        $r23 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mCustomResolverComponentName>;

        this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mResolveComponentName> = $r23;

        $r22 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Replacing default ResolverActivity with custom activity: ");

        $r26 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mResolveComponentName>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r28);

        exitmonitor l2;

     label2:
        goto label5;

     label3:
        $r27 := @caughtexception;

        l3 = $r27;

        exitmonitor l2;

     label4:
        throw l3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static java.lang.String calculateBundledApkRoot(java.lang.String)
    {
        java.lang.String codePathString, $r10, $r11, $r17, $r18;
        java.io.File codePath, tmp, $r0, $r1, $r2, $r3, $r4, $r15, codeRoot#1, f#2, parent#3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r12, $r14, $r16;
        java.io.IOException $r13, f#4;

        codePathString := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(codePathString);

        codePath = $r0;

        $r1 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        $z0 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r1, codePath);

        if $z0 == 0 goto label1;

        codeRoot#1 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        goto label8;

     label1:
        $r2 = staticinvoke <android.os.Environment: java.io.File getOemDirectory()>();

        $z1 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r2, codePath);

        if $z1 == 0 goto label2;

        codeRoot#1 = staticinvoke <android.os.Environment: java.io.File getOemDirectory()>();

        goto label8;

     label2:
        $r3 = staticinvoke <android.os.Environment: java.io.File getVendorDirectory()>();

        $z2 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r3, codePath);

        if $z2 == 0 goto label3;

        codeRoot#1 = staticinvoke <android.os.Environment: java.io.File getVendorDirectory()>();

        goto label8;

     label3:
        f#2 = virtualinvoke codePath.<java.io.File: java.io.File getCanonicalFile()>();

        parent#3 = virtualinvoke f#2.<java.io.File: java.io.File getParentFile()>();

     label4:
        $r4 = virtualinvoke parent#3.<java.io.File: java.io.File getParentFile()>();

        tmp = $r4;

        if $r4 == null goto label5;

        f#2 = parent#3;

        parent#3 = tmp;

        goto label4;

     label5:
        codeRoot#1 = f#2;

        $r5 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized code path ");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(codePath);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - using ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(codeRoot#1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r10);

     label6:
        goto label8;

     label7:
        $r13 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t canonicalize code path ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(codePath);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r17);

        $r15 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        $r18 = virtualinvoke $r15.<java.io.File: java.lang.String getPath()>();

        return $r18;

     label8:
        $r11 = virtualinvoke codeRoot#1.<java.io.File: java.lang.String getPath()>();

        return $r11;

        catch java.io.IOException from label3 to label6 with label7;
    }

    private void setNativeLibraryPaths(android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg;
        android.content.pm.ApplicationInfo info;
        java.lang.String codePath, apkName, libDir, secondaryLibDir, $r1, $r3, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r14, $r17, $r18, $r20, $r21, $r27, $r28, $r29, apkRoot#3, $r31, $r32, apkRoot#6;
        java.io.File codeFile, $r0, $r2, $r4, $r7, $r13, $r15, $r16, $r19, $r23, $r24, $r25, $r30;
        boolean bundledApp, asecApp, is64Bit, $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String[] $r22, $r26;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        info = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        codePath = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(codePath);

        codeFile = $r0;

        $z0 = virtualinvoke info.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z0 == 0 goto label01;

        $z3 = virtualinvoke info.<android.content.pm.ApplicationInfo: boolean isUpdatedSystemApp()>();

        if $z3 != 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        bundledApp = $z5;

        $z1 = virtualinvoke info.<android.content.pm.ApplicationInfo: boolean isForwardLocked()>();

        if $z1 != 0 goto label03;

        $z4 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isExternal(android.content.pm.ApplicationInfo)>(info);

        if $z4 == 0 goto label04;

     label03:
        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        asecApp = $z6;

        info.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir> = null;

        info.<android.content.pm.ApplicationInfo: boolean nativeLibraryRootRequiresIsa> = 0;

        info.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir> = null;

        info.<android.content.pm.ApplicationInfo: java.lang.String secondaryNativeLibraryDir> = null;

        $z2 = staticinvoke <android.content.pm.PackageParser: boolean isApkFile(java.io.File)>(codeFile);

        if $z2 == 0 goto label14;

        if bundledApp == 0 goto label11;

        $r21 = info.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        apkRoot#3 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String calculateBundledApkRoot(java.lang.String)>($r21);

        $r20 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getPrimaryInstructionSet(android.content.pm.ApplicationInfo)>(info);

        is64Bit = staticinvoke <dalvik.system.VMRuntime: boolean is64BitInstructionSet(java.lang.String)>($r20);

        apkName = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String deriveCodePathName(java.lang.String)>(codePath);

        if is64Bit == 0 goto label06;

        $r31 = "lib64";

        goto label07;

     label06:
        $r31 = "lib";

     label07:
        libDir = $r31;

        $r24 = new java.io.File;

        specialinvoke $r24.<java.io.File: void <init>(java.lang.String)>(apkRoot#3);

        $r22 = newarray (java.lang.String)[2];

        $r22[0] = libDir;

        $r22[1] = apkName;

        $r23 = staticinvoke <android.os.Environment: java.io.File buildPath(java.io.File,java.lang.String[])>($r24, $r22);

        $r27 = virtualinvoke $r23.<java.io.File: java.lang.String getAbsolutePath()>();

        info.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir> = $r27;

        $r28 = info.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        if $r28 == null goto label10;

        if is64Bit == 0 goto label08;

        $r32 = "lib";

        goto label09;

     label08:
        $r32 = "lib64";

     label09:
        secondaryLibDir = $r32;

        $r25 = new java.io.File;

        specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>(apkRoot#3);

        $r26 = newarray (java.lang.String)[2];

        $r26[0] = secondaryLibDir;

        $r26[1] = apkName;

        $r30 = staticinvoke <android.os.Environment: java.io.File buildPath(java.io.File,java.lang.String[])>($r25, $r26);

        $r29 = virtualinvoke $r30.<java.io.File: java.lang.String getAbsolutePath()>();

        info.<android.content.pm.ApplicationInfo: java.lang.String secondaryNativeLibraryDir> = $r29;

     label10:
        goto label13;

     label11:
        if asecApp == 0 goto label12;

        $r19 = new java.io.File;

        $r16 = virtualinvoke codeFile.<java.io.File: java.io.File getParentFile()>();

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, "lib");

        $r17 = virtualinvoke $r19.<java.io.File: java.lang.String getAbsolutePath()>();

        info.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir> = $r17;

        goto label13;

     label12:
        apkRoot#6 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String deriveCodePathName(java.lang.String)>(codePath);

        $r13 = new java.io.File;

        $r15 = this.<com.android.server.pm.PackageManagerService: java.io.File mAppLib32InstallDir>;

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, apkRoot#6);

        $r14 = virtualinvoke $r13.<java.io.File: java.lang.String getAbsolutePath()>();

        info.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir> = $r14;

     label13:
        info.<android.content.pm.ApplicationInfo: boolean nativeLibraryRootRequiresIsa> = 0;

        $r18 = info.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir>;

        info.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir> = $r18;

        goto label15;

     label14:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(codeFile, "lib");

        $r1 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        info.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir> = $r1;

        info.<android.content.pm.ApplicationInfo: boolean nativeLibraryRootRequiresIsa> = 1;

        $r4 = new java.io.File;

        $r3 = info.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir>;

        $r6 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getPrimaryInstructionSet(android.content.pm.ApplicationInfo)>(info);

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r3, $r6);

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        info.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir> = $r5;

        $r8 = info.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        if $r8 == null goto label15;

        $r7 = new java.io.File;

        $r9 = info.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryRootDir>;

        $r10 = info.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        $r12 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r10);

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r9, $r12);

        $r11 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        info.<android.content.pm.ApplicationInfo: java.lang.String secondaryNativeLibraryDir> = $r11;

     label15:
        return;
    }

    private void setBundledAppAbisAndRoots(android.content.pm.PackageParser$Package, com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.PackageSetting pkgSetting;
        java.lang.String apkName, apkRoot, $r1, $r3, $r5, $r7;
        android.content.pm.ApplicationInfo $r0, $r2, $r4, $r6;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        pkgSetting := @parameter1: com.android.server.pm.PackageSetting;

        $r0 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r1 = virtualinvoke $r0.<android.content.pm.ApplicationInfo: java.lang.String getCodePath()>();

        apkName = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String deriveCodePathName(java.lang.String)>($r1);

        $r2 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r3 = $r2.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        apkRoot = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String calculateBundledApkRoot(java.lang.String)>($r3);

        staticinvoke <com.android.server.pm.PackageManagerService: void setBundledAppAbi(android.content.pm.PackageParser$Package,java.lang.String,java.lang.String)>(pkg, apkRoot, apkName);

        if pkgSetting == null goto label1;

        $r4 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r5 = $r4.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        pkgSetting.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString> = $r5;

        $r6 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r7 = $r6.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        pkgSetting.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString> = $r7;

     label1:
        return;
    }

    private static void setBundledAppAbi(android.content.pm.PackageParser$Package, java.lang.String, java.lang.String)
    {
        android.content.pm.PackageParser$Package pkg;
        java.lang.String apkRoot, apkName, $r1, $r8, $r11, $r12, $r17, $r21, $r26, $r27, $r29, $r32, $r36, $r38, $r41, $r43, $r49, isa#3, isa#4;
        java.io.File codeFile, rootDir, $r0, $r2, $r40, $r44, $r45, $r46, $r47, $r48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, has64BitLibs#1, has32BitLibs#2;
        java.lang.String[] $r3, $r4, $r9, $r13, $r14, $r20, $r25, $r28, $r33, $r37, $r39, $r42;
        android.content.pm.ApplicationInfo $r5, $r6, $r7, $r10, $r15, $r16, $r18, $r30, $r31, $r34, $r35;
        int $i0, $i1;
        java.lang.StringBuilder $r19, $r22, $r23, $r24;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        apkRoot := @parameter1: java.lang.String;

        apkName := @parameter2: java.lang.String;

        $r0 = new java.io.File;

        $r1 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        codeFile = $r0;

        $z0 = staticinvoke <android.content.pm.PackageParser: boolean isApkFile(java.io.File)>(codeFile);

        if $z0 == 0 goto label01;

        $r47 = new java.io.File;

        $r48 = new java.io.File;

        specialinvoke $r48.<java.io.File: void <init>(java.lang.String,java.lang.String)>("lib64", apkName);

        $r43 = virtualinvoke $r48.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r47.<java.io.File: void <init>(java.lang.String,java.lang.String)>(apkRoot, $r43);

        has64BitLibs#1 = virtualinvoke $r47.<java.io.File: boolean exists()>();

        $r44 = new java.io.File;

        $r45 = new java.io.File;

        specialinvoke $r45.<java.io.File: void <init>(java.lang.String,java.lang.String)>("lib", apkName);

        $r49 = virtualinvoke $r45.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r44.<java.io.File: void <init>(java.lang.String,java.lang.String)>(apkRoot, $r49);

        has32BitLibs#2 = virtualinvoke $r44.<java.io.File: boolean exists()>();

        goto label05;

     label01:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(codeFile, "lib");

        rootDir = $r2;

        $r3 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r3);

        if $z1 != 0 goto label02;

        $r39 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $r38 = $r39[0];

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r38);

        if $z5 != 0 goto label02;

        $r42 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $r41 = $r42[0];

        isa#3 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r41);

        $r46 = new java.io.File;

        specialinvoke $r46.<java.io.File: void <init>(java.io.File,java.lang.String)>(rootDir, isa#3);

        has64BitLibs#1 = virtualinvoke $r46.<java.io.File: boolean exists()>();

        goto label03;

     label02:
        has64BitLibs#1 = 0;

     label03:
        $r4 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r4);

        if $z2 != 0 goto label04;

        $r33 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $r32 = $r33[0];

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r32);

        if $z4 != 0 goto label04;

        $r37 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $r36 = $r37[0];

        isa#4 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r36);

        $r40 = new java.io.File;

        specialinvoke $r40.<java.io.File: void <init>(java.io.File,java.lang.String)>(rootDir, isa#4);

        has32BitLibs#2 = virtualinvoke $r40.<java.io.File: boolean exists()>();

        goto label05;

     label04:
        has32BitLibs#2 = 0;

     label05:
        if has64BitLibs#1 == 0 goto label06;

        if has32BitLibs#2 != 0 goto label06;

        $r35 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r28 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $r29 = $r28[0];

        $r35.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r29;

        $r34 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r34.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi> = null;

        goto label11;

     label06:
        if has32BitLibs#2 == 0 goto label07;

        if has64BitLibs#1 != 0 goto label07;

        $r30 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r25 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $r26 = $r25[0];

        $r30.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r26;

        $r31 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r31.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi> = null;

        goto label11;

     label07:
        if has32BitLibs#2 == 0 goto label10;

        if has64BitLibs#1 == 0 goto label10;

        $r7 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r7.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & -2147483648;

        if $i1 != 0 goto label08;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package: ");

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(pkg);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has multiple bundled libs, but is not multiarch.");

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r27);

     label08:
        $r8 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getPreferredInstructionSet()>();

        $z3 = staticinvoke <dalvik.system.VMRuntime: boolean is64BitInstructionSet(java.lang.String)>($r8);

        if $z3 == 0 goto label09;

        $r16 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r14 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $r17 = $r14[0];

        $r16.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r17;

        $r18 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r20 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $r21 = $r20[0];

        $r18.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi> = $r21;

        goto label11;

     label09:
        $r10 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r9 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $r11 = $r9[0];

        $r10.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r11;

        $r15 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r13 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $r12 = $r13[0];

        $r15.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi> = $r12;

        goto label11;

     label10:
        $r6 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r6.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = null;

        $r5 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r5.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi> = null;

     label11:
        return;
    }

    private void killApplication(java.lang.String, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String pkgName, reason;
        int appId;
        android.app.IActivityManager am;
        android.os.RemoteException l5, $r0;

        this := @this: com.android.server.pm.PackageManagerService;

        pkgName := @parameter0: java.lang.String;

        appId := @parameter1: int;

        reason := @parameter2: java.lang.String;

        am = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        if am == null goto label4;

     label1:
        interfaceinvoke am.<android.app.IActivityManager: void killApplicationWithAppId(java.lang.String,int,java.lang.String)>(pkgName, appId, reason);

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void removePackageLI(com.android.server.pm.PackageSetting, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting ps;
        boolean chatty;
        android.util.ArrayMap l3, $r0, $r2;
        android.content.pm.PackageParser$Package pkg;
        java.lang.Throwable l5, $r4;
        java.lang.String $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        ps := @parameter0: com.android.server.pm.PackageSetting;

        chatty := @parameter1: boolean;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r1 = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r1);

        pkg = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if pkg == null goto label2;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void cleanPackageDataStructuresLILPw(android.content.pm.PackageParser$Package,boolean)>(pkg, chatty);

     label2:
        exitmonitor l3;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        l5 = $r4;

        exitmonitor l3;

     label5:
        throw l5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void removeInstalledPackageLI(android.content.pm.PackageParser$Package, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg;
        boolean chatty;
        android.util.ArrayMap l3, $r0, $r3;
        java.lang.Throwable l4, $r5;
        android.content.pm.ApplicationInfo $r1;
        java.lang.String $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        chatty := @parameter1: boolean;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r1 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r2 = $r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r2);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void cleanPackageDataStructuresLILPw(android.content.pm.PackageParser$Package,boolean)>(pkg, 1);

        exitmonitor l3;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        l4 = $r5;

        exitmonitor l3;

     label4:
        throw l4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void cleanPackageDataStructuresLILPw(android.content.pm.PackageParser$Package, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg;
        boolean chatty, $z0, $z1;
        java.util.ArrayList $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r17, $r24, $r31, $r53, $r55, $r56, $r60;
        android.content.pm.ApplicationInfo $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, N#1, i#3, j#6, N#7, i#9, N#11, i#13, N#15, i#17, N#19, i#21, N#25, i#27, N#31, i#33, i#36;
        android.util.ArrayMap $r11, $r18, $r21, $r23, $r26, $r32, $r33, $r39, $r45, $r71, $r72;
        java.lang.Object $r12, $r15, $r20, $r25, $r27, $r29, $r30, $r40, $r41, $r46, $r51, $r52, $r54, $r59, $r73;
        java.lang.String $r13, $r14, $r16, $r28, $r34, $r38, $r44, $r47, $r62, $r64, $r65, $r66, $r70, p#28, p#37;
        android.content.ComponentName $r19;
        com.android.server.pm.Settings $r22, $r36, $r49;
        android.content.pm.PermissionInfo $r35, $r37, $r42, $r43;
        android.content.pm.PackageParser$Permission $r48, p#22;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r50, $r57;
        java.lang.StringBuilder $r58, r#8;
        com.android.server.pm.PackageManagerService$ServiceIntentResolver $r61;
        android.content.pm.ServiceInfo $r63;
        android.content.pm.ProviderInfo $r67, $r69;
        com.android.server.pm.PackageManagerService$ProviderIntentResolver $r68;
        android.content.pm.PackageParser$Provider p#4;
        java.lang.String[] names#5;
        android.content.pm.PackageParser$Service p#10;
        android.content.pm.PackageParser$Activity p#14, p#18;
        com.android.server.pm.BasePermission names#23, names#29;
        android.util.ArraySet j#24, j#30;
        android.content.pm.PackageParser$Instrumentation p#34;
        com.android.server.pm.PackageManagerService$SharedLibraryEntry names#38;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        chatty := @parameter1: boolean;

        $r0 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList providers>;

        N#1 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        i#3 = 0;

     label01:
        if i#3 >= N#1 goto label06;

        $r60 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList providers>;

        $r59 = virtualinvoke $r60.<java.util.ArrayList: java.lang.Object get(int)>(i#3);

        p#4 = (android.content.pm.PackageParser$Provider) $r59;

        $r68 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ProviderIntentResolver mProviders>;

        virtualinvoke $r68.<com.android.server.pm.PackageManagerService$ProviderIntentResolver: void removeProvider(android.content.pm.PackageParser$Provider)>(p#4);

        $r69 = p#4.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r66 = $r69.<android.content.pm.ProviderInfo: java.lang.String authority>;

        if $r66 != null goto label02;

        goto label05;

     label02:
        $r67 = p#4.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r65 = $r67.<android.content.pm.ProviderInfo: java.lang.String authority>;

        names#5 = virtualinvoke $r65.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        j#6 = 0;

     label03:
        $i7 = lengthof names#5;

        if j#6 >= $i7 goto label05;

        $r72 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mProvidersByAuthority>;

        $r64 = names#5[j#6];

        $r73 = virtualinvoke $r72.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r64);

        if $r73 != p#4 goto label04;

        $r71 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mProvidersByAuthority>;

        $r70 = names#5[j#6];

        virtualinvoke $r71.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r70);

     label04:
        j#6 = j#6 + 1;

        goto label03;

     label05:
        i#3 = i#3 + 1;

        goto label01;

     label06:
        goto label07;

     label07:
        $r1 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList services>;

        N#7 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        r#8 = null;

        i#9 = 0;

     label08:
        if i#9 >= N#7 goto label12;

        $r53 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList services>;

        $r52 = virtualinvoke $r53.<java.util.ArrayList: java.lang.Object get(int)>(i#9);

        p#10 = (android.content.pm.PackageParser$Service) $r52;

        $r61 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ServiceIntentResolver mServices>;

        virtualinvoke $r61.<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void removeService(android.content.pm.PackageParser$Service)>(p#10);

        if chatty == 0 goto label11;

        if r#8 != null goto label09;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>(int)>(256);

        r#8 = $r58;

        goto label10;

     label09:
        virtualinvoke r#8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label10:
        $r63 = p#10.<android.content.pm.PackageParser$Service: android.content.pm.ServiceInfo info>;

        $r62 = $r63.<android.content.pm.ServiceInfo: java.lang.String name>;

        virtualinvoke r#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

     label11:
        i#9 = i#9 + 1;

        goto label08;

     label12:
        if r#8 == null goto label13;

     label13:
        $r2 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList receivers>;

        N#11 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i#13 = 0;

     label14:
        if i#13 >= N#11 goto label15;

        $r56 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList receivers>;

        $r51 = virtualinvoke $r56.<java.util.ArrayList: java.lang.Object get(int)>(i#13);

        p#14 = (android.content.pm.PackageParser$Activity) $r51;

        $r50 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mReceivers>;

        virtualinvoke $r50.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void removeActivity(android.content.pm.PackageParser$Activity,java.lang.String)>(p#14, "receiver");

        i#13 = i#13 + 1;

        goto label14;

     label15:
        goto label16;

     label16:
        $r3 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        N#15 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i#17 = 0;

     label17:
        if i#17 >= N#15 goto label18;

        $r55 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        $r54 = virtualinvoke $r55.<java.util.ArrayList: java.lang.Object get(int)>(i#17);

        p#18 = (android.content.pm.PackageParser$Activity) $r54;

        $r57 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities>;

        virtualinvoke $r57.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void removeActivity(android.content.pm.PackageParser$Activity,java.lang.String)>(p#18, "activity");

        i#17 = i#17 + 1;

        goto label17;

     label18:
        goto label19;

     label19:
        $r4 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList permissions>;

        N#19 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i#21 = 0;

     label20:
        if i#21 >= N#19 goto label24;

        $r31 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList permissions>;

        $r30 = virtualinvoke $r31.<java.util.ArrayList: java.lang.Object get(int)>(i#21);

        p#22 = (android.content.pm.PackageParser$Permission) $r30;

        $r36 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r33 = $r36.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r35 = p#22.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r34 = $r35.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r41 = virtualinvoke $r33.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r34);

        names#23 = (com.android.server.pm.BasePermission) $r41;

        if names#23 != null goto label21;

        $r49 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r45 = $r49.<com.android.server.pm.Settings: android.util.ArrayMap mPermissionTrees>;

        $r43 = p#22.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r44 = $r43.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r46 = virtualinvoke $r45.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r44);

        names#23 = (com.android.server.pm.BasePermission) $r46;

     label21:
        if names#23 == null goto label22;

        $r48 = names#23.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        if $r48 != p#22 goto label22;

        names#23.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm> = null;

     label22:
        $r42 = p#22.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $i5 = $r42.<android.content.pm.PermissionInfo: int protectionLevel>;

        $i6 = $i5 & 64;

        if $i6 == 0 goto label23;

        $r39 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAppOpPermissionPackages>;

        $r37 = p#22.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r38 = $r37.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r40 = virtualinvoke $r39.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r38);

        j#24 = (android.util.ArraySet) $r40;

        if j#24 == null goto label23;

        $r47 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke j#24.<android.util.ArraySet: boolean remove(java.lang.Object)>($r47);

     label23:
        i#21 = i#21 + 1;

        goto label20;

     label24:
        goto label25;

     label25:
        $r5 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        N#25 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i#27 = 0;

     label26:
        if i#27 >= N#25 goto label28;

        $r24 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        $r25 = virtualinvoke $r24.<java.util.ArrayList: java.lang.Object get(int)>(i#27);

        p#28 = (java.lang.String) $r25;

        $r22 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r23 = $r22.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r27 = virtualinvoke $r23.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(p#28);

        names#29 = (com.android.server.pm.BasePermission) $r27;

        if names#29 == null goto label27;

        $i4 = names#29.<com.android.server.pm.BasePermission: int protectionLevel>;

        $i3 = $i4 & 64;

        if $i3 == 0 goto label27;

        $r26 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAppOpPermissionPackages>;

        $r29 = virtualinvoke $r26.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(p#28);

        j#30 = (android.util.ArraySet) $r29;

        if j#30 == null goto label27;

        $r28 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke j#30.<android.util.ArraySet: boolean remove(java.lang.Object)>($r28);

        $z1 = virtualinvoke j#30.<android.util.ArraySet: boolean isEmpty()>();

        if $z1 == 0 goto label27;

        $r32 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAppOpPermissionPackages>;

        virtualinvoke $r32.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(p#28);

     label27:
        i#27 = i#27 + 1;

        goto label26;

     label28:
        goto label29;

     label29:
        $r6 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList instrumentation>;

        N#31 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i#33 = 0;

     label30:
        if i#33 >= N#31 goto label31;

        $r17 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList instrumentation>;

        $r20 = virtualinvoke $r17.<java.util.ArrayList: java.lang.Object get(int)>(i#33);

        p#34 = (android.content.pm.PackageParser$Instrumentation) $r20;

        $r21 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation>;

        $r19 = virtualinvoke p#34.<android.content.pm.PackageParser$Instrumentation: android.content.ComponentName getComponentName()>();

        virtualinvoke $r21.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r19);

        i#33 = i#33 + 1;

        goto label30;

     label31:
        goto label32;

     label32:
        $r7 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r7.<android.content.pm.ApplicationInfo: int flags>;

        $i0 = $i1 & 1;

        if $i0 == 0 goto label35;

        $r9 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList libraryNames>;

        if $r9 == null goto label35;

        i#36 = 0;

     label33:
        $r8 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList libraryNames>;

        $i2 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if i#36 >= $i2 goto label35;

        $r10 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList libraryNames>;

        $r12 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i#36);

        p#37 = (java.lang.String) $r12;

        $r11 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r15 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(p#37);

        names#38 = (com.android.server.pm.PackageManagerService$SharedLibraryEntry) $r15;

        if names#38 == null goto label34;

        $r16 = names#38.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String apk>;

        if $r16 == null goto label34;

        $r14 = names#38.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String apk>;

        $r13 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label34;

        $r18 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(p#37);

     label34:
        i#36 = i#36 + 1;

        goto label33;

     label35:
        goto label36;

     label36:
        return;
    }

    private static boolean hasPermission(android.content.pm.PackageParser$Package, java.lang.String)
    {
        android.content.pm.PackageParser$Package pkgInfo;
        java.lang.String perm, $r5;
        java.util.ArrayList $r0, $r1;
        int $i0, i#1;
        java.lang.Object $r2;
        android.content.pm.PackageParser$Permission $r3;
        android.content.pm.PermissionInfo $r4;
        boolean $z0;

        pkgInfo := @parameter0: android.content.pm.PackageParser$Package;

        perm := @parameter1: java.lang.String;

        $r0 = pkgInfo.<android.content.pm.PackageParser$Package: java.util.ArrayList permissions>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        i#1 = $i0 - 1;

     label1:
        if i#1 < 0 goto label3;

        $r1 = pkgInfo.<android.content.pm.PackageParser$Package: java.util.ArrayList permissions>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i#1);

        $r3 = (android.content.pm.PackageParser$Permission) $r2;

        $r4 = $r3.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r5 = $r4.<android.content.pm.PermissionInfo: java.lang.String name>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(perm);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i#1 = i#1 + -1;

        goto label1;

     label3:
        return 0;
    }

    private void updatePermissionsLPw(java.lang.String, android.content.pm.PackageParser$Package, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String changingPkg, $r11, $r16, $r17, $r19, $r21, $r24, $r27, $r29, $r34, $r35, $r47, $r51, $r57, $r59, $r61, $r63, $r64, $r67, $r68, $r74, $r78;
        android.content.pm.PackageParser$Package pkgInfo, $r40, tree#8;
        com.android.server.pm.Settings $r0, $r3, $r28, $r76;
        android.util.ArrayMap $r1, $r4, $r7, $r33, $r75;
        java.util.Collection $r2, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i2, $i3, $i6, flags#1;
        java.lang.Object $r8, $r9, $r32, $r56, $r72;
        com.android.server.pm.PackageSettingBase $r10, $r12, $r31, $r37, $r43, $r55, $r58, $r73;
        java.lang.StringBuilder $r13, $r14, $r15, $r18, $r20, $r22, $r23, $r25, $r26, $r30, $r53, $r54, $r60, $r62, $r65, $r66, $r69, $r70, $r71, $r77;
        android.content.pm.PermissionInfo $r36, $r38, $r39, $r48, $r50, $r52;
        android.content.pm.PackageParser$Permission $r41, $r42, $r44, $r45, $r46, $r49;
        java.util.Iterator it#2, it#4, bp#7;
        com.android.server.pm.BasePermission bp#3, bp#5, tree#6;

        this := @this: com.android.server.pm.PackageManagerService;

        changingPkg := @parameter0: java.lang.String;

        pkgInfo := @parameter1: android.content.pm.PackageParser$Package;

        flags#1 := @parameter2: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r1 = $r0.<com.android.server.pm.Settings: android.util.ArrayMap mPermissionTrees>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.util.Collection values()>();

        it#2 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke it#2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r56 = interfaceinvoke it#2.<java.util.Iterator: java.lang.Object next()>();

        bp#3 = (com.android.server.pm.BasePermission) $r56;

        $r55 = bp#3.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        if $r55 != null goto label02;

        $r76 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r75 = $r76.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r74 = bp#3.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r72 = virtualinvoke $r75.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r74);

        $r73 = (com.android.server.pm.PackageSettingBase) $r72;

        bp#3.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting> = $r73;

     label02:
        $r58 = bp#3.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        if $r58 != null goto label03;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing dangling permission tree: ");

        $r68 = bp#3.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r66 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r67 = bp#3.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r77 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r78);

        interfaceinvoke it#2.<java.util.Iterator: void remove()>();

        goto label05;

     label03:
        if changingPkg == null goto label05;

        $r57 = bp#3.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $z5 = virtualinvoke changingPkg.<java.lang.String: boolean equals(java.lang.Object)>($r57);

        if $z5 == 0 goto label05;

        if pkgInfo == null goto label04;

        $r61 = bp#3.<com.android.server.pm.BasePermission: java.lang.String name>;

        $z6 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasPermission(android.content.pm.PackageParser$Package,java.lang.String)>(pkgInfo, $r61);

        if $z6 != 0 goto label05;

     label04:
        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing old permission tree: ");

        $r63 = bp#3.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r62 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r64 = bp#3.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r60 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r59);

        flags#1 = flags#1 | 1;

        interfaceinvoke it#2.<java.util.Iterator: void remove()>();

     label05:
        goto label01;

     label06:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.util.Collection values()>();

        it#4 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke it#4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r9 = interfaceinvoke it#4.<java.util.Iterator: java.lang.Object next()>();

        bp#5 = (com.android.server.pm.BasePermission) $r9;

        $i3 = bp#5.<com.android.server.pm.BasePermission: int type>;

        if $i3 != 2 goto label08;

        $r37 = bp#5.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        if $r37 != null goto label08;

        $r36 = bp#5.<com.android.server.pm.BasePermission: android.content.pm.PermissionInfo pendingInfo>;

        if $r36 == null goto label08;

        $r35 = bp#5.<com.android.server.pm.BasePermission: java.lang.String name>;

        tree#6 = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.BasePermission findPermissionTreeLP(java.lang.String)>($r35);

        if tree#6 == null goto label08;

        $r42 = tree#6.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        if $r42 == null goto label08;

        $r43 = tree#6.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        bp#5.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting> = $r43;

        $r44 = new android.content.pm.PackageParser$Permission;

        $r45 = tree#6.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r40 = $r45.<android.content.pm.PackageParser$Permission: android.content.pm.PackageParser$Package owner>;

        $r38 = new android.content.pm.PermissionInfo;

        $r39 = bp#5.<com.android.server.pm.BasePermission: android.content.pm.PermissionInfo pendingInfo>;

        specialinvoke $r38.<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)>($r39);

        specialinvoke $r44.<android.content.pm.PackageParser$Permission: void <init>(android.content.pm.PackageParser$Package,android.content.pm.PermissionInfo)>($r40, $r38);

        bp#5.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm> = $r44;

        $r41 = bp#5.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r52 = $r41.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r49 = tree#6.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r50 = $r49.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r51 = $r50.<android.content.pm.PermissionInfo: java.lang.String packageName>;

        $r52.<android.content.pm.PermissionInfo: java.lang.String packageName> = $r51;

        $r46 = bp#5.<com.android.server.pm.BasePermission: android.content.pm.PackageParser$Permission perm>;

        $r48 = $r46.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r47 = bp#5.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r48.<android.content.pm.PermissionInfo: java.lang.String name> = $r47;

        $i6 = tree#6.<com.android.server.pm.BasePermission: int uid>;

        bp#5.<com.android.server.pm.BasePermission: int uid> = $i6;

     label08:
        $r10 = bp#5.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        if $r10 != null goto label09;

        $r28 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r33 = $r28.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r34 = bp#5.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r32 = virtualinvoke $r33.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r34);

        $r31 = (com.android.server.pm.PackageSettingBase) $r32;

        bp#5.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting> = $r31;

     label09:
        $r12 = bp#5.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        if $r12 != null goto label10;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing dangling permission: ");

        $r27 = bp#5.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r24 = bp#5.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r29);

        interfaceinvoke it#4.<java.util.Iterator: void remove()>();

        goto label12;

     label10:
        if changingPkg == null goto label12;

        $r11 = bp#5.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $z3 = virtualinvoke changingPkg.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label12;

        if pkgInfo == null goto label11;

        $r19 = bp#5.<com.android.server.pm.BasePermission: java.lang.String name>;

        $z4 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasPermission(android.content.pm.PackageParser$Package,java.lang.String)>(pkgInfo, $r19);

        if $z4 != 0 goto label12;

     label11:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing old permission: ");

        $r17 = bp#5.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r16 = bp#5.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r21);

        flags#1 = flags#1 | 1;

        interfaceinvoke it#4.<java.util.Iterator: void remove()>();

     label12:
        goto label07;

     label13:
        $i0 = flags#1 & 1;

        if $i0 == 0 goto label18;

        $r7 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r7.<android.util.ArrayMap: java.util.Collection values()>();

        bp#7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label14:
        $z2 = interfaceinvoke bp#7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label18;

        $r8 = interfaceinvoke bp#7.<java.util.Iterator: java.lang.Object next()>();

        tree#8 = (android.content.pm.PackageParser$Package) $r8;

        if tree#8 == pkgInfo goto label17;

        $i2 = flags#1 & 4;

        if $i2 == 0 goto label15;

        $z7 = 1;

        goto label16;

     label15:
        $z7 = 0;

     label16:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void grantPermissionsLPw(android.content.pm.PackageParser$Package,boolean,java.lang.String)>(tree#8, $z7, changingPkg);

     label17:
        goto label14;

     label18:
        if pkgInfo == null goto label21;

        $i1 = flags#1 & 2;

        if $i1 == 0 goto label19;

        $z8 = 1;

        goto label20;

     label19:
        $z8 = 0;

     label20:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void grantPermissionsLPw(android.content.pm.PackageParser$Package,boolean,java.lang.String)>(pkgInfo, $z8, changingPkg);

     label21:
        return;
    }

    private void grantPermissionsLPw(android.content.pm.PackageParser$Package, boolean, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg;
        boolean replace, $z0, $z1, $z2, $z3, $z4, $z6, $z11, $z12, $z13, $z14, $z15, $z17, $z18, $z19, $z20, $z21, changedInstallPermission#3, allowedSig#8;
        java.lang.String packageOfInterest, $r14, $r16, $r18, $r20, $r26, $r30, $r34, $r36, $r42, $r43, $r49, $r51, $r52, $r53, $r56, $r60, $r64, $r67, $r69, $r72, $r73, $r75, name#5, perm#7;
        com.android.server.pm.PackageSetting ps;
        com.android.server.pm.PermissionsState permissionsState, $r76, origPermissions#1;
        int[] currentUserIds, $r3, changedRuntimePermissionUserIds#2, arr$#12, arr$#16, i$#26, i#30;
        int N, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i13, $i15, $i16, $i17, $i18, $i19, $i20, i#4, pkgs#11, len$#13, i$#14, userId#15, len$#17, i$#18, userId#19, $i22, flags#22, $i23, len$#25, userId#27, permissionState#28, flags#29, name#31, bp#32, perm#33;
        java.lang.Object $r0, $r7, $r8, $r66;
        com.android.server.pm.UserManagerService $r1, $r50, $r54;
        java.util.ArrayList $r2, $r4;
        com.android.server.pm.Settings $r5, $r9;
        android.util.ArrayMap $r6, $r65, $r70;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15, $r19, $r21, $r22, $r23, $r24, $r27, $r28, $r29, $r31, $r32, $r33, $r35, $r37, $r38, $r39, $r40, $r41, $r44, $r45, $r46, $r55, $r58, $r59, $r61, $r62, $r63;
        com.android.server.pm.PackageSettingBase $r17;
        android.content.pm.ApplicationInfo $r25, $r47, $r57;
        com.android.server.pm.PermissionsState$PermissionState $r48, permissionState#20, arr$#23;
        android.util.ArraySet $r68, $r74, pkgs#10;
        com.android.server.pm.BasePermission bp#6;
        byte grant#9;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        replace := @parameter1: boolean;

        packageOfInterest := @parameter2: java.lang.String;

        $r0 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        ps = (com.android.server.pm.PackageSetting) $r0;

        if ps != null goto label01;

        return;

     label01:
        permissionsState = virtualinvoke ps.<com.android.server.pm.PackageSetting: com.android.server.pm.PermissionsState getPermissionsState()>();

        origPermissions#1 = permissionsState;

        $r1 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        currentUserIds = virtualinvoke $r1.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        changedRuntimePermissionUserIds#2 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        changedInstallPermission#3 = 0;

        if replace == 0 goto label02;

        ps.<com.android.server.pm.PackageSetting: boolean installPermissionsFixed> = 0;

        $z21 = virtualinvoke ps.<com.android.server.pm.PackageSetting: boolean isSharedUser()>();

        if $z21 != 0 goto label02;

        $r76 = new com.android.server.pm.PermissionsState;

        specialinvoke $r76.<com.android.server.pm.PermissionsState: void <init>(com.android.server.pm.PermissionsState)>(permissionsState);

        origPermissions#1 = $r76;

        virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: void reset()>();

     label02:
        $r3 = this.<com.android.server.pm.PackageManagerService: int[] mGlobalGids>;

        virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: void setGlobalGids(int[])>($r3);

        $r2 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        N = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i#4 = 0;

     label03:
        if i#4 >= N goto label41;

        $r4 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        $r8 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i#4);

        name#5 = (java.lang.String) $r8;

        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r9.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(name#5);

        bp#6 = (com.android.server.pm.BasePermission) $r7;

        if bp#6 == null goto label04;

        $r17 = bp#6.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        if $r17 != null goto label06;

     label04:
        if packageOfInterest == null goto label05;

        $r18 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z3 = virtualinvoke packageOfInterest.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z3 == 0 goto label40;

     label05:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name#5);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in package ");

        $r16 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r14);

        goto label40;

     label06:
        perm#7 = bp#6.<com.android.server.pm.BasePermission: java.lang.String name>;

        allowedSig#8 = 0;

        grant#9 = 1;

        $i4 = bp#6.<com.android.server.pm.BasePermission: int protectionLevel>;

        $i3 = $i4 & 64;

        if $i3 == 0 goto label08;

        $r65 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAppOpPermissionPackages>;

        $r75 = bp#6.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r66 = virtualinvoke $r65.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r75);

        pkgs#10 = (android.util.ArraySet) $r66;

        if pkgs#10 != null goto label07;

        $r68 = new android.util.ArraySet;

        specialinvoke $r68.<android.util.ArraySet: void <init>()>();

        pkgs#10 = $r68;

        $r70 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAppOpPermissionPackages>;

        $r69 = bp#6.<com.android.server.pm.BasePermission: java.lang.String name>;

        virtualinvoke $r70.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r69, pkgs#10);

     label07:
        $r67 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke pkgs#10.<android.util.ArraySet: boolean add(java.lang.Object)>($r67);

     label08:
        $i2 = bp#6.<com.android.server.pm.BasePermission: int protectionLevel>;

        pkgs#11 = $i2 & 15;

        tableswitch(pkgs#11)
        {
            case 0: goto label09;
            case 1: goto label10;
            case 2: goto label14;
            default: goto label15;
        };

     label09:
        grant#9 = 2;

        goto label15;

     label10:
        $r57 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i20 = $r57.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i20 > 22 goto label11;

        grant#9 = 3;

        goto label15;

     label11:
        $r72 = bp#6.<com.android.server.pm.BasePermission: java.lang.String name>;

        $z17 = virtualinvoke origPermissions#1.<com.android.server.pm.PermissionsState: boolean hasInstallPermission(java.lang.String)>($r72);

        if $z17 == 0 goto label12;

        grant#9 = 5;

        goto label15;

     label12:
        $z18 = this.<com.android.server.pm.PackageManagerService: boolean mPromoteSystemApps>;

        if $z18 == 0 goto label13;

        $z19 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(ps);

        if $z19 == 0 goto label13;

        $r74 = this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mExistingSystemPackages>;

        $r73 = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z20 = virtualinvoke $r74.<android.util.ArraySet: boolean contains(java.lang.Object)>($r73);

        if $z20 == 0 goto label13;

        grant#9 = 5;

        goto label15;

     label13:
        grant#9 = 4;

        goto label15;

     label14:
        allowedSig#8 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean grantSignaturePermission(java.lang.String,android.content.pm.PackageParser$Package,com.android.server.pm.BasePermission,com.android.server.pm.PermissionsState)>(perm#7, pkg, bp#6, origPermissions#1);

        if allowedSig#8 == 0 goto label15;

        grant#9 = 2;

     label15:
        if grant#9 == 1 goto label37;

        $z6 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(ps);

        if $z6 != 0 goto label16;

        $z14 = ps.<com.android.server.pm.PackageSetting: boolean installPermissionsFixed>;

        if $z14 == 0 goto label16;

        if allowedSig#8 != 0 goto label16;

        $z13 = virtualinvoke origPermissions#1.<com.android.server.pm.PermissionsState: boolean hasInstallPermission(java.lang.String)>(perm#7);

        if $z13 != 0 goto label16;

        $z15 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean isNewPlatformPermissionForPackage(java.lang.String,android.content.pm.PackageParser$Package)>(perm#7, pkg);

        if $z15 != 0 goto label16;

        grant#9 = 1;

     label16:
        tableswitch(grant#9)
        {
            case 2: goto label17;
            case 3: goto label21;
            case 4: goto label22;
            case 5: goto label28;
            default: goto label35;
        };

     label17:
        $r50 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        arr$#12 = virtualinvoke $r50.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        len$#13 = lengthof arr$#12;

        i$#14 = 0;

     label18:
        if i$#14 >= len$#13 goto label20;

        userId#15 = arr$#12[i$#14];

        $r49 = bp#6.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r48 = virtualinvoke origPermissions#1.<com.android.server.pm.PermissionsState: com.android.server.pm.PermissionsState$PermissionState getRuntimePermissionState(java.lang.String,int)>($r49, userId#15);

        if $r48 == null goto label19;

        virtualinvoke origPermissions#1.<com.android.server.pm.PermissionsState: int revokeRuntimePermission(com.android.server.pm.BasePermission,int)>(bp#6, userId#15);

        virtualinvoke origPermissions#1.<com.android.server.pm.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.BasePermission,int,int,int)>(bp#6, userId#15, 255, 0);

        changedRuntimePermissionUserIds#2 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(changedRuntimePermissionUserIds#2, userId#15);

     label19:
        i$#14 = i$#14 + 1;

        goto label18;

     label20:
        $i13 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int grantInstallPermission(com.android.server.pm.BasePermission)>(bp#6);

        if $i13 == -1 goto label40;

        changedInstallPermission#3 = 1;

        goto label40;

     label21:
        $i18 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int grantInstallPermission(com.android.server.pm.BasePermission)>(bp#6);

        if $i18 == -1 goto label40;

        changedInstallPermission#3 = 1;

        goto label40;

     label22:
        $r54 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        arr$#16 = virtualinvoke $r54.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        len$#17 = lengthof arr$#16;

        i$#18 = 0;

     label23:
        if i$#18 >= len$#17 goto label27;

        userId#19 = arr$#16[i$#18];

        $r53 = bp#6.<com.android.server.pm.BasePermission: java.lang.String name>;

        permissionState#20 = virtualinvoke origPermissions#1.<com.android.server.pm.PermissionsState: com.android.server.pm.PermissionsState$PermissionState getRuntimePermissionState(java.lang.String,int)>($r53, userId#19);

        if permissionState#20 == null goto label24;

        $i22 = virtualinvoke permissionState#20.<com.android.server.pm.PermissionsState$PermissionState: int getFlags()>();

        goto label25;

     label24:
        $i22 = 0;

     label25:
        flags#22 = $i22;

        $r52 = bp#6.<com.android.server.pm.BasePermission: java.lang.String name>;

        $z11 = virtualinvoke origPermissions#1.<com.android.server.pm.PermissionsState: boolean hasRuntimePermission(java.lang.String,int)>($r52, userId#19);

        if $z11 == 0 goto label26;

        $i19 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int grantRuntimePermission(com.android.server.pm.BasePermission,int)>(bp#6, userId#19);

        if $i19 != -1 goto label26;

        changedRuntimePermissionUserIds#2 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(changedRuntimePermissionUserIds#2, userId#19);

     label26:
        virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.BasePermission,int,int,int)>(bp#6, userId#19, flags#22, flags#22);

        i$#18 = i$#18 + 1;

        goto label23;

     label27:
        goto label40;

     label28:
        $r51 = bp#6.<com.android.server.pm.BasePermission: java.lang.String name>;

        arr$#23 = virtualinvoke origPermissions#1.<com.android.server.pm.PermissionsState: com.android.server.pm.PermissionsState$PermissionState getInstallPermissionState(java.lang.String)>($r51);

        if arr$#23 == null goto label29;

        $i23 = virtualinvoke arr$#23.<com.android.server.pm.PermissionsState$PermissionState: int getFlags()>();

        goto label30;

     label29:
        $i23 = 0;

     label30:
        len$#25 = $i23;

        $i16 = virtualinvoke origPermissions#1.<com.android.server.pm.PermissionsState: int revokeInstallPermission(com.android.server.pm.BasePermission)>(bp#6);

        if $i16 == -1 goto label31;

        virtualinvoke origPermissions#1.<com.android.server.pm.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.BasePermission,int,int,int)>(bp#6, -1, 255, 0);

        changedInstallPermission#3 = 1;

     label31:
        $i17 = len$#25 & 8;

        if $i17 != 0 goto label34;

        i$#26 = currentUserIds;

        userId#27 = lengthof i$#26;

        permissionState#28 = 0;

     label32:
        if permissionState#28 >= userId#27 goto label34;

        flags#29 = i$#26[permissionState#28];

        $i15 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int grantRuntimePermission(com.android.server.pm.BasePermission,int)>(bp#6, flags#29);

        if $i15 == -1 goto label33;

        virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.BasePermission,int,int,int)>(bp#6, flags#29, len$#25, len$#25);

        changedRuntimePermissionUserIds#2 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(changedRuntimePermissionUserIds#2, flags#29);

     label33:
        permissionState#28 = permissionState#28 + 1;

        goto label32;

     label34:
        goto label40;

     label35:
        if packageOfInterest == null goto label36;

        $r56 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z12 = virtualinvoke packageOfInterest.<java.lang.String: boolean equals(java.lang.Object)>($r56);

        if $z12 == 0 goto label40;

     label36:
        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not granting permission ");

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(perm#7);

        $r61 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to package ");

        $r60 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it was previously installed without");

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r64);

        goto label40;

     label37:
        $i1 = virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: int revokeInstallPermission(com.android.server.pm.BasePermission)>(bp#6);

        if $i1 == -1 goto label38;

        virtualinvoke permissionsState.<com.android.server.pm.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.BasePermission,int,int,int)>(bp#6, -1, 255, 0);

        changedInstallPermission#3 = 1;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Un-granting permission ");

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(perm#7);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r36 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r35 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (protectionLevel=");

        $i10 = bp#6.<com.android.server.pm.BasePermission: int protectionLevel>;

        $r46 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" flags=0x");

        $r47 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i11 = $r47.<android.content.pm.ApplicationInfo: int flags>;

        $r42 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i11);

        $r41 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r43);

        goto label40;

     label38:
        $i6 = bp#6.<com.android.server.pm.BasePermission: int protectionLevel>;

        $i5 = $i6 & 64;

        if $i5 != 0 goto label40;

        if packageOfInterest == null goto label39;

        $r30 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z4 = virtualinvoke packageOfInterest.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z4 == 0 goto label40;

     label39:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not granting permission ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(perm#7);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to package ");

        $r20 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r27 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (protectionLevel=");

        $i8 = bp#6.<com.android.server.pm.BasePermission: int protectionLevel>;

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r24 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" flags=0x");

        $r25 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i7 = $r25.<android.content.pm.ApplicationInfo: int flags>;

        $r26 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $r32 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r34);

     label40:
        i#4 = i#4 + 1;

        goto label03;

     label41:
        if changedInstallPermission#3 != 0 goto label42;

        if replace == 0 goto label43;

     label42:
        $z0 = ps.<com.android.server.pm.PackageSetting: boolean installPermissionsFixed>;

        if $z0 != 0 goto label43;

        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(ps);

        if $z1 == 0 goto label44;

     label43:
        $z2 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isUpdatedSystemApp(com.android.server.pm.PackageSetting)>(ps);

        if $z2 == 0 goto label45;

     label44:
        ps.<com.android.server.pm.PackageSetting: boolean installPermissionsFixed> = 1;

     label45:
        i#30 = changedRuntimePermissionUserIds#2;

        name#31 = lengthof i#30;

        bp#32 = 0;

     label46:
        if bp#32 >= name#31 goto label47;

        perm#33 = i#30[bp#32];

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r5.<com.android.server.pm.Settings: void writeRuntimePermissionsForUserLPr(int,boolean)>(perm#33, 0);

        bp#32 = bp#32 + 1;

        goto label46;

     label47:
        return;
    }

    private boolean isNewPlatformPermissionForPackage(java.lang.String, android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String perm, $r2, $r7, $r9;
        android.content.pm.PackageParser$Package pkg;
        int NP, $i0, $i1, ip#2;
        android.content.pm.PackageParser$NewPermissionInfo npi;
        android.content.pm.PackageParser$NewPermissionInfo[] $r0, $r1;
        boolean $z0, allowed#1;
        android.content.pm.ApplicationInfo $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r10;

        this := @this: com.android.server.pm.PackageManagerService;

        perm := @parameter0: java.lang.String;

        pkg := @parameter1: android.content.pm.PackageParser$Package;

        allowed#1 = 0;

        $r0 = <android.content.pm.PackageParser: android.content.pm.PackageParser$NewPermissionInfo[] NEW_PERMISSIONS>;

        NP = lengthof $r0;

        ip#2 = 0;

     label1:
        if ip#2 >= NP goto label3;

        $r1 = <android.content.pm.PackageParser: android.content.pm.PackageParser$NewPermissionInfo[] NEW_PERMISSIONS>;

        npi = $r1[ip#2];

        $r2 = npi.<android.content.pm.PackageParser$NewPermissionInfo: java.lang.String name>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(perm);

        if $z0 == 0 goto label2;

        $r3 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        $i0 = npi.<android.content.pm.PackageParser$NewPermissionInfo: int sdkVersion>;

        if $i1 >= $i0 goto label2;

        allowed#1 = 1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto-granting ");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(perm);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to old pkg ");

        $r7 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r9);

        goto label3;

     label2:
        ip#2 = ip#2 + 1;

        goto label1;

     label3:
        return allowed#1;
    }

    private boolean grantSignaturePermission(java.lang.String, android.content.pm.PackageParser$Package, com.android.server.pm.BasePermission, com.android.server.pm.PermissionsState)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String perm, $r4, $r5, $r6, $r7, $r9;
        android.content.pm.PackageParser$Package pkg, $r11, $r14, $r17, $r20;
        com.android.server.pm.BasePermission bp;
        com.android.server.pm.PermissionsState origPermissions, $r12;
        com.android.server.pm.PackageSetting sysPs;
        com.android.server.pm.PackageSettingBase $r0;
        com.android.server.pm.PackageSignatures $r1;
        android.content.pm.Signature[] $r2, $r3, $r18, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, j#3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, allowed#2;
        android.content.pm.ApplicationInfo $r8;
        com.android.server.pm.Settings $r10;
        java.util.ArrayList $r13, $r16;
        java.lang.Object $r15;

        this := @this: com.android.server.pm.PackageManagerService;

        perm := @parameter0: java.lang.String;

        pkg := @parameter1: android.content.pm.PackageParser$Package;

        bp := @parameter2: com.android.server.pm.BasePermission;

        origPermissions := @parameter3: com.android.server.pm.PermissionsState;

        $r0 = bp.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        $r1 = $r0.<com.android.server.pm.PackageSettingBase: com.android.server.pm.PackageSignatures signatures>;

        $r3 = $r1.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        $r2 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $i0 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r3, $r2);

        if $i0 == 0 goto label01;

        $r20 = this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package mPlatformPackage>;

        $r18 = $r20.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $r19 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $i15 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r18, $r19);

        if $i15 != 0 goto label02;

     label01:
        $z9 = 1;

        goto label03;

     label02:
        $z9 = 0;

     label03:
        allowed#2 = $z9;

        if allowed#2 != 0 goto label09;

        $i13 = bp.<com.android.server.pm.BasePermission: int protectionLevel>;

        $i11 = $i13 & 16;

        if $i11 == 0 goto label09;

        $z3 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>(pkg);

        if $z3 == 0 goto label09;

        $z4 = virtualinvoke pkg.<android.content.pm.PackageParser$Package: boolean isUpdatedSystemApp()>();

        if $z4 == 0 goto label08;

        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        sysPs = virtualinvoke $r10.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>($r9);

        $r12 = virtualinvoke sysPs.<com.android.server.pm.PackageSetting: com.android.server.pm.PermissionsState getPermissionsState()>();

        $z5 = virtualinvoke $r12.<com.android.server.pm.PermissionsState: boolean hasInstallPermission(java.lang.String)>(perm);

        if $z5 == 0 goto label04;

        $z8 = virtualinvoke sysPs.<com.android.server.pm.PackageSetting: boolean isPrivileged()>();

        if $z8 == 0 goto label07;

        allowed#2 = 1;

        goto label07;

     label04:
        $r11 = sysPs.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r11 == null goto label07;

        $z6 = virtualinvoke sysPs.<com.android.server.pm.PackageSetting: boolean isPrivileged()>();

        if $z6 == 0 goto label07;

        j#3 = 0;

     label05:
        $r14 = sysPs.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r13 = $r14.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        $i14 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        if j#3 >= $i14 goto label07;

        $r17 = sysPs.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r16 = $r17.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        $r15 = virtualinvoke $r16.<java.util.ArrayList: java.lang.Object get(int)>(j#3);

        $z7 = virtualinvoke perm.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z7 == 0 goto label06;

        allowed#2 = 1;

        goto label07;

     label06:
        j#3 = j#3 + 1;

        goto label05;

     label07:
        goto label09;

     label08:
        allowed#2 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isPrivilegedApp(android.content.pm.PackageParser$Package)>(pkg);

     label09:
        if allowed#2 != 0 goto label14;

        if allowed#2 != 0 goto label10;

        $i9 = bp.<com.android.server.pm.BasePermission: int protectionLevel>;

        $i10 = $i9 & 128;

        if $i10 == 0 goto label10;

        $r8 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i12 = $r8.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i12 >= 23 goto label10;

        allowed#2 = 1;

     label10:
        if allowed#2 != 0 goto label11;

        $i8 = bp.<com.android.server.pm.BasePermission: int protectionLevel>;

        $i7 = $i8 & 256;

        if $i7 == 0 goto label11;

        $r6 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r7 = this.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredInstallerPackage>;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label11;

        allowed#2 = 1;

     label11:
        if allowed#2 != 0 goto label12;

        $i5 = bp.<com.android.server.pm.BasePermission: int protectionLevel>;

        $i6 = $i5 & 512;

        if $i6 == 0 goto label12;

        $r5 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r4 = this.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label12;

        allowed#2 = 1;

     label12:
        if allowed#2 != 0 goto label13;

        $i4 = bp.<com.android.server.pm.BasePermission: int protectionLevel>;

        $i3 = $i4 & 1024;

        if $i3 == 0 goto label13;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>(pkg);

        if $z0 == 0 goto label13;

        allowed#2 = 1;

     label13:
        if allowed#2 != 0 goto label14;

        $i1 = bp.<com.android.server.pm.BasePermission: int protectionLevel>;

        $i2 = $i1 & 32;

        if $i2 == 0 goto label14;

        allowed#2 = virtualinvoke origPermissions.<com.android.server.pm.PermissionsState: boolean hasInstallPermission(java.lang.String)>(perm);

     label14:
        return allowed#2;
    }

    final void sendPackageBroadcast(java.lang.String, java.lang.String, android.os.Bundle, java.lang.String, android.content.IIntentReceiver, int[])
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String action, pkg, targetPkg;
        android.os.Bundle extras;
        android.content.IIntentReceiver finishedReceiver;
        int[] userIds;
        com.android.server.pm.PackageManagerService$8 $r0;
        com.android.server.pm.PackageManagerService$PackageHandler $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        action := @parameter0: java.lang.String;

        pkg := @parameter1: java.lang.String;

        extras := @parameter2: android.os.Bundle;

        targetPkg := @parameter3: java.lang.String;

        finishedReceiver := @parameter4: android.content.IIntentReceiver;

        userIds := @parameter5: int[];

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r0 = new com.android.server.pm.PackageManagerService$8;

        specialinvoke $r0.<com.android.server.pm.PackageManagerService$8: void <init>(com.android.server.pm.PackageManagerService,int[],java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.content.IIntentReceiver)>(this, userIds, action, pkg, extras, targetPkg, null);

        virtualinvoke $r1.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r0);

        return;
    }

    private boolean isExternalMediaAvailable()
    {
        com.android.server.pm.PackageManagerService this;
        boolean $z0, $z1, $z2;

        this := @this: com.android.server.pm.PackageManagerService;

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mMediaMounted>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <android.os.Environment: boolean isExternalStorageEmulated()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public android.content.pm.PackageCleanItem nextPackageToClean(android.content.pm.PackageCleanItem)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageCleanItem lastPackage, $r3;
        android.util.ArrayMap l2, $r0;
        java.util.ArrayList pkgs;
        java.lang.Throwable l4, $r4;
        boolean $z0;
        com.android.server.pm.Settings $r1;
        int $i0;
        java.lang.Object $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        lastPackage := @parameter0: android.content.pm.PackageCleanItem;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label01:
        $z0 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean isExternalMediaAvailable()>();

        if $z0 != 0 goto label03;

        exitmonitor l2;

     label02:
        return null;

     label03:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        pkgs = $r1.<com.android.server.pm.Settings: java.util.ArrayList mPackagesToBeCleaned>;

        if lastPackage == null goto label04;

        virtualinvoke pkgs.<java.util.ArrayList: boolean remove(java.lang.Object)>(lastPackage);

     label04:
        $i0 = virtualinvoke pkgs.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label06;

        $r2 = virtualinvoke pkgs.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r3 = (android.content.pm.PackageCleanItem) $r2;

        exitmonitor l2;

     label05:
        return $r3;

     label06:
        exitmonitor l2;

     label07:
        goto label10;

     label08:
        $r4 := @caughtexception;

        l4 = $r4;

        exitmonitor l2;

     label09:
        throw l4;

     label10:
        return null;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void schedulePackageCleaning(java.lang.String, int, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int userId;
        boolean andCode, $z0;
        android.os.Message msg, handler0;
        com.android.server.pm.PackageManagerService$PackageHandler $r0;
        java.util.ArrayList $r1, $r2, $r3;
        byte $b0;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        andCode := @parameter2: boolean;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        if andCode == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        msg = virtualinvoke $r0.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(7, userId, $b0, packageName);

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label3;

        handler0 = virtualinvoke msg.<android.os.Message: android.os.Handler getTarget()>();

        virtualinvoke handler0.<com.android.server.pm.PackageManagerService$PackageHandler: void dispatchMessage_PackageManagerService__PackageHandler_7(android.os.Message)>(msg);

        goto label5;

     label3:
        $r1 = this.<com.android.server.pm.PackageManagerService: java.util.ArrayList mPostSystemReadyMessages>;

        if $r1 != null goto label4;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        this.<com.android.server.pm.PackageManagerService: java.util.ArrayList mPostSystemReadyMessages> = $r3;

     label4:
        $r2 = this.<com.android.server.pm.PackageManagerService: java.util.ArrayList mPostSystemReadyMessages>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(msg);

     label5:
        return;
    }

    void startCleaningPackages()
    {
        com.android.server.pm.PackageManagerService this;
        android.os.RemoteException l3, $r10;
        android.util.ArrayMap $r0, intent#1;
        boolean $z0, $z1;
        com.android.server.pm.Settings $r1;
        java.util.ArrayList $r2;
        android.content.Intent $r3, intent#3;
        android.content.ComponentName $r4;
        android.content.Context $r6;
        java.lang.String $r7;
        java.lang.Throwable $r9, am#2;
        android.app.IActivityManager am#4;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        intent#1 = $r0;

        entermonitor $r0;

     label01:
        $z0 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean isExternalMediaAvailable()>();

        if $z0 != 0 goto label03;

        exitmonitor intent#1;

     label02:
        return;

     label03:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = $r1.<com.android.server.pm.Settings: java.util.ArrayList mPackagesToBeCleaned>;

        $z1 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label05;

        exitmonitor intent#1;

     label04:
        return;

     label05:
        exitmonitor intent#1;

     label06:
        goto label09;

     label07:
        $r9 := @caughtexception;

        am#2 = $r9;

        exitmonitor intent#1;

     label08:
        throw am#2;

     label09:
        $r3 = new android.content.Intent;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw6()>();

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.content.pm.CLEAN_EXTERNAL_STORAGE");

        intent#3 = $r3;

        $r4 = <com.android.server.pm.PackageManagerService: android.content.ComponentName DEFAULT_CONTAINER_COMPONENT>;

        virtualinvoke intent#3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r4);

        am#4 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        if am#4 == null goto label13;

     label10:
        $r6 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke am#4.<android.app.IActivityManager: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,java.lang.String,int)>(null, intent#3, null, $r7, 0);

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch android.os.RemoteException from label10 to label11 with label12;
    }

    public void installPackage(java.lang.String, android.content.pm.IPackageInstallObserver2, int, java.lang.String, android.content.pm.VerificationParams, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String originPath, installerPackageName, packageAbiOverride;
        android.content.pm.IPackageInstallObserver2 observer;
        int installFlags, $i0;
        android.content.pm.VerificationParams verificationParams;

        this := @this: com.android.server.pm.PackageManagerService;

        originPath := @parameter0: java.lang.String;

        observer := @parameter1: android.content.pm.IPackageInstallObserver2;

        installFlags := @parameter2: int;

        installerPackageName := @parameter3: java.lang.String;

        verificationParams := @parameter4: android.content.pm.VerificationParams;

        packageAbiOverride := @parameter5: java.lang.String;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void installPackageAsUser(java.lang.String,android.content.pm.IPackageInstallObserver2,int,java.lang.String,android.content.pm.VerificationParams,java.lang.String,int)>(originPath, observer, installFlags, installerPackageName, verificationParams, packageAbiOverride, $i0);

        return;
    }

    public void installPackageAsUser(java.lang.String, android.content.pm.IPackageInstallObserver2, int, java.lang.String, android.content.pm.VerificationParams, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String originPath, installerPackageName, packageAbiOverride;
        android.content.pm.IPackageInstallObserver2 observer;
        android.content.pm.VerificationParams verificationParams;
        int userId, callingUid, $i0, $i1, $i2, installFlags#1, installFlags#3, installFlags#4;
        java.io.File originFile, $r2;
        com.android.server.pm.PackageManagerService$OriginInfo origin;
        android.os.Message msg;
        android.content.Context $r0, $r6;
        boolean $z0;
        android.os.UserHandle $r1, user#5;
        com.android.server.pm.PackageManagerService$PackageHandler $r3, $r5;
        com.android.server.pm.PackageManagerService$InstallParams $r4;
        android.os.RemoteException $r7, user#2;
        java.lang.SecurityException $r8;

        this := @this: com.android.server.pm.PackageManagerService;

        originPath := @parameter0: java.lang.String;

        observer := @parameter1: android.content.pm.IPackageInstallObserver2;

        installFlags#1 := @parameter2: int;

        installerPackageName := @parameter3: java.lang.String;

        verificationParams := @parameter4: android.content.pm.VerificationParams;

        packageAbiOverride := @parameter5: java.lang.String;

        userId := @parameter6: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INSTALL_PACKAGES", null);

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(callingUid, userId, 1, 1, "installPackageAsUser");

        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean isUserRestricted(int,java.lang.String)>(userId, "no_install_apps");

        if $z0 == 0 goto label05;

     label01:
        if observer == null goto label02;

        interfaceinvoke observer.<android.content.pm.IPackageInstallObserver2: void onPackageInstalled(java.lang.String,int,java.lang.String,android.os.Bundle)>("", -111, null, null);

     label02:
        goto label04;

     label03:
        $r7 := @caughtexception;

        user#2 = $r7;

     label04:
        return;

     label05:
        if callingUid == 2000 goto label06;

        if callingUid != 0 goto label07;

     label06:
        installFlags#3 = installFlags#1 | 32;

        goto label08;

     label07:
        installFlags#4 = installFlags#1 & -33;

        installFlags#3 = installFlags#4 & -65;

     label08:
        $i0 = installFlags#3 & 64;

        if $i0 == 0 goto label09;

        user#5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        goto label10;

     label09:
        $r1 = new android.os.UserHandle;

        specialinvoke $r1.<android.os.UserHandle: void <init>(int)>(userId);

        user#5 = $r1;

     label10:
        $i1 = installFlags#3 & 256;

        if $i1 == 0 goto label11;

        $r6 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r6.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS");

        if $i2 != -1 goto label11;

        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("You need the android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS permission to use the PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS flag");

        throw $r8;

     label11:
        virtualinvoke verificationParams.<android.content.pm.VerificationParams: void setInstallerUid(int)>(callingUid);

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(originPath);

        originFile = $r2;

        origin = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromUntrustedFile(java.io.File)>(originFile);

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        msg = virtualinvoke $r3.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int)>(5);

        $r4 = new com.android.server.pm.PackageManagerService$InstallParams;

        specialinvoke $r4.<com.android.server.pm.PackageManagerService$InstallParams: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$OriginInfo,com.android.server.pm.PackageManagerService$MoveInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,java.lang.String,android.content.pm.VerificationParams,android.os.UserHandle,java.lang.String,java.lang.String[])>(this, origin, null, observer, installFlags#3, installerPackageName, null, verificationParams, user#5, packageAbiOverride, null);

        msg.<android.os.Message: java.lang.Object obj> = $r4;

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r5.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendMessage(android.os.Message)>(msg);

        return;

        catch android.os.RemoteException from label01 to label02 with label03;
    }

    void installStage(java.lang.String, java.io.File, java.lang.String, android.content.pm.IPackageInstallObserver2, android.content.pm.PackageInstaller$SessionParams, java.lang.String, int, android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, stagedCid, installerPackageName, $r6, $r7;
        java.io.File stagedDir;
        android.content.pm.IPackageInstallObserver2 observer;
        android.content.pm.PackageInstaller$SessionParams params;
        int installerUid, $i0;
        android.os.UserHandle user;
        android.content.pm.VerificationParams verifParams, $r0;
        android.os.Message msg;
        android.net.Uri $r1, $r2;
        com.android.server.pm.PackageManagerService$PackageHandler $r3, $r8;
        java.lang.String[] $r4;
        com.android.server.pm.PackageManagerService$InstallParams $r5;
        com.android.server.pm.PackageManagerService$OriginInfo origin#1;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        stagedDir := @parameter1: java.io.File;

        stagedCid := @parameter2: java.lang.String;

        observer := @parameter3: android.content.pm.IPackageInstallObserver2;

        params := @parameter4: android.content.pm.PackageInstaller$SessionParams;

        installerPackageName := @parameter5: java.lang.String;

        installerUid := @parameter6: int;

        user := @parameter7: android.os.UserHandle;

        $r0 = new android.content.pm.VerificationParams;

        $r2 = params.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri originatingUri>;

        $r1 = params.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri referrerUri>;

        specialinvoke $r0.<android.content.pm.VerificationParams: void <init>(android.net.Uri,android.net.Uri,android.net.Uri,int,android.content.pm.ManifestDigest)>(null, $r2, $r1, installerUid, null);

        verifParams = $r0;

        virtualinvoke verifParams.<android.content.pm.VerificationParams: void setInstallerUid(int)>(installerUid);

        if stagedDir == null goto label1;

        origin#1 = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromStagedFile(java.io.File)>(stagedDir);

        goto label2;

     label1:
        origin#1 = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromStagedContainer(java.lang.String)>(stagedCid);

     label2:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        msg = virtualinvoke $r3.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int)>(5);

        $r5 = new com.android.server.pm.PackageManagerService$InstallParams;

        $i0 = params.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $r6 = params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String volumeUuid>;

        $r7 = params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String abiOverride>;

        $r4 = params.<android.content.pm.PackageInstaller$SessionParams: java.lang.String[] grantedRuntimePermissions>;

        specialinvoke $r5.<com.android.server.pm.PackageManagerService$InstallParams: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$OriginInfo,com.android.server.pm.PackageManagerService$MoveInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,java.lang.String,android.content.pm.VerificationParams,android.os.UserHandle,java.lang.String,java.lang.String[])>(this, origin#1, null, observer, $i0, installerPackageName, $r6, verifParams, user, $r7, $r4);

        msg.<android.os.Message: java.lang.Object obj> = $r5;

        $r8 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r8.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendMessage(android.os.Message)>(msg);

        return;
    }

    private void sendPackageAddedForUser(java.lang.String, com.android.server.pm.PackageSetting, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        com.android.server.pm.PackageSetting pkgSetting;
        int userId, $i0, $i1;
        android.os.Bundle extras, $r0;
        boolean isSystem, $z0, $z1, $z2, $z3;
        android.content.Intent bcIntent, $r2, $r3;
        int[] $r1;
        android.os.RemoteException $r4, am#3;
        android.app.IActivityManager am#1;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        pkgSetting := @parameter1: com.android.server.pm.PackageSetting;

        userId := @parameter2: int;

        $r0 = new android.os.Bundle;

        specialinvoke $r0.<android.os.Bundle: void <init>(int)>(1);

        extras = $r0;

        $i0 = pkgSetting.<com.android.server.pm.PackageSetting: int appId>;

        $i1 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(userId, $i0);

        virtualinvoke extras.<android.os.Bundle: void putInt(java.lang.String,int)>("android.intent.extra.UID", $i1);

        $r1 = newarray (int)[1];

        $r1[0] = userId;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.content.IIntentReceiver,int[])>("android.intent.action.PACKAGE_ADDED", packageName, extras, null, null, $r1);

     label1:
        am#1 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(pkgSetting);

        if $z0 != 0 goto label2;

        $z2 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isUpdatedSystemApp(com.android.server.pm.PackageSetting)>(pkgSetting);

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        isSystem = $z3;

        if isSystem == 0 goto label5;

        $z1 = interfaceinvoke am#1.<android.app.IActivityManager: boolean isUserRunning(int,boolean)>(userId, 0);

        if $z1 == 0 goto label5;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.BOOT_COMPLETED");

        $r2 = virtualinvoke $r3.<android.content.Intent: android.content.Intent addFlags(int)>(32);

        bcIntent = virtualinvoke $r2.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(packageName);

        interfaceinvoke am#1.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>(null, bcIntent, null, null, 0, null, null, null, -1, null, 0, 0, userId);

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        am#3 = $r4;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Unable to bootstrap installed package", am#3);

     label7:
        return;

        catch android.os.RemoteException from label1 to label5 with label6;
    }

    public boolean setApplicationHiddenSettingAsUser(java.lang.String, boolean, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r3, $r12;
        boolean hidden, l11, $z0, $z1, sendAdded#1, sendRemoved#2, l10#4, l10#5;
        int userId, uid, $i0, $i1;
        com.android.server.pm.PackageSetting pkgSetting;
        long callingId;
        java.lang.Throwable l12, l13, $r15, $r16;
        android.content.Context $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r10, $r11, $r13, $r14;
        android.util.ArrayMap $r5, $r6, l10#3;
        com.android.server.pm.Settings $r7, $r9;
        java.lang.Object $r8;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        hidden := @parameter1: boolean;

        userId := @parameter2: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USERS", null);

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setApplicationHiddenSetting for user ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(uid, userId, 1, 1, $r3);

        if hidden == 0 goto label01;

        $z1 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean isPackageDeviceAdmin(java.lang.String,int)>(packageName, userId);

        if $z1 == 0 goto label01;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not hiding package ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r11 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": has active device admin");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r12);

        return 0;

     label01:
        callingId = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        sendAdded#1 = 0;

        sendRemoved#2 = 0;

        $r5 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l10#3 = $r5;

        entermonitor $r5;

     label03:
        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkgSetting = (com.android.server.pm.PackageSetting) $r8;

        if pkgSetting != null goto label05;

        l11 = 0;

        exitmonitor l10#3;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        return l11;

     label05:
        $z0 = virtualinvoke pkgSetting.<com.android.server.pm.PackageSetting: boolean getHidden(int)>(userId);

        if $z0 == hidden goto label07;

        virtualinvoke pkgSetting.<com.android.server.pm.PackageSetting: void setHidden(boolean,int)>(hidden, userId);

        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r9.<com.android.server.pm.Settings: void writePackageRestrictionsLPr(int)>(userId);

        if hidden == 0 goto label06;

        sendRemoved#2 = 1;

        goto label07;

     label06:
        sendAdded#1 = 1;

     label07:
        exitmonitor l10#3;

     label08:
        goto label11;

     label09:
        $r15 := @caughtexception;

        l12 = $r15;

        exitmonitor l10#3;

     label10:
        throw l12;

     label11:
        if sendAdded#1 == 0 goto label13;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void sendPackageAddedForUser(java.lang.String,com.android.server.pm.PackageSetting,int)>(packageName, pkgSetting, userId);

        l10#4 = 1;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        return l10#4;

     label13:
        if sendRemoved#2 == 0 goto label15;

        $i0 = pkgSetting.<com.android.server.pm.PackageSetting: int appId>;

        $i1 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(userId, $i0);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)>(packageName, $i1, "hiding pkg");

        specialinvoke this.<com.android.server.pm.PackageManagerService: void sendApplicationHiddenForUser(java.lang.String,com.android.server.pm.PackageSetting,int)>(packageName, pkgSetting, userId);

        l10#5 = 1;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        return l10#5;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        goto label18;

     label16:
        $r16 := @caughtexception;

        l13 = $r16;

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        throw l13;

     label18:
        return 0;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label02 to label04 with label16;
        catch java.lang.Throwable from label05 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private void sendApplicationHiddenForUser(java.lang.String, com.android.server.pm.PackageSetting, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        com.android.server.pm.PackageSetting pkgSetting;
        int userId, $i0, $i1;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo info, $r0;
        int[] $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        pkgSetting := @parameter1: com.android.server.pm.PackageSetting;

        userId := @parameter2: int;

        $r0 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        specialinvoke $r0.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void <init>(com.android.server.pm.PackageManagerService)>(this);

        info = $r0;

        info.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage> = packageName;

        $r1 = newarray (int)[1];

        $r1[0] = userId;

        info.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] removedUsers> = $r1;

        $i0 = pkgSetting.<com.android.server.pm.PackageSetting: int appId>;

        $i1 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(userId, $i0);

        info.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int uid> = $i1;

        virtualinvoke info.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void sendBroadcast(boolean,boolean,boolean)>(0, 0, 0);

        return;
    }

    public boolean getApplicationHiddenSettingAsUser(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r3;
        int userId, $i0;
        com.android.server.pm.PackageSetting pkgSetting;
        long callingId;
        android.util.ArrayMap l6, $r5, $r6;
        java.lang.Throwable l8, l9, $r9, $r10;
        android.content.Context $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        com.android.server.pm.Settings $r7;
        java.lang.Object $r8;
        boolean l7#1, l7#2;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USERS", null);

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getApplicationHidden for user ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 1, 0, $r3);

        callingId = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l6 = $r5;

        entermonitor $r5;

     label2:
        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkgSetting = (com.android.server.pm.PackageSetting) $r8;

        if pkgSetting != null goto label4;

        l7#1 = 1;

        exitmonitor l6;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        return l7#1;

     label4:
        l7#2 = virtualinvoke pkgSetting.<com.android.server.pm.PackageSetting: boolean getHidden(int)>(userId);

        exitmonitor l6;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        return l7#2;

     label6:
        $r9 := @caughtexception;

        l8 = $r9;

        exitmonitor l6;

     label7:
        throw l8;

     label8:
        $r10 := @caughtexception;

        l9 = $r10;

     label9:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        throw l9;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label9 with label8;
    }

    public int installExistingPackageAsUser(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r3;
        int userId, uid;
        com.android.server.pm.PackageSetting pkgSetting;
        long callingId;
        android.util.ArrayMap l8, $r6, $r8;
        byte l9;
        java.lang.Throwable l10, l11, $r10, $r11;
        android.content.Context $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        boolean $z0, $z1, sendAdded#1;
        com.android.server.pm.Settings $r5, $r9;
        java.lang.Object $r7;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INSTALL_PACKAGES", null);

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("installExistingPackage for user ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(uid, userId, 1, 1, $r3);

        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean isUserRestricted(int,java.lang.String)>(userId, "no_install_apps");

        if $z0 == 0 goto label01;

        return -111;

     label01:
        callingId = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        sendAdded#1 = 0;

        $r6 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l8 = $r6;

        entermonitor $r6;

     label03:
        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkgSetting = (com.android.server.pm.PackageSetting) $r7;

        if pkgSetting != null goto label05;

        l9 = -3;

        exitmonitor l8;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        return l9;

     label05:
        $z1 = virtualinvoke pkgSetting.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(userId);

        if $z1 != 0 goto label06;

        virtualinvoke pkgSetting.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>(1, userId);

        virtualinvoke pkgSetting.<com.android.server.pm.PackageSetting: void setHidden(boolean,int)>(0, userId);

        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r9.<com.android.server.pm.Settings: void writePackageRestrictionsLPr(int)>(userId);

        sendAdded#1 = 1;

     label06:
        exitmonitor l8;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        l10 = $r10;

        exitmonitor l8;

     label09:
        throw l10;

     label10:
        if sendAdded#1 == 0 goto label11;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void sendPackageAddedForUser(java.lang.String,com.android.server.pm.PackageSetting,int)>(packageName, pkgSetting, userId);

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        goto label14;

     label12:
        $r11 := @caughtexception;

        l11 = $r11;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId);

        throw l11;

     label14:
        return 1;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label02 to label04 with label12;
        catch java.lang.Throwable from label05 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    boolean isUserRestricted(int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        int userId;
        java.lang.String restrictionKey, $r4;
        android.os.Bundle restrictions;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        restrictionKey := @parameter1: java.lang.String;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        restrictions = virtualinvoke $r0.<com.android.server.pm.UserManagerService: android.os.Bundle getUserRestrictions(int)>(userId);

        $z0 = virtualinvoke restrictions.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(restrictionKey, 0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User is restricted: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(restrictionKey);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r4);

        return 1;

     label1:
        return 0;
    }

    public void verifyPendingInstall(int, int) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService this;
        int id, verificationCode, $i0;
        android.os.Message msg;
        com.android.server.pm.PackageVerificationResponse response, $r2;
        android.content.Context $r0;
        com.android.server.pm.PackageManagerService$PackageHandler $r1, $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        id := @parameter0: int;

        verificationCode := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can verify applications");

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        msg = virtualinvoke $r1.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int)>(15);

        $r2 = new com.android.server.pm.PackageVerificationResponse;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r2.<com.android.server.pm.PackageVerificationResponse: void <init>(int,int)>(verificationCode, $i0);

        response = $r2;

        msg.<android.os.Message: int arg1> = id;

        msg.<android.os.Message: java.lang.Object obj> = response;

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r3.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendMessage(android.os.Message)>(msg);

        return;
    }

    public void extendVerificationTimeout(int, int, long)
    {
        com.android.server.pm.PackageManagerService this;
        int id, $i0, verificationCodeAtTimeout#1;
        com.android.server.pm.PackageVerificationState state;
        com.android.server.pm.PackageVerificationResponse response, $r3;
        android.os.Message msg;
        android.content.Context $r0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        byte $b1, $b2, verificationCodeAtTimeout#3;
        boolean $z0;
        com.android.server.pm.PackageManagerService$PackageHandler $r4, $r5;
        long millisecondsToDelay#2;

        this := @this: com.android.server.pm.PackageManagerService;

        id := @parameter0: int;

        verificationCodeAtTimeout#1 := @parameter1: int;

        millisecondsToDelay#2 := @parameter2: long;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can extend verification timeouts");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.SparseArray mPendingVerification>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(id);

        state = (com.android.server.pm.PackageVerificationState) $r2;

        $r3 = new com.android.server.pm.PackageVerificationResponse;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r3.<com.android.server.pm.PackageVerificationResponse: void <init>(int,int)>(verificationCodeAtTimeout#1, $i0);

        response = $r3;

        $b1 = millisecondsToDelay#2 cmp 3600000L;

        if $b1 <= 0 goto label1;

        millisecondsToDelay#2 = 3600000L;

     label1:
        $b2 = millisecondsToDelay#2 cmp 0L;

        if $b2 >= 0 goto label2;

        millisecondsToDelay#2 = 0L;

     label2:
        if verificationCodeAtTimeout#1 == 1 goto label3;

        if verificationCodeAtTimeout#1 == -1 goto label3;

        verificationCodeAtTimeout#3 = -1;

     label3:
        if state == null goto label4;

        $z0 = virtualinvoke state.<com.android.server.pm.PackageVerificationState: boolean timeoutExtended()>();

        if $z0 != 0 goto label4;

        virtualinvoke state.<com.android.server.pm.PackageVerificationState: void extendTimeout()>();

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        msg = virtualinvoke $r4.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int)>(15);

        msg.<android.os.Message: int arg1> = id;

        msg.<android.os.Message: java.lang.Object obj> = response;

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r5.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendMessageDelayed(android.os.Message,long)>(msg, millisecondsToDelay#2);

     label4:
        return;
    }

    private void broadcastPackageVerified(int, android.net.Uri, int, android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService this;
        int verificationId, verificationCode;
        android.net.Uri packageUri;
        android.os.UserHandle user;
        android.content.Intent intent, $r0;
        android.content.Context $r5;

        this := @this: com.android.server.pm.PackageManagerService;

        verificationId := @parameter0: int;

        packageUri := @parameter1: android.net.Uri;

        verificationCode := @parameter2: int;

        user := @parameter3: android.os.UserHandle;

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.PACKAGE_VERIFIED");

        intent = $r0;

        virtualinvoke intent.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>(packageUri, "application/vnd.android.package-archive");

        virtualinvoke intent.<android.content.Intent: android.content.Intent addFlags(int)>(1);

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.VERIFICATION_ID", verificationId);

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.VERIFICATION_RESULT", verificationCode);

        $r5 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>(intent, user, "android.permission.PACKAGE_VERIFICATION_AGENT");

        return;
    }

    private android.content.ComponentName matchComponentForVerifier(java.lang.String, java.util.List)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r1, $r2, $r6;
        java.util.List receivers;
        int NR, i#2;
        android.content.pm.ResolveInfo info;
        android.content.ComponentName $r0;
        java.lang.Object $r3;
        android.content.pm.ActivityInfo $r4, $r5, targetReceiver#1;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        receivers := @parameter1: java.util.List;

        targetReceiver#1 = null;

        NR = interfaceinvoke receivers.<java.util.List: int size()>();

        i#2 = 0;

     label1:
        if i#2 >= NR goto label4;

        $r3 = interfaceinvoke receivers.<java.util.List: java.lang.Object get(int)>(i#2);

        info = (android.content.pm.ResolveInfo) $r3;

        $r4 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r4 != null goto label2;

        goto label3;

     label2:
        $r5 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r6 = $r5.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z0 = virtualinvoke packageName.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        targetReceiver#1 = info.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        goto label4;

     label3:
        i#2 = i#2 + 1;

        goto label1;

     label4:
        if targetReceiver#1 != null goto label5;

        return null;

     label5:
        $r0 = new android.content.ComponentName;

        $r2 = targetReceiver#1.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r1 = targetReceiver#1.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r0.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r2, $r1);

        return $r0;
    }

    private java.util.List matchVerifiers(android.content.pm.PackageInfoLite, java.util.List, com.android.server.pm.PackageVerificationState)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageInfoLite pkgInfo;
        java.util.List receivers, tmp$1463486707, tmp$892721855;
        com.android.server.pm.PackageVerificationState verificationState;
        int N, verifierUid, $i0, $i1, i#1;
        java.util.ArrayList sufficientVerifiers, tmp$1585416212;
        android.content.pm.VerifierInfo verifierInfo;
        android.content.ComponentName comp;
        android.content.pm.VerifierInfo[] $r0, $r1, $r3;
        java.lang.String $r4;

        this := @this: com.android.server.pm.PackageManagerService;

        pkgInfo := @parameter0: android.content.pm.PackageInfoLite;

        receivers := @parameter1: java.util.List;

        verificationState := @parameter2: com.android.server.pm.PackageVerificationState;

        $r0 = pkgInfo.<android.content.pm.PackageInfoLite: android.content.pm.VerifierInfo[] verifiers>;

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = pkgInfo.<android.content.pm.PackageInfoLite: android.content.pm.VerifierInfo[] verifiers>;

        N = lengthof $r1;

        tmp$1585416212 = new java.util.ArrayList;

        $i1 = N + 1;

        specialinvoke tmp$1585416212.<java.util.ArrayList: void <init>(int)>($i1);

        sufficientVerifiers = tmp$1585416212;

        i#1 = 0;

     label2:
        if i#1 >= N goto label6;

        $r3 = pkgInfo.<android.content.pm.PackageInfoLite: android.content.pm.VerifierInfo[] verifiers>;

        verifierInfo = $r3[i#1];

        $r4 = verifierInfo.<android.content.pm.VerifierInfo: java.lang.String packageName>;

        comp = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.ComponentName matchComponentForVerifier(java.lang.String,java.util.List)>($r4, receivers);

        if comp != null goto label3;

        goto label5;

     label3:
        verifierUid = specialinvoke this.<com.android.server.pm.PackageManagerService: int getUidForVerifier(android.content.pm.VerifierInfo)>(verifierInfo);

        if verifierUid != -1 goto label4;

        goto label5;

     label4:
        tmp$1463486707 = (java.util.List) sufficientVerifiers;

        interfaceinvoke tmp$1463486707.<java.util.List: boolean add(java.lang.Object)>(comp);

        virtualinvoke verificationState.<com.android.server.pm.PackageVerificationState: void addSufficientVerifier(int)>(verifierUid);

     label5:
        i#1 = i#1 + 1;

        goto label2;

     label6:
        tmp$892721855 = (java.util.List) sufficientVerifiers;

        return tmp$892721855;
    }

    private int getUidForVerifier(android.content.pm.VerifierInfo)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.VerifierInfo verifierInfo;
        android.util.ArrayMap l2, $r0, $r2;
        android.content.pm.PackageParser$Package pkg;
        byte[] expectedPublicKey, verifierSig#3;
        java.security.PublicKey publicKey, $r6;
        java.lang.Throwable l7, $r20;
        java.lang.String $r1, $r11, $r12, $r15, $r17;
        java.lang.Object $r3;
        android.content.pm.Signature[] $r4, $r5;
        int $i0, $i1;
        boolean $z0;
        android.content.pm.ApplicationInfo $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r13, $r14, $r16, $r18, $r19;
        java.security.cert.CertificateException $r21, verifierSig#2;
        android.content.pm.Signature verifierSig#1;

        this := @this: com.android.server.pm.PackageManagerService;

        verifierInfo := @parameter0: android.content.pm.VerifierInfo;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label01:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r1 = verifierInfo.<android.content.pm.VerifierInfo: java.lang.String packageName>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r1);

        pkg = (android.content.pm.PackageParser$Package) $r3;

        if pkg != null goto label03;

        exitmonitor l2;

     label02:
        return -1;

     label03:
        $r4 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $i0 = lengthof $r4;

        if $i0 == 1 goto label05;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Verifier package ");

        $r15 = verifierInfo.<android.content.pm.VerifierInfo: java.lang.String packageName>;

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has more than one signature; ignoring");

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r17);

        exitmonitor l2;

     label04:
        return -1;

     label05:
        $r5 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        verifierSig#1 = $r5[0];

        publicKey = virtualinvoke verifierSig#1.<android.content.pm.Signature: java.security.PublicKey getPublicKey()>();

        expectedPublicKey = interfaceinvoke publicKey.<java.security.PublicKey: byte[] getEncoded()>();

     label06:
        goto label09;

     label07:
        $r21 := @caughtexception;

        verifierSig#2 = $r21;

        exitmonitor l2;

     label08:
        return -1;

     label09:
        $r6 = verifierInfo.<android.content.pm.VerifierInfo: java.security.PublicKey publicKey>;

        verifierSig#3 = interfaceinvoke $r6.<java.security.PublicKey: byte[] getEncoded()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(verifierSig#3, expectedPublicKey);

        if $z0 != 0 goto label11;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Verifier package ");

        $r11 = verifierInfo.<android.content.pm.VerifierInfo: java.lang.String packageName>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have the expected public key; ignoring");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r12);

        exitmonitor l2;

     label10:
        return -1;

     label11:
        $r7 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r7.<android.content.pm.ApplicationInfo: int uid>;

        exitmonitor l2;

     label12:
        return $i1;

     label13:
        $r20 := @caughtexception;

        l7 = $r20;

        exitmonitor l2;

     label14:
        throw l7;

        catch java.security.cert.CertificateException from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void finishPackageInstall(int)
    {
        com.android.server.pm.PackageManagerService this;
        int token;
        android.os.Message msg;
        com.android.server.pm.PackageManagerService$PackageHandler $r0, $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        token := @parameter0: int;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("Only the system is allowed to finish installs");

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        msg = virtualinvoke $r0.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int,int,int)>(9, token, 0);

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r1.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendMessage(android.os.Message)>(msg);

        return;
    }

    private long getVerificationTimeout()
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Context $r0;
        android.content.ContentResolver $r1;
        long $l0;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r1, "verifier_timeout", 10000L);

        return $l0;
    }

    private int getDefaultVerificationResponse()
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Context $r0;
        android.content.ContentResolver $r1;
        int $i0;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "verifier_default_response", 1);

        return $i0;
    }

    private boolean isVerificationEnabled(int, int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, installFlags, $i0, $i1, $i2;
        boolean ensureVerifyAppsEnabled, $z0, $z1;
        android.content.Context $r0, $r2;
        android.content.ContentResolver $r1, $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        installFlags := @parameter1: int;

        ensureVerifyAppsEnabled = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean isUserRestricted(int,java.lang.String)>(userId, "ensure_verify_apps");

        $i0 = installFlags & 32;

        if $i0 == 0 goto label3;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isRunningInTestHarness()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        if ensureVerifyAppsEnabled == 0 goto label2;

        return 1;

     label2:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r3, "verifier_verify_adb_installs", 1);

        if $i2 != 0 goto label3;

        return 0;

     label3:
        if ensureVerifyAppsEnabled == 0 goto label4;

        return 1;

     label4:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "package_verifier_enable", 1);

        if $i1 != 1 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        return $z1;
    }

    public void verifyIntentFilter(int, int, java.util.List) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService this;
        int id, verificationCode, $i0;
        java.util.List failedDomains;
        android.os.Message msg;
        com.android.server.pm.IntentFilterVerificationResponse response, $r2;
        android.content.Context $r0;
        com.android.server.pm.PackageManagerService$PackageHandler $r1, $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        id := @parameter0: int;

        verificationCode := @parameter1: int;

        failedDomains := @parameter2: java.util.List;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTENT_FILTER_VERIFICATION_AGENT", "Only intentfilter verification agents can verify applications");

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        msg = virtualinvoke $r1.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int)>(18);

        $r2 = new com.android.server.pm.IntentFilterVerificationResponse;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r2.<com.android.server.pm.IntentFilterVerificationResponse: void <init>(int,int,java.util.List)>($i0, verificationCode, failedDomains);

        response = $r2;

        msg.<android.os.Message: int arg1> = id;

        msg.<android.os.Message: java.lang.Object obj> = response;

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r3.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendMessage(android.os.Message)>(msg);

        return;
    }

    public int getIntentVerificationStatus(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int userId, $i0;
        android.util.ArrayMap l3, $r0;
        java.lang.Throwable l4, $r2;
        com.android.server.pm.Settings $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i0 = virtualinvoke $r1.<com.android.server.pm.Settings: int getIntentFilterVerificationStatusLPr(java.lang.String,int)>(packageName, userId);

        exitmonitor l3;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        l4 = $r2;

        exitmonitor l3;

     label4:
        throw l4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean updateIntentVerificationStatus(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int status, userId;
        android.util.ArrayMap l5, $r1;
        java.lang.Throwable l6, $r3;
        android.content.Context $r0;
        com.android.server.pm.Settings $r2;
        boolean result#1, result#2;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        status := @parameter1: int;

        userId := @parameter2: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l5 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        result#2 = virtualinvoke $r2.<com.android.server.pm.Settings: boolean updateIntentFilterVerificationStatusLPw(java.lang.String,int,int)>(null, 2, userId);

        exitmonitor l5;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        l6 = $r3;

        exitmonitor l5;

     label4:
        throw l6;

     label5:
        if result#2 == 0 goto label6;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

     label6:
        return result#2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List getIntentFilterVerifications(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        android.util.ArrayMap l2, $r0;
        java.lang.Throwable l3, $r3;
        com.android.server.pm.Settings $r1;
        java.util.List $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = virtualinvoke $r1.<com.android.server.pm.Settings: java.util.List getIntentFilterVerificationsLPr(java.lang.String)>(packageName);

        exitmonitor l2;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        l3 = $r3;

        exitmonitor l2;

     label4:
        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List getAllIntentFilters(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        android.util.ArrayMap l2, $r0, $r1;
        android.content.pm.PackageParser$Package pkg;
        int count, $i0, n#1;
        java.util.ArrayList result, $r4, $r5, $r8, $r9, $r10, $r11, tmp$1536593389;
        android.content.pm.PackageParser$Activity activity;
        java.lang.Throwable l8, $r13;
        boolean $z0;
        java.lang.Object $r2, $r7;
        java.util.List $r3, $r12, tmp$1896942512;
        java.util.Collection tmp$1670963523;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(packageName);

        if $z0 == 0 goto label01;

        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r12;

     label01:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label02:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r2;

        if pkg == null goto label03;

        $r4 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        if $r4 != null goto label05;

     label03:
        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor l2;

     label04:
        return $r3;

     label05:
        $r5 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        count = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        tmp$1536593389 = new java.util.ArrayList;

        specialinvoke tmp$1536593389.<java.util.ArrayList: void <init>()>();

        result = tmp$1536593389;

        n#1 = 0;

     label06:
        if n#1 >= count goto label09;

        $r8 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        $r7 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(n#1);

        activity = (android.content.pm.PackageParser$Activity) $r7;

        $r10 = activity.<android.content.pm.PackageParser$Activity: java.util.ArrayList intents>;

        if $r10 != null goto label07;

        $r11 = activity.<android.content.pm.PackageParser$Activity: java.util.ArrayList intents>;

        $i0 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label08;

     label07:
        $r9 = activity.<android.content.pm.PackageParser$Activity: java.util.ArrayList intents>;

        tmp$1670963523 = (java.util.Collection) $r9;

        virtualinvoke result.<java.util.ArrayList: boolean addAll(java.util.Collection)>(tmp$1670963523);

     label08:
        n#1 = n#1 + 1;

        goto label06;

     label09:
        exitmonitor l2;

     label10:
        tmp$1896942512 = (java.util.List) result;

        return tmp$1896942512;

     label11:
        $r13 := @caughtexception;

        l8 = $r13;

        exitmonitor l2;

     label12:
        throw l8;

        catch java.lang.Throwable from label02 to label04 with label11;
        catch java.lang.Throwable from label05 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public boolean setDefaultBrowserPackageName(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int userId;
        android.util.ArrayMap l3, $r1;
        java.lang.Throwable l5, $r4;
        android.content.Context $r0;
        com.android.server.pm.Settings $r2;
        boolean $z0, result#1;
        com.android.server.pm.DefaultPermissionGrantPolicy $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        result#1 = virtualinvoke $r2.<com.android.server.pm.Settings: boolean setDefaultBrowserPackageNameLPw(java.lang.String,int)>(null, userId);

        goto label2;

     label2:
        exitmonitor l3;

     label3:
        return result#1;

     label4:
        $r4 := @caughtexception;

        l5 = $r4;

        exitmonitor l3;

     label5:
        throw l5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String getDefaultBrowserPackageName(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId;
        android.util.ArrayMap l2, $r0;
        java.lang.Throwable l3, $r3;
        com.android.server.pm.Settings $r1;
        java.lang.String $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = virtualinvoke $r1.<com.android.server.pm.Settings: java.lang.String getDefaultBrowserPackageNameLPw(int)>(userId);

        exitmonitor l2;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        l3 = $r3;

        exitmonitor l2;

     label4:
        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private int getUnknownSourcesSettings()
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Context $r0;
        android.content.ContentResolver $r1;
        int $i0;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "install_non_market_apps", -1);

        return $i0;
    }

    public void setInstallerPackageName(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String targetPackage, installerPackageName, $r9, $r15, $r17, $r23, $r27, $r33, $r41, $r49, $r52;
        int uid, $i0, $i1;
        android.util.ArrayMap l4, $r0, $r2, $r20, $r45;
        com.android.server.pm.PackageSetting targetPackageSetting, setting, $r18, installerPackageSetting#1;
        java.lang.Object obj, $r3, $r21, $r44;
        java.lang.Throwable l10, $r54;
        com.android.server.pm.Settings $r1, $r4, $r22, $r38;
        java.lang.StringBuilder $r5, $r7, $r8, $r11, $r12, $r13, $r14, $r16, $r28, $r29, $r30, $r34, $r35, $r36, $r42, $r46, $r47, $r48, $r50, $r51;
        java.lang.SecurityException $r6, $r10, $r24, $r37;
        boolean $z0, $z1;
        com.android.server.pm.PackageSignatures $r19, $r25, $r32, $r39;
        android.content.pm.Signature[] $r26, $r31, callerSignature#2;
        com.android.server.pm.SharedUserSetting $r40;
        java.lang.IllegalArgumentException $r43, $r53;

        this := @this: com.android.server.pm.PackageManagerService;

        targetPackage := @parameter0: java.lang.String;

        installerPackageName := @parameter1: java.lang.String;

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = $r1.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(targetPackage);

        targetPackageSetting = (com.android.server.pm.PackageSetting) $r3;

        if targetPackageSetting != null goto label02;

        $r53 = new java.lang.IllegalArgumentException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown target package: ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(targetPackage);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r49);

        throw $r53;

     label02:
        if installerPackageName == null goto label03;

        $r38 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r45 = $r38.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r44 = virtualinvoke $r45.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(installerPackageName);

        installerPackageSetting#1 = (com.android.server.pm.PackageSetting) $r44;

        if installerPackageSetting#1 != null goto label04;

        $r43 = new java.lang.IllegalArgumentException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown installer package: ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(installerPackageName);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r52);

        throw $r43;

     label03:
        installerPackageSetting#1 = null;

     label04:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        obj = virtualinvoke $r4.<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>(uid);

        if obj == null goto label07;

        $z0 = obj instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label05;

        $r40 = (com.android.server.pm.SharedUserSetting) obj;

        $r39 = $r40.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        callerSignature#2 = $r39.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        goto label08;

     label05:
        $z1 = obj instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label06;

        $r18 = (com.android.server.pm.PackageSetting) obj;

        $r19 = $r18.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        callerSignature#2 = $r19.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        goto label08;

     label06:
        $r10 = new java.lang.SecurityException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad object ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(obj);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for uid ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(uid);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label07:
        $r6 = new java.lang.SecurityException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown calling uid ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(uid);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label08:
        if installerPackageSetting#1 == null goto label09;

        $r32 = installerPackageSetting#1.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r31 = $r32.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        $i1 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>(callerSignature#2, $r31);

        if $i1 == 0 goto label09;

        $r37 = new java.lang.SecurityException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller does not have same cert as new installer package ");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(installerPackageName);

        $r41 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.SecurityException: void <init>(java.lang.String)>($r41);

        throw $r37;

     label09:
        $r17 = targetPackageSetting.<com.android.server.pm.PackageSetting: java.lang.String installerPackageName>;

        if $r17 == null goto label10;

        $r22 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r20 = $r22.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r23 = targetPackageSetting.<com.android.server.pm.PackageSetting: java.lang.String installerPackageName>;

        $r21 = virtualinvoke $r20.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r23);

        setting = (com.android.server.pm.PackageSetting) $r21;

        if setting == null goto label10;

        $r25 = setting.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r26 = $r25.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        $i0 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>(callerSignature#2, $r26);

        if $i0 == 0 goto label10;

        $r24 = new java.lang.SecurityException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller does not have same cert as old installer package ");

        $r27 = targetPackageSetting.<com.android.server.pm.PackageSetting: java.lang.String installerPackageName>;

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.SecurityException: void <init>(java.lang.String)>($r33);

        throw $r24;

     label10:
        targetPackageSetting.<com.android.server.pm.PackageSetting: java.lang.String installerPackageName> = installerPackageName;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>();

        exitmonitor l4;

     label11:
        goto label14;

     label12:
        $r54 := @caughtexception;

        l10 = $r54;

        exitmonitor l4;

     label13:
        throw l10;

     label14:
        return;

        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void processPendingInstall(com.android.server.pm.PackageManagerService$InstallArgs, int)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageManagerService$InstallArgs args;
        int currentStatus;
        com.android.server.pm.PackageManagerService$9 $r0;
        com.android.server.pm.PackageManagerService$PackageHandler $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        args := @parameter0: com.android.server.pm.PackageManagerService$InstallArgs;

        currentStatus := @parameter1: int;

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r0 = new com.android.server.pm.PackageManagerService$9;

        specialinvoke $r0.<com.android.server.pm.PackageManagerService$9: void <init>(com.android.server.pm.PackageManagerService,int,com.android.server.pm.PackageManagerService$InstallArgs)>(this, currentStatus, args);

        virtualinvoke $r1.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r0);

        return;
    }

    private static long calculateDirectorySize(com.android.internal.app.IMediaContainerService, java.io.File[]) throws android.os.RemoteException
    {
        com.android.internal.app.IMediaContainerService mcs;
        java.io.File[] paths, arr$;
        int len$, i$#2;
        java.io.File path;
        java.lang.String $r0;
        long $l0, result#1;

        mcs := @parameter0: com.android.internal.app.IMediaContainerService;

        paths := @parameter1: java.io.File[];

        result#1 = 0L;

        arr$ = paths;

        len$ = lengthof arr$;

        i$#2 = 0;

     label1:
        if i$#2 >= len$ goto label2;

        path = arr$[i$#2];

        $r0 = virtualinvoke path.<java.io.File: java.lang.String getAbsolutePath()>();

        $l0 = interfaceinvoke mcs.<com.android.internal.app.IMediaContainerService: long calculateDirectorySize(java.lang.String)>($r0);

        result#1 = result#1 + $l0;

        i$#2 = i$#2 + 1;

        goto label1;

     label2:
        return result#1;
    }

    private static void clearDirectory(com.android.internal.app.IMediaContainerService, java.io.File[])
    {
        com.android.internal.app.IMediaContainerService mcs;
        java.io.File[] paths, arr$;
        int len$, i$#1;
        java.io.File path;
        android.os.RemoteException l6, $r1;
        java.lang.String $r0;

        mcs := @parameter0: com.android.internal.app.IMediaContainerService;

        paths := @parameter1: java.io.File[];

        arr$ = paths;

        len$ = lengthof arr$;

        i$#1 = 0;

     label1:
        if i$#1 >= len$ goto label6;

        path = arr$[i$#1];

     label2:
        $r0 = virtualinvoke path.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke mcs.<com.android.internal.app.IMediaContainerService: void clearDirectory(java.lang.String)>($r0);

     label3:
        goto label5;

     label4:
        $r1 := @caughtexception;

        l6 = $r1;

     label5:
        i$#1 = i$#1 + 1;

        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private static boolean installOnExternalAsec(int)
    {
        int installFlags, $i0, $i1;

        installFlags := @parameter0: int;

        $i0 = installFlags & 16;

        if $i0 == 0 goto label1;

        return 0;

     label1:
        $i1 = installFlags & 8;

        if $i1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private static boolean installForwardLocked(int)
    {
        int installFlags, $i0;
        boolean $z0;

        installFlags := @parameter0: int;

        $i0 = installFlags & 1;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private com.android.server.pm.PackageManagerService$InstallArgs createInstallArgs(com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageManagerService$InstallParams params;
        com.android.server.pm.PackageManagerService$MoveInfo $r0;
        int $i0;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerService$AsecInstallArgs $r1;
        com.android.server.pm.PackageManagerService$FileInstallArgs $r2;
        com.android.server.pm.PackageManagerService$MoveInstallArgs $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        params := @parameter0: com.android.server.pm.PackageManagerService$InstallParams;

        $r0 = params.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$MoveInfo move>;

        if $r0 == null goto label1;

        $r3 = new com.android.server.pm.PackageManagerService$MoveInstallArgs;

        specialinvoke $r3.<com.android.server.pm.PackageManagerService$MoveInstallArgs: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>(this, params);

        return $r3;

     label1:
        $i0 = params.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean installOnExternalAsec(int)>($i0);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke params.<com.android.server.pm.PackageManagerService$InstallParams: boolean isForwardLocked()>();

        if $z1 == 0 goto label3;

     label2:
        $r1 = new com.android.server.pm.PackageManagerService$AsecInstallArgs;

        specialinvoke $r1.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>(this, params);

        return $r1;

     label3:
        $r2 = new com.android.server.pm.PackageManagerService$FileInstallArgs;

        specialinvoke $r2.<com.android.server.pm.PackageManagerService$FileInstallArgs: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>(this, params);

        return $r2;
    }

    private com.android.server.pm.PackageManagerService$InstallArgs createInstallArgsForExisting(int, java.lang.String, java.lang.String, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService this;
        int installFlags;
        java.lang.String codePath, resourcePath, $r3;
        java.lang.String[] instructionSets;
        boolean $z0, $z1, $z2, $z3, $z4, isInAsec#1;
        com.android.server.pm.PackageManagerService$FileInstallArgs $r0;
        com.android.server.pm.PackageManagerService$AsecInstallArgs $r1;
        java.io.File $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        installFlags := @parameter0: int;

        codePath := @parameter1: java.lang.String;

        resourcePath := @parameter2: java.lang.String;

        instructionSets := @parameter3: java.lang.String[];

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean installOnExternalAsec(int)>(installFlags);

        if $z0 == 0 goto label1;

        isInAsec#1 = 1;

        goto label3;

     label1:
        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean installForwardLocked(int)>(installFlags);

        if $z1 == 0 goto label2;

        $r2 = this.<com.android.server.pm.PackageManagerService: java.io.File mDrmAppPrivateInstallDir>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $z4 = virtualinvoke codePath.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        if $z4 != 0 goto label2;

        isInAsec#1 = 1;

        goto label3;

     label2:
        isInAsec#1 = 0;

     label3:
        if isInAsec#1 == 0 goto label4;

        $r1 = new com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $z2 = staticinvoke <com.android.server.pm.PackageManagerService: boolean installOnExternalAsec(int)>(installFlags);

        $z3 = staticinvoke <com.android.server.pm.PackageManagerService: boolean installForwardLocked(int)>(installFlags);

        specialinvoke $r1.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,java.lang.String[],boolean,boolean)>(this, codePath, instructionSets, $z2, $z3);

        return $r1;

     label4:
        $r0 = new com.android.server.pm.PackageManagerService$FileInstallArgs;

        specialinvoke $r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,java.lang.String,java.lang.String[])>(this, codePath, resourcePath, instructionSets);

        return $r0;
    }

    private void removeDexFiles(java.util.List, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService this;
        java.util.List allCodePaths;
        java.lang.String[] instructionSets, dexCodeInstructionSets, arr$;
        java.util.Iterator i$;
        java.lang.String codePath, dexCodeInstructionSet, $r7;
        int len$, retCode, i$#1;
        boolean $z0, $z1;
        java.lang.Object $r0;
        com.android.server.pm.Installer $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.IllegalStateException $r8;

        this := @this: com.android.server.pm.PackageManagerService;

        allCodePaths := @parameter0: java.util.List;

        instructionSets := @parameter1: java.lang.String[];

        $z0 = interfaceinvoke allCodePaths.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        if instructionSets != null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("instructionSet == null");

        throw $r8;

     label1:
        dexCodeInstructionSets = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getDexCodeInstructionSets(java.lang.String[])>(instructionSets);

        i$ = interfaceinvoke allCodePaths.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r0 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        codePath = (java.lang.String) $r0;

        arr$ = dexCodeInstructionSets;

        len$ = lengthof arr$;

        i$#1 = 0;

     label3:
        if i$#1 >= len$ goto label5;

        dexCodeInstructionSet = arr$[i$#1];

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        retCode = virtualinvoke $r1.<com.android.server.pm.Installer: int rmdex(java.lang.String,java.lang.String)>(codePath, dexCodeInstructionSet);

        if retCode >= 0 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove dex file for package:  at location ");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(codePath);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", retcode=");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(retCode);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r7);

     label4:
        i$#1 = i$#1 + 1;

        goto label3;

     label5:
        goto label2;

     label6:
        return;
    }

    private boolean isAsecExternal(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String cid, asecPath, $r0;
        boolean $z0, $z1;

        this := @this: com.android.server.pm.PackageManagerService;

        cid := @parameter0: java.lang.String;

        asecPath = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdFilesystem(java.lang.String)>(cid);

        $r0 = this.<com.android.server.pm.PackageManagerService: java.lang.String mAsecInternalPath>;

        $z0 = virtualinvoke asecPath.<java.lang.String: boolean startsWith(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static void maybeThrowExceptionForMultiArchCopy(java.lang.String, int) throws com.android.server.pm.PackageManagerException
    {
        java.lang.String message;
        int copyRet;
        com.android.server.pm.PackageManagerException $r0;

        message := @parameter0: java.lang.String;

        copyRet := @parameter1: int;

        if copyRet >= 0 goto label1;

        if copyRet == -114 goto label1;

        if copyRet == -113 goto label1;

        $r0 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r0.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(copyRet, message);

        throw $r0;

     label1:
        return;
    }

    static java.lang.String cidFromCodePath(java.lang.String)
    {
        java.lang.String fullCodePath, subStr1, $r0;
        int eidx, sidx, $i0;

        fullCodePath := @parameter0: java.lang.String;

        eidx = virtualinvoke fullCodePath.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        subStr1 = virtualinvoke fullCodePath.<java.lang.String: java.lang.String substring(int,int)>(0, eidx);

        sidx = virtualinvoke subStr1.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i0 = sidx + 1;

        $r0 = virtualinvoke subStr1.<java.lang.String: java.lang.String substring(int,int)>($i0, eidx);

        return $r0;
    }

    static java.lang.String getAsecPackageName(java.lang.String)
    {
        java.lang.String packageCid, $r0;
        int idx;

        packageCid := @parameter0: java.lang.String;

        idx = virtualinvoke packageCid.<java.lang.String: int lastIndexOf(java.lang.String)>("-");

        if idx != -1 goto label1;

        return packageCid;

     label1:
        $r0 = virtualinvoke packageCid.<java.lang.String: java.lang.String substring(int,int)>(0, idx);

        return $r0;
    }

    private static java.lang.String getNextCodePath(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String oldCodePath, prefix, suffix, $r2, $r7, $r8, idxStr#1, subStr#3, subStr#4, idxStr#6;
        int sidx, $i0, $i1, $i2, $i3, $i4, $i5, idx#2, idx#5;
        java.lang.NumberFormatException l7, $r9;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6;
        boolean $z0, $z1;

        oldCodePath := @parameter0: java.lang.String;

        prefix := @parameter1: java.lang.String;

        suffix := @parameter2: java.lang.String;

        idxStr#1 = "";

        idx#2 = 1;

        if oldCodePath == null goto label6;

        subStr#3 = oldCodePath;

        if suffix == null goto label1;

        $z1 = virtualinvoke subStr#3.<java.lang.String: boolean endsWith(java.lang.String)>(suffix);

        if $z1 == 0 goto label1;

        $i4 = virtualinvoke subStr#3.<java.lang.String: int length()>();

        $i3 = virtualinvoke suffix.<java.lang.String: int length()>();

        $i5 = $i4 - $i3;

        subStr#3 = virtualinvoke subStr#3.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

     label1:
        sidx = virtualinvoke subStr#3.<java.lang.String: int lastIndexOf(java.lang.String)>(prefix);

        if sidx == -1 goto label6;

        $i1 = virtualinvoke prefix.<java.lang.String: int length()>();

        $i0 = sidx + $i1;

        subStr#4 = virtualinvoke subStr#3.<java.lang.String: java.lang.String substring(int)>($i0);

        if subStr#4 == null goto label6;

        $z0 = virtualinvoke subStr#4.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label2;

        $r8 = "-";

        $i2 = virtualinvoke $r8.<java.lang.String: int length()>();

        subStr#4 = virtualinvoke subStr#4.<java.lang.String: java.lang.String substring(int)>($i2);

     label2:
        idx#5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(subStr#4);

        if idx#5 > 1 goto label3;

        idx#2 = idx#5 + 1;

        goto label4;

     label3:
        idx#2 = idx#5 + -1;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        l7 = $r9;

     label6:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(idx#2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        idxStr#6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(prefix);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(idxStr#6);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

        catch java.lang.NumberFormatException from label2 to label4 with label5;
    }

    private java.io.File getNextCodePath(java.io.File, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.io.File targetDir, result, $r0;
        java.lang.String packageName, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        boolean $z0;
        int suffix#1;

        this := @this: com.android.server.pm.PackageManagerService;

        targetDir := @parameter0: java.io.File;

        packageName := @parameter1: java.lang.String;

        suffix#1 = 1;

     label1:
        $r0 = new java.io.File;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(suffix#1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>(targetDir, $r5);

        result = $r0;

        suffix#1 = suffix#1 + 1;

        $z0 = virtualinvoke result.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return result;
    }

    static java.lang.String deriveCodePathName(java.lang.String)
    {
        java.lang.String codePath, name, $r1, $r6;
        java.io.File codeFile, $r0;
        int lastDot;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        codePath := @parameter0: java.lang.String;

        if codePath != null goto label1;

        return null;

     label1:
        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(codePath);

        codeFile = $r0;

        name = virtualinvoke codeFile.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke codeFile.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        return name;

     label2:
        $z1 = virtualinvoke name.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke name.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z2 == 0 goto label4;

     label3:
        lastDot = virtualinvoke name.<java.lang.String: int lastIndexOf(int)>(46);

        $r1 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>(0, lastDot);

        return $r1;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Odd, ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(codePath);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t look like an APK");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r6);

        return null;
    }

    private void installNewPackageLI(android.content.pm.PackageParser$Package, int, int, android.os.UserHandle, java.lang.String, java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg, newPackage#2;
        int parseFlags, scanFlags, $i1;
        android.os.UserHandle user, $r5;
        java.lang.String installerPackageName, volumeUuid, pkgName, $r12, $r17, $r22, $r24, $r28;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo res;
        boolean dataDirExists, $z0, $z1;
        java.lang.Throwable l11, $r27;
        java.io.File $r0;
        android.util.ArrayMap $r1, $r3, $r4, $r19, newPackage#1;
        com.android.server.pm.Settings $r2, $r18;
        long $l0;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r21, $r23, $r25, $r26;
        java.lang.Object $r16;
        com.android.server.pm.PackageManagerException $r20, newPackage#4;
        byte $b2;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        parseFlags := @parameter1: int;

        scanFlags := @parameter2: int;

        user := @parameter3: android.os.UserHandle;

        installerPackageName := @parameter4: java.lang.String;

        volumeUuid := @parameter5: java.lang.String;

        res := @parameter6: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        pkgName = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r0 = staticinvoke <android.os.Environment: java.io.File getDataUserPackageDirectory(java.lang.String,int,java.lang.String)>(volumeUuid, 0, pkgName);

        dataDirExists = virtualinvoke $r0.<java.io.File: boolean exists()>();

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        newPackage#1 = $r1;

        entermonitor $r1;

     label01:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mRenamedPackages>;

        $z0 = virtualinvoke $r3.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(pkgName);

        if $z0 == 0 goto label03;

        $r10 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to re-install ");

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pkgName);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without first uninstalling package running as ");

        $r18 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r19 = $r18.<com.android.server.pm.Settings: android.util.ArrayMap mRenamedPackages>;

        $r16 = virtualinvoke $r19.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(pkgName);

        $r17 = (java.lang.String) $r16;

        $r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-1, $r22);

        exitmonitor newPackage#1;

     label02:
        return;

     label03:
        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $z1 = virtualinvoke $r4.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(pkgName);

        if $z1 == 0 goto label05;

        $r7 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to re-install ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pkgName);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without first uninstalling.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-1, $r12);

        exitmonitor newPackage#1;

     label04:
        return;

     label05:
        exitmonitor newPackage#1;

     label06:
        goto label09;

     label07:
        $r27 := @caughtexception;

        l11 = $r27;

        exitmonitor newPackage#1;

     label08:
        throw l11;

     label09:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        newPackage#2 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)>(pkg, parseFlags, scanFlags, $l0, user);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void updateSettingsLI(android.content.pm.PackageParser$Package,java.lang.String,java.lang.String,int[],boolean[],com.android.server.pm.PackageManagerService$PackageInstalledInfo,android.os.UserHandle)>(newPackage#2, installerPackageName, volumeUuid, null, null, res, user);

        $i1 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i1 == 1 goto label12;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        if dataDirExists == 0 goto label10;

        $b2 = 1;

        goto label11;

     label10:
        $b2 = 0;

     label11:
        $r6 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>(pkgName, $r5, 0, null, null, $b2, $r6, 1);

     label12:
        goto label14;

     label13:
        $r20 := @caughtexception;

        newPackage#4 = $r20;

        $r26 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package couldn\'t be installed in ");

        $r24 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(java.lang.String,com.android.server.pm.PackageManagerException)>($r28, newPackage#4);

     label14:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch com.android.server.pm.PackageManagerException from label09 to label12 with label13;
    }

    private boolean shouldCheckUpgradeKeySetLP(com.android.server.pm.PackageSetting, int)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting oldPs;
        int scanFlags, $i0, $i1, i#1;
        com.android.server.pm.KeySetManagerService ksms;
        long[] upgradeKeySets;
        com.android.server.pm.SharedUserSetting $r0;
        com.android.server.pm.PackageKeySetData $r1, $r3;
        boolean $z0, $z1;
        com.android.server.pm.Settings $r2;
        long $l2, $l3;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10, $r12;
        java.lang.String $r6, $r11, $r13;

        this := @this: com.android.server.pm.PackageManagerService;

        oldPs := @parameter0: com.android.server.pm.PackageSetting;

        scanFlags := @parameter1: int;

        if oldPs == null goto label1;

        $i0 = scanFlags & 16384;

        if $i0 != 0 goto label1;

        $r0 = oldPs.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r0 != null goto label1;

        $r1 = oldPs.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageKeySetData keySetData>;

        $z0 = virtualinvoke $r1.<com.android.server.pm.PackageKeySetData: boolean isUsingUpgradeKeySets()>();

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        ksms = $r2.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        $r3 = oldPs.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageKeySetData keySetData>;

        upgradeKeySets = virtualinvoke $r3.<com.android.server.pm.PackageKeySetData: long[] getUpgradeKeySets()>();

        i#1 = 0;

     label3:
        $i1 = lengthof upgradeKeySets;

        if i#1 >= $i1 goto label7;

        $l2 = upgradeKeySets[i#1];

        $z1 = virtualinvoke ksms.<com.android.server.pm.KeySetManagerService: boolean isIdValidKeySetId(long)>($l2);

        if $z1 != 0 goto label6;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r6 = oldPs.<com.android.server.pm.PackageSetting: java.lang.String name>;

        if $r6 == null goto label4;

        $r13 = oldPs.<com.android.server.pm.PackageSetting: java.lang.String name>;

        goto label5;

     label4:
        $r13 = "<null>";

     label5:
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains upgrade-key-set reference to unknown key-set: ");

        $l3 = upgradeKeySets[i#1];

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reverting to signatures check.");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("PackageManager", $r11);

        return 0;

     label6:
        i#1 = i#1 + 1;

        goto label3;

     label7:
        return 1;
    }

    private boolean checkUpgradeKeySetLP(com.android.server.pm.PackageSetting, android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting oldPS;
        android.content.pm.PackageParser$Package newPkg;
        long[] upgradeKeySets;
        com.android.server.pm.KeySetManagerService ksms;
        android.util.ArraySet upgradeSet, $r2;
        com.android.server.pm.PackageKeySetData $r0;
        com.android.server.pm.Settings $r1;
        int $i0, i#1;
        long $l1;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        oldPS := @parameter0: com.android.server.pm.PackageSetting;

        newPkg := @parameter1: android.content.pm.PackageParser$Package;

        $r0 = oldPS.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageKeySetData keySetData>;

        upgradeKeySets = virtualinvoke $r0.<com.android.server.pm.PackageKeySetData: long[] getUpgradeKeySets()>();

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        ksms = $r1.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        i#1 = 0;

     label1:
        $i0 = lengthof upgradeKeySets;

        if i#1 >= $i0 goto label3;

        $l1 = upgradeKeySets[i#1];

        upgradeSet = virtualinvoke ksms.<com.android.server.pm.KeySetManagerService: android.util.ArraySet getPublicKeysFromKeySetLPr(long)>($l1);

        if upgradeSet == null goto label2;

        $r2 = newPkg.<android.content.pm.PackageParser$Package: android.util.ArraySet mSigningKeys>;

        $z0 = virtualinvoke $r2.<android.util.ArraySet: boolean containsAll(java.util.Collection)>(upgradeSet);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i#1 = i#1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void replacePackageLI(android.content.pm.PackageParser$Package, int, int, android.os.UserHandle, java.lang.String, java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg, oldPackage;
        int parseFlags, scanFlags, $i0, $i1, $i2, $i3, i#2;
        android.os.UserHandle user;
        java.lang.String installerPackageName, volumeUuid, pkgName, $r10, $r17;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo res;
        int[] allUsers;
        boolean[] perUserInstalled;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l15, $r15;
        android.util.ArrayMap $r0, $r1, $r5, sysPkg#1;
        com.android.server.pm.Settings $r2;
        java.lang.Object $r3, $r4;
        android.content.pm.Signature[] $r6, $r7;
        boolean $z0, $z1, $z2, sysPkg#4;
        com.android.server.pm.UserManagerService $r8;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r16;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        parseFlags := @parameter1: int;

        scanFlags := @parameter2: int;

        user := @parameter3: android.os.UserHandle;

        installerPackageName := @parameter4: java.lang.String;

        volumeUuid := @parameter5: java.lang.String;

        res := @parameter6: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        pkgName = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        sysPkg#1 = $r1;

        entermonitor $r1;

     label01:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r0.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(pkgName);

        oldPackage = (android.content.pm.PackageParser$Package) $r3;

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(pkgName);

        ps = (com.android.server.pm.PackageSetting) $r4;

        $z0 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean shouldCheckUpgradeKeySetLP(com.android.server.pm.PackageSetting,int)>(ps, scanFlags);

        if $z0 == 0 goto label03;

        $z1 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean checkUpgradeKeySetLP(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>(ps, pkg);

        if $z1 != 0 goto label05;

        $r14 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New package not signed by keys specified by upgrade-keysets: ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pkgName);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-7, $r17);

        exitmonitor sysPkg#1;

     label02:
        return;

     label03:
        $r7 = oldPackage.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $r6 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $i0 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r7, $r6);

        if $i0 == 0 goto label05;

        $r9 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New package has a different signature: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pkgName);

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-7, $r10);

        exitmonitor sysPkg#1;

     label04:
        return;

     label05:
        $r8 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        allUsers = virtualinvoke $r8.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $i2 = lengthof allUsers;

        perUserInstalled = newarray (boolean)[$i2];

        i#2 = 0;

     label06:
        $i1 = lengthof allUsers;

        if i#2 >= $i1 goto label09;

        if ps == null goto label07;

        $i3 = allUsers[i#2];

        $z2 = virtualinvoke ps.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>($i3);

        goto label08;

     label07:
        $z2 = 0;

     label08:
        perUserInstalled[i#2] = $z2;

        i#2 = i#2 + 1;

        goto label06;

     label09:
        exitmonitor sysPkg#1;

     label10:
        goto label13;

     label11:
        $r15 := @caughtexception;

        l15 = $r15;

        exitmonitor sysPkg#1;

     label12:
        throw l15;

     label13:
        sysPkg#4 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>(oldPackage);

        if sysPkg#4 == 0 goto label14;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void replaceSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)>(oldPackage, pkg, parseFlags, scanFlags, user, allUsers, perUserInstalled, installerPackageName, volumeUuid, res);

        goto label15;

     label14:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void replaceNonSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)>(oldPackage, pkg, parseFlags, scanFlags, user, allUsers, perUserInstalled, installerPackageName, volumeUuid, res);

     label15:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private void replaceNonSystemPackageLI(android.content.pm.PackageParser$Package, android.content.pm.PackageParser$Package, int, int, android.os.UserHandle, int[], boolean[], java.lang.String, java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package deletedPackage, pkg, uidArray#6;
        int parseFlags, scanFlags, oldParseFlags, $i0, $i2, $i3, $i5, $i6, $i7;
        android.os.UserHandle user;
        int[] allUsers, $r3, uidArray#4;
        boolean[] perUserInstalled;
        java.lang.String installerPackageName, volumeUuid, pkgName, $r5, $r7, $r9, $r14, $r18, $r31, $r33, $r35, $r36;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo res;
        byte oldScanFlags, $b10, $b11;
        java.lang.Throwable l21, $r25;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r0, $r20;
        java.lang.Object $r1, $r19;
        boolean $z0, $z1, $z3, $z4, deletedPkg#1, updatedSettings#2, pkgList#9;
        android.content.pm.ApplicationInfo $r2, $r6;
        java.util.ArrayList $r4, pkgList#5;
        java.io.File $r8, uidArray#8;
        long $l4, origUpdateTime#3;
        android.util.ArrayMap $r11, e#13;
        java.lang.StringBuilder $r12, $r15, $r16, $r17, $r21, $r22, $r23, $r28, $r29, $r30, $r32, $r34;
        com.android.server.pm.Settings $r13;
        com.android.server.pm.PackageSetting $r24;
        com.android.server.pm.PackageManagerException $r26, $r27, uidArray#7, e#12;

        this := @this: com.android.server.pm.PackageManagerService;

        deletedPackage := @parameter0: android.content.pm.PackageParser$Package;

        pkg := @parameter1: android.content.pm.PackageParser$Package;

        parseFlags := @parameter2: int;

        scanFlags := @parameter3: int;

        user := @parameter4: android.os.UserHandle;

        allUsers := @parameter5: int[];

        perUserInstalled := @parameter6: boolean[];

        installerPackageName := @parameter7: java.lang.String;

        volumeUuid := @parameter8: java.lang.String;

        res := @parameter9: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        pkgName = deletedPackage.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        deletedPkg#1 = 1;

        updatedSettings#2 = 0;

        $r1 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        if $r1 == null goto label01;

        $r19 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        $r24 = (com.android.server.pm.PackageSetting) $r19;

        origUpdateTime#3 = $r24.<com.android.server.pm.PackageSetting: long lastUpdateTime>;

        goto label02;

     label01:
        origUpdateTime#3 = 0L;

     label02:
        $r0 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $z1 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>(pkgName, null, 1, null, null, 1, $r0, 1);

        if $z1 != 0 goto label03;

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-10, "replaceNonSystemPackageLI");

        deletedPkg#1 = 0;

        goto label09;

     label03:
        $z0 = virtualinvoke deletedPackage.<android.content.pm.PackageParser$Package: boolean isForwardLocked()>();

        if $z0 != 0 goto label04;

        $z4 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isExternal(android.content.pm.PackageParser$Package)>(deletedPackage);

        if $z4 == 0 goto label05;

     label04:
        $r3 = newarray (int)[1];

        $r2 = deletedPackage.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r2.<android.content.pm.ApplicationInfo: int uid>;

        $r3[0] = $i0;

        uidArray#4 = $r3;

        $r4 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(1);

        pkgList#5 = $r4;

        $r6 = deletedPackage.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r5 = $r6.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        virtualinvoke pkgList#5.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,int[],android.content.IIntentReceiver)>(0, 1, pkgList#5, uidArray#4, null);

     label05:
        $r7 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: int deleteCodeCacheDirsLI(java.lang.String,java.lang.String)>($r7, pkgName);

     label06:
        $i2 = scanFlags | 64;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        uidArray#6 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)>(pkg, parseFlags, $i2, $l4, user);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void updateSettingsLI(android.content.pm.PackageParser$Package,java.lang.String,java.lang.String,int[],boolean[],com.android.server.pm.PackageManagerService$PackageInstalledInfo,android.os.UserHandle)>(uidArray#6, installerPackageName, volumeUuid, allUsers, perUserInstalled, res, user);

        updatedSettings#2 = 1;

     label07:
        goto label09;

     label08:
        $r27 := @caughtexception;

        uidArray#7 = $r27;

        $r28 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package couldn\'t be installed in ");

        $r35 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(java.lang.String,com.android.server.pm.PackageManagerException)>($r36, uidArray#7);

     label09:
        $i3 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i3 == 1 goto label24;

        if updatedSettings#2 == 0 goto label10;

        $r20 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>(pkgName, null, 1, allUsers, perUserInstalled, 1, $r20, 1);

     label10:
        if deletedPkg#1 == 0 goto label24;

        $r8 = new java.io.File;

        $r9 = deletedPackage.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r9);

        uidArray#8 = $r8;

        pkgList#9 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isExternal(android.content.pm.PackageParser$Package)>(deletedPackage);

        $i5 = this.<com.android.server.pm.PackageManagerService: int mDefParseFlags>;

        $i6 = $i5 | 2;

        $z3 = virtualinvoke deletedPackage.<android.content.pm.PackageParser$Package: boolean isForwardLocked()>();

        if $z3 == 0 goto label11;

        $b10 = 16;

        goto label12;

     label11:
        $b10 = 0;

     label12:
        $i7 = $i6 | $b10;

        if pkgList#9 == 0 goto label13;

        $b11 = 32;

        goto label14;

     label13:
        $b11 = 0;

     label14:
        oldParseFlags = $i7 | $b11;

     label15:
        specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)>(uidArray#8, oldParseFlags, 72, origUpdateTime#3, null);

     label16:
        goto label18;

     label17:
        $r26 := @caughtexception;

        e#12 = $r26;

        $r21 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restore package : ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pkgName);

        $r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" after failed upgrade: ");

        $r31 = virtualinvoke e#12.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r33);

        return;

     label18:
        $r11 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        e#13 = $r11;

        entermonitor $r11;

     label19:
        $r14 = deletedPackage.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void updatePermissionsLPw(java.lang.String,android.content.pm.PackageParser$Package,int)>($r14, deletedPackage, 1);

        $r13 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r13.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor e#13;

     label20:
        goto label23;

     label21:
        $r25 := @caughtexception;

        l21 = $r25;

        exitmonitor e#13;

     label22:
        throw l21;

     label23:
        $r12 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Successfully restored package : ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pkgName);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" after failed upgrade");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r18);

     label24:
        return;

        catch com.android.server.pm.PackageManagerException from label06 to label07 with label08;
        catch com.android.server.pm.PackageManagerException from label15 to label16 with label17;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    private void replaceSystemPackageLI(android.content.pm.PackageParser$Package, android.content.pm.PackageParser$Package, int, int, android.os.UserHandle, int[], boolean[], java.lang.String, java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package deletedPackage, pkg, oldPkg, newPackage#9;
        int scanFlags, $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, parseFlags#1, parseFlags#4;
        android.os.UserHandle user;
        int[] allUsers;
        boolean[] perUserInstalled;
        java.lang.String installerPackageName, volumeUuid, packageName, $r9, $r21, $r26, $r37, $r41, $r47, $r49, $r58, $r59, $r60;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo res;
        com.android.server.pm.PackageSetting oldPkgSetting, newPkgSetting#10;
        java.lang.Throwable l19, l18, $r51, $r55, $r56, newPkgSetting#6;
        android.content.pm.ApplicationInfo $r0, $r12, $r13, $r16, $r20, $r42, $r44, $r46;
        android.util.ArrayMap $r1, $r3, $r4, $r18, $r23, newPackage#5, newPackage#7, newPkgSetting#13;
        java.lang.Object $r2, $r7, $r22, $r33;
        com.android.server.pm.Settings $r5, $r19, $r25, $r27, $r31;
        java.lang.StringBuilder $r6, $r8, $r10, $r11, $r30, $r34, $r36, $r38, $r40, $r48, $r50, $r57, $r61, $r62, $r63;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r14, $r15, $r17, $r45;
        long $l9, $l10;
        com.android.server.pm.SharedUserSetting $r28, $r29, $r35, $r39;
        java.lang.String[] $r43;
        com.android.server.pm.PackageManagerService$InstallArgs $r52;
        com.android.server.pm.PackageManagerException $r53, $r54, newPkgSetting#11, newPkgSetting#12;
        boolean disabledSystem#2, updatedSettings#3, disabledSystem#8;

        this := @this: com.android.server.pm.PackageManagerService;

        deletedPackage := @parameter0: android.content.pm.PackageParser$Package;

        pkg := @parameter1: android.content.pm.PackageParser$Package;

        parseFlags#1 := @parameter2: int;

        scanFlags := @parameter3: int;

        user := @parameter4: android.os.UserHandle;

        allUsers := @parameter5: int[];

        perUserInstalled := @parameter6: boolean[];

        installerPackageName := @parameter7: java.lang.String;

        volumeUuid := @parameter8: java.lang.String;

        res := @parameter9: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        updatedSettings#3 = 0;

        parseFlags#4 = parseFlags#1 | 1;

        $r0 = deletedPackage.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r0.<android.content.pm.ApplicationInfo: int privateFlags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label01;

        parseFlags#4 = parseFlags#4 | 128;

     label01:
        packageName = deletedPackage.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        if packageName != null goto label02;

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-10, "Attempt to delete null packageName.");

        return;

     label02:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        newPackage#5 = $r1;

        entermonitor $r1;

     label03:
        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        oldPkg = (android.content.pm.PackageParser$Package) $r2;

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        oldPkgSetting = (com.android.server.pm.PackageSetting) $r7;

        if oldPkg == null goto label04;

        $r13 = oldPkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        if $r13 == null goto label04;

        if oldPkgSetting != null goto label06;

     label04:
        $r6 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find package:");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" information");

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-10, $r9);

        exitmonitor newPackage#5;

     label05:
        return;

     label06:
        exitmonitor newPackage#5;

     label07:
        goto label10;

     label08:
        $r51 := @caughtexception;

        newPkgSetting#6 = $r51;

        exitmonitor newPackage#5;

     label09:
        throw newPkgSetting#6;

     label10:
        $r12 = oldPkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r12.<android.content.pm.ApplicationInfo: int uid>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)>(packageName, $i2, "replace sys pkg");

        $r14 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r16 = oldPkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r16.<android.content.pm.ApplicationInfo: int uid>;

        $r14.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int uid> = $i3;

        $r15 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r15.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage> = packageName;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void removePackageLI(com.android.server.pm.PackageSetting,boolean)>(oldPkgSetting, 1);

        $r18 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        newPackage#7 = $r18;

        entermonitor $r18;

     label11:
        $r19 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        disabledSystem#8 = virtualinvoke $r19.<com.android.server.pm.Settings: boolean disableSystemPackageLPw(java.lang.String)>(packageName);

        if disabledSystem#8 != 0 goto label12;

        if deletedPackage == null goto label12;

        $r45 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r46 = deletedPackage.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r47 = virtualinvoke $r46.<android.content.pm.ApplicationInfo: java.lang.String getCodePath()>();

        $r42 = deletedPackage.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r41 = virtualinvoke $r42.<android.content.pm.ApplicationInfo: java.lang.String getResourcePath()>();

        $r44 = deletedPackage.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r43 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(android.content.pm.ApplicationInfo)>($r44);

        $r52 = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgsForExisting(int,java.lang.String,java.lang.String,java.lang.String[])>(0, $r47, $r41, $r43);

        $r45.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: com.android.server.pm.PackageManagerService$InstallArgs args> = $r52;

        goto label13;

     label12:
        $r17 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r17.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: com.android.server.pm.PackageManagerService$InstallArgs args> = null;

     label13:
        exitmonitor newPackage#7;

     label14:
        goto label17;

     label15:
        $r56 := @caughtexception;

        l18 = $r56;

        exitmonitor newPackage#7;

     label16:
        throw l18;

     label17:
        $r21 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: int deleteCodeCacheDirsLI(java.lang.String,java.lang.String)>($r21, packageName);

        res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode> = 1;

        $r20 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i6 = $r20.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = $i6 | 128;

        $r20.<android.content.pm.ApplicationInfo: int flags> = $i5;

        newPackage#9 = null;

     label18:
        newPackage#9 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)>(pkg, parseFlags#4, scanFlags, 0L, user);

        $r22 = newPackage#9.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        if $r22 == null goto label19;

        $r33 = newPackage#9.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        newPkgSetting#10 = (com.android.server.pm.PackageSetting) $r33;

        $l10 = oldPkgSetting.<com.android.server.pm.PackageSetting: long firstInstallTime>;

        newPkgSetting#10.<com.android.server.pm.PackageSetting: long firstInstallTime> = $l10;

        $l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        newPkgSetting#10.<com.android.server.pm.PackageSetting: long lastUpdateTime> = $l9;

        $r29 = oldPkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r28 = newPkgSetting#10.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r29 == $r28 goto label19;

        $r30 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forbidding shared user change from ");

        $r39 = oldPkgSetting.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r34 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r35 = newPkgSetting#10.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-8, $r37);

        updatedSettings#3 = 1;

     label19:
        $i8 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i8 != 1 goto label20;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void updateSettingsLI(android.content.pm.PackageParser$Package,java.lang.String,java.lang.String,int[],boolean[],com.android.server.pm.PackageManagerService$PackageInstalledInfo,android.os.UserHandle)>(newPackage#9, installerPackageName, volumeUuid, allUsers, perUserInstalled, res, user);

        updatedSettings#3 = 1;

     label20:
        goto label22;

     label21:
        $r54 := @caughtexception;

        newPkgSetting#11 = $r54;

        $r62 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package couldn\'t be installed in ");

        $r60 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        $r61 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r59 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(java.lang.String,com.android.server.pm.PackageManagerException)>($r59, newPkgSetting#11);

     label22:
        $i7 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i7 == 1 goto label33;

        if newPackage#9 == null goto label23;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void removeInstalledPackageLI(android.content.pm.PackageParser$Package,boolean)>(newPackage#9, 1);

     label23:
        specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)>(oldPkg, parseFlags#4, 8, 0L, user);

     label24:
        goto label26;

     label25:
        $r53 := @caughtexception;

        newPkgSetting#12 = $r53;

        $r48 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restore original package: ");

        $r49 = virtualinvoke newPkgSetting#12.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        $r57 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r58);

     label26:
        $r23 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        newPkgSetting#13 = $r23;

        entermonitor $r23;

     label27:
        if disabledSystem#8 == 0 goto label28;

        $r31 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r31.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting enableSystemPackageLPw(java.lang.String)>(packageName);

     label28:
        if updatedSettings#3 == 0 goto label29;

        $r25 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r26 = oldPkgSetting.<com.android.server.pm.PackageSetting: java.lang.String installerPackageName>;

        virtualinvoke $r25.<com.android.server.pm.Settings: void setInstallerPackageName(java.lang.String,java.lang.String)>(packageName, $r26);

     label29:
        $r27 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r27.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor newPkgSetting#13;

     label30:
        goto label33;

     label31:
        $r55 := @caughtexception;

        l19 = $r55;

        exitmonitor newPkgSetting#13;

     label32:
        throw l19;

     label33:
        return;

        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label11 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch com.android.server.pm.PackageManagerException from label18 to label20 with label21;
        catch com.android.server.pm.PackageManagerException from label23 to label24 with label25;
        catch java.lang.Throwable from label27 to label30 with label31;
        catch java.lang.Throwable from label31 to label32 with label31;
    }

    private void updateSettingsLI(android.content.pm.PackageParser$Package, java.lang.String, java.lang.String, int[], boolean[], com.android.server.pm.PackageManagerService$PackageInstalledInfo, android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package newPackage;
        java.lang.String installerPackageName, volumeUuid, pkgName, $r5;
        int[] allUsers, $r13, arr$#6;
        boolean[] perUserInstalled;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo res;
        android.os.UserHandle user;
        int len$, userHandle, $i2, $i3, $i4, $i5, i$#7, arr$#8, arr$#9;
        java.lang.Throwable l15, $r14, $r15, ps#2;
        com.android.server.pm.Settings $r0, $r2, $r7, $r10, $r11, $r12;
        android.util.ArrayMap $r1, $r4, $r6, l9#1, l9#3;
        java.util.ArrayList $r3;
        byte $b1, $b6;
        android.content.pm.ApplicationInfo $r8;
        java.lang.Object $r9;
        boolean $z0, $z1;
        com.android.server.pm.PackageSetting ps#5;

        this := @this: com.android.server.pm.PackageManagerService;

        newPackage := @parameter0: android.content.pm.PackageParser$Package;

        installerPackageName := @parameter1: java.lang.String;

        volumeUuid := @parameter2: java.lang.String;

        allUsers := @parameter3: int[];

        perUserInstalled := @parameter4: boolean[];

        res := @parameter5: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        user := @parameter6: android.os.UserHandle;

        pkgName = newPackage.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l9#1 = $r1;

        entermonitor $r1;

     label01:
        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r0.<com.android.server.pm.Settings: void setInstallStatus(java.lang.String,int)>(pkgName, 0);

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r2.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor l9#1;

     label02:
        goto label05;

     label03:
        $r15 := @caughtexception;

        ps#2 = $r15;

        exitmonitor l9#1;

     label04:
        throw ps#2;

     label05:
        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l9#3 = $r4;

        entermonitor $r4;

     label06:
        $r5 = newPackage.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r3 = newPackage.<android.content.pm.PackageParser$Package: java.util.ArrayList permissions>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i2 <= 0 goto label07;

        $b6 = 1;

        goto label08;

     label07:
        $b6 = 0;

     label08:
        $b1 = 2 | $b6;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void updatePermissionsLPw(java.lang.String,android.content.pm.PackageParser$Package,int)>($r5, newPackage, $b1);

        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(pkgName);

        ps#5 = (com.android.server.pm.PackageSetting) $r9;

        if ps#5 == null goto label13;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>(newPackage);

        if $z0 == 0 goto label12;

        $r13 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] origUsers>;

        if $r13 == null goto label10;

        arr$#6 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] origUsers>;

        len$ = lengthof arr$#6;

        i$#7 = 0;

     label09:
        if i$#7 >= len$ goto label10;

        userHandle = arr$#6[i$#7];

        virtualinvoke ps#5.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(0, userHandle, installerPackageName);

        i$#7 = i$#7 + 1;

        goto label09;

     label10:
        if allUsers == null goto label12;

        if perUserInstalled == null goto label12;

        arr$#8 = 0;

     label11:
        $i4 = lengthof allUsers;

        if arr$#8 >= $i4 goto label12;

        $z1 = perUserInstalled[arr$#8];

        $i5 = allUsers[arr$#8];

        virtualinvoke ps#5.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>($z1, $i5);

        arr$#8 = arr$#8 + 1;

        goto label11;

     label12:
        arr$#9 = virtualinvoke user.<android.os.UserHandle: int getIdentifier()>();

        if arr$#9 == -1 goto label13;

        virtualinvoke ps#5.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>(1, arr$#9);

        virtualinvoke ps#5.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(0, arr$#9, installerPackageName);

     label13:
        res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String name> = pkgName;

        $r8 = newPackage.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r8.<android.content.pm.ApplicationInfo: int uid>;

        res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int uid> = $i3;

        res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: android.content.pm.PackageParser$Package pkg> = newPackage;

        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r10.<com.android.server.pm.Settings: void setInstallStatus(java.lang.String,int)>(pkgName, 1);

        $r11 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r11.<com.android.server.pm.Settings: void setInstallerPackageName(java.lang.String,java.lang.String)>(pkgName, installerPackageName);

        res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode> = 1;

        $r12 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r12.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor l9#3;

     label14:
        goto label17;

     label15:
        $r14 := @caughtexception;

        l15 = $r14;

        exitmonitor l9#3;

     label16:
        throw l15;

     label17:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private void installPackageLI(com.android.server.pm.PackageManagerService$InstallArgs, com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageManagerService$InstallArgs args;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo res;
        int installFlags, parseFlags, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12, $i13, $i14, $i15, $i16, oldTargetSdk#17, newTargetSdk#18, oldPackage#22, oldTargetSdk#23, pme#31;
        java.lang.String installerPackageName, volumeUuid, $r1, $r4, $r7, $r30, $r31, $r35, $r38, $r40, $r44, $r50, $r53, $r59, $r60, $r63, $r66, $r68, $r71, $r76, $r78, $r79, $r80, $r82, $r86, $r100, $r115, $r124, $r131, $r135, $r140, e#9, e#12, oldName#15;
        java.io.File tmpPackageFile, $r0, $r29;
        boolean forwardLocked, onExternal, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, replace#3, systemApp#13, $z14, sigsOk#25, $z15;
        android.content.pm.PackageParser$Package pkg, $r93, $r102, $r107, oldPackage#16;
        com.android.server.pm.BasePermission bp;
        java.lang.Throwable l25, l24, l26, $r136, $r137, $r142;
        com.android.server.pm.PackageManagerService$MoveInfo $r2, $r15;
        android.content.pm.PackageParser $r3, pp#7;
        java.lang.String[] $r5;
        android.util.DisplayMetrics $r6;
        android.content.pm.ApplicationInfo $r8, $r23, $r45, $r46, $r106, $r108, $r113, $r114;
        com.android.server.pm.Settings $r9, $r20, $r34, $r52, $r89, $r120;
        android.content.pm.ManifestDigest $r10, $r123, $r141;
        android.util.ArrayMap $r11, $r14, $r19, $r21, $r33, $r39, $r47, $r90, $r109, $r111, $r121, $r122, pme#14, pme#28, pme#32;
        java.util.ArrayList $r12, $r54, $r67, $r119, $r126;
        java.lang.Object $r13, $r18, $r36, $r48, $r51, $r91, $r110, $r118;
        short $s9, $s11, scanFlags#4, scanFlags#27;
        android.os.UserHandle $r16, $r17, $r22;
        com.android.server.pm.UserManagerService $r24, $r105;
        int[] $r25, $r26, $r103, $r104;
        java.lang.StringBuilder $r27, $r28, $r37, $r41, $r42, $r43, $r61, $r62, $r64, $r65, $r69, $r70, $r73, $r74, $r75, $r81, $r83, $r84, $r85, $r98, $r99, $r101, $r112, $r116, $r117, $r125, $r127, $r128, $r129, $r130, $r132, $r133, $r134;
        com.android.server.pm.PackageDexOptimizer $r32;
        android.content.pm.PermissionInfo $r49, $r72, $r77, $r87;
        android.content.pm.Signature[] $r55, $r57;
        com.android.server.pm.PackageSignatures $r56;
        com.android.server.pm.PackageSettingBase $r58, $r94, $r95, $r97;
        com.android.server.pm.PackageSetting $r88, $r92, $r96, oldName#19, oldName#29, oldName#33;
        android.content.pm.PackageParser$PackageParserException $r138, $r144, e#8, e#10;
        com.android.server.pm.PackageManagerException $r139, $r143, oldPackage#20, pme#30;
        byte $b17, $b18;
        android.content.pm.PackageParser$Permission newTargetSdk#24;

        this := @this: com.android.server.pm.PackageManagerService;

        args := @parameter0: com.android.server.pm.PackageManagerService$InstallArgs;

        res := @parameter1: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        installFlags = args.<com.android.server.pm.PackageManagerService$InstallArgs: int installFlags>;

        installerPackageName = args.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String installerPackageName>;

        volumeUuid = args.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String volumeUuid>;

        $r0 = new java.io.File;

        $r1 = virtualinvoke args.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String getCodePath()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        tmpPackageFile = $r0;

        $i0 = installFlags & 1;

        if $i0 == 0 goto label01;

        $z12 = 1;

        goto label02;

     label01:
        $z12 = 0;

     label02:
        forwardLocked = $z12;

        $i1 = installFlags & 8;

        if $i1 != 0 goto label03;

        $r140 = args.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String volumeUuid>;

        if $r140 == null goto label04;

     label03:
        $z13 = 1;

        goto label05;

     label04:
        $z13 = 0;

     label05:
        onExternal = $z13;

        replace#3 = 0;

        scanFlags#4 = 24;

        $r2 = args.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$MoveInfo move>;

        if $r2 == null goto label06;

        scanFlags#4 = 16408;

     label06:
        res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode> = 1;

        $i3 = this.<com.android.server.pm.PackageManagerService: int mDefParseFlags>;

        $i4 = $i3 | 2;

        if forwardLocked == 0 goto label07;

        $b17 = 16;

        goto label08;

     label07:
        $b17 = 0;

     label08:
        $i2 = $i4 | $b17;

        if onExternal == 0 goto label09;

        $b18 = 32;

        goto label10;

     label09:
        $b18 = 0;

     label10:
        parseFlags = $i2 | $b18;

        $r3 = new android.content.pm.PackageParser;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r3.<android.content.pm.PackageParser: void <init>()>();

        pp#7 = $r3;

        $r5 = this.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses>;

        virtualinvoke pp#7.<android.content.pm.PackageParser: void setSeparateProcesses(java.lang.String[])>($r5);

        $r6 = this.<com.android.server.pm.PackageManagerService: android.util.DisplayMetrics mMetrics>;

        virtualinvoke pp#7.<android.content.pm.PackageParser: void setDisplayMetrics(android.util.DisplayMetrics)>($r6);

     label11:
        pkg = virtualinvoke pp#7.<android.content.pm.PackageParser: android.content.pm.PackageParser$Package parsePackage(java.io.File,int)>(tmpPackageFile, parseFlags);

     label12:
        goto label14;

     label13:
        $r138 := @caughtexception;

        e#8 = $r138;

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(java.lang.String,android.content.pm.PackageParser$PackageParserException)>("Failed parse during installPackageLI", e#8);

        return;

     label14:
        $r4 = args.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String abiOverride>;

        pkg.<android.content.pm.PackageParser$Package: java.lang.String cpuAbiOverride> = $r4;

        $r7 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String name> = $r7;

        e#9 = $r7;

        $r8 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i5 = $r8.<android.content.pm.ApplicationInfo: int flags>;

        $i6 = $i5 & 256;

        if $i6 == 0 goto label15;

        $i16 = installFlags & 4;

        if $i16 != 0 goto label15;

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-15, "installPackageLI");

        return;

     label15:
        virtualinvoke pp#7.<android.content.pm.PackageParser: void collectCertificates(android.content.pm.PackageParser$Package,int)>(pkg, parseFlags);

        virtualinvoke pp#7.<android.content.pm.PackageParser: void collectManifestDigest(android.content.pm.PackageParser$Package)>(pkg);

     label16:
        goto label18;

     label17:
        $r144 := @caughtexception;

        e#10 = $r144;

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(java.lang.String,android.content.pm.PackageParser$PackageParserException)>("Failed collect during installPackageLI", e#10);

        return;

     label18:
        $r10 = args.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.ManifestDigest manifestDigest>;

        if $r10 == null goto label19;

        $r141 = args.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.ManifestDigest manifestDigest>;

        $r123 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ManifestDigest manifestDigest>;

        $z11 = virtualinvoke $r141.<android.content.pm.ManifestDigest: boolean equals(java.lang.Object)>($r123);

        if $z11 != 0 goto label19;

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-23, "Manifest digest changed");

        return;

     label19:
        e#12 = null;

        systemApp#13 = 0;

        $r11 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        pme#14 = $r11;

        entermonitor $r11;

     label20:
        $i7 = installFlags & 2;

        if $i7 == 0 goto label24;

        $r120 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r121 = $r120.<com.android.server.pm.Settings: android.util.ArrayMap mRenamedPackages>;

        $r118 = virtualinvoke $r121.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(e#9);

        oldName#15 = (java.lang.String) $r118;

        $r119 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mOriginalPackages>;

        if $r119 == null goto label21;

        $r126 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList mOriginalPackages>;

        $z9 = virtualinvoke $r126.<java.util.ArrayList: boolean contains(java.lang.Object)>(oldName#15);

        if $z9 == 0 goto label21;

        $r122 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $z10 = virtualinvoke $r122.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(oldName#15);

        if $z10 == 0 goto label21;

        virtualinvoke pkg.<android.content.pm.PackageParser$Package: void setPackageName(java.lang.String)>(oldName#15);

        e#9 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        replace#3 = 1;

        goto label22;

     label21:
        $r111 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $z8 = virtualinvoke $r111.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(e#9);

        if $z8 == 0 goto label22;

        replace#3 = 1;

     label22:
        if replace#3 == 0 goto label24;

        $r109 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r110 = virtualinvoke $r109.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(e#9);

        oldPackage#16 = (android.content.pm.PackageParser$Package) $r110;

        $r113 = oldPackage#16.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        oldTargetSdk#17 = $r113.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        $r114 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        newTargetSdk#18 = $r114.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if oldTargetSdk#17 <= 22 goto label24;

        if newTargetSdk#18 > 22 goto label24;

        $r112 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();

        $r132 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r131 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r134 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r131);

        $r133 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" new target SDK ");

        $r128 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(newTargetSdk#18);

        $r127 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t support runtime permissions but the old");

        $r130 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" target SDK ");

        $r129 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(oldTargetSdk#17);

        $r125 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does.");

        $r124 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-26, $r124);

        exitmonitor pme#14;

     label23:
        return;

     label24:
        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r14 = $r9.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r13 = virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(e#9);

        oldName#19 = (com.android.server.pm.PackageSetting) $r13;

        if oldName#19 == null goto label34;

        $z4 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean shouldCheckUpgradeKeySetLP(com.android.server.pm.PackageSetting,int)>(oldName#19, scanFlags#4);

        if $z4 == 0 goto label26;

        $z7 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean checkUpgradeKeySetLP(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>(oldName#19, pkg);

        if $z7 != 0 goto label30;

        $r98 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        $r101 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r100 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r99 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r100);

        $r116 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" upgrade keys do not match the ");

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("previously installed version");

        $r115 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-7, $r115);

        exitmonitor pme#14;

     label25:
        return;

     label26:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void verifySignaturesLP(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>(oldName#19, pkg);

     label27:
        goto label30;

     label28:
        $r139 := @caughtexception;

        oldPackage#20 = $r139;

        $i15 = oldPackage#20.<com.android.server.pm.PackageManagerException: int error>;

        $r135 = virtualinvoke oldPackage#20.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>($i15, $r135);

        exitmonitor pme#14;

     label29:
        return;

     label30:
        $r89 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r90 = $r89.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r91 = virtualinvoke $r90.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(e#9);

        $r92 = (com.android.server.pm.PackageSetting) $r91;

        e#12 = $r92.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r93 = oldName#19.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r93 == null goto label33;

        $r102 = oldName#19.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r108 = $r102.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        if $r108 == null goto label33;

        $r107 = oldName#19.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r106 = $r107.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i14 = $r106.<android.content.pm.ApplicationInfo: int flags>;

        $i13 = $i14 & 1;

        if $i13 == 0 goto label31;

        $z14 = 1;

        goto label32;

     label31:
        $z14 = 0;

     label32:
        systemApp#13 = $z14;

     label33:
        $r105 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $r104 = virtualinvoke $r105.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $r103 = virtualinvoke oldName#19.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>($r104, 1);

        res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] origUsers> = $r103;

     label34:
        $r12 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList permissions>;

        oldPackage#22 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        oldTargetSdk#23 = oldPackage#22 - 1;

     label35:
        if oldTargetSdk#23 < 0 goto label43;

        $r54 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList permissions>;

        $r51 = virtualinvoke $r54.<java.util.ArrayList: java.lang.Object get(int)>(oldTargetSdk#23);

        newTargetSdk#24 = (android.content.pm.PackageParser$Permission) $r51;

        $r52 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r47 = $r52.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r49 = newTargetSdk#24.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r50 = $r49.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r48 = virtualinvoke $r47.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r50);

        bp = (com.android.server.pm.BasePermission) $r48;

        if bp == null goto label42;

        $r60 = bp.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r59 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z2 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>($r59);

        if $z2 == 0 goto label36;

        $r94 = bp.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        $z5 = $r94 instanceof com.android.server.pm.PackageSetting;

        if $z5 == 0 goto label36;

        $r95 = bp.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        $r96 = (com.android.server.pm.PackageSetting) $r95;

        $z6 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean shouldCheckUpgradeKeySetLP(com.android.server.pm.PackageSetting,int)>($r96, scanFlags#4);

        if $z6 == 0 goto label36;

        $r97 = bp.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        $r88 = (com.android.server.pm.PackageSetting) $r97;

        sigsOk#25 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean checkUpgradeKeySetLP(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>($r88, pkg);

        goto label39;

     label36:
        $r58 = bp.<com.android.server.pm.BasePermission: com.android.server.pm.PackageSettingBase packageSetting>;

        $r56 = $r58.<com.android.server.pm.PackageSettingBase: com.android.server.pm.PackageSignatures signatures>;

        $r55 = $r56.<com.android.server.pm.PackageSignatures: android.content.pm.Signature[] mSignatures>;

        $r57 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        $i12 = staticinvoke <com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r55, $r57);

        if $i12 != 0 goto label37;

        $z15 = 1;

        goto label38;

     label37:
        $z15 = 0;

     label38:
        sigsOk#25 = $z15;

     label39:
        if sigsOk#25 != 0 goto label42;

        $r66 = bp.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $z3 = virtualinvoke $r66.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z3 != 0 goto label41;

        $r81 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r82 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r85 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r82);

        $r84 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attempting to redeclare permission ");

        $r87 = newTargetSdk#24.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r86 = $r87.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r74 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);

        $r73 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already owned by ");

        $r76 = bp.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        $r75 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-112, $r78);

        $r77 = newTargetSdk#24.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r80 = $r77.<android.content.pm.PermissionInfo: java.lang.String name>;

        res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String origPermission> = $r80;

        $r79 = bp.<com.android.server.pm.BasePermission: java.lang.String sourcePackage>;

        res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String origPackage> = $r79;

        exitmonitor pme#14;

     label40:
        return;

     label41:
        $r65 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r63 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r62 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r61 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attempting to redeclare system permission ");

        $r72 = newTargetSdk#24.<android.content.pm.PackageParser$Permission: android.content.pm.PermissionInfo info>;

        $r71 = $r72.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r70 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring new declaration");

        $r68 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r68);

        $r67 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList permissions>;

        virtualinvoke $r67.<java.util.ArrayList: java.lang.Object remove(int)>(oldTargetSdk#23);

     label42:
        oldTargetSdk#23 = oldTargetSdk#23 + -1;

        goto label35;

     label43:
        exitmonitor pme#14;

     label44:
        goto label47;

     label45:
        $r142 := @caughtexception;

        l24 = $r142;

        exitmonitor pme#14;

     label46:
        throw l24;

     label47:
        if systemApp#13 == 0 goto label48;

        if onExternal == 0 goto label48;

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-19, "Cannot install updates to system apps on sdcard");

        return;

     label48:
        $r15 = args.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$MoveInfo move>;

        if $r15 == null goto label55;

        scanFlags#27 = scanFlags#4 | 2;

        scanFlags#4 = scanFlags#27 | 8192;

        $r39 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        pme#28 = $r39;

        entermonitor $r39;

     label49:
        $r34 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r33 = $r34.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r36 = virtualinvoke $r33.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(e#9);

        oldName#29 = (com.android.server.pm.PackageSetting) $r36;

        if oldName#29 != null goto label50;

        $r41 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing settings for moved package ");

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(e#9);

        $r53 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-110, $r53);

     label50:
        $r45 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r35 = oldName#29.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        $r45.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r35;

        $r46 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r44 = oldName#29.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString>;

        $r46.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi> = $r44;

        exitmonitor pme#28;

     label51:
        goto label54;

     label52:
        $r137 := @caughtexception;

        l25 = $r137;

        exitmonitor pme#28;

     label53:
        throw l25;

     label54:
        goto label60;

     label55:
        if forwardLocked != 0 goto label60;

        $r23 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $z1 = virtualinvoke $r23.<android.content.pm.ApplicationInfo: boolean isExternalAsec()>();

        if $z1 != 0 goto label60;

        scanFlags#4 = scanFlags#4 | 2;

     label56:
        $r29 = new java.io.File;

        $r30 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        specialinvoke $r29.<java.io.File: void <init>(java.lang.String)>($r30);

        $r31 = args.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String abiOverride>;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void derivePackageAbi(android.content.pm.PackageParser$Package,java.io.File,java.lang.String,boolean)>(pkg, $r29, $r31, 1);

     label57:
        goto label59;

     label58:
        $r143 := @caughtexception;

        pme#30 = $r143;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Error deriving application ABI", pme#30);

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-110, "Error deriving application ABI");

        return;

     label59:
        $r32 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        pme#31 = virtualinvoke $r32.<com.android.server.pm.PackageDexOptimizer: int performDexOpt(android.content.pm.PackageParser$Package,java.lang.String[],boolean,boolean,boolean)>(pkg, null, 0, 0, 0);

        if pme#31 != -1 goto label60;

        $r27 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dexopt failed for ");

        $r38 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        $r37 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-11, $r40);

        return;

     label60:
        $i8 = res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        $z0 = virtualinvoke args.<com.android.server.pm.PackageManagerService$InstallArgs: boolean doRename(int,android.content.pm.PackageParser$Package,java.lang.String)>($i8, pkg, e#12);

        if $z0 != 0 goto label61;

        virtualinvoke res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-4, "Failed rename");

        return;

     label61:
        $r17 = args.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        $i10 = virtualinvoke $r17.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke this.<com.android.server.pm.PackageManagerService: void startIntentFilterVerifications(int,boolean,android.content.pm.PackageParser$Package)>($i10, replace#3, pkg);

        if replace#3 == 0 goto label62;

        $s11 = scanFlags#4 | 2048;

        $r22 = args.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void replacePackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)>(pkg, parseFlags, $s11, $r22, installerPackageName, volumeUuid, res);

        goto label63;

     label62:
        $s9 = scanFlags#4 | 1024;

        $r16 = args.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void installNewPackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)>(pkg, parseFlags, $s9, $r16, installerPackageName, volumeUuid, res);

     label63:
        $r21 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        pme#32 = $r21;

        entermonitor $r21;

     label64:
        $r20 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r19 = $r20.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r18 = virtualinvoke $r19.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(e#9);

        oldName#33 = (com.android.server.pm.PackageSetting) $r18;

        if oldName#33 == null goto label65;

        $r24 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $r25 = virtualinvoke $r24.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $r26 = virtualinvoke oldName#33.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>($r25, 1);

        res.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] newUsers> = $r26;

     label65:
        exitmonitor pme#32;

     label66:
        goto label69;

     label67:
        $r136 := @caughtexception;

        l26 = $r136;

        exitmonitor pme#32;

     label68:
        throw l26;

     label69:
        return;

        catch android.content.pm.PackageParser$PackageParserException from label11 to label12 with label13;
        catch android.content.pm.PackageParser$PackageParserException from label15 to label16 with label17;
        catch com.android.server.pm.PackageManagerException from label26 to label27 with label28;
        catch java.lang.Throwable from label20 to label23 with label45;
        catch java.lang.Throwable from label24 to label25 with label45;
        catch java.lang.Throwable from label26 to label29 with label45;
        catch java.lang.Throwable from label30 to label40 with label45;
        catch java.lang.Throwable from label41 to label44 with label45;
        catch java.lang.Throwable from label45 to label46 with label45;
        catch java.lang.Throwable from label49 to label51 with label52;
        catch java.lang.Throwable from label52 to label53 with label52;
        catch com.android.server.pm.PackageManagerException from label56 to label57 with label58;
        catch java.lang.Throwable from label64 to label66 with label67;
        catch java.lang.Throwable from label67 to label68 with label67;
    }

    private void startIntentFilterVerifications(int, boolean, android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, verifierUid, $i1;
        boolean replacing;
        android.content.pm.PackageParser$Package pkg;
        android.os.Message msg;
        android.content.ComponentName $r0, $r1;
        java.lang.String $r2;
        com.android.server.pm.PackageManagerService$PackageHandler $r3, $r4, $r6;
        com.android.server.pm.PackageManagerService$IFVerificationParams $r5;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        replacing := @parameter1: boolean;

        pkg := @parameter2: android.content.pm.PackageParser$Package;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent>;

        if $r0 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "No IntentFilter verification will not be done as there is no IntentFilterVerifier available!");

        return;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent>;

        $r2 = virtualinvoke $r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        if userId != -1 goto label2;

        $i1 = 0;

        goto label3;

     label2:
        $i1 = userId;

     label3:
        verifierUid = virtualinvoke this.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>($r2, $i1);

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r3.<com.android.server.pm.PackageManagerService$PackageHandler: void removeMessages(int)>(17);

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        msg = virtualinvoke $r4.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int)>(17);

        $r5 = new com.android.server.pm.PackageManagerService$IFVerificationParams;

        specialinvoke $r5.<com.android.server.pm.PackageManagerService$IFVerificationParams: void <init>(android.content.pm.PackageParser$Package,boolean,int,int)>(pkg, replacing, userId, verifierUid);

        msg.<android.os.Message: java.lang.Object obj> = $r5;

        $r6 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r6.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendMessage(android.os.Message)>(msg);

        return;
    }

    private void verifyIntentFiltersIfNeeded(int, int, boolean, android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, verifierUid, size, $i0, $i1, count#1, i$#8;
        boolean replacing, hasDomainURLs, $z0, $z1, $z2, $z4, $z5, $z6, $z7, $z8, ivi#3;
        android.content.pm.PackageParser$Package pkg;
        java.lang.String packageName;
        android.util.ArrayMap l9, $r2;
        android.content.pm.PackageParser$ActivityIntentInfo filter, filter#7;
        java.util.ArrayList $r0, $r1, $r4, $r7, $r10;
        java.lang.Throwable l16, $r13;
        com.android.server.pm.PackageManagerService$IntentFilterVerifier $r3, $r8;
        java.lang.Object $r5, $r6, $r9, $r12;
        com.android.server.pm.Settings $r11;
        android.content.pm.IntentFilterVerificationInfo ivi#2;
        java.util.Iterator i$#4, i$#6, a#9, filter#11;
        android.content.pm.PackageParser$Activity a#5, i$#10;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        verifierUid := @parameter1: int;

        replacing := @parameter2: boolean;

        pkg := @parameter3: android.content.pm.PackageParser$Package;

        $r0 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        size = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        if size != 0 goto label01;

        return;

     label01:
        hasDomainURLs = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasDomainURLs(android.content.pm.PackageParser$Package)>(pkg);

        if hasDomainURLs != 0 goto label02;

        return;

     label02:
        count#1 = 0;

        packageName = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l9 = $r2;

        entermonitor $r2;

     label03:
        if replacing != 0 goto label05;

        $r11 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        ivi#2 = virtualinvoke $r11.<com.android.server.pm.Settings: android.content.pm.IntentFilterVerificationInfo getIntentFilterVerificationLPr(java.lang.String)>(packageName);

        if ivi#2 == null goto label05;

        exitmonitor l9;

     label04:
        return;

     label05:
        ivi#3 = 0;

        $r1 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        i$#4 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke i$#4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r9 = interfaceinvoke i$#4.<java.util.Iterator: java.lang.Object next()>();

        a#5 = (android.content.pm.PackageParser$Activity) $r9;

        $r10 = a#5.<android.content.pm.PackageParser$Activity: java.util.ArrayList intents>;

        i$#6 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label07:
        $z6 = interfaceinvoke i$#6.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label09;

        $r12 = interfaceinvoke i$#6.<java.util.Iterator: java.lang.Object next()>();

        filter#7 = (android.content.pm.PackageParser$ActivityIntentInfo) $r12;

        $z8 = virtualinvoke filter#7.<android.content.pm.PackageParser$ActivityIntentInfo: boolean needsVerification()>();

        if $z8 == 0 goto label08;

        $z7 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean needsNetworkVerificationLPr(android.content.pm.PackageParser$ActivityIntentInfo)>(filter#7);

        if $z7 == 0 goto label08;

        ivi#3 = 1;

        goto label09;

     label08:
        goto label07;

     label09:
        goto label06;

     label10:
        if ivi#3 == 0 goto label15;

        $i1 = this.<com.android.server.pm.PackageManagerService: int mIntentFilterVerificationToken>;

        $i0 = $i1 + 1;

        this.<com.android.server.pm.PackageManagerService: int mIntentFilterVerificationToken> = $i0;

        i$#8 = $i1;

        $r4 = pkg.<android.content.pm.PackageParser$Package: java.util.ArrayList activities>;

        a#9 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke a#9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r5 = interfaceinvoke a#9.<java.util.Iterator: java.lang.Object next()>();

        i$#10 = (android.content.pm.PackageParser$Activity) $r5;

        $r7 = i$#10.<android.content.pm.PackageParser$Activity: java.util.ArrayList intents>;

        filter#11 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke filter#11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r6 = interfaceinvoke filter#11.<java.util.Iterator: java.lang.Object next()>();

        filter = (android.content.pm.PackageParser$ActivityIntentInfo) $r6;

        $z4 = virtualinvoke filter.<android.content.pm.PackageParser$ActivityIntentInfo: boolean handlesWebUris(boolean)>(1);

        if $z4 == 0 goto label13;

        $z5 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean needsNetworkVerificationLPr(android.content.pm.PackageParser$ActivityIntentInfo)>(filter);

        if $z5 == 0 goto label13;

        $r8 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier>;

        interfaceinvoke $r8.<com.android.server.pm.PackageManagerService$IntentFilterVerifier: boolean addOneIntentFilterVerification(int,int,int,android.content.IntentFilter,java.lang.String)>(verifierUid, userId, i$#8, filter, packageName);

        count#1 = count#1 + 1;

     label13:
        goto label12;

     label14:
        goto label11;

     label15:
        exitmonitor l9;

     label16:
        goto label19;

     label17:
        $r13 := @caughtexception;

        l16 = $r13;

        exitmonitor l9;

     label18:
        throw l16;

     label19:
        if count#1 <= 0 goto label20;

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier>;

        interfaceinvoke $r3.<com.android.server.pm.PackageManagerService$IntentFilterVerifier: void startVerifications(int)>(userId);

     label20:
        return;

        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private boolean needsNetworkVerificationLPr(android.content.pm.PackageParser$ActivityIntentInfo)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$ActivityIntentInfo filter;
        android.content.ComponentName cn;
        java.lang.String packageName;
        android.content.pm.IntentFilterVerificationInfo ivi;
        int status;
        android.content.pm.PackageParser$Activity $r0;
        com.android.server.pm.Settings $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        filter := @parameter0: android.content.pm.PackageParser$ActivityIntentInfo;

        $r0 = filter.<android.content.pm.PackageParser$ActivityIntentInfo: android.content.pm.PackageParser$Activity activity>;

        cn = virtualinvoke $r0.<android.content.pm.PackageParser$Activity: android.content.ComponentName getComponentName()>();

        packageName = virtualinvoke cn.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        ivi = virtualinvoke $r1.<com.android.server.pm.Settings: android.content.pm.IntentFilterVerificationInfo getIntentFilterVerificationLPr(java.lang.String)>(packageName);

        if ivi != null goto label1;

        return 1;

     label1:
        status = virtualinvoke ivi.<android.content.pm.IntentFilterVerificationInfo: int getStatus()>();

        lookupswitch(status)
        {
            case 0: goto label2;
            case 1: goto label2;
            default: goto label3;
        };

     label2:
        return 1;

     label3:
        return 0;
    }

    private static boolean isMultiArch(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting ps;
        int $i0, $i1;
        boolean $z0;

        ps := @parameter0: com.android.server.pm.PackageSetting;

        $i0 = ps.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isMultiArch(android.content.pm.ApplicationInfo)
    {
        android.content.pm.ApplicationInfo info;
        int $i0, $i1;
        boolean $z0;

        info := @parameter0: android.content.pm.ApplicationInfo;

        $i0 = info.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isExternal(android.content.pm.PackageParser$Package)
    {
        android.content.pm.PackageParser$Package pkg;
        android.content.pm.ApplicationInfo $r0;
        int $i0, $i1;
        boolean $z0;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        $r0 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r0.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 262144;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isExternal(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting ps;
        int $i0, $i1;
        boolean $z0;

        ps := @parameter0: com.android.server.pm.PackageSetting;

        $i0 = ps.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i1 = $i0 & 262144;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isExternal(android.content.pm.ApplicationInfo)
    {
        android.content.pm.ApplicationInfo info;
        int $i0, $i1;
        boolean $z0;

        info := @parameter0: android.content.pm.ApplicationInfo;

        $i0 = info.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 262144;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isSystemApp(android.content.pm.PackageParser$Package)
    {
        android.content.pm.PackageParser$Package pkg;
        android.content.pm.ApplicationInfo $r0;
        int $i0, $i1;
        boolean $z0;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        $r0 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r0.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isPrivilegedApp(android.content.pm.PackageParser$Package)
    {
        android.content.pm.PackageParser$Package pkg;
        android.content.pm.ApplicationInfo $r0;
        int $i0, $i1;
        boolean $z0;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        $r0 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r0.<android.content.pm.ApplicationInfo: int privateFlags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean hasDomainURLs(android.content.pm.PackageParser$Package)
    {
        android.content.pm.PackageParser$Package pkg;
        android.content.pm.ApplicationInfo $r0;
        int $i0, $i1;
        boolean $z0;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        $r0 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r0.<android.content.pm.ApplicationInfo: int privateFlags>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isSystemApp(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting ps;
        int $i0, $i1;
        boolean $z0;

        ps := @parameter0: com.android.server.pm.PackageSetting;

        $i0 = ps.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isUpdatedSystemApp(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting ps;
        int $i0, $i1;
        boolean $z0;

        ps := @parameter0: com.android.server.pm.PackageSetting;

        $i0 = ps.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i1 = $i0 & 128;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int packageFlagsToInstallFlags(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting ps;
        boolean $z0, $z1, $z2;
        java.lang.String $r0;
        byte installFlags#1;

        this := @this: com.android.server.pm.PackageManagerService;

        ps := @parameter0: com.android.server.pm.PackageSetting;

        installFlags#1 = 0;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isExternal(com.android.server.pm.PackageSetting)>(ps);

        if $z0 == 0 goto label1;

        $r0 = ps.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z2 == 0 goto label1;

        installFlags#1 = 8;

     label1:
        $z1 = virtualinvoke ps.<com.android.server.pm.PackageSetting: boolean isForwardLocked()>();

        if $z1 == 0 goto label2;

        installFlags#1 = installFlags#1 | 1;

     label2:
        return installFlags#1;
    }

    private com.android.server.pm.Settings$VersionInfo getSettingsVersionForPackage(android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.PackageParser$Package pkg;
        boolean $z0, $z1;
        com.android.server.pm.Settings $r0, $r4, $r6;
        com.android.server.pm.Settings$VersionInfo $r1, $r5, $r7;
        java.lang.String $r2, $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: android.content.pm.PackageParser$Package;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isExternal(android.content.pm.PackageParser$Package)>(pkg);

        if $z0 == 0 goto label2;

        $r2 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z1 == 0 goto label1;

        $r6 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = virtualinvoke $r6.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo getExternalVersion()>();

        return $r7;

     label1:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = pkg.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r5 = virtualinvoke $r4.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo findOrCreateVersion(java.lang.String)>($r3);

        return $r5;

     label2:
        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r1 = virtualinvoke $r0.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo getInternalVersion()>();

        return $r1;
    }

    private void deleteTempPackageFiles()
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageManagerService$10 filter, $r0;
        java.io.File[] arr$;
        int len$, i$#1;
        java.io.File file, $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = new com.android.server.pm.PackageManagerService$10;

        specialinvoke $r0.<com.android.server.pm.PackageManagerService$10: void <init>(com.android.server.pm.PackageManagerService)>(this);

        filter = $r0;

        $r1 = this.<com.android.server.pm.PackageManagerService: java.io.File mDrmAppPrivateInstallDir>;

        arr$ = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>(filter);

        len$ = lengthof arr$;

        i$#1 = 0;

     label1:
        if i$#1 >= len$ goto label2;

        file = arr$[i$#1];

        virtualinvoke file.<java.io.File: boolean delete()>();

        i$#1 = i$#1 + 1;

        goto label1;

     label2:
        return;
    }

    public void deletePackageAsUser(java.lang.String, android.content.pm.IPackageDeleteObserver, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        android.content.pm.IPackageDeleteObserver observer;
        int userId, flags;
        android.content.pm.PackageManager$LegacyPackageDeleteObserver $r0;
        android.content.pm.IPackageDeleteObserver2 $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        observer := @parameter1: android.content.pm.IPackageDeleteObserver;

        userId := @parameter2: int;

        flags := @parameter3: int;

        $r0 = new android.content.pm.PackageManager$LegacyPackageDeleteObserver;

        specialinvoke $r0.<android.content.pm.PackageManager$LegacyPackageDeleteObserver: void <init>(android.content.pm.IPackageDeleteObserver)>(observer);

        $r1 = virtualinvoke $r0.<android.content.pm.PackageManager$LegacyPackageDeleteObserver: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver2,int,int)>(packageName, $r1, userId, flags);

        return;
    }

    public void deletePackage(java.lang.String, android.content.pm.IPackageDeleteObserver2, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r11;
        android.content.pm.IPackageDeleteObserver2 observer;
        int userId, flags, uid, $i0, $i1, $i2, $i3, i#4;
        android.content.Context $r0, $r7;
        boolean $z0, $z2, uninstallBlocked#2;
        com.android.server.pm.PackageManagerService$11 $r3;
        com.android.server.pm.PackageManagerService$PackageHandler $r4;
        com.android.server.pm.UserManagerService $r5;
        java.lang.StringBuilder $r6, $r8, $r9;
        android.os.RemoteException $r10, $r12, uninstallBlocked#1, users#5;
        int[] users#3;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        observer := @parameter1: android.content.pm.IPackageDeleteObserver2;

        userId := @parameter2: int;

        flags := @parameter3: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DELETE_PACKAGES", null);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(packageName);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(observer);

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(uid);

        if $i0 == userId goto label01;

        $r7 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deletePackage for user ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", $r11);

     label01:
        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean isUserRestricted(int,java.lang.String)>(userId, "no_uninstall_apps");

        if $z0 == 0 goto label06;

     label02:
        interfaceinvoke observer.<android.content.pm.IPackageDeleteObserver2: void onPackageDeleted(java.lang.String,int,java.lang.String)>(packageName, -3, null);

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

        uninstallBlocked#1 = $r12;

     label05:
        return;

     label06:
        uninstallBlocked#2 = 0;

        $i1 = flags & 2;

        if $i1 == 0 goto label10;

        $r5 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        users#3 = virtualinvoke $r5.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i#4 = 0;

     label07:
        $i3 = lengthof users#3;

        if i#4 >= $i3 goto label09;

        $i2 = users#3[i#4];

        $z2 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean getBlockUninstallForUser(java.lang.String,int)>(packageName, $i2);

        if $z2 == 0 goto label08;

        uninstallBlocked#2 = 1;

        goto label09;

     label08:
        i#4 = i#4 + 1;

        goto label07;

     label09:
        goto label11;

     label10:
        uninstallBlocked#2 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean getBlockUninstallForUser(java.lang.String,int)>(packageName, userId);

     label11:
        if uninstallBlocked#2 == 0 goto label16;

     label12:
        interfaceinvoke observer.<android.content.pm.IPackageDeleteObserver2: void onPackageDeleted(java.lang.String,int,java.lang.String)>(packageName, -4, null);

     label13:
        goto label15;

     label14:
        $r10 := @caughtexception;

        users#5 = $r10;

     label15:
        return;

     label16:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r3 = new com.android.server.pm.PackageManagerService$11;

        specialinvoke $r3.<com.android.server.pm.PackageManagerService$11: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,int,android.content.pm.IPackageDeleteObserver2)>(this, packageName, userId, flags, observer);

        virtualinvoke $r4.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r3);

        return;

        catch android.os.RemoteException from label02 to label03 with label04;
        catch android.os.RemoteException from label12 to label13 with label14;
    }

    private boolean isPackageDeviceAdmin(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int userId, $i0, $i1, i#2;
        android.app.admin.IDevicePolicyManager dpm;
        android.os.IBinder $r0;
        boolean $z0, $z1;
        int[] $r1, users#1;
        com.android.server.pm.UserManagerService $r2;
        android.os.RemoteException $r3, users#3;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("device_policy");

        dpm = staticinvoke <android.app.admin.IDevicePolicyManager$Stub: android.app.admin.IDevicePolicyManager asInterface(android.os.IBinder)>($r0);

     label01:
        if dpm == null goto label09;

        $z0 = interfaceinvoke dpm.<android.app.admin.IDevicePolicyManager: boolean isDeviceOwner(java.lang.String)>(packageName);

        if $z0 == 0 goto label03;

     label02:
        return 1;

     label03:
        if userId != -1 goto label04;

        $r2 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        users#1 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        goto label05;

     label04:
        $r1 = newarray (int)[1];

        $r1[0] = userId;

        users#1 = $r1;

     label05:
        i#2 = 0;

     label06:
        $i0 = lengthof users#1;

        if i#2 >= $i0 goto label09;

        $i1 = users#1[i#2];

        $z1 = interfaceinvoke dpm.<android.app.admin.IDevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)>(packageName, $i1);

        if $z1 == 0 goto label08;

     label07:
        return 1;

     label08:
        i#2 = i#2 + 1;

        goto label06;

     label09:
        goto label11;

     label10:
        $r3 := @caughtexception;

        users#3 = $r3;

     label11:
        return 0;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label07 with label10;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    private int deletePackageX(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r16;
        int userId, flags, $i0, $i1, $i2, $i3, $i4, $i5, $i6, i#5, $i8;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo info, $r0;
        boolean res, $z0, removedForAllUsers#2, systemUpdate#3, $z2, systemUpdate#8;
        android.os.UserHandle removeForUser, $r22;
        int[] allUsers;
        boolean[] perUserInstalled;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l14, l15, l16, $r19, $r20, $r21;
        com.android.server.pm.Settings $r1;
        android.util.ArrayMap $r2, $r4, $r13, extras#4;
        java.lang.Object $r3, $r6, $r8, $r12, extras#7, extras#11;
        com.android.server.pm.UserManagerService $r5;
        java.lang.Runtime $r7;
        com.android.server.pm.PackageManagerService$InstallArgs $r9, $r10;
        android.os.Bundle $r11, extras#9;
        java.lang.StringBuilder $r14, $r15, $r17, $r18;
        byte $b9;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        flags := @parameter2: int;

        $r0 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        specialinvoke $r0.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void <init>(com.android.server.pm.PackageManagerService)>(this);

        info = $r0;

        $i0 = flags & 2;

        if $i0 == 0 goto label01;

        $r22 = <android.os.UserHandle: android.os.UserHandle ALL>;

        goto label02;

     label01:
        $r22 = new android.os.UserHandle;

        specialinvoke $r22.<android.os.UserHandle: void <init>(int)>(userId);

     label02:
        removeForUser = $r22;

        $i1 = virtualinvoke removeForUser.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean isPackageDeviceAdmin(java.lang.String,int)>(packageName, $i1);

        if $z0 == 0 goto label03;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not removing package ");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": has active device admin");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r16);

        return -2;

     label03:
        removedForAllUsers#2 = 0;

        systemUpdate#3 = 0;

        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        extras#4 = $r2;

        entermonitor $r2;

     label04:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r1.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r3;

        $r5 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        allUsers = virtualinvoke $r5.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $i3 = lengthof allUsers;

        perUserInstalled = newarray (boolean)[$i3];

        i#5 = 0;

     label05:
        $i2 = lengthof allUsers;

        if i#5 >= $i2 goto label08;

        if ps == null goto label06;

        $i6 = allUsers[i#5];

        $z2 = virtualinvoke ps.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>($i6);

        goto label07;

     label06:
        $z2 = 0;

     label07:
        perUserInstalled[i#5] = $z2;

        i#5 = i#5 + 1;

        goto label05;

     label08:
        exitmonitor extras#4;

     label09:
        goto label12;

     label10:
        $r20 := @caughtexception;

        l14 = $r20;

        exitmonitor extras#4;

     label11:
        throw l14;

     label12:
        $r6 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        extras#7 = $r6;

        entermonitor $r6;

     label13:
        $i4 = flags | 65536;

        res = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>(packageName, removeForUser, 1, allUsers, perUserInstalled, $i4, info, 1);

        systemUpdate#8 = info.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean isRemovedPackageSystemUpdate>;

        if res == 0 goto label14;

        if systemUpdate#8 != 0 goto label14;

        $r13 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r12 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        if $r12 != null goto label14;

        removedForAllUsers#2 = 1;

     label14:
        exitmonitor extras#7;

     label15:
        goto label18;

     label16:
        $r21 := @caughtexception;

        l15 = $r21;

        exitmonitor extras#7;

     label17:
        throw l15;

     label18:
        if res == 0 goto label21;

        virtualinvoke info.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void sendBroadcast(boolean,boolean,boolean)>(1, systemUpdate#8, removedForAllUsers#2);

        if systemUpdate#8 == 0 goto label21;

        $r11 = new android.os.Bundle;

        specialinvoke $r11.<android.os.Bundle: void <init>(int)>(1);

        extras#9 = $r11;

        $i5 = info.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int removedAppId>;

        if $i5 < 0 goto label19;

        $i8 = info.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int removedAppId>;

        goto label20;

     label19:
        $i8 = info.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int uid>;

     label20:
        virtualinvoke extras#9.<android.os.Bundle: void putInt(java.lang.String,int)>("android.intent.extra.UID", $i8);

        virtualinvoke extras#9.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.intent.extra.REPLACING", 1);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.content.IIntentReceiver,int[])>("android.intent.action.PACKAGE_ADDED", packageName, extras#9, null, null, null);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.content.IIntentReceiver,int[])>("android.intent.action.PACKAGE_REPLACED", packageName, extras#9, null, null, null);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.content.IIntentReceiver,int[])>("android.intent.action.MY_PACKAGE_REPLACED", null, null, packageName, null, null);

     label21:
        $r7 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r7.<java.lang.Runtime: void gc()>();

        $r10 = info.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: com.android.server.pm.PackageManagerService$InstallArgs args>;

        if $r10 == null goto label26;

        $r8 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        extras#11 = $r8;

        entermonitor $r8;

     label22:
        $r9 = info.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: com.android.server.pm.PackageManagerService$InstallArgs args>;

        virtualinvoke $r9.<com.android.server.pm.PackageManagerService$InstallArgs: boolean doPostDeleteLI(boolean)>(1);

        exitmonitor extras#11;

     label23:
        goto label26;

     label24:
        $r19 := @caughtexception;

        l16 = $r19;

        exitmonitor extras#11;

     label25:
        throw l16;

     label26:
        if res == 0 goto label27;

        $b9 = 1;

        goto label28;

     label27:
        $b9 = -1;

     label28:
        return $b9;

        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label13 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    private void removePackageDataLI(com.android.server.pm.PackageSetting, int[], boolean[], com.android.server.pm.PackageManagerService$PackageRemovedInfo, int, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting ps, deletedPs;
        int[] allUserHandles, $r18, $r22, arr$#6;
        boolean[] perUserInstalled;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo outInfo;
        int flags, len$, userId, userIdToKill, $i0, $i1, $i2, $i3, $i4, $i5, $i6, i$#7, arr$#8;
        boolean writeSettings, $z0, $z3;
        java.lang.String packageName, $r6, $r7, $r8, $r15;
        java.lang.Throwable l15, $r20, $r21, arr$#4;
        android.util.ArrayMap $r0, $r1, $r4, l9#2, l9#5;
        com.android.server.pm.Settings $r2, $r5, $r10, $r12, $r17;
        java.lang.Object $r3;
        com.android.server.pm.SharedUserSetting $r9;
        com.android.server.pm.UserManagerService $r11, $r19;
        com.android.server.pm.PackageManagerService$12 $r13;
        com.android.server.pm.PackageManagerService$PackageHandler $r14;
        com.android.server.pm.KeySetManagerService $r16;

        this := @this: com.android.server.pm.PackageManagerService;

        ps := @parameter0: com.android.server.pm.PackageSetting;

        allUserHandles := @parameter1: int[];

        perUserInstalled := @parameter2: boolean[];

        outInfo := @parameter3: com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        flags := @parameter4: int;

        writeSettings := @parameter5: boolean;

        packageName = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $i0 = flags & 65536;

        if $i0 == 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        virtualinvoke this.<com.android.server.pm.PackageManagerService: void removePackageLI(com.android.server.pm.PackageSetting,boolean)>(ps, $z3);

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l9#2 = $r0;

        entermonitor $r0;

     label03:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r1 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        deletedPs = (com.android.server.pm.PackageSetting) $r3;

        if outInfo == null goto label06;

        outInfo.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage> = packageName;

        if deletedPs == null goto label04;

        $r19 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $r18 = virtualinvoke $r19.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $r22 = virtualinvoke deletedPs.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>($r18, 1);

        goto label05;

     label04:
        $r22 = null;

     label05:
        outInfo.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] removedUsers> = $r22;

     label06:
        exitmonitor l9#2;

     label07:
        goto label10;

     label08:
        $r21 := @caughtexception;

        arr$#4 = $r21;

        exitmonitor l9#2;

     label09:
        throw arr$#4;

     label10:
        $i1 = flags & 1;

        if $i1 != 0 goto label11;

        $r15 = ps.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: int removeDataDirsLI(java.lang.String,java.lang.String)>($r15, packageName);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void schedulePackageCleaning(java.lang.String,int,boolean)>(packageName, -1, 1);

     label11:
        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l9#5 = $r4;

        entermonitor $r4;

     label12:
        if deletedPs == null goto label20;

        $i3 = flags & 1;

        if $i3 != 0 goto label18;

        $r6 = deletedPs.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void clearIntentFilterVerificationsLPw(java.lang.String,int)>($r6, -1);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void clearDefaultBrowserIfNeeded(java.lang.String)>(packageName);

        if outInfo == null goto label13;

        $r12 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r16 = $r12.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        virtualinvoke $r16.<com.android.server.pm.KeySetManagerService: void removeAppKeySetDataLPw(java.lang.String)>(packageName);

        $r17 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i6 = virtualinvoke $r17.<com.android.server.pm.Settings: int removePackageLPw(java.lang.String)>(packageName);

        outInfo.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int removedAppId> = $i6;

     label13:
        $r8 = deletedPs.<com.android.server.pm.PackageSetting: java.lang.String name>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void updatePermissionsLPw(java.lang.String,android.content.pm.PackageParser$Package,int)>($r8, null, 0);

        $r9 = deletedPs.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r9 == null goto label17;

        $r11 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        arr$#6 = virtualinvoke $r11.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        len$ = lengthof arr$#6;

        i$#7 = 0;

     label14:
        if i$#7 >= len$ goto label17;

        userId = arr$#6[i$#7];

        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        userIdToKill = virtualinvoke $r10.<com.android.server.pm.Settings: int updateSharedUserPermsLPw(com.android.server.pm.PackageSetting,int)>(deletedPs, userId);

        if userIdToKill == -1 goto label15;

        if userIdToKill < 0 goto label16;

     label15:
        $r14 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r13 = new com.android.server.pm.PackageManagerService$12;

        specialinvoke $r13.<com.android.server.pm.PackageManagerService$12: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageSetting)>(this, deletedPs);

        virtualinvoke $r14.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r13);

        goto label17;

     label16:
        i$#7 = i$#7 + 1;

        goto label14;

     label17:
        $r7 = deletedPs.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean clearPackagePreferredActivitiesLPw(java.lang.String,int)>($r7, -1);

     label18:
        if allUserHandles == null goto label20;

        if perUserInstalled == null goto label20;

        arr$#8 = 0;

     label19:
        $i5 = lengthof allUserHandles;

        if arr$#8 >= $i5 goto label20;

        $z0 = perUserInstalled[arr$#8];

        $i4 = allUserHandles[arr$#8];

        virtualinvoke ps.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>($z0, $i4);

        arr$#8 = arr$#8 + 1;

        goto label19;

     label20:
        if writeSettings == 0 goto label21;

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r5.<com.android.server.pm.Settings: void writeLPr()>();

     label21:
        exitmonitor l9#5;

     label22:
        goto label25;

     label23:
        $r20 := @caughtexception;

        l15 = $r20;

        exitmonitor l9#5;

     label24:
        throw l15;

     label25:
        if outInfo == null goto label26;

        $i2 = outInfo.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int removedAppId>;

        staticinvoke <com.android.server.pm.PackageManagerService: void removeKeystoreDataIfNeeded(int,int)>(-1, $i2);

     label26:
        return;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label12 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
    }

    static boolean locationIsPrivileged(java.io.File)
    {
        java.io.File path, $r0, $r1;
        java.lang.String $r2, $r7, privilegedAppDir#1;
        boolean $z0;
        java.io.IOException $r3, privilegedAppDir#2;
        java.lang.StringBuilder $r4, $r5, $r6;

        path := @parameter0: java.io.File;

     label1:
        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "priv-app");

        privilegedAppDir#1 = virtualinvoke $r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r2 = virtualinvoke path.<java.io.File: java.lang.String getCanonicalPath()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(privilegedAppDir#1);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to access code path ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(path);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r7);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private boolean deleteSystemPackageLI(com.android.server.pm.PackageSetting, int[], boolean[], int, com.android.server.pm.PackageManagerService$PackageRemovedInfo, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting newPs, ps, disabledPs#5;
        int[] allUserHandles;
        boolean[] perUserInstalled;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo outInfo;
        boolean writeSettings, applyUserRestrictions, $z0, $z1, $z2, ret#8;
        java.lang.Throwable l15, $r25, $r28, $r36, parseFlags#6, newPkg#10;
        java.lang.String $r0, $r3, $r6, $r13, $r17, $r21, $r23, $r30, $r32, $r34;
        android.util.ArrayMap $r1, $r4, $r8, $r14, ret#4, parseFlags#9, e#14;
        com.android.server.pm.Settings $r2, $r5, $r9, $r15, $r18, $r20;
        int $i0, $i1, $i2, $i3, $i4, flags#1, flags#7, i#15;
        java.io.File $r7, $r10;
        java.lang.Object $r11;
        com.android.server.pm.PermissionsState $r12, $r16;
        java.lang.StringBuilder $r19, $r22, $r24, $r26, $r29, $r31, $r33, $r35;
        com.android.server.pm.PackageManagerException $r27, e#13;
        short parseFlags#11;
        android.content.pm.PackageParser$Package newPkg#12;

        this := @this: com.android.server.pm.PackageManagerService;

        newPs := @parameter0: com.android.server.pm.PackageSetting;

        allUserHandles := @parameter1: int[];

        perUserInstalled := @parameter2: boolean[];

        flags#1 := @parameter3: int;

        outInfo := @parameter4: com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        writeSettings := @parameter5: boolean;

        if allUserHandles == null goto label01;

        if perUserInstalled == null goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        applyUserRestrictions = $z2;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        ret#4 = $r1;

        entermonitor $r1;

     label03:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r0 = newPs.<com.android.server.pm.PackageSetting: java.lang.String name>;

        disabledPs#5 = virtualinvoke $r2.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>($r0);

        exitmonitor ret#4;

     label04:
        goto label07;

     label05:
        $r25 := @caughtexception;

        parseFlags#6 = $r25;

        exitmonitor ret#4;

     label06:
        throw parseFlags#6;

     label07:
        if disabledPs#5 != null goto label08;

        $r19 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to delete unknown system package ");

        $r23 = newPs.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r21);

        return 0;

     label08:
        outInfo.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean isRemovedPackageSystemUpdate> = 1;

        $i1 = disabledPs#5.<com.android.server.pm.PackageSetting: int versionCode>;

        $i0 = newPs.<com.android.server.pm.PackageSetting: int versionCode>;

        if $i1 >= $i0 goto label09;

        flags#7 = flags#1 & -2;

        goto label10;

     label09:
        flags#7 = flags#1 | 1;

     label10:
        ret#8 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean deleteInstalledPackageLI(com.android.server.pm.PackageSetting,boolean,int,int[],boolean[],com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>(newPs, 1, flags#7, allUserHandles, perUserInstalled, outInfo, writeSettings);

        if ret#8 != 0 goto label11;

        return 0;

     label11:
        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        parseFlags#9 = $r4;

        entermonitor $r4;

     label12:
        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = newPs.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting enableSystemPackageLPw(java.lang.String)>($r3);

        $r6 = newPs.<com.android.server.pm.PackageSetting: java.lang.String legacyNativeLibraryPathString>;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void removeNativeBinariesLI(java.lang.String)>($r6);

        exitmonitor parseFlags#9;

     label13:
        goto label16;

     label14:
        $r28 := @caughtexception;

        newPkg#10 = $r28;

        exitmonitor parseFlags#9;

     label15:
        throw newPkg#10;

     label16:
        parseFlags#11 = 5;

        $r7 = disabledPs#5.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean locationIsPrivileged(java.io.File)>($r7);

        if $z0 == 0 goto label17;

        parseFlags#11 = 133;

     label17:
        $r10 = disabledPs#5.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        newPkg#12 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)>($r10, parseFlags#11, 32, 0L, null);

     label18:
        goto label20;

     label19:
        $r27 := @caughtexception;

        e#13 = $r27;

        $r26 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restore system package:");

        $r34 = newPs.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r29 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r30 = virtualinvoke e#13.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r32);

        return 0;

     label20:
        $r8 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        e#14 = $r8;

        entermonitor $r8;

     label21:
        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r14 = $r9.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r13 = newPkg#12.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r11 = virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r13);

        ps = (com.android.server.pm.PackageSetting) $r11;

        $r12 = virtualinvoke ps.<com.android.server.pm.PackageSetting: com.android.server.pm.PermissionsState getPermissionsState()>();

        $r16 = virtualinvoke newPs.<com.android.server.pm.PackageSetting: com.android.server.pm.PermissionsState getPermissionsState()>();

        virtualinvoke $r12.<com.android.server.pm.PermissionsState: void copyFrom(com.android.server.pm.PermissionsState)>($r16);

        $r17 = newPkg#12.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void updatePermissionsLPw(java.lang.String,android.content.pm.PackageParser$Package,int)>($r17, newPkg#12, 3);

        if applyUserRestrictions == 0 goto label24;

        i#15 = 0;

     label22:
        $i3 = lengthof allUserHandles;

        if i#15 >= $i3 goto label23;

        $z1 = perUserInstalled[i#15];

        $i2 = allUserHandles[i#15];

        virtualinvoke ps.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>($z1, $i2);

        $r20 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i4 = allUserHandles[i#15];

        virtualinvoke $r20.<com.android.server.pm.Settings: void writeRuntimePermissionsForUserLPr(int,boolean)>($i4, 0);

        i#15 = i#15 + 1;

        goto label22;

     label23:
        $r18 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r18.<com.android.server.pm.Settings: void writeAllUsersPackageRestrictionsLPr()>();

     label24:
        if writeSettings == 0 goto label25;

        $r15 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r15.<com.android.server.pm.Settings: void writeLPr()>();

     label25:
        exitmonitor e#14;

     label26:
        goto label29;

     label27:
        $r36 := @caughtexception;

        l15 = $r36;

        exitmonitor e#14;

     label28:
        throw l15;

     label29:
        return 1;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch com.android.server.pm.PackageManagerException from label17 to label18 with label19;
        catch java.lang.Throwable from label21 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    private boolean deleteInstalledPackageLI(com.android.server.pm.PackageSetting, boolean, int, int[], boolean[], com.android.server.pm.PackageManagerService$PackageRemovedInfo, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting ps;
        boolean deleteCodeAndResources, writeSettings;
        int flags, $i0, $i1;
        int[] allUserHandles;
        boolean[] perUserInstalled;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo outInfo;
        java.lang.String $r0, $r1;
        java.lang.String[] $r2;
        com.android.server.pm.PackageManagerService$InstallArgs $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        ps := @parameter0: com.android.server.pm.PackageSetting;

        deleteCodeAndResources := @parameter1: boolean;

        flags := @parameter2: int;

        allUserHandles := @parameter3: int[];

        perUserInstalled := @parameter4: boolean[];

        outInfo := @parameter5: com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        writeSettings := @parameter6: boolean;

        if outInfo == null goto label1;

        $i1 = ps.<com.android.server.pm.PackageSetting: int appId>;

        outInfo.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int uid> = $i1;

     label1:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void removePackageDataLI(com.android.server.pm.PackageSetting,int[],boolean[],com.android.server.pm.PackageManagerService$PackageRemovedInfo,int,boolean)>(ps, allUserHandles, perUserInstalled, outInfo, flags, writeSettings);

        if deleteCodeAndResources == 0 goto label2;

        if outInfo == null goto label2;

        $i0 = specialinvoke this.<com.android.server.pm.PackageManagerService: int packageFlagsToInstallFlags(com.android.server.pm.PackageSetting)>(ps);

        $r0 = ps.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r1 = ps.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString>;

        $r2 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(com.android.server.pm.PackageSetting)>(ps);

        $r3 = specialinvoke this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgsForExisting(int,java.lang.String,java.lang.String,java.lang.String[])>($i0, $r0, $r1, $r2);

        outInfo.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: com.android.server.pm.PackageManagerService$InstallArgs args> = $r3;

     label2:
        return 1;
    }

    public boolean setBlockUninstallForUser(java.lang.String, boolean, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r8, $r13;
        boolean blockUninstall, $z0;
        int userId;
        android.util.ArrayMap l4, $r1, $r3;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l6, $r14;
        android.content.Context $r0;
        com.android.server.pm.Settings $r2, $r5;
        java.lang.Object $r4;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r12;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        blockUninstall := @parameter1: boolean;

        userId := @parameter2: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DELETE_PACKAGES", null);

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r4;

        if ps != null goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package doesn\'t exist in set block uninstall ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r13);

        exitmonitor l4;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke ps.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(userId);

        if $z0 != 0 goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package not installed in set block uninstall ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r8);

        exitmonitor l4;

     label4:
        return 0;

     label5:
        virtualinvoke ps.<com.android.server.pm.PackageSetting: void setBlockUninstall(boolean,int)>(blockUninstall, userId);

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r5.<com.android.server.pm.Settings: void writePackageRestrictionsLPr(int)>(userId);

        exitmonitor l4;

     label6:
        goto label9;

     label7:
        $r14 := @caughtexception;

        l6 = $r14;

        exitmonitor l4;

     label8:
        throw l6;

     label9:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean getBlockUninstallForUser(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r7;
        int userId;
        android.util.ArrayMap l3, $r0, $r2;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l5, $r8;
        com.android.server.pm.Settings $r1;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = $r1.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r3;

        if ps != null goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package doesn\'t exist in get block uninstall ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r7);

        exitmonitor l3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke ps.<com.android.server.pm.PackageSetting: boolean getBlockUninstall(int)>(userId);

        exitmonitor l3;

     label4:
        return $z0;

     label5:
        $r8 := @caughtexception;

        l5 = $r8;

        exitmonitor l3;

     label6:
        throw l5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean deletePackageLI(java.lang.String, android.os.UserHandle, boolean, int[], boolean[], int, com.android.server.pm.PackageManagerService$PackageRemovedInfo, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r4, $r14;
        android.os.UserHandle user;
        boolean deleteCodeAndResources, writeSettings, dataOnly, $z0, $z1, $z2, $z3, $z4, ret#5, ret#6;
        int[] allUserHandles, $r7, $r9;
        boolean[] perUserInstalled;
        int flags, userId, $i0, $i2, $i3, $i4, $i5, removeUser#1, appId#2;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo outInfo;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l15, l16, $r16, $r17;
        android.util.ArrayMap $r0, $r1, $r6, ret#3, ret#4;
        com.android.server.pm.Settings $r2;
        java.lang.Object $r3;
        com.android.server.pm.Installer $r5;
        android.content.pm.PackageUserState $r8;
        com.android.server.pm.UserManagerService $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r15;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        user := @parameter1: android.os.UserHandle;

        deleteCodeAndResources := @parameter2: boolean;

        allUserHandles := @parameter3: int[];

        perUserInstalled := @parameter4: boolean[];

        flags := @parameter5: int;

        outInfo := @parameter6: com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        writeSettings := @parameter7: boolean;

        if packageName != null goto label01;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Attempt to delete null packageName.");

        return 0;

     label01:
        removeUser#1 = -1;

        appId#2 = -1;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        ret#3 = $r0;

        entermonitor $r0;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r1 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r3;

        if ps != null goto label04;

        $r13 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package named \'");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist.");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r14);

        exitmonitor ret#3;

     label03:
        return 0;

     label04:
        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(ps);

        if $z0 == 0 goto label05;

        $i4 = flags & 4;

        if $i4 == 0 goto label08;

     label05:
        if user == null goto label08;

        $i2 = virtualinvoke user.<android.os.UserHandle: int getIdentifier()>();

        if $i2 == -1 goto label08;

        userId = virtualinvoke user.<android.os.UserHandle: int getIdentifier()>();

        $r8 = virtualinvoke ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(userId);

        $i3 = $r8.<android.content.pm.PackageUserState: int domainVerificationStatus>;

        virtualinvoke ps.<com.android.server.pm.PackageSetting: void setUserState(int,int,boolean,boolean,boolean,boolean,java.lang.String,android.util.ArraySet,android.util.ArraySet,boolean,int,int)>(userId, 0, 0, 1, 1, 0, null, null, null, 0, $i3, 0);

        $z3 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(ps);

        if $z3 != 0 goto label07;

        $r10 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $r9 = virtualinvoke $r10.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $z4 = virtualinvoke ps.<com.android.server.pm.PackageSetting: boolean isAnyInstalled(int[])>($r9);

        if $z4 == 0 goto label06;

        removeUser#1 = virtualinvoke user.<android.os.UserHandle: int getIdentifier()>();

        appId#2 = ps.<com.android.server.pm.PackageSetting: int appId>;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(removeUser#1);

        goto label08;

     label06:
        $i5 = virtualinvoke user.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke ps.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>(1, $i5);

        goto label08;

     label07:
        removeUser#1 = virtualinvoke user.<android.os.UserHandle: int getIdentifier()>();

        appId#2 = ps.<com.android.server.pm.PackageSetting: int appId>;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(removeUser#1);

     label08:
        exitmonitor ret#3;

     label09:
        goto label12;

     label10:
        $r16 := @caughtexception;

        l15 = $r16;

        exitmonitor ret#3;

     label11:
        throw l15;

     label12:
        if removeUser#1 < 0 goto label20;

        if outInfo == null goto label13;

        outInfo.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage> = packageName;

        outInfo.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int removedAppId> = appId#2;

        $r7 = newarray (int)[1];

        $r7[0] = removeUser#1;

        outInfo.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] removedUsers> = $r7;

     label13:
        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r4 = ps.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        virtualinvoke $r5.<com.android.server.pm.Installer: int clearUserData(java.lang.String,java.lang.String,int)>($r4, packageName, removeUser#1);

        staticinvoke <com.android.server.pm.PackageManagerService: void removeKeystoreDataIfNeeded(int,int)>(removeUser#1, appId#2);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void schedulePackageCleaning(java.lang.String,int,boolean)>(packageName, removeUser#1, 0);

        $r6 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        ret#4 = $r6;

        entermonitor $r6;

     label14:
        $z2 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean clearPackagePreferredActivitiesLPw(java.lang.String,int)>(packageName, removeUser#1);

        if $z2 == 0 goto label15;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(removeUser#1);

     label15:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void resetUserChangesToRuntimePermissionsAndFlagsLPw(com.android.server.pm.PackageSetting,int)>(ps, removeUser#1);

        exitmonitor ret#4;

     label16:
        goto label19;

     label17:
        $r17 := @caughtexception;

        l16 = $r17;

        exitmonitor ret#4;

     label18:
        throw l16;

     label19:
        return 1;

     label20:
        goto label21;

     label21:
        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(ps);

        if $z1 == 0 goto label22;

        ret#6 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean deleteSystemPackageLI(com.android.server.pm.PackageSetting,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>(ps, allUserHandles, perUserInstalled, flags, outInfo, writeSettings);

        goto label23;

     label22:
        $i0 = ps.<com.android.server.pm.PackageSetting: int appId>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)>(packageName, $i0, "uninstall pkg");

        ret#6 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean deleteInstalledPackageLI(com.android.server.pm.PackageSetting,boolean,int,int[],boolean[],com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>(ps, deleteCodeAndResources, flags, allUserHandles, perUserInstalled, outInfo, writeSettings);

     label23:
        return ret#6;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label14 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private void clearExternalStorageDataSync(java.lang.String, int, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, status#2;
        int userId, len$, curUser, i$#6;
        boolean allData, $z0, $z1, $z2, $z3, mounted#1, $z4;
        com.android.server.pm.PackageManagerService$ClearStorageConnection conn, $r2, userEnv#7;
        int[] arr$, $r3, users#5;
        long timeout, now, $l0, $l2;
        java.lang.InterruptedException l17, $r22;
        java.lang.Throwable l19, l18, $r20, $r21;
        android.content.Intent $r0, status#4;
        android.content.ComponentName $r1;
        android.content.Context $r4, $r6, $r17, $r19;
        android.os.UserHandle $r5;
        com.android.internal.app.IMediaContainerService $r7, $r10, $r11, $r13, $r15;
        android.os.Environment$UserEnvironment $r9, userEnv#8;
        java.io.File[] $r12, $r14, $r16;
        byte $b1;
        com.android.server.pm.UserManagerService $r18;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        allData := @parameter2: boolean;

        $z0 = staticinvoke <android.os.Environment: boolean isExternalStorageEmulated()>();

        if $z0 == 0 goto label01;

        mounted#1 = 1;

        goto label05;

     label01:
        status#2 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $z1 = virtualinvoke status#2.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z1 != 0 goto label02;

        $z3 = virtualinvoke status#2.<java.lang.String: boolean equals(java.lang.Object)>("mounted_ro");

        if $z3 == 0 goto label03;

     label02:
        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        mounted#1 = $z4;

     label05:
        if mounted#1 != 0 goto label06;

        return;

     label06:
        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>()>();

        $r1 = <com.android.server.pm.PackageManagerService: android.content.ComponentName DEFAULT_CONTAINER_COMPONENT>;

        status#4 = virtualinvoke $r0.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r1);

        if userId != -1 goto label07;

        $r18 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        users#5 = virtualinvoke $r18.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        goto label08;

     label07:
        $r3 = newarray (int)[1];

        $r3[0] = userId;

        users#5 = $r3;

     label08:
        $r2 = new com.android.server.pm.PackageManagerService$ClearStorageConnection;

        specialinvoke $r2.<com.android.server.pm.PackageManagerService$ClearStorageConnection: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$1)>(this, null);

        conn = $r2;

        $r4 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle OWNER>;

        $z2 = virtualinvoke $r4.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(status#4, conn, 1, $r5);

        if $z2 == 0 goto label27;

     label09:
        arr$ = users#5;

        len$ = lengthof arr$;

        i$#6 = 0;

     label10:
        if i$#6 >= len$ goto label24;

        curUser = arr$[i$#6];

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        timeout = $l0 + 5000L;

        userEnv#7 = conn;

        entermonitor conn;

     label11:
        now = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label12:
        $r7 = conn.<com.android.server.pm.PackageManagerService$ClearStorageConnection: com.android.internal.app.IMediaContainerService mContainerService>;

        if $r7 != null goto label16;

        $b1 = now cmp timeout;

        if $b1 >= 0 goto label16;

     label13:
        $l2 = timeout - now;

        virtualinvoke conn.<java.lang.Object: void wait(long)>($l2);

     label14:
        goto label12;

     label15:
        $r22 := @caughtexception;

        l17 = $r22;

        goto label12;

     label16:
        exitmonitor userEnv#7;

     label17:
        goto label20;

     label18:
        $r21 := @caughtexception;

        l18 = $r21;

        exitmonitor userEnv#7;

     label19:
        throw l18;

     label20:
        $r11 = conn.<com.android.server.pm.PackageManagerService$ClearStorageConnection: com.android.internal.app.IMediaContainerService mContainerService>;

        if $r11 != null goto label22;

     label21:
        $r17 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r17.<android.content.Context: void unbindService(android.content.ServiceConnection)>(conn);

        return;

     label22:
        $r9 = new android.os.Environment$UserEnvironment;

        specialinvoke $r9.<android.os.Environment$UserEnvironment: void <init>(int)>(curUser);

        userEnv#8 = $r9;

        $r10 = conn.<com.android.server.pm.PackageManagerService$ClearStorageConnection: com.android.internal.app.IMediaContainerService mContainerService>;

        $r14 = virtualinvoke userEnv#8.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppCacheDirs(java.lang.String)>(packageName);

        staticinvoke <com.android.server.pm.PackageManagerService: void clearDirectory(com.android.internal.app.IMediaContainerService,java.io.File[])>($r10, $r14);

        if allData == 0 goto label23;

        $r15 = conn.<com.android.server.pm.PackageManagerService$ClearStorageConnection: com.android.internal.app.IMediaContainerService mContainerService>;

        $r12 = virtualinvoke userEnv#8.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppDataDirs(java.lang.String)>(packageName);

        staticinvoke <com.android.server.pm.PackageManagerService: void clearDirectory(com.android.internal.app.IMediaContainerService,java.io.File[])>($r15, $r12);

        $r13 = conn.<com.android.server.pm.PackageManagerService$ClearStorageConnection: com.android.internal.app.IMediaContainerService mContainerService>;

        $r16 = virtualinvoke userEnv#8.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppMediaDirs(java.lang.String)>(packageName);

        staticinvoke <com.android.server.pm.PackageManagerService: void clearDirectory(com.android.internal.app.IMediaContainerService,java.io.File[])>($r13, $r16);

     label23:
        i$#6 = i$#6 + 1;

        goto label10;

     label24:
        $r6 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void unbindService(android.content.ServiceConnection)>(conn);

        goto label27;

     label25:
        $r20 := @caughtexception;

        l19 = $r20;

     label26:
        $r19 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r19.<android.content.Context: void unbindService(android.content.ServiceConnection)>(conn);

        throw l19;

     label27:
        return;

        catch java.lang.InterruptedException from label13 to label14 with label15;
        catch java.lang.Throwable from label11 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label09 to label21 with label25;
        catch java.lang.Throwable from label22 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    public void clearApplicationUserData(java.lang.String, android.content.pm.IPackageDataObserver, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        android.content.pm.IPackageDataObserver observer;
        int userId, $i0;
        android.content.Context $r0;
        com.android.server.pm.PackageManagerService$13 $r1;
        com.android.server.pm.PackageManagerService$PackageHandler $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        observer := @parameter1: android.content.pm.IPackageDataObserver;

        userId := @parameter2: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CLEAR_APP_USER_DATA", null);

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i0, userId, 1, 0, "clear application data");

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r1 = new com.android.server.pm.PackageManagerService$13;

        specialinvoke $r1.<com.android.server.pm.PackageManagerService$13: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,android.content.pm.IPackageDataObserver)>(this, packageName, userId, observer);

        virtualinvoke $r2.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    private boolean clearApplicationUserDataLI(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r4, $r7, $r9, $r12, $r13, $r17, $r21, nativeLibPath#8;
        int userId, $i0, retCode#6, ps#7;
        android.util.ArrayMap $r0, $r1, $r24, retCode#1;
        java.lang.Object $r2, $r3, $r25;
        com.android.server.pm.Installer $r5, $r14;
        android.content.pm.ApplicationInfo $r6, $r8, $r10, $r11;
        boolean $z0;
        java.lang.StringBuilder $r15, $r16, $r18, $r19, $r20, $r22, $r23;
        com.android.server.pm.Settings $r26;
        java.lang.Throwable $r27, nativeLibPath#5;
        android.content.pm.PackageParser$Package pkg#2;
        com.android.server.pm.PackageSetting ps#3, ps#4;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        if packageName != null goto label01;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Attempt to delete null packageName.");

        return 0;

     label01:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        retCode#1 = $r0;

        entermonitor $r0;

     label02:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg#2 = (android.content.pm.PackageParser$Package) $r2;

        if pkg#2 != null goto label03;

        $r26 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r24 = $r26.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r25 = virtualinvoke $r24.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps#3 = (com.android.server.pm.PackageSetting) $r25;

        if ps#3 == null goto label03;

        pkg#2 = ps#3.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

     label03:
        if pkg#2 != null goto label05;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package named \'");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist.");

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r21);

        exitmonitor retCode#1;

     label04:
        return 0;

     label05:
        $r3 = pkg#2.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        ps#4 = (com.android.server.pm.PackageSetting) $r3;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void resetUserChangesToRuntimePermissionsAndFlagsLPw(com.android.server.pm.PackageSetting,int)>(ps#4, userId);

        exitmonitor retCode#1;

     label06:
        goto label09;

     label07:
        $r27 := @caughtexception;

        nativeLibPath#5 = $r27;

        exitmonitor retCode#1;

     label08:
        throw nativeLibPath#5;

     label09:
        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r4 = pkg#2.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        retCode#6 = virtualinvoke $r5.<com.android.server.pm.Installer: int clearUserData(java.lang.String,java.lang.String,int)>($r4, packageName, userId);

        if retCode#6 >= 0 goto label10;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove cache files for package: ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r17);

        return 0;

     label10:
        $r6 = pkg#2.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        ps#7 = $r6.<android.content.pm.ApplicationInfo: int uid>;

        staticinvoke <com.android.server.pm.PackageManagerService: void removeKeystoreDataIfNeeded(int,int)>(userId, ps#7);

        $r8 = pkg#2.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r7 = $r8.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        if $r7 == null goto label11;

        $r10 = pkg#2.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r9 = $r10.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        $z0 = staticinvoke <dalvik.system.VMRuntime: boolean is64BitAbi(java.lang.String)>($r9);

        if $z0 != 0 goto label11;

        $r11 = pkg#2.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        nativeLibPath#8 = $r11.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        $r14 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r12 = pkg#2.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r13 = pkg#2.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $i0 = virtualinvoke $r14.<com.android.server.pm.Installer: int linkNativeLibraryDirectory(java.lang.String,java.lang.String,java.lang.String,int)>($r12, $r13, nativeLibPath#8, userId);

        if $i0 >= 0 goto label11;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Failed linking native library dir");

        return 0;

     label11:
        return 1;

        catch java.lang.Throwable from label02 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    private void resetUserChangesToRuntimePermissionsAndFlagsLPw(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, packageCount, i#1;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.PackageSetting ps;
        android.util.ArrayMap $r0, $r1;
        java.lang.Object $r2, $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        packageCount = virtualinvoke $r0.<android.util.ArrayMap: int size()>();

        i#1 = 0;

     label1:
        if i#1 >= packageCount goto label2;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i#1);

        pkg = (android.content.pm.PackageParser$Package) $r2;

        $r3 = pkg.<android.content.pm.PackageParser$Package: java.lang.Object mExtras>;

        ps = (com.android.server.pm.PackageSetting) $r3;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void resetUserChangesToRuntimePermissionsAndFlagsLPw(com.android.server.pm.PackageSetting,int)>(ps, userId);

        i#1 = i#1 + 1;

        goto label1;

     label2:
        return;
    }

    private void resetUserChangesToRuntimePermissionsAndFlagsLPw(com.android.server.pm.PackageSetting, int)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageSetting ps, pkg#7;
        int userId, permissionCount, appId, $i0, $i1, $i2, i#3, packageCount#5, j#6, packageCount#9, pkg#12;
        byte userSettableFlags, policyOrSystemFlags;
        java.lang.String permission, $r12, $r13, $r24, $r25;
        com.android.server.pm.BasePermission bp;
        android.content.pm.PackageParser$Package $r0, $r1, $r6, $r20, $r21, $r26, $r28;
        java.util.ArrayList $r2, $r5, $r27;
        com.android.server.pm.Settings $r3, $r4, $r7;
        java.lang.Object $r8, $r9, $r22;
        android.util.ArrayMap $r10;
        com.android.server.pm.SharedUserSetting $r11, $r17, $r18;
        boolean $z0, $z1, $z3, $z4, writeInstallPermissions#1, writeRuntimePermissions#2, used#4, $z5, j#11;
        com.android.server.pm.PermissionsState$PermissionState $r14;
        com.android.server.pm.PackageManagerService$14 $r15;
        com.android.server.pm.PackageManagerService$PackageHandler $r16;
        android.util.ArraySet $r19, $r23;
        com.android.server.pm.PermissionsState used#8;

        this := @this: com.android.server.pm.PackageManagerService;

        ps := @parameter0: com.android.server.pm.PackageSetting;

        userId := @parameter1: int;

        $r1 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r1 != null goto label01;

        return;

     label01:
        writeInstallPermissions#1 = 0;

        writeRuntimePermissions#2 = 0;

        $r0 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r2 = $r0.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        permissionCount = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i#3 = 0;

     label02:
        if i#3 >= permissionCount goto label18;

        $r6 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r5 = $r6.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        $r8 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i#3);

        permission = (java.lang.String) $r8;

        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r10 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPermissions>;

        $r9 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(permission);

        bp = (com.android.server.pm.BasePermission) $r9;

        if bp != null goto label03;

        goto label17;

     label03:
        $r11 = ps.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r11 == null goto label07;

        used#4 = 0;

        $r18 = ps.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r19 = $r18.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        packageCount#5 = virtualinvoke $r19.<android.util.ArraySet: int size()>();

        j#6 = 0;

     label04:
        if j#6 >= packageCount#5 goto label06;

        $r17 = ps.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r23 = $r17.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        $r22 = virtualinvoke $r23.<android.util.ArraySet: java.lang.Object valueAt(int)>(j#6);

        pkg#7 = (com.android.server.pm.PackageSetting) $r22;

        $r21 = pkg#7.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r21 == null goto label05;

        $r20 = pkg#7.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r24 = $r20.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r26 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r25 = $r26.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z3 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z3 != 0 goto label05;

        $r28 = pkg#7.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r27 = $r28.<android.content.pm.PackageParser$Package: java.util.ArrayList requestedPermissions>;

        $z4 = virtualinvoke $r27.<java.util.ArrayList: boolean contains(java.lang.Object)>(permission);

        if $z4 == 0 goto label05;

        used#4 = 1;

        goto label06;

     label05:
        j#6 = j#6 + 1;

        goto label04;

     label06:
        if used#4 == 0 goto label07;

        goto label17;

     label07:
        used#8 = virtualinvoke ps.<com.android.server.pm.PackageSetting: com.android.server.pm.PermissionsState getPermissionsState()>();

        $r12 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        packageCount#9 = virtualinvoke used#8.<com.android.server.pm.PermissionsState: int getPermissionFlags(java.lang.String,int)>($r12, userId);

        $r13 = bp.<com.android.server.pm.BasePermission: java.lang.String name>;

        $r14 = virtualinvoke used#8.<com.android.server.pm.PermissionsState: com.android.server.pm.PermissionsState$PermissionState getInstallPermissionState(java.lang.String)>($r13);

        if $r14 == null goto label08;

        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        j#11 = $z5;

        $z0 = virtualinvoke used#8.<com.android.server.pm.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.BasePermission,int,int,int)>(bp, userId, 11, 0);

        if $z0 == 0 goto label11;

        if j#11 == 0 goto label10;

        writeInstallPermissions#1 = 1;

        goto label11;

     label10:
        writeRuntimePermissions#2 = 1;

     label11:
        $z1 = virtualinvoke bp.<com.android.server.pm.BasePermission: boolean isRuntime()>();

        if $z1 != 0 goto label12;

        goto label17;

     label12:
        $i0 = packageCount#9 & 20;

        if $i0 == 0 goto label13;

        goto label17;

     label13:
        $i1 = packageCount#9 & 32;

        if $i1 == 0 goto label14;

        $i2 = virtualinvoke used#8.<com.android.server.pm.PermissionsState: int grantRuntimePermission(com.android.server.pm.BasePermission,int)>(bp, userId);

        if $i2 == -1 goto label17;

        writeRuntimePermissions#2 = 1;

        goto label17;

     label14:
        pkg#12 = virtualinvoke used#8.<com.android.server.pm.PermissionsState: int revokeRuntimePermission(com.android.server.pm.BasePermission,int)>(bp, userId);

        lookupswitch(pkg#12)
        {
            case 0: goto label15;
            case 1: goto label16;
            default: goto label17;
        };

     label15:
        writeRuntimePermissions#2 = 1;

        goto label17;

     label16:
        writeRuntimePermissions#2 = 1;

        appId = ps.<com.android.server.pm.PackageSetting: int appId>;

        $r16 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r15 = new com.android.server.pm.PackageManagerService$14;

        specialinvoke $r15.<com.android.server.pm.PackageManagerService$14: void <init>(com.android.server.pm.PackageManagerService,int,int)>(this, appId, userId);

        virtualinvoke $r16.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r15);

     label17:
        i#3 = i#3 + 1;

        goto label02;

     label18:
        if writeRuntimePermissions#2 == 0 goto label19;

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r3.<com.android.server.pm.Settings: void writeRuntimePermissionsForUserLPr(int,boolean)>(userId, 1);

     label19:
        if writeInstallPermissions#1 == 0 goto label20;

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r4.<com.android.server.pm.Settings: void writeLPr()>();

     label20:
        return;
    }

    private static void removeKeystoreDataIfNeeded(int, int)
    {
        int userId, appId, len$, individual, $i1, $i2, i$#1;
        android.security.KeyStore keyStore;
        int[] arr$;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;
        com.android.server.pm.UserManagerService $r4;

        userId := @parameter0: int;

        appId := @parameter1: int;

        if appId >= 0 goto label1;

        return;

     label1:
        keyStore = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        if keyStore == null goto label5;

        if userId != -1 goto label4;

        $r4 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        arr$ = virtualinvoke $r4.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        len$ = lengthof arr$;

        i$#1 = 0;

     label2:
        if i$#1 >= len$ goto label3;

        individual = arr$[i$#1];

        $i2 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(individual, appId);

        virtualinvoke keyStore.<android.security.KeyStore: boolean clearUid(int)>($i2);

        i$#1 = i$#1 + 1;

        goto label2;

     label3:
        goto label6;

     label4:
        $i1 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(userId, appId);

        virtualinvoke keyStore.<android.security.KeyStore: boolean clearUid(int)>($i1);

        goto label6;

     label5:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not contact keystore to clear entries for app id ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(appId);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r3);

     label6:
        return;
    }

    public void deleteApplicationCacheFiles(java.lang.String, android.content.pm.IPackageDataObserver)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        android.content.pm.IPackageDataObserver observer;
        int userId;
        android.content.Context $r0;
        com.android.server.pm.PackageManagerService$15 $r1;
        com.android.server.pm.PackageManagerService$PackageHandler $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        observer := @parameter1: android.content.pm.IPackageDataObserver;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DELETE_CACHE_FILES", null);

        userId = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r1 = new com.android.server.pm.PackageManagerService$15;

        specialinvoke $r1.<com.android.server.pm.PackageManagerService$15: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,android.content.pm.IPackageDataObserver)>(this, packageName, userId, observer);

        virtualinvoke $r2.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    private boolean deleteApplicationCacheFilesLI(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r3, $r9, $r15, $r20;
        int userId, retCode#4;
        android.content.pm.PackageParser$Package p;
        android.util.ArrayMap $r0, $r1, applicationInfo#1;
        java.lang.Object $r2;
        com.android.server.pm.Installer $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19;
        java.lang.Throwable $r21, retCode#2;
        android.content.pm.ApplicationInfo applicationInfo#3;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        if packageName != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Attempt to delete null packageName.");

        return 0;

     label1:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        applicationInfo#1 = $r0;

        entermonitor $r0;

     label2:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        p = (android.content.pm.PackageParser$Package) $r2;

        exitmonitor applicationInfo#1;

     label3:
        goto label6;

     label4:
        $r21 := @caughtexception;

        retCode#2 = $r21;

        exitmonitor applicationInfo#1;

     label5:
        throw retCode#2;

     label6:
        if p != null goto label7;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package named \'");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r20);

        return 0;

     label7:
        applicationInfo#3 = p.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        if applicationInfo#3 != null goto label8;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no applicationInfo.");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r15);

        return 0;

     label8:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r3 = p.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        retCode#4 = virtualinvoke $r4.<com.android.server.pm.Installer: int deleteCacheFiles(java.lang.String,java.lang.String,int)>($r3, packageName, userId);

        if retCode#4 >= 0 goto label9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove cache files for package: ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" u");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r9);

        return 0;

     label9:
        return 1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void getPackageSizeInfo(java.lang.String, int, android.content.pm.IPackageStatsObserver)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int userHandle;
        android.content.pm.IPackageStatsObserver observer;
        android.content.pm.PackageStats stats, $r1;
        android.os.Message msg;
        android.content.Context $r0;
        com.android.server.pm.PackageManagerService$PackageHandler $r2, $r4;
        com.android.server.pm.PackageManagerService$MeasureParams $r3;
        java.lang.IllegalArgumentException $r5;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userHandle := @parameter1: int;

        observer := @parameter2: android.content.pm.IPackageStatsObserver;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.GET_PACKAGE_SIZE", null);

        if packageName != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attempt to get size of null packageName");

        throw $r5;

     label1:
        $r1 = new android.content.pm.PackageStats;

        specialinvoke $r1.<android.content.pm.PackageStats: void <init>(java.lang.String,int)>(packageName, userHandle);

        stats = $r1;

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        msg = virtualinvoke $r2.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int)>(5);

        $r3 = new com.android.server.pm.PackageManagerService$MeasureParams;

        specialinvoke $r3.<com.android.server.pm.PackageManagerService$MeasureParams: void <init>(com.android.server.pm.PackageManagerService,android.content.pm.PackageStats,android.content.pm.IPackageStatsObserver)>(this, stats, observer);

        msg.<android.os.Message: java.lang.Object obj> = $r3;

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r4.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendMessage(android.os.Message)>(msg);

        return;
    }

    private boolean getPackageSizeInfoLI(java.lang.String, int, android.content.pm.PackageStats)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, secureContainerId, $r7, $r8, $r12, $r16, $r20, libDirRoot#2, asecPath#3, publicSrcDir#9;
        int userHandle, res;
        android.content.pm.PackageStats pStats;
        java.lang.Throwable l13, l14, $r22, $r24;
        android.util.ArrayMap $r0, $r2, $r3, publicSrcDir#5;
        java.lang.Object $r1, $r5;
        com.android.server.pm.Settings $r4;
        java.lang.String[] $r6, token#11;
        com.android.server.pm.Installer $r9;
        long $l0, $l1, $l2, token#8;
        boolean $z0, $z1, $z2, $z3, dataOnly#1;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r17, $r18, $r19, $r21;
        android.content.pm.ApplicationInfo $r15, token#10;
        android.content.pm.PackageParser$Package $r23, p#6;
        com.android.server.pm.PackageSetting ps#7;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userHandle := @parameter1: int;

        pStats := @parameter2: android.content.pm.PackageStats;

        if packageName != null goto label01;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Attempt to get size of null packageName.");

        return 0;

     label01:
        dataOnly#1 = 0;

        libDirRoot#2 = null;

        asecPath#3 = null;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        publicSrcDir#5 = $r0;

        entermonitor $r0;

     label02:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r1 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        p#6 = (android.content.pm.PackageParser$Package) $r1;

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps#7 = (com.android.server.pm.PackageSetting) $r5;

        if p#6 != null goto label06;

        dataOnly#1 = 1;

        if ps#7 == null goto label03;

        $r23 = ps#7.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r23 != null goto label05;

     label03:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package named \'");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist.");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r20);

        exitmonitor publicSrcDir#5;

     label04:
        return 0;

     label05:
        p#6 = ps#7.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

     label06:
        if ps#7 == null goto label07;

        libDirRoot#2 = ps#7.<com.android.server.pm.PackageSetting: java.lang.String legacyNativeLibraryPathString>;

     label07:
        if p#6 == null goto label13;

        $z2 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isExternal(android.content.pm.PackageParser$Package)>(p#6);

        if $z2 != 0 goto label08;

        $z3 = virtualinvoke p#6.<android.content.pm.PackageParser$Package: boolean isForwardLocked()>();

        if $z3 == 0 goto label13;

     label08:
        token#8 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        $r15 = p#6.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r16 = virtualinvoke $r15.<android.content.pm.ApplicationInfo: java.lang.String getBaseCodePath()>();

        secureContainerId = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String cidFromCodePath(java.lang.String)>($r16);

        if secureContainerId == null goto label10;

        asecPath#3 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdFilesystem(java.lang.String)>(secureContainerId);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token#8);

        goto label13;

     label11:
        $r24 := @caughtexception;

        l13 = $r24;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token#8);

        throw l13;

     label13:
        exitmonitor publicSrcDir#5;

     label14:
        goto label17;

     label15:
        $r22 := @caughtexception;

        l14 = $r22;

        exitmonitor publicSrcDir#5;

     label16:
        throw l14;

     label17:
        publicSrcDir#9 = null;

        if dataOnly#1 != 0 goto label19;

        token#10 = p#6.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        if token#10 != null goto label18;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r11 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no applicationInfo.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r12);

        return 0;

     label18:
        $z1 = virtualinvoke p#6.<android.content.pm.PackageParser$Package: boolean isForwardLocked()>();

        if $z1 == 0 goto label19;

        publicSrcDir#9 = virtualinvoke token#10.<android.content.pm.ApplicationInfo: java.lang.String getBaseResourcePath()>();

     label19:
        $r6 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(com.android.server.pm.PackageSetting)>(ps#7);

        token#11 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getDexCodeInstructionSets(java.lang.String[])>($r6);

        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r7 = p#6.<android.content.pm.PackageParser$Package: java.lang.String volumeUuid>;

        $r8 = p#6.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        res = virtualinvoke $r9.<com.android.server.pm.Installer: int getSizeInfo(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],android.content.pm.PackageStats)>($r7, packageName, userHandle, $r8, libDirRoot#2, publicSrcDir#9, asecPath#3, token#11, pStats);

        if res >= 0 goto label20;

        return 0;

     label20:
        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isExternal(android.content.pm.PackageParser$Package)>(p#6);

        if $z0 != 0 goto label21;

        $l2 = pStats.<android.content.pm.PackageStats: long codeSize>;

        $l0 = pStats.<android.content.pm.PackageStats: long externalCodeSize>;

        $l1 = $l2 + $l0;

        pStats.<android.content.pm.PackageStats: long codeSize> = $l1;

        pStats.<android.content.pm.PackageStats: long externalCodeSize> = 0L;

     label21:
        return 1;

        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label02 to label04 with label15;
        catch java.lang.Throwable from label05 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public void addPackageToPreferred(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "addPackageToPreferred: this is now a no-op");

        return;
    }

    public void removePackageFromPreferred(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "removePackageFromPreferred: this is now a no-op");

        return;
    }

    public java.util.List getPreferredPackages(int)
    {
        com.android.server.pm.PackageManagerService this;
        int flags;
        java.util.ArrayList tmp$1417549714;
        java.util.List tmp$804119246;

        this := @this: com.android.server.pm.PackageManagerService;

        flags := @parameter0: int;

        tmp$1417549714 = new java.util.ArrayList;

        specialinvoke tmp$1417549714.<java.util.ArrayList: void <init>()>();

        tmp$804119246 = (java.util.List) tmp$1417549714;

        return tmp$804119246;
    }

    private int getUidTargetSdkVersionLockedLPr(int)
    {
        com.android.server.pm.PackageManagerService this;
        int uid, v, $i0, vers#2;
        java.lang.Object obj, $r5;
        java.util.Iterator it;
        com.android.server.pm.PackageSetting ps, sus#3;
        com.android.server.pm.Settings $r0;
        boolean $z0, $z1, $z2;
        android.content.pm.PackageParser$Package $r1, $r2, $r6, $r7;
        android.content.pm.ApplicationInfo $r3, $r8;
        android.util.ArraySet $r4;
        com.android.server.pm.SharedUserSetting sus#1;

        this := @this: com.android.server.pm.PackageManagerService;

        uid := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        obj = virtualinvoke $r0.<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>(uid);

        $z0 = obj instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label4;

        sus#1 = (com.android.server.pm.SharedUserSetting) obj;

        vers#2 = 10000;

        $r4 = sus#1.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        it = virtualinvoke $r4.<android.util.ArraySet: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r5 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        ps = (com.android.server.pm.PackageSetting) $r5;

        $r7 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r7 == null goto label2;

        $r6 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r8 = $r6.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        v = $r8.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if v >= vers#2 goto label2;

        vers#2 = v;

     label2:
        goto label1;

     label3:
        return vers#2;

     label4:
        $z1 = obj instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label5;

        sus#3 = (com.android.server.pm.PackageSetting) obj;

        $r1 = sus#3.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r1 == null goto label5;

        $r2 = sus#3.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        $r3 = $r2.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        return $i0;

     label5:
        return 10000;
    }

    public void addPreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.IntentFilter filter;
        int match, userId;
        android.content.ComponentName[] set;
        android.content.ComponentName activity;

        this := @this: com.android.server.pm.PackageManagerService;

        filter := @parameter0: android.content.IntentFilter;

        match := @parameter1: int;

        set := @parameter2: android.content.ComponentName[];

        activity := @parameter3: android.content.ComponentName;

        userId := @parameter4: int;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void addPreferredActivityInternal(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,boolean,int,java.lang.String)>(filter, match, set, activity, 1, userId, "Adding preferred");

        return;
    }

    private void addPreferredActivityInternal(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName, boolean, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.IntentFilter filter;
        int match, userId, callingUid, $i0, $i1, $i3;
        android.content.ComponentName[] set;
        android.content.ComponentName activity;
        boolean always;
        java.lang.String opname, $r5, $r11, $r17;
        android.util.ArrayMap l9, $r0;
        com.android.server.pm.PreferredIntentResolver pir;
        java.lang.Throwable l11, $r19;
        android.content.Context $r1, $r14;
        com.android.server.pm.Settings $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r15, $r16, $r18;
        com.android.server.pm.PreferredActivity $r12;
        android.util.LogPrinter $r13;

        this := @this: com.android.server.pm.PackageManagerService;

        filter := @parameter0: android.content.IntentFilter;

        match := @parameter1: int;

        set := @parameter2: android.content.ComponentName[];

        activity := @parameter3: android.content.ComponentName;

        always := @parameter4: boolean;

        userId := @parameter5: int;

        opname := @parameter6: java.lang.String;

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(callingUid, userId, 1, 0, "add preferred activity");

        $i0 = virtualinvoke filter.<android.content.IntentFilter: int countActions()>();

        if $i0 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Cannot set a preferred activity with no filter actions");

        return;

     label1:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l9 = $r0;

        entermonitor $r0;

     label2:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS");

        if $i1 == 0 goto label5;

        $i3 = specialinvoke this.<com.android.server.pm.PackageManagerService: int getUidTargetSdkVersionLockedLPr(int)>(callingUid);

        if $i3 >= 8 goto label4;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring addPreferredActivity() from uid ");

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(callingUid);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r17);

        exitmonitor l9;

     label3:
        return;

     label4:
        $r14 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r14.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

     label5:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        pir = virtualinvoke $r2.<com.android.server.pm.Settings: com.android.server.pm.PreferredIntentResolver editPreferredActivitiesLPw(int)>(userId);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(opname);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" activity ");

        $r5 = virtualinvoke activity.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r11);

        $r13 = new android.util.LogPrinter;

        specialinvoke $r13.<android.util.LogPrinter: void <init>(int,java.lang.String)>(4, "PackageManager");

        virtualinvoke filter.<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>($r13, "  ");

        $r12 = new com.android.server.pm.PreferredActivity;

        specialinvoke $r12.<com.android.server.pm.PreferredActivity: void <init>(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,boolean)>(filter, match, set, activity, always);

        virtualinvoke pir.<com.android.server.pm.PreferredIntentResolver: void addFilter(android.content.IntentFilter)>($r12);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

        exitmonitor l9;

     label6:
        goto label9;

     label7:
        $r19 := @caughtexception;

        l11 = $r19;

        exitmonitor l9;

     label8:
        throw l11;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void replacePreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.IntentFilter filter;
        int match, userId, callingUid, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, cur#2;
        android.content.ComponentName[] set;
        android.content.ComponentName activity, $r9;
        android.util.ArrayMap l7, $r2;
        com.android.server.pm.PreferredIntentResolver pir;
        java.util.ArrayList existing;
        com.android.server.pm.PreferredActivity pa, cur#1;
        java.lang.Throwable l12, $r18;
        java.lang.IllegalArgumentException $r0, $r19;
        android.content.Context $r1, $r14;
        com.android.server.pm.Settings $r3;
        java.lang.Object $r4, $r6, $r7;
        android.util.SparseArray $r5;
        com.android.server.pm.PreferredComponent $r8, $r10, $r11, $r12;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r13, $r15, $r17;
        java.lang.String $r16;

        this := @this: com.android.server.pm.PackageManagerService;

        filter := @parameter0: android.content.IntentFilter;

        match := @parameter1: int;

        set := @parameter2: android.content.ComponentName[];

        activity := @parameter3: android.content.ComponentName;

        userId := @parameter4: int;

        $i0 = virtualinvoke filter.<android.content.IntentFilter: int countActions()>();

        if $i0 == 1 goto label01;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("replacePreferredActivity expects filter to have only 1 action.");

        throw $r19;

     label01:
        $i1 = virtualinvoke filter.<android.content.IntentFilter: int countDataAuthorities()>();

        if $i1 != 0 goto label02;

        $i3 = virtualinvoke filter.<android.content.IntentFilter: int countDataPaths()>();

        if $i3 != 0 goto label02;

        $i2 = virtualinvoke filter.<android.content.IntentFilter: int countDataSchemes()>();

        if $i2 > 1 goto label02;

        $i4 = virtualinvoke filter.<android.content.IntentFilter: int countDataTypes()>();

        if $i4 == 0 goto label03;

     label02:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("replacePreferredActivity expects filter to have no data authorities, paths, or types; and at most one scheme.");

        throw $r0;

     label03:
        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(callingUid, userId, 1, 0, "replace preferred activity");

        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l7 = $r2;

        entermonitor $r2;

     label04:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i5 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS");

        if $i5 == 0 goto label07;

        $i10 = specialinvoke this.<com.android.server.pm.PackageManagerService: int getUidTargetSdkVersionLockedLPr(int)>(callingUid);

        if $i10 >= 8 goto label06;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring replacePreferredActivity() from uid ");

        $i12 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r16);

        exitmonitor l7;

     label05:
        return;

     label06:
        $r14 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r14.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

     label07:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r3.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $r4 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(userId);

        pir = (com.android.server.pm.PreferredIntentResolver) $r4;

        if pir == null goto label11;

        existing = virtualinvoke pir.<com.android.server.pm.PreferredIntentResolver: java.util.ArrayList findFilters(android.content.IntentFilter)>(filter);

        if existing == null goto label09;

        $i7 = virtualinvoke existing.<java.util.ArrayList: int size()>();

        if $i7 != 1 goto label09;

        $r7 = virtualinvoke existing.<java.util.ArrayList: java.lang.Object get(int)>(0);

        cur#1 = (com.android.server.pm.PreferredActivity) $r7;

        $r10 = cur#1.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z0 = $r10.<com.android.server.pm.PreferredComponent: boolean mAlways>;

        if $z0 == 0 goto label09;

        $r8 = cur#1.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r9 = $r8.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $z1 = virtualinvoke $r9.<android.content.ComponentName: boolean equals(java.lang.Object)>(activity);

        if $z1 == 0 goto label09;

        $r11 = cur#1.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $i9 = $r11.<com.android.server.pm.PreferredComponent: int mMatch>;

        $i8 = match & 268369920;

        if $i9 != $i8 goto label09;

        $r12 = cur#1.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z2 = virtualinvoke $r12.<com.android.server.pm.PreferredComponent: boolean sameSet(android.content.ComponentName[])>(set);

        if $z2 == 0 goto label09;

        exitmonitor l7;

     label08:
        return;

     label09:
        if existing == null goto label11;

        cur#2 = 0;

     label10:
        $i6 = virtualinvoke existing.<java.util.ArrayList: int size()>();

        if cur#2 >= $i6 goto label11;

        $r6 = virtualinvoke existing.<java.util.ArrayList: java.lang.Object get(int)>(cur#2);

        pa = (com.android.server.pm.PreferredActivity) $r6;

        virtualinvoke pir.<com.android.server.pm.PreferredIntentResolver: void removeFilter(android.content.IntentFilter)>(pa);

        cur#2 = cur#2 + 1;

        goto label10;

     label11:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void addPreferredActivityInternal(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,boolean,int,java.lang.String)>(filter, match, set, activity, 1, userId, "Replacing preferred");

        exitmonitor l7;

     label12:
        goto label15;

     label13:
        $r18 := @caughtexception;

        l12 = $r18;

        exitmonitor l7;

     label14:
        throw l12;

     label15:
        return;

        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label08 with label13;
        catch java.lang.Throwable from label09 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void clearPackagePreferredActivities(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r8;
        int uid, user, $i0, $i1, $i2, $i3, $i5;
        android.util.ArrayMap l3, $r0, $r1;
        android.content.pm.PackageParser$Package pkg;
        java.lang.Throwable l6, $r10;
        java.lang.Object $r2;
        android.content.Context $r3, $r5;
        boolean $z0;
        java.lang.StringBuilder $r4, $r6, $r7;
        android.content.pm.ApplicationInfo $r9;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r2;

        if pkg == null goto label02;

        $r9 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i5 = $r9.<android.content.pm.ApplicationInfo: int uid>;

        if $i5 == uid goto label05;

     label02:
        $r3 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS");

        if $i0 == 0 goto label05;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = specialinvoke this.<com.android.server.pm.PackageManagerService: int getUidTargetSdkVersionLockedLPr(int)>($i2);

        if $i1 >= 8 goto label04;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring clearPackagePreferredActivities() from uid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r8);

        exitmonitor l3;

     label03:
        return;

     label04:
        $r5 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

     label05:
        user = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean clearPackagePreferredActivitiesLPw(java.lang.String,int)>(packageName, user);

        if $z0 == 0 goto label06;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(user);

     label06:
        exitmonitor l3;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        l6 = $r10;

        exitmonitor l3;

     label09:
        throw l6;

     label10:
        return;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    boolean clearPackagePreferredActivitiesLPw(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r11;
        int userId, thisUserId, $i0, $i1, i#3, pa#5;
        com.android.server.pm.PreferredIntentResolver pir;
        java.util.Iterator it;
        com.android.server.pm.PreferredActivity pa, pa#4;
        com.android.server.pm.Settings $r0, $r2, $r4;
        android.util.SparseArray $r1, $r3, $r6;
        java.lang.Object $r5, $r7, $r8;
        boolean $z0, $z2, $z3, changed#2;
        com.android.server.pm.PreferredComponent $r9, $r13;
        java.util.ArrayList $r10, removed#1;
        android.content.ComponentName $r12;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        removed#1 = null;

        changed#2 = 0;

        i#3 = 0;

     label01:
        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r1 = $r0.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if i#3 >= $i0 goto label11;

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        thisUserId = virtualinvoke $r3.<android.util.SparseArray: int keyAt(int)>(i#3);

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r4.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $r5 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#3);

        pir = (com.android.server.pm.PreferredIntentResolver) $r5;

        if userId == -1 goto label02;

        if userId == thisUserId goto label02;

        goto label10;

     label02:
        it = virtualinvoke pir.<com.android.server.pm.PreferredIntentResolver: java.util.Iterator filterIterator()>();

     label03:
        $z0 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r8 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        pa#4 = (com.android.server.pm.PreferredActivity) $r8;

        if packageName == null goto label04;

        $r9 = pa#4.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r12 = $r9.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $r11 = virtualinvoke $r12.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(packageName);

        if $z2 == 0 goto label06;

        $r13 = pa#4.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z3 = $r13.<com.android.server.pm.PreferredComponent: boolean mAlways>;

        if $z3 == 0 goto label06;

     label04:
        if removed#1 != null goto label05;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        removed#1 = $r10;

     label05:
        virtualinvoke removed#1.<java.util.ArrayList: boolean add(java.lang.Object)>(pa#4);

     label06:
        goto label03;

     label07:
        if removed#1 == null goto label10;

        pa#5 = 0;

     label08:
        $i1 = virtualinvoke removed#1.<java.util.ArrayList: int size()>();

        if pa#5 >= $i1 goto label09;

        $r7 = virtualinvoke removed#1.<java.util.ArrayList: java.lang.Object get(int)>(pa#5);

        pa = (com.android.server.pm.PreferredActivity) $r7;

        virtualinvoke pir.<com.android.server.pm.PreferredIntentResolver: void removeFilter(android.content.IntentFilter)>(pa);

        pa#5 = pa#5 + 1;

        goto label08;

     label09:
        changed#2 = 1;

     label10:
        i#3 = i#3 + 1;

        goto label01;

     label11:
        return changed#2;
    }

    private void clearIntentFilterVerificationsLPw(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, packageCount, i#1;
        android.content.pm.PackageParser$Package pkg;
        android.util.ArrayMap $r0, $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        packageCount = virtualinvoke $r0.<android.util.ArrayMap: int size()>();

        i#1 = 0;

     label1:
        if i#1 >= packageCount goto label2;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i#1);

        pkg = (android.content.pm.PackageParser$Package) $r2;

        $r3 = pkg.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void clearIntentFilterVerificationsLPw(java.lang.String,int)>($r3, userId);

        i#1 = i#1 + 1;

        goto label1;

     label2:
        return;
    }

    void clearIntentFilterVerificationsLPw(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int userId, len$, oneUserId, i$#1;
        int[] arr$, $r3;
        com.android.server.pm.Settings $r0, $r2;
        boolean $z0, $z1;
        com.android.server.pm.UserManagerService $r1, $r4;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r1 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $r3 = virtualinvoke $r1.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $z1 = virtualinvoke $r2.<com.android.server.pm.Settings: boolean removeIntentFilterVerificationLPw(java.lang.String,int[])>(packageName, $r3);

        if $z1 == 0 goto label3;

        $r4 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        arr$ = virtualinvoke $r4.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        len$ = lengthof arr$;

        i$#1 = 0;

     label1:
        if i$#1 >= len$ goto label2;

        oneUserId = arr$[i$#1];

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(oneUserId);

        i$#1 = i$#1 + 1;

        goto label1;

     label2:
        goto label3;

     label3:
        return;
    }

    void clearDefaultBrowserIfNeeded(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, defaultBrowserPackageName;
        int[] arr$;
        int len$, oneUserId, i$#1;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0, $z1;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        arr$ = virtualinvoke $r0.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        len$ = lengthof arr$;

        i$#1 = 0;

     label1:
        if i$#1 >= len$ goto label4;

        oneUserId = arr$[i$#1];

        defaultBrowserPackageName = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.lang.String getDefaultBrowserPackageName(int)>(oneUserId);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(defaultBrowserPackageName);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $z1 = virtualinvoke packageName.<java.lang.String: boolean equals(java.lang.Object)>(defaultBrowserPackageName);

        if $z1 == 0 goto label3;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean setDefaultBrowserPackageName(java.lang.String,int)>(null, oneUserId);

     label3:
        i$#1 = i$#1 + 1;

        goto label1;

     label4:
        return;
    }

    public void resetApplicationPreferences(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId;
        android.util.ArrayMap l2, $r1;
        long identity;
        java.lang.Throwable l5, l6, $r3, $r4;
        android.content.Context $r0;
        com.android.server.pm.Settings $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r1;

        entermonitor $r1;

     label01:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        virtualinvoke this.<com.android.server.pm.PackageManagerService: boolean clearPackagePreferredActivitiesLPw(java.lang.String,int)>(null, userId);

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r2.<com.android.server.pm.Settings: void applyDefaultPreferredAppsLPw(com.android.server.pm.PackageManagerService,int)>(this, userId);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void applyFactoryDefaultBrowserLPw(int)>(userId);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void clearIntentFilterVerificationsLPw(int)>(userId);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void primeDomainVerificationsLPw(int)>(userId);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void resetUserChangesToRuntimePermissionsAndFlagsLPw(int)>(userId);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        goto label06;

     label04:
        $r3 := @caughtexception;

        l5 = $r3;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l5;

     label06:
        exitmonitor l2;

     label07:
        goto label10;

     label08:
        $r4 := @caughtexception;

        l6 = $r4;

        exitmonitor l2;

     label09:
        throw l6;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public int getPreferredActivities(java.util.List, java.util.List, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.util.List outFilters, outActivities;
        java.lang.String packageName, $r9;
        byte num;
        int userId;
        android.util.ArrayMap l6, $r0;
        com.android.server.pm.PreferredIntentResolver pir;
        java.util.Iterator it;
        com.android.server.pm.PreferredActivity pa;
        java.lang.Throwable l10, $r12;
        com.android.server.pm.Settings $r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3, $r4;
        boolean $z0, $z3, $z4;
        android.content.ComponentName $r5, $r10;
        com.android.server.pm.PreferredComponent $r6, $r8, $r11;
        android.content.IntentFilter $r7;

        this := @this: com.android.server.pm.PackageManagerService;

        outFilters := @parameter0: java.util.List;

        outActivities := @parameter1: java.util.List;

        packageName := @parameter2: java.lang.String;

        num = 0;

        userId = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l6 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = $r1.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(userId);

        pir = (com.android.server.pm.PreferredIntentResolver) $r3;

        if pir == null goto label06;

        it = virtualinvoke pir.<com.android.server.pm.PreferredIntentResolver: java.util.Iterator filterIterator()>();

     label02:
        $z0 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r4 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        pa = (com.android.server.pm.PreferredActivity) $r4;

        if packageName == null goto label03;

        $r8 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r10 = $r8.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $r9 = virtualinvoke $r10.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(packageName);

        if $z3 == 0 goto label05;

        $r11 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z4 = $r11.<com.android.server.pm.PreferredComponent: boolean mAlways>;

        if $z4 == 0 goto label05;

     label03:
        if outFilters == null goto label04;

        $r7 = new android.content.IntentFilter;

        specialinvoke $r7.<android.content.IntentFilter: void <init>(android.content.IntentFilter)>(pa);

        interfaceinvoke outFilters.<java.util.List: boolean add(java.lang.Object)>($r7);

     label04:
        if outActivities == null goto label05;

        $r6 = pa.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r5 = $r6.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        interfaceinvoke outActivities.<java.util.List: boolean add(java.lang.Object)>($r5);

     label05:
        goto label02;

     label06:
        exitmonitor l6;

     label07:
        goto label10;

     label08:
        $r12 := @caughtexception;

        l10 = $r12;

        exitmonitor l6;

     label09:
        throw l10;

     label10:
        return num;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void addPersistentPreferredActivity(android.content.IntentFilter, android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.IntentFilter filter, tmp$587995425;
        android.content.ComponentName activity;
        int userId, callingUid, $i0;
        android.util.ArrayMap l5, $r0;
        java.lang.Throwable l6, $r13;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, tmp$2064798591;
        java.lang.String $r6;
        com.android.server.pm.PersistentPreferredIntentResolver $r9;
        com.android.server.pm.Settings $r10;
        java.lang.SecurityException tmp$997041594;
        android.util.LogPrinter tmp$1334158926;
        com.android.server.pm.PersistentPreferredActivity tmp$338233416;

        this := @this: com.android.server.pm.PackageManagerService;

        filter := @parameter0: android.content.IntentFilter;

        activity := @parameter1: android.content.ComponentName;

        userId := @parameter2: int;

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        if callingUid == 1000 goto label1;

        tmp$997041594 = new java.lang.SecurityException;

        specialinvoke tmp$997041594.<java.lang.SecurityException: void <init>(java.lang.String)>("addPersistentPreferredActivity can only be run by the system");

        throw tmp$997041594;

     label1:
        $i0 = virtualinvoke filter.<android.content.IntentFilter: int countActions()>();

        if $i0 != 0 goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Cannot set a preferred activity with no filter actions");

        return;

     label2:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l5 = $r0;

        entermonitor $r0;

     label3:
        tmp$2064798591 = new java.lang.StringBuilder;

        specialinvoke tmp$2064798591.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke tmp$2064798591.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding persistent preferred activity ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(activity);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r6);

        tmp$1334158926 = new android.util.LogPrinter;

        specialinvoke tmp$1334158926.<android.util.LogPrinter: void <init>(int,java.lang.String)>(4, "PackageManager");

        virtualinvoke filter.<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>(tmp$1334158926, "  ");

        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = virtualinvoke $r10.<com.android.server.pm.Settings: com.android.server.pm.PersistentPreferredIntentResolver editPersistentPreferredActivitiesLPw(int)>(userId);

        tmp$338233416 = new com.android.server.pm.PersistentPreferredActivity;

        specialinvoke tmp$338233416.<com.android.server.pm.PersistentPreferredActivity: void <init>(android.content.IntentFilter,android.content.ComponentName)>(filter, activity);

        tmp$587995425 = (android.content.IntentFilter) tmp$338233416;

        virtualinvoke $r9.<com.android.server.pm.PersistentPreferredIntentResolver: void addFilter(android.content.IntentFilter)>(tmp$587995425);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

        exitmonitor l5;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        l6 = $r13;

        exitmonitor l5;

     label6:
        throw l6;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void clearPackagePersistentPreferredActivities(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r12;
        int userId, callingUid, thisUserId, $i0, $i1, i#3, ppa#5;
        android.util.ArrayMap l6, $r0;
        com.android.server.pm.PersistentPreferredIntentResolver ppir;
        java.util.Iterator it;
        com.android.server.pm.PersistentPreferredActivity ppa, ppa#4;
        java.lang.Throwable l13, $r14;
        android.util.SparseArray $r1, $r3, $r7;
        com.android.server.pm.Settings $r2, $r4, $r5;
        java.lang.Object $r6, $r8, $r10;
        boolean $z0, $z2, changed#2;
        android.content.ComponentName $r9;
        java.util.ArrayList removed#1, tmp$1009152348;
        java.lang.SecurityException tmp$12983687;
        android.content.IntentFilter tmp$116853809;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        if callingUid == 1000 goto label01;

        tmp$12983687 = new java.lang.SecurityException;

        specialinvoke tmp$12983687.<java.lang.SecurityException: void <init>(java.lang.String)>("clearPackagePersistentPreferredActivities can only be run by the system");

        throw tmp$12983687;

     label01:
        removed#1 = null;

        changed#2 = 0;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l6 = $r0;

        entermonitor $r0;

     label02:
        i#3 = 0;

     label03:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r1 = $r2.<com.android.server.pm.Settings: android.util.SparseArray mPersistentPreferredActivities>;

        $i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if i#3 >= $i0 goto label12;

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r4.<com.android.server.pm.Settings: android.util.SparseArray mPersistentPreferredActivities>;

        thisUserId = virtualinvoke $r3.<android.util.SparseArray: int keyAt(int)>(i#3);

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r5.<com.android.server.pm.Settings: android.util.SparseArray mPersistentPreferredActivities>;

        $r6 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#3);

        ppir = (com.android.server.pm.PersistentPreferredIntentResolver) $r6;

        if userId == thisUserId goto label04;

        goto label11;

     label04:
        it = virtualinvoke ppir.<com.android.server.pm.PersistentPreferredIntentResolver: java.util.Iterator filterIterator()>();

     label05:
        $z0 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r10 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        ppa#4 = (com.android.server.pm.PersistentPreferredActivity) $r10;

        $r9 = ppa#4.<com.android.server.pm.PersistentPreferredActivity: android.content.ComponentName mComponent>;

        $r12 = virtualinvoke $r9.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(packageName);

        if $z2 == 0 goto label07;

        if removed#1 != null goto label06;

        tmp$1009152348 = new java.util.ArrayList;

        specialinvoke tmp$1009152348.<java.util.ArrayList: void <init>()>();

        removed#1 = tmp$1009152348;

     label06:
        virtualinvoke removed#1.<java.util.ArrayList: boolean add(java.lang.Object)>(ppa#4);

     label07:
        goto label05;

     label08:
        if removed#1 == null goto label11;

        ppa#5 = 0;

     label09:
        $i1 = virtualinvoke removed#1.<java.util.ArrayList: int size()>();

        if ppa#5 >= $i1 goto label10;

        $r8 = virtualinvoke removed#1.<java.util.ArrayList: java.lang.Object get(int)>(ppa#5);

        ppa = (com.android.server.pm.PersistentPreferredActivity) $r8;

        tmp$116853809 = (android.content.IntentFilter) ppa;

        virtualinvoke ppir.<com.android.server.pm.PersistentPreferredIntentResolver: void removeFilter(android.content.IntentFilter)>(tmp$116853809);

        ppa#5 = ppa#5 + 1;

        goto label09;

     label10:
        changed#2 = 1;

     label11:
        i#3 = i#3 + 1;

        goto label03;

     label12:
        if changed#2 == 0 goto label13;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

     label13:
        exitmonitor l6;

     label14:
        goto label17;

     label15:
        $r14 := @caughtexception;

        l13 = $r14;

        exitmonitor l6;

     label16:
        throw l13;

     label17:
        return;

        catch java.lang.Throwable from label02 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private void restoreFromXml(org.xmlpull.v1.XmlPullParser, int, java.lang.String, com.android.server.pm.PackageManagerService$BlobXmlRestorer) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.pm.PackageManagerService this;
        org.xmlpull.v1.XmlPullParser parser;
        int userId, $i0, $i1, type#1, type#2;
        java.lang.String expectedStartTag, $r0;
        com.android.server.pm.PackageManagerService$BlobXmlRestorer functor;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        parser := @parameter0: org.xmlpull.v1.XmlPullParser;

        userId := @parameter1: int;

        expectedStartTag := @parameter2: java.lang.String;

        functor := @parameter3: com.android.server.pm.PackageManagerService$BlobXmlRestorer;

     label1:
        $i0 = interfaceinvoke parser.<org.xmlpull.v1.XmlPullParser: int next()>();

        type#1 = $i0;

        if $i0 == 2 goto label2;

        if type#1 == 1 goto label2;

        goto label1;

     label2:
        if type#1 == 2 goto label3;

        return;

     label3:
        $r0 = interfaceinvoke parser.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke expectedStartTag.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label4;

        return;

     label4:
        $i1 = interfaceinvoke parser.<org.xmlpull.v1.XmlPullParser: int next()>();

        type#2 = $i1;

        if $i1 != 4 goto label5;

        goto label4;

     label5:
        interfaceinvoke functor.<com.android.server.pm.PackageManagerService$BlobXmlRestorer: void apply(org.xmlpull.v1.XmlPullParser,int)>(parser, userId);

        return;
    }

    public byte[] getPreferredActivityBackup(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, $i0;
        java.io.ByteArrayOutputStream dataStream, $r0;
        android.util.ArrayMap l4, $r6;
        java.lang.Throwable l5, $r11;
        com.android.internal.util.FastXmlSerializer $r1, serializer#1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;
        java.lang.Boolean $r4;
        com.android.server.pm.Settings $r7;
        java.lang.SecurityException $r9;
        byte[] $r10;
        java.lang.Exception $r12, serializer#2;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label01;

        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call getPreferredActivityBackup()");

        throw $r9;

     label01:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        dataStream = $r0;

     label02:
        $r1 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r1.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        serializer#1 = $r1;

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(dataStream, $r3);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r4);

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "pa");

        $r6 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r6;

        entermonitor $r6;

     label03:
        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r7.<com.android.server.pm.Settings: void writePreferredActivitiesLPr(org.xmlpull.v1.XmlSerializer,int,boolean)>(serializer#1, userId, 1);

        exitmonitor l4;

     label04:
        goto label07;

     label05:
        $r11 := @caughtexception;

        l5 = $r11;

        exitmonitor l4;

     label06:
        throw l5;

     label07:
        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "pa");

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        serializer#2 = $r12;

        return null;

     label10:
        $r10 = virtualinvoke dataStream.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r10;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Exception from label02 to label08 with label09;
    }

    public void restorePreferredActivities(byte[], int)
    {
        com.android.server.pm.PackageManagerService this;
        byte[] backup;
        int userId, $i0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;
        java.lang.Exception $r5, parser#2;
        org.xmlpull.v1.XmlPullParser parser#1;
        java.lang.SecurityException tmp$897049501;
        java.io.ByteArrayInputStream tmp$464867920;
        com.android.server.pm.PackageManagerService$16 tmp$2094901121;
        java.io.InputStream tmp$1073615741;

        this := @this: com.android.server.pm.PackageManagerService;

        backup := @parameter0: byte[];

        userId := @parameter1: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label1;

        tmp$897049501 = new java.lang.SecurityException;

        specialinvoke tmp$897049501.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call restorePreferredActivities()");

        throw tmp$897049501;

     label1:
        parser#1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        tmp$464867920 = new java.io.ByteArrayInputStream;

        specialinvoke tmp$464867920.<java.io.ByteArrayInputStream: void <init>(byte[])>(backup);

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

        tmp$1073615741 = (java.io.InputStream) tmp$464867920;

        interfaceinvoke parser#1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(tmp$1073615741, $r2);

        tmp$2094901121 = new com.android.server.pm.PackageManagerService$16;

        specialinvoke tmp$2094901121.<com.android.server.pm.PackageManagerService$16: void <init>(com.android.server.pm.PackageManagerService)>(this);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void restoreFromXml(org.xmlpull.v1.XmlPullParser,int,java.lang.String,com.android.server.pm.PackageManagerService$BlobXmlRestorer)>(parser#1, userId, "pa", tmp$2094901121);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        parser#2 = $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public byte[] getDefaultAppsBackup(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, $i0;
        java.io.ByteArrayOutputStream dataStream, $r0;
        android.util.ArrayMap l4, $r6;
        java.lang.Throwable l5, $r11;
        com.android.internal.util.FastXmlSerializer $r1, serializer#1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;
        java.lang.Boolean $r4;
        com.android.server.pm.Settings $r7;
        java.lang.SecurityException $r9;
        byte[] $r10;
        java.lang.Exception $r12, serializer#2;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label01;

        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call getDefaultAppsBackup()");

        throw $r9;

     label01:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        dataStream = $r0;

     label02:
        $r1 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r1.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        serializer#1 = $r1;

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(dataStream, $r3);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r4);

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "da");

        $r6 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r6;

        entermonitor $r6;

     label03:
        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r7.<com.android.server.pm.Settings: void writeDefaultAppsLPr(org.xmlpull.v1.XmlSerializer,int)>(serializer#1, userId);

        exitmonitor l4;

     label04:
        goto label07;

     label05:
        $r11 := @caughtexception;

        l5 = $r11;

        exitmonitor l4;

     label06:
        throw l5;

     label07:
        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "da");

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        serializer#2 = $r12;

        return null;

     label10:
        $r10 = virtualinvoke dataStream.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r10;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Exception from label02 to label08 with label09;
    }

    public void restoreDefaultApps(byte[], int)
    {
        com.android.server.pm.PackageManagerService this;
        byte[] backup;
        int userId, $i0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;
        java.lang.Exception $r5, parser#2;
        org.xmlpull.v1.XmlPullParser parser#1;
        java.lang.SecurityException tmp$947243688;
        java.io.ByteArrayInputStream tmp$1185615979;
        com.android.server.pm.PackageManagerService$17 tmp$998267730;
        java.io.InputStream tmp$1639720667;

        this := @this: com.android.server.pm.PackageManagerService;

        backup := @parameter0: byte[];

        userId := @parameter1: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label1;

        tmp$947243688 = new java.lang.SecurityException;

        specialinvoke tmp$947243688.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call restoreDefaultApps()");

        throw tmp$947243688;

     label1:
        parser#1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        tmp$1185615979 = new java.io.ByteArrayInputStream;

        specialinvoke tmp$1185615979.<java.io.ByteArrayInputStream: void <init>(byte[])>(backup);

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

        tmp$1639720667 = (java.io.InputStream) tmp$1185615979;

        interfaceinvoke parser#1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(tmp$1639720667, $r2);

        tmp$998267730 = new com.android.server.pm.PackageManagerService$17;

        specialinvoke tmp$998267730.<com.android.server.pm.PackageManagerService$17: void <init>(com.android.server.pm.PackageManagerService)>(this);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void restoreFromXml(org.xmlpull.v1.XmlPullParser,int,java.lang.String,com.android.server.pm.PackageManagerService$BlobXmlRestorer)>(parser#1, userId, "da", tmp$998267730);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        parser#2 = $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public byte[] getIntentFilterVerificationBackup(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, $i0;
        java.io.ByteArrayOutputStream dataStream, $r0;
        android.util.ArrayMap l4, $r6;
        java.lang.Throwable l5, $r11;
        com.android.internal.util.FastXmlSerializer $r1, serializer#1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;
        java.lang.Boolean $r4;
        com.android.server.pm.Settings $r7;
        java.lang.SecurityException $r9;
        byte[] $r10;
        java.lang.Exception $r12, serializer#2;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label01;

        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call getIntentFilterVerificationBackup()");

        throw $r9;

     label01:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        dataStream = $r0;

     label02:
        $r1 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r1.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        serializer#1 = $r1;

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(dataStream, $r3);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r4);

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "iv");

        $r6 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r6;

        entermonitor $r6;

     label03:
        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r7.<com.android.server.pm.Settings: void writeAllDomainVerificationsLPr(org.xmlpull.v1.XmlSerializer,int)>(serializer#1, userId);

        exitmonitor l4;

     label04:
        goto label07;

     label05:
        $r11 := @caughtexception;

        l5 = $r11;

        exitmonitor l4;

     label06:
        throw l5;

     label07:
        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "iv");

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        interfaceinvoke serializer#1.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        serializer#2 = $r12;

        return null;

     label10:
        $r10 = virtualinvoke dataStream.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r10;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Exception from label02 to label08 with label09;
    }

    public void restoreIntentFilterVerification(byte[], int)
    {
        com.android.server.pm.PackageManagerService this;
        byte[] backup;
        int userId, $i0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;
        java.lang.Exception $r5, parser#2;
        org.xmlpull.v1.XmlPullParser parser#1;
        java.lang.SecurityException tmp$1124853922;
        java.io.ByteArrayInputStream tmp$1898473566;
        com.android.server.pm.PackageManagerService$18 tmp$1545993523;
        java.io.InputStream tmp$124230881;

        this := @this: com.android.server.pm.PackageManagerService;

        backup := @parameter0: byte[];

        userId := @parameter1: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label1;

        tmp$1124853922 = new java.lang.SecurityException;

        specialinvoke tmp$1124853922.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call restorePreferredActivities()");

        throw tmp$1124853922;

     label1:
        parser#1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        tmp$1898473566 = new java.io.ByteArrayInputStream;

        specialinvoke tmp$1898473566.<java.io.ByteArrayInputStream: void <init>(byte[])>(backup);

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

        tmp$124230881 = (java.io.InputStream) tmp$1898473566;

        interfaceinvoke parser#1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(tmp$124230881, $r2);

        tmp$1545993523 = new com.android.server.pm.PackageManagerService$18;

        specialinvoke tmp$1545993523.<com.android.server.pm.PackageManagerService$18: void <init>(com.android.server.pm.PackageManagerService)>(this);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void restoreFromXml(org.xmlpull.v1.XmlPullParser,int,java.lang.String,com.android.server.pm.PackageManagerService$BlobXmlRestorer)>(parser#1, userId, "iv", tmp$1545993523);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        parser#2 = $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void addCrossProfileIntentFilter(android.content.IntentFilter, java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.IntentFilter intentFilter, tmp$615349464;
        java.lang.String ownerPackage;
        int sourceUserId, targetUserId, flags, callingUid, size, $i0, i#1;
        android.util.ArrayMap l7, $r1;
        com.android.server.pm.CrossProfileIntentFilter newFilter, $r4, tmp$1153689353;
        com.android.server.pm.CrossProfileIntentResolver resolver;
        java.util.ArrayList existing;
        java.lang.Throwable l13, $r6;
        android.content.Context $r0;
        com.android.server.pm.Settings $r2;
        java.lang.Object $r5;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        intentFilter := @parameter0: android.content.IntentFilter;

        ownerPackage := @parameter1: java.lang.String;

        sourceUserId := @parameter2: int;

        targetUserId := @parameter3: int;

        flags := @parameter4: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", null);

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke this.<com.android.server.pm.PackageManagerService: void enforceOwnerRights(java.lang.String,int)>(ownerPackage, callingUid);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceShellRestriction(java.lang.String,int,int)>("no_debugging_features", callingUid, sourceUserId);

        $i0 = virtualinvoke intentFilter.<android.content.IntentFilter: int countActions()>();

        if $i0 != 0 goto label01;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Cannot set a crossProfile intent filter with no filter actions");

        return;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l7 = $r1;

        entermonitor $r1;

     label02:
        tmp$1153689353 = new com.android.server.pm.CrossProfileIntentFilter;

        specialinvoke tmp$1153689353.<com.android.server.pm.CrossProfileIntentFilter: void <init>(android.content.IntentFilter,java.lang.String,int,int)>(intentFilter, ownerPackage, targetUserId, flags);

        newFilter = tmp$1153689353;

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        resolver = virtualinvoke $r2.<com.android.server.pm.Settings: com.android.server.pm.CrossProfileIntentResolver editCrossProfileIntentResolverLPw(int)>(sourceUserId);

        existing = virtualinvoke resolver.<com.android.server.pm.CrossProfileIntentResolver: java.util.ArrayList findFilters(android.content.IntentFilter)>(intentFilter);

        if existing == null goto label06;

        size = virtualinvoke existing.<java.util.ArrayList: int size()>();

        i#1 = 0;

     label03:
        if i#1 >= size goto label06;

        $r5 = virtualinvoke existing.<java.util.ArrayList: java.lang.Object get(int)>(i#1);

        $r4 = (com.android.server.pm.CrossProfileIntentFilter) $r5;

        $z0 = virtualinvoke newFilter.<com.android.server.pm.CrossProfileIntentFilter: boolean equalsIgnoreFilter(com.android.server.pm.CrossProfileIntentFilter)>($r4);

        if $z0 == 0 goto label05;

        exitmonitor l7;

     label04:
        return;

     label05:
        i#1 = i#1 + 1;

        goto label03;

     label06:
        tmp$615349464 = (android.content.IntentFilter) newFilter;

        virtualinvoke resolver.<com.android.server.pm.CrossProfileIntentResolver: void addFilter(android.content.IntentFilter)>(tmp$615349464);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(sourceUserId);

        exitmonitor l7;

     label07:
        goto label10;

     label08:
        $r6 := @caughtexception;

        l13 = $r6;

        exitmonitor l7;

     label09:
        throw l13;

     label10:
        return;

        catch java.lang.Throwable from label02 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void clearCrossProfileIntentFilters(int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        int sourceUserId, callingUid;
        java.lang.String ownerPackage, $r5;
        android.util.ArrayMap l4, $r1;
        com.android.server.pm.CrossProfileIntentResolver resolver;
        android.util.ArraySet set, tmp$971749091;
        java.util.Iterator i$;
        com.android.server.pm.CrossProfileIntentFilter filter;
        java.lang.Throwable l9, $r7;
        android.content.Context $r0;
        com.android.server.pm.Settings $r2;
        java.util.Set $r4;
        boolean $z0, $z1;
        java.lang.Object $r6;
        android.content.IntentFilter tmp$2142728395;

        this := @this: com.android.server.pm.PackageManagerService;

        sourceUserId := @parameter0: int;

        ownerPackage := @parameter1: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", null);

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke this.<com.android.server.pm.PackageManagerService: void enforceOwnerRights(java.lang.String,int)>(ownerPackage, callingUid);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceShellRestriction(java.lang.String,int,int)>("no_debugging_features", callingUid, sourceUserId);

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        resolver = virtualinvoke $r2.<com.android.server.pm.Settings: com.android.server.pm.CrossProfileIntentResolver editCrossProfileIntentResolverLPw(int)>(sourceUserId);

        tmp$971749091 = new android.util.ArraySet;

        $r4 = virtualinvoke resolver.<com.android.server.pm.CrossProfileIntentResolver: java.util.Set filterSet()>();

        specialinvoke tmp$971749091.<android.util.ArraySet: void <init>(java.util.Collection)>($r4);

        set = tmp$971749091;

        i$ = virtualinvoke set.<android.util.ArraySet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        filter = (com.android.server.pm.CrossProfileIntentFilter) $r6;

        $r5 = virtualinvoke filter.<com.android.server.pm.CrossProfileIntentFilter: java.lang.String getOwnerPackage()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(ownerPackage);

        if $z1 == 0 goto label3;

        tmp$2142728395 = (android.content.IntentFilter) filter;

        virtualinvoke resolver.<com.android.server.pm.CrossProfileIntentResolver: void removeFilter(android.content.IntentFilter)>(tmp$2142728395);

     label3:
        goto label2;

     label4:
        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(sourceUserId);

        exitmonitor l4;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        l9 = $r7;

        exitmonitor l4;

     label7:
        throw l9;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void enforceOwnerRights(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String pkg, $r6, $r14;
        int callingUid, callingUserId, $i0, $i1;
        android.content.pm.PackageInfo pi;
        android.content.pm.ApplicationInfo $r0;
        boolean $z0;
        java.lang.SecurityException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r13;
        java.lang.IllegalArgumentException $r9;

        this := @this: com.android.server.pm.PackageManagerService;

        pkg := @parameter0: java.lang.String;

        callingUid := @parameter1: int;

        $i0 = staticinvoke <android.os.UserHandle: int getAppId(int)>(callingUid);

        if $i0 != 1000 goto label1;

        return;

     label1:
        callingUserId = staticinvoke <android.os.UserHandle: int getUserId(int)>(callingUid);

        pi = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(pkg, 0, callingUserId);

        if pi != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pkg);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on user ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(callingUserId);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label2:
        $r0 = pi.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r0.<android.content.pm.ApplicationInfo: int uid>;

        $z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>($i1, callingUid);

        if $z0 != 0 goto label3;

        $r1 = new java.lang.SecurityException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling uid ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(callingUid);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not own package ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pkg);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label3:
        return;
    }

    public android.content.ComponentName getHomeActivities(java.util.List)
    {
        com.android.server.pm.PackageManagerService this;
        java.util.List allHomeCandidates, list;
        android.content.Intent intent, $r0;
        int callingUserId;
        android.content.pm.ResolveInfo preferred, ri;
        java.util.Iterator i$;
        android.content.pm.ActivityInfo $r2, $r3, $r5;
        java.lang.String $r4, $r6;
        java.lang.Object $r7;
        boolean $z0;
        android.content.ComponentName $r8;

        this := @this: com.android.server.pm.PackageManagerService;

        allHomeCandidates := @parameter0: java.util.List;

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        intent = $r0;

        virtualinvoke intent.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        callingUserId = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        list = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>(intent, null, 128, callingUserId);

        preferred = virtualinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPreferredActivity(android.content.Intent,java.lang.String,int,java.util.List,int,boolean,boolean,boolean,int)>(intent, null, 0, list, 0, 1, 0, 0, callingUserId);

        interfaceinvoke allHomeCandidates.<java.util.List: void clear()>();

        if list == null goto label2;

        i$ = interfaceinvoke list.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        ri = (android.content.pm.ResolveInfo) $r7;

        interfaceinvoke allHomeCandidates.<java.util.List: boolean add(java.lang.Object)>(ri);

        goto label1;

     label2:
        if preferred == null goto label3;

        $r2 = preferred.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r2 != null goto label4;

     label3:
        $r8 = null;

        goto label5;

     label4:
        $r8 = new android.content.ComponentName;

        $r3 = preferred.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r6 = $r3.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r5 = preferred.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r4 = $r5.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r8.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r6, $r4);

     label5:
        return $r8;
    }

    public void setApplicationEnabledSetting(java.lang.String, int, int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String appPackageName, callingPackage#1;
        int newState, flags, userId, $i0;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        appPackageName := @parameter0: java.lang.String;

        newState := @parameter1: int;

        flags := @parameter2: int;

        userId := @parameter3: int;

        callingPackage#1 := @parameter4: java.lang.String;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return;

     label1:
        if callingPackage#1 != null goto label2;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        callingPackage#1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

     label2:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void setEnabledSetting(java.lang.String,java.lang.String,int,int,int,java.lang.String)>(appPackageName, null, newState, flags, userId, callingPackage#1);

        return;
    }

    public void setComponentEnabledSetting(android.content.ComponentName, int, int, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.ComponentName componentName;
        int newState, flags, userId;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        java.lang.String $r1, $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        componentName := @parameter0: android.content.ComponentName;

        newState := @parameter1: int;

        flags := @parameter2: int;

        userId := @parameter3: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke componentName.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r2 = virtualinvoke componentName.<android.content.ComponentName: java.lang.String getClassName()>();

        specialinvoke this.<com.android.server.pm.PackageManagerService: void setEnabledSetting(java.lang.String,java.lang.String,int,int,int,java.lang.String)>($r1, $r2, newState, flags, userId, null);

        return;
    }

    private void setEnabledSetting(java.lang.String, java.lang.String, int, int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, className, componentName, $r9, $r24, $r28, $r40, $r43, $r46, $r51, callingPackage#1, $r57;
        int newState, flags, userId, uid, permission, $i0, $i2, $i3, $i4, $i6, $i7, $i8, $i9, packageUid#13;
        com.android.server.pm.PackageSetting pkgSetting;
        boolean allowedByPermission, isApp, $z0, $z1, $z2, $z5, $z6, $z7, $z8, $z9, sendNow#3, $z10, $z11, pkg#11, $z12;
        java.lang.Throwable l19, l18, $r55, $r56;
        android.content.Context $r0;
        android.util.ArrayMap $r1, $r2, callingId#7;
        com.android.server.pm.Settings $r3;
        android.content.pm.ApplicationInfo $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r18, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r29, $r30, $r31, $r33, $r34, $r35, $r37, $r38, $r39, $r41, $r42, $r44, $r45, $r48, $r49, $r50, $r52, $r53;
        com.android.server.pm.PackageManagerService$PendingPackageBroadcasts $r12, $r16, $r17;
        com.android.server.pm.PackageManagerService$PackageHandler $r13, $r14;
        java.util.ArrayList $r15, components#9;
        java.lang.IllegalArgumentException $r19, $r36, $r47, $r54;
        java.lang.SecurityException $r32;
        byte packageUid#6;
        android.content.pm.PackageParser$Package pkg#8;
        long callingId#12;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        className := @parameter1: java.lang.String;

        newState := @parameter2: int;

        flags := @parameter3: int;

        userId := @parameter4: int;

        callingPackage#1 := @parameter5: java.lang.String;

        if newState == 0 goto label01;

        if newState == 1 goto label01;

        if newState == 2 goto label01;

        if newState == 3 goto label01;

        if newState == 4 goto label01;

        $r54 = new java.lang.IllegalArgumentException;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid new component state: ");

        $r50 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(newState);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r54.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r51);

        throw $r54;

     label01:
        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        permission = virtualinvoke $r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.CHANGE_COMPONENT_ENABLED_STATE");

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(uid, userId, 0, 1, "set enabled");

        if permission != 0 goto label02;

        $z9 = 1;

        goto label03;

     label02:
        $z9 = 0;

     label03:
        allowedByPermission = $z9;

        sendNow#3 = 0;

        if className != null goto label04;

        $z10 = 1;

        goto label05;

     label04:
        $z10 = 0;

     label05:
        isApp = $z10;

        if isApp == 0 goto label06;

        $r57 = packageName;

        goto label07;

     label06:
        $r57 = className;

     label07:
        componentName = $r57;

        packageUid#6 = -1;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        callingId#7 = $r1;

        entermonitor $r1;

     label08:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkgSetting = (com.android.server.pm.PackageSetting) $r5;

        if pkgSetting != null goto label10;

        if className != null goto label09;

        $r47 = new java.lang.IllegalArgumentException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r42 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r43);

        throw $r47;

     label09:
        $r36 = new java.lang.IllegalArgumentException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown component: ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r48 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className);

        $r46 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r46);

        throw $r36;

     label10:
        if allowedByPermission != 0 goto label11;

        $i7 = pkgSetting.<com.android.server.pm.PackageSetting: int appId>;

        $z8 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(uid, $i7);

        if $z8 != 0 goto label11;

        $r32 = new java.lang.SecurityException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: attempt to change component state from pid=");

        $i8 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r29 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(uid);

        $r39 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", package uid=");

        $i9 = pkgSetting.<com.android.server.pm.PackageSetting: int appId>;

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.SecurityException: void <init>(java.lang.String)>($r40);

        throw $r32;

     label11:
        if className != null goto label16;

        $i6 = virtualinvoke pkgSetting.<com.android.server.pm.PackageSetting: int getEnabled(int)>(userId);

        if $i6 != newState goto label13;

        exitmonitor callingId#7;

     label12:
        return;

     label13:
        if newState == 0 goto label14;

        if newState != 1 goto label15;

     label14:
        callingPackage#1 = null;

     label15:
        virtualinvoke pkgSetting.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(newState, userId, callingPackage#1);

        goto label28;

     label16:
        pkg#8 = pkgSetting.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if pkg#8 == null goto label17;

        $z7 = virtualinvoke pkg#8.<android.content.pm.PackageParser$Package: boolean hasComponentClassName(java.lang.String)>(className);

        if $z7 != 0 goto label19;

     label17:
        $r4 = pkg#8.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 < 16 goto label18;

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Component class ");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist in ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r19;

     label18:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed setComponentEnabledSetting: component class ");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist in ");

        $r8 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r9);

     label19:
        tableswitch(newState)
        {
            case 0: goto label24;
            case 1: goto label20;
            case 2: goto label22;
            default: goto label26;
        };

     label20:
        $z0 = virtualinvoke pkgSetting.<com.android.server.pm.PackageSetting: boolean enableComponentLPw(java.lang.String,int)>(className, userId);

        if $z0 != 0 goto label28;

        exitmonitor callingId#7;

     label21:
        return;

     label22:
        $z5 = virtualinvoke pkgSetting.<com.android.server.pm.PackageSetting: boolean disableComponentLPw(java.lang.String,int)>(className, userId);

        if $z5 != 0 goto label28;

        exitmonitor callingId#7;

     label23:
        return;

     label24:
        $z6 = virtualinvoke pkgSetting.<com.android.server.pm.PackageSetting: boolean restoreComponentLPw(java.lang.String,int)>(className, userId);

        if $z6 != 0 goto label28;

        exitmonitor callingId#7;

     label25:
        return;

     label26:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid new component state: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(newState);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r24);

        exitmonitor callingId#7;

     label27:
        return;

     label28:
        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

        $r12 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts>;

        components#9 = virtualinvoke $r12.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: java.util.ArrayList get(int,java.lang.String)>(userId, packageName);

        if components#9 != null goto label29;

        $z11 = 1;

        goto label30;

     label29:
        $z11 = 0;

     label30:
        pkg#11 = $z11;

        if pkg#11 == 0 goto label31;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        components#9 = $r15;

     label31:
        $z2 = virtualinvoke components#9.<java.util.ArrayList: boolean contains(java.lang.Object)>(componentName);

        if $z2 != 0 goto label32;

        virtualinvoke components#9.<java.util.ArrayList: boolean add(java.lang.Object)>(componentName);

     label32:
        $i2 = flags & 1;

        if $i2 != 0 goto label33;

        sendNow#3 = 1;

        $r16 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts>;

        virtualinvoke $r16.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void remove(int,java.lang.String)>(userId, packageName);

        goto label35;

     label33:
        if pkg#11 == 0 goto label34;

        $r17 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts>;

        virtualinvoke $r17.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void put(int,java.lang.String,java.util.ArrayList)>(userId, packageName, components#9);

     label34:
        $r13 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $z1 = virtualinvoke $r13.<com.android.server.pm.PackageManagerService$PackageHandler: boolean hasMessages(int)>(1);

        if $z1 != 0 goto label35;

        $r14 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r14.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendEmptyMessageDelayed(int,long)>(1, 10000L);

     label35:
        exitmonitor callingId#7;

     label36:
        goto label39;

     label37:
        $r55 := @caughtexception;

        l18 = $r55;

        exitmonitor callingId#7;

     label38:
        throw l18;

     label39:
        callingId#12 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label40:
        if sendNow#3 == 0 goto label43;

        $i3 = pkgSetting.<com.android.server.pm.PackageSetting: int appId>;

        packageUid#13 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(userId, $i3);

        $i4 = flags & 1;

        if $i4 == 0 goto label41;

        $z12 = 1;

        goto label42;

     label41:
        $z12 = 0;

     label42:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void sendPackageChangedBroadcast(java.lang.String,boolean,java.util.ArrayList,int)>(packageName, $z12, components#9, packageUid#13);

     label43:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId#12);

        goto label46;

     label44:
        $r56 := @caughtexception;

        l19 = $r56;

     label45:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(callingId#12);

        throw l19;

     label46:
        return;

        catch java.lang.Throwable from label08 to label12 with label37;
        catch java.lang.Throwable from label13 to label21 with label37;
        catch java.lang.Throwable from label22 to label23 with label37;
        catch java.lang.Throwable from label24 to label25 with label37;
        catch java.lang.Throwable from label26 to label27 with label37;
        catch java.lang.Throwable from label28 to label36 with label37;
        catch java.lang.Throwable from label37 to label38 with label37;
        catch java.lang.Throwable from label40 to label43 with label44;
        catch java.lang.Throwable from label44 to label45 with label44;
    }

    private void sendPackageChangedBroadcast(java.lang.String, boolean, java.util.ArrayList, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r2;
        boolean killFlag;
        java.util.ArrayList componentNames;
        int packageUid, $i0, $i1;
        android.os.Bundle extras, $r0;
        java.lang.String[] nameList;
        java.lang.Object $r1;
        int[] $r4;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        killFlag := @parameter1: boolean;

        componentNames := @parameter2: java.util.ArrayList;

        packageUid := @parameter3: int;

        $r0 = new android.os.Bundle;

        specialinvoke $r0.<android.os.Bundle: void <init>(int)>(4);

        extras = $r0;

        $r1 = virtualinvoke componentNames.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r2 = (java.lang.String) $r1;

        virtualinvoke extras.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.intent.extra.changed_component_name", $r2);

        $i0 = virtualinvoke componentNames.<java.util.ArrayList: int size()>();

        nameList = newarray (java.lang.String)[$i0];

        virtualinvoke componentNames.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(nameList);

        virtualinvoke extras.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("android.intent.extra.changed_component_name_list", nameList);

        virtualinvoke extras.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.intent.extra.DONT_KILL_APP", 1);

        virtualinvoke extras.<android.os.Bundle: void putInt(java.lang.String,int)>("android.intent.extra.UID", packageUid);

        $r4 = newarray (int)[1];

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(packageUid);

        $r4[0] = $i1;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.content.IIntentReceiver,int[])>("android.intent.action.PACKAGE_CHANGED", packageName, extras, null, null, $r4);

        return;
    }

    public void setPackageStoppedState(java.lang.String, boolean, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        boolean stopped, allowedByPermission, $z0, $z1, $z2;
        int userId, uid, permission;
        android.util.ArrayMap l7, $r2;
        java.lang.Throwable l8, $r4;
        com.android.server.pm.UserManagerService $r0;
        android.content.Context $r1;
        com.android.server.pm.Settings $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        stopped := @parameter1: boolean;

        userId := @parameter2: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return;

     label1:
        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        permission = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.CHANGE_COMPONENT_ENABLED_STATE");

        if permission != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        allowedByPermission = $z2;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(uid, userId, 1, 1, "stop package");

        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l7 = $r2;

        entermonitor $r2;

     label4:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $z1 = virtualinvoke $r3.<com.android.server.pm.Settings: boolean setPackageStoppedStateLPw(com.android.server.pm.PackageManagerService,java.lang.String,boolean,boolean,int,int)>(this, packageName, stopped, allowedByPermission, uid, userId);

        if $z1 == 0 goto label5;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(userId);

     label5:
        exitmonitor l7;

     label6:
        goto label9;

     label7:
        $r4 := @caughtexception;

        l8 = $r4;

        exitmonitor l7;

     label8:
        throw l8;

     label9:
        return;

        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.lang.String getInstallerPackageName(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r2;
        android.util.ArrayMap l2, $r0;
        java.lang.Throwable l3, $r3;
        com.android.server.pm.Settings $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = virtualinvoke $r1.<com.android.server.pm.Settings: java.lang.String getInstallerPackageNameLPr(java.lang.String)>(packageName);

        exitmonitor l2;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        l3 = $r3;

        exitmonitor l2;

     label4:
        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getApplicationEnabledSetting(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        int userId, uid, $i0;
        android.util.ArrayMap l4, $r1;
        java.lang.Throwable l5, $r3;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        com.android.server.pm.Settings $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        userId := @parameter1: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return 2;

     label1:
        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(uid, userId, 0, 0, "get enabled");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label2:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i0 = virtualinvoke $r2.<com.android.server.pm.Settings: int getApplicationEnabledSettingLPr(java.lang.String,int)>(packageName, userId);

        exitmonitor l4;

     label3:
        return $i0;

     label4:
        $r3 := @caughtexception;

        l5 = $r3;

        exitmonitor l4;

     label5:
        throw l5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getComponentEnabledSetting(android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.ComponentName componentName;
        int userId, uid, $i0;
        android.util.ArrayMap l4, $r1;
        java.lang.Throwable l5, $r3;
        com.android.server.pm.UserManagerService $r0;
        boolean $z0;
        com.android.server.pm.Settings $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        componentName := @parameter0: android.content.ComponentName;

        userId := @parameter1: int;

        $r0 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.UserManagerService: boolean exists(int)>(userId);

        if $z0 != 0 goto label1;

        return 2;

     label1:
        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(uid, userId, 0, 0, "get component enabled");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r1;

        entermonitor $r1;

     label2:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i0 = virtualinvoke $r2.<com.android.server.pm.Settings: int getComponentEnabledSettingLPr(android.content.ComponentName,int)>(componentName, userId);

        exitmonitor l4;

     label3:
        return $i0;

     label4:
        $r3 := @caughtexception;

        l5 = $r3;

        exitmonitor l4;

     label5:
        throw l5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void enterSafeMode()
    {
        com.android.server.pm.PackageManagerService this;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("Only the system can request entering safe mode");

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mSystemReady>;

        if $z0 != 0 goto label1;

        this.<com.android.server.pm.PackageManagerService: boolean mSafeMode> = 1;

     label1:
        return;
    }

    public void systemReady()
    {
        com.android.server.pm.PackageManagerService this;
        boolean compatibilityModeEnabled, $z0, $z1, $z2, $z4;
        java.lang.Throwable l9, $r40;
        android.content.Context $r0, $r8;
        android.content.ContentResolver $r1;
        int $i0, $i1, $i2, $i3, $i4, i#5, i$#9, pir#12, i$#13, pa#14, removed#16, i#17, pir#18;
        android.util.ArrayMap $r2, $r37, arr$#3;
        com.android.server.pm.Settings $r4, $r18, $r20, $r24, $r28;
        android.util.SparseArray $r5, $r21, $r25;
        com.android.server.pm.UserManagerService $r6, $r7;
        java.util.ArrayList $r9, $r16, removed#4, tmp$1279689536;
        android.os.storage.StorageEventListener $r10;
        java.lang.Object $r11, $r15, $r19, $r22, $r27, $r32, $r39;
        com.android.server.pm.PackageDexOptimizer $r12;
        com.android.server.pm.PackageInstallerService $r13;
        com.android.server.pm.DefaultPermissionGrantPolicy $r17;
        java.util.Set $r23;
        android.content.ComponentName $r29, $r35;
        com.android.server.pm.PreferredComponent $r30, $r36;
        java.lang.StringBuilder $r31, $r34, tmp$161908907;
        java.lang.String $r33;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r38;
        int[] grantPermissionsUserIds#2, i#11, arr$#15;
        com.android.server.pm.PreferredIntentResolver pir#6;
        java.util.Iterator i$#7, arr$#19;
        com.android.server.pm.PreferredActivity pa#8, pa#10;
        android.os.Message removed#20;
        android.os.storage.StorageManager arr$#21;
        android.os.storage.MountServiceInternal removed#22;
        com.android.server.pm.PackageManagerService$19 tmp$1089756910;
        android.os.storage.MountServiceInternal$ExternalStorageMountPolicy tmp$203611143;

        this := @this: com.android.server.pm.PackageManagerService;

        this.<com.android.server.pm.PackageManagerService: boolean mSystemReady> = 1;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "compatibility_mode", 1);

        if $i0 != 1 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        compatibilityModeEnabled = $z4;

        staticinvoke <android.content.pm.PackageParser: void setCompatibilityModeEnabled(boolean)>(compatibilityModeEnabled);

        grantPermissionsUserIds#2 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        arr$#3 = $r2;

        entermonitor $r2;

     label03:
        tmp$1279689536 = new java.util.ArrayList;

        specialinvoke tmp$1279689536.<java.util.ArrayList: void <init>()>();

        removed#4 = tmp$1279689536;

        i#5 = 0;

     label04:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $i1 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        if i#5 >= $i1 goto label11;

        $r20 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r21 = $r20.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $r22 = virtualinvoke $r21.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#5);

        pir#6 = (com.android.server.pm.PreferredIntentResolver) $r22;

        virtualinvoke removed#4.<java.util.ArrayList: void clear()>();

        $r23 = virtualinvoke pir#6.<com.android.server.pm.PreferredIntentResolver: java.util.Set filterSet()>();

        i$#7 = interfaceinvoke $r23.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke i$#7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r32 = interfaceinvoke i$#7.<java.util.Iterator: java.lang.Object next()>();

        pa#8 = (com.android.server.pm.PreferredActivity) $r32;

        $r38 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities>;

        $r37 = staticinvoke <com.android.server.pm.PackageManagerService$ActivityIntentResolver: android.util.ArrayMap access$2600(com.android.server.pm.PackageManagerService$ActivityIntentResolver)>($r38);

        $r36 = pa#8.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r35 = $r36.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $r39 = virtualinvoke $r37.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r35);

        if $r39 != null goto label06;

        virtualinvoke removed#4.<java.util.ArrayList: boolean add(java.lang.Object)>(pa#8);

     label06:
        goto label05;

     label07:
        $i2 = virtualinvoke removed#4.<java.util.ArrayList: int size()>();

        if $i2 <= 0 goto label10;

        i$#9 = 0;

     label08:
        $i3 = virtualinvoke removed#4.<java.util.ArrayList: int size()>();

        if i$#9 >= $i3 goto label09;

        $r27 = virtualinvoke removed#4.<java.util.ArrayList: java.lang.Object get(int)>(i$#9);

        pa#10 = (com.android.server.pm.PreferredActivity) $r27;

        tmp$161908907 = new java.lang.StringBuilder;

        specialinvoke tmp$161908907.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke tmp$161908907.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing dangling preferred activity: ");

        $r30 = pa#10.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r29 = $r30.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r33);

        virtualinvoke pir#6.<com.android.server.pm.PreferredIntentResolver: void removeFilter(android.content.IntentFilter)>(pa#10);

        i$#9 = i$#9 + 1;

        goto label08;

     label09:
        $r28 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r24 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r25 = $r24.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $i4 = virtualinvoke $r25.<android.util.SparseArray: int keyAt(int)>(i#5);

        virtualinvoke $r28.<com.android.server.pm.Settings: void writePackageRestrictionsLPr(int)>($i4);

     label10:
        i#5 = i#5 + 1;

        goto label04;

     label11:
        $r6 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        i#11 = virtualinvoke $r6.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        pir#12 = lengthof i#11;

        i$#13 = 0;

     label12:
        if i$#13 >= pir#12 goto label14;

        pa#14 = i#11[i$#13];

        $r18 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $z1 = virtualinvoke $r18.<com.android.server.pm.Settings: boolean areDefaultRuntimePermissionsGrantedLPr(int)>(pa#14);

        if $z1 != 0 goto label13;

        grantPermissionsUserIds#2 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(grantPermissionsUserIds#2, pa#14);

     label13:
        i$#13 = i$#13 + 1;

        goto label12;

     label14:
        exitmonitor arr$#3;

     label15:
        goto label18;

     label16:
        $r40 := @caughtexception;

        l9 = $r40;

        exitmonitor arr$#3;

     label17:
        throw l9;

     label18:
        $r7 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        virtualinvoke $r7.<com.android.server.pm.UserManagerService: void systemReady()>();

        arr$#15 = grantPermissionsUserIds#2;

        removed#16 = lengthof arr$#15;

        i#17 = 0;

     label19:
        if i#17 >= removed#16 goto label20;

        pir#18 = arr$#15[i#17];

        $r17 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.DefaultPermissionGrantPolicy mDefaultPermissionPolicy>;

        virtualinvoke $r17.<com.android.server.pm.DefaultPermissionGrantPolicy: void grantDefaultPermissions(int)>(pir#18);

        i#17 = i#17 + 1;

        goto label19;

     label20:
        $r9 = this.<com.android.server.pm.PackageManagerService: java.util.ArrayList mPostSystemReadyMessages>;

        if $r9 == null goto label23;

        $r16 = this.<com.android.server.pm.PackageManagerService: java.util.ArrayList mPostSystemReadyMessages>;

        arr$#19 = virtualinvoke $r16.<java.util.ArrayList: java.util.Iterator iterator()>();

     label21:
        $z0 = interfaceinvoke arr$#19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label22;

        $r19 = interfaceinvoke arr$#19.<java.util.Iterator: java.lang.Object next()>();

        removed#20 = (android.os.Message) $r19;

        virtualinvoke removed#20.<android.os.Message: void sendToTarget()>();

        goto label21;

     label22:
        this.<com.android.server.pm.PackageManagerService: java.util.ArrayList mPostSystemReadyMessages> = null;

     label23:
        $r8 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "android/os/storage/StorageManager");

        arr$#21 = (android.os.storage.StorageManager) $r11;

        $r10 = this.<com.android.server.pm.PackageManagerService: android.os.storage.StorageEventListener mStorageListener>;

        virtualinvoke arr$#21.<android.os.storage.StorageManager: void registerListener(android.os.storage.StorageEventListener)>($r10);

        $r13 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        virtualinvoke $r13.<com.android.server.pm.PackageInstallerService: void systemReady()>();

        $r12 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        virtualinvoke $r12.<com.android.server.pm.PackageDexOptimizer: void systemReady()>();

        $r15 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/os/storage/MountServiceInternal");

        removed#22 = (android.os.storage.MountServiceInternal) $r15;

        tmp$1089756910 = new com.android.server.pm.PackageManagerService$19;

        specialinvoke tmp$1089756910.<com.android.server.pm.PackageManagerService$19: void <init>(com.android.server.pm.PackageManagerService)>(this);

        tmp$203611143 = (android.os.storage.MountServiceInternal$ExternalStorageMountPolicy) tmp$1089756910;

        virtualinvoke removed#22.<android.os.storage.MountServiceInternal: void addExternalStoragePolicy(android.os.storage.MountServiceInternal$ExternalStorageMountPolicy)>(tmp$203611143);

        return;

        catch java.lang.Throwable from label03 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public boolean isSafeMode()
    {
        com.android.server.pm.PackageManagerService this;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mSafeMode>;

        return $z0;
    }

    public boolean hasSystemUidErrors()
    {
        com.android.server.pm.PackageManagerService this;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mHasSystemUidErrors>;

        return $z0;
    }

    static java.lang.String arrayToString(int[])
    {
        int[] array;
        java.lang.StringBuffer buf, $r0;
        java.lang.String $r3;
        int $i0, $i1, i#1;

        array := @parameter0: int[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(128);

        buf = $r0;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        if array == null goto label3;

        i#1 = 0;

     label1:
        $i0 = lengthof array;

        if i#1 >= $i0 goto label3;

        if i#1 <= 0 goto label2;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $i1 = array[i#1];

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        i#1 = i#1 + 1;

        goto label1;

     label3:
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r3 = virtualinvoke buf.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService this;
        java.io.FileDescriptor fd;
        java.io.PrintWriter pw;
        java.lang.String[] args;
        com.android.server.pm.PackageManagerService$DumpState dumpState, $r1;
        int userId, $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, opti#5, opti#8, opti#10, opti#12, user#13, perm#30, user#32, perm#40, perm#43, ps#48, ivi#49, perm#50, perm#51, user#53;
        com.android.server.pm.PackageSetting ps, ps#45;
        java.util.Iterator i$, pkg#21, perm#24, e#44, pkg#55, pkg#58;
        long status, $l7;
        java.lang.Throwable l23, l25, l24, $r183, $r191, $r221, $r223, ps#17;
        java.lang.String statusStr, $r6, $r11, $r23, $r24, $r31, $r35, $r37, $r41, $r50, $r55, $r59, $r62, $r63, $r69, $r71, $r73, $r76, $r78, $r81, $r83, $r86, $r88, $r93, $r95, $r117, $r118, $r119, $r128, $r129, $r130, $r131, $r132, $r135, $r136, $r137, $r138, $r139, $r140, $r141, $r142, $r143, $r144, $r147, $r148, $r149, $r150, $r151, $r152, $r153, $r154, $r155, $r156, $r157, $r158, $r159, $r160, $r161, $r162, $r163, $r164, $r165, $r166, $r167, $r168, $r169, $r171, $r172, $r173, $r174, $r175, $r176, $r177, $r178, $r181, $r190, $r195, $r197, $r198, $r205, $r206, $r207, $r216, $r217, packageName#3, opt#6, opt#7, perm#9, pkg#11, perm#19, user#22, pkg#25, $r224, $r225, $r226, $r227, $r228, ps#61, pkg#64, pkg#68;
        android.content.Context $r0;
        android.util.ArrayMap $r2, $r18, $r21, $r42, $r43, $r45, $r48, $r53, $r121, $r124, $r127, $r180, perm#16, opt#18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, $z67, $z68, $z69, $z70, $z71, $z72, $z73, $z74, $z75, $z76, $z77, $z78, $z79, $z80, $z81, $z82, $z83, $z84, $z85, $z86, $z87, $z88, $z89, $z90, fullPreferred#1, checkin#2, perm#20, perm#54, perm#57;
        java.io.FileReader $r3, $r8;
        java.io.File $r4, $r7;
        java.io.BufferedReader $r5, $r9, perm#62, perm#66;
        com.android.server.pm.Settings $r10, $r12, $r13, $r17, $r36, $r46, $r47, $r91, $r92, $r108, $r109, $r146, $r179;
        com.android.server.pm.PackageInstallerService $r14;
        com.android.internal.util.IndentingPrintWriter $r15, $r145;
        com.android.server.pm.KeySetManagerService $r16;
        java.util.Set $r19, $r123, $r126;
        com.android.server.pm.PackageManagerService$ProviderIntentResolver $r20, $r115;
        java.util.Collection $r22, user#42;
        android.content.pm.ProviderInfo $r25, $r26, $r30, $r32, $r39;
        java.lang.Object $r27, $r28, $r29, $r38, $r40, $r44, $r49, $r54, $r82, $r107, $r120, $r122, $r125;
        android.content.pm.ApplicationInfo $r33, $r34;
        java.lang.StringBuilder $r51, $r56, $r57, $r58, $r60, $r61, $r64, $r65, $r66, $r67, $r68, $r70, $r72, $r74, $r75, $r77, $r79, $r80, $r84, $r85, $r94, $r96, $r100, $r101, $r102, $r103, $r104, $r105, $r113, $r114, $r182, $r184, $r185, $r186, $r187, $r188, $r193, $r196, $r199, $r200, $r201, $r202, $r203, $r204, $r208, $r209, $r210, $r211, $r213, $r214, $r218, $r219, $r220;
        com.android.server.pm.UserManagerService $r52;
        byte $b6;
        java.lang.Boolean $r87;
        java.nio.charset.Charset $r89;
        android.util.SparseArray $r90, $r106, $r110;
        com.android.internal.util.FastXmlSerializer $r97, user#36;
        java.io.BufferedOutputStream $r98, pkg#35;
        java.io.FileOutputStream $r99, perm#34;
        com.android.server.pm.PackageManagerService$ActivityIntentResolver $r111, $r112;
        com.android.server.pm.PackageManagerService$ServiceIntentResolver $r116;
        android.content.ComponentName $r133, $r134;
        android.util.ArraySet $r170, permissionNames#4, pkg#52;
        char $c18;
        java.lang.IllegalArgumentException $r189, e#37;
        java.io.IOException $r192, $r194, $r222, e#39;
        java.lang.IllegalStateException $r212, e#38;
        java.lang.NumberFormatException $r215;
        com.android.server.pm.PackageManagerService$SharedLibraryEntry e#23;
        com.android.server.pm.PreferredIntentResolver pkg#31;
        android.content.pm.IntentFilterVerificationInfo ivi#46;
        int[] e#47;
        android.content.pm.PackageParser$Provider user#56, e#60;
        java.util.Map$Entry user#59;

        this := @this: com.android.server.pm.PackageManagerService;

        fd := @parameter0: java.io.FileDescriptor;

        pw := @parameter1: java.io.PrintWriter;

        args := @parameter2: java.lang.String[];

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label001;

        $r199 = new java.lang.StringBuilder;

        specialinvoke $r199.<java.lang.StringBuilder: void <init>()>();

        $r200 = virtualinvoke $r199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump ActivityManager from from pid=");

        $i24 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r201 = virtualinvoke $r200.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r184 = virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i23 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r186 = virtualinvoke $r184.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r185 = virtualinvoke $r186.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission ");

        $r182 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.DUMP");

        $r181 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r181);

        return;

     label001:
        $r1 = new com.android.server.pm.PackageManagerService$DumpState;

        specialinvoke $r1.<com.android.server.pm.PackageManagerService$DumpState: void <init>()>();

        dumpState = $r1;

        fullPreferred#1 = 0;

        checkin#2 = 0;

        packageName#3 = null;

        permissionNames#4 = null;

        opti#5 = 0;

     label002:
        $i1 = lengthof args;

        if opti#5 >= $i1 goto label009;

        opt#6 = args[opti#5];

        if opt#6 == null goto label009;

        $i19 = virtualinvoke opt#6.<java.lang.String: int length()>();

        if $i19 <= 0 goto label009;

        $c18 = virtualinvoke opt#6.<java.lang.String: char charAt(int)>(0);

        if $c18 == 45 goto label003;

        goto label009;

     label003:
        opti#5 = opti#5 + 1;

        $r171 = "-a";

        $z89 = virtualinvoke $r171.<java.lang.String: boolean equals(java.lang.Object)>(opt#6);

        if $z89 == 0 goto label004;

        goto label008;

     label004:
        $r197 = "-h";

        $z90 = virtualinvoke $r197.<java.lang.String: boolean equals(java.lang.Object)>(opt#6);

        if $z90 == 0 goto label005;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Package manager dump options:");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  [-h] [-f] [--checkin] [cmd] ...");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    --checkin: dump for a checkin");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    -f: print details of intent filters");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    -h: print this help");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  cmd may be one of:");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    l[ibraries]: list known shared libraries");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    f[ibraries]: list device features");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    k[eysets]: print known keysets");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    r[esolvers]: dump intent resolvers");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    perm[issions]: dump permissions");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    permission [name ...]: dump declaration and use of given permission");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    pref[erred]: print preferred package settings");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    preferred-xml [--full]: print preferred package settings as xml");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    prov[iders]: dump content providers");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    p[ackages]: dump installed packages");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    s[hared-users]: dump shared user IDs");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    m[essages]: print collected runtime messages");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    v[erifiers]: print package verifier info");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    d[omain-preferred-apps]: print domains preferred apps");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    i[ntent-filter-verifiers]|ifv: print intent filter verifier info");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    version: print database version info");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    write: write current settings now");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    installs: details about install sessions");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    check-permission <permission> <package> [<user>]: does pkg hold perm?");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("    <package.name>: info about given package");

        return;

     label005:
        $r198 = "--checkin";

        $z87 = virtualinvoke $r198.<java.lang.String: boolean equals(java.lang.Object)>(opt#6);

        if $z87 == 0 goto label006;

        checkin#2 = 1;

        goto label008;

     label006:
        $r195 = "-f";

        $z88 = virtualinvoke $r195.<java.lang.String: boolean equals(java.lang.Object)>(opt#6);

        if $z88 == 0 goto label007;

        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setOptionEnabled(int)>(1);

        goto label008;

     label007:
        $r196 = new java.lang.StringBuilder;

        specialinvoke $r196.<java.lang.StringBuilder: void <init>()>();

        $r202 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown argument: ");

        $r203 = virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(opt#6);

        $r204 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; use -h for help");

        $r205 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r205);

     label008:
        goto label002;

     label009:
        $i2 = lengthof args;

        if opti#5 >= $i2 goto label056;

        opt#7 = args[opti#5];

        opti#8 = opti#5 + 1;

        $r148 = "android";

        $z60 = virtualinvoke $r148.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z60 != 0 goto label010;

        $z59 = virtualinvoke opt#7.<java.lang.String: boolean contains(java.lang.CharSequence)>(".");

        if $z59 == 0 goto label011;

     label010:
        packageName#3 = opt#7;

        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setOptionEnabled(int)>(1);

        goto label056;

     label011:
        $r147 = "check-permission";

        $z62 = virtualinvoke $r147.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z62 == 0 goto label018;

        $i15 = lengthof args;

        if opti#8 < $i15 goto label012;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Error: check-permission missing permission argument");

        return;

     label012:
        perm#9 = args[opti#8];

        opti#10 = opti#8 + 1;

        $i14 = lengthof args;

        if opti#10 < $i14 goto label013;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Error: check-permission missing package argument");

        return;

     label013:
        pkg#11 = args[opti#10];

        opti#12 = opti#10 + 1;

        $i13 = staticinvoke <android.os.Binder: int getCallingUid()>();

        user#13 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i13);

        $i21 = lengthof args;

        if opti#12 >= $i21 goto label017;

     label014:
        $r172 = args[opti#12];

        user#13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r172);

     label015:
        goto label017;

     label016:
        $r215 := @caughtexception;

        $r214 = new java.lang.StringBuilder;

        specialinvoke $r214.<java.lang.StringBuilder: void <init>()>();

        $r213 = virtualinvoke $r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: check-permission user argument is not a number: ");

        $r207 = args[opti#12];

        $r208 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r207);

        $r206 = virtualinvoke $r208.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r206);

        return;

     label017:
        $i20 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int checkPermission(java.lang.String,java.lang.String,int)>(perm#9, pkg#11, user#13);

        virtualinvoke pw.<java.io.PrintWriter: void println(int)>($i20);

        return;

     label018:
        $r150 = "l";

        $z61 = virtualinvoke $r150.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z61 != 0 goto label019;

        $r149 = "libraries";

        $z64 = virtualinvoke $r149.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z64 == 0 goto label020;

     label019:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(1);

        goto label056;

     label020:
        $r152 = "f";

        $z63 = virtualinvoke $r152.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z63 != 0 goto label021;

        $r151 = "features";

        $z51 = virtualinvoke $r151.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z51 == 0 goto label022;

     label021:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(2);

        goto label056;

     label022:
        $r138 = "r";

        $z50 = virtualinvoke $r138.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z50 != 0 goto label023;

        $r137 = "resolvers";

        $z53 = virtualinvoke $r137.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z53 == 0 goto label024;

     label023:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(4);

        goto label056;

     label024:
        $r140 = "perm";

        $z52 = virtualinvoke $r140.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z52 != 0 goto label025;

        $r139 = "permissions";

        $z55 = virtualinvoke $r139.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z55 == 0 goto label026;

     label025:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(8);

        goto label056;

     label026:
        $r142 = "permission";

        $z54 = virtualinvoke $r142.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z54 == 0 goto label030;

        $i17 = lengthof args;

        if opti#8 < $i17 goto label027;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Error: permission requires permission name");

        return;

     label027:
        $r170 = new android.util.ArraySet;

        specialinvoke $r170.<android.util.ArraySet: void <init>()>();

        permissionNames#4 = $r170;

     label028:
        $i16 = lengthof args;

        if opti#8 >= $i16 goto label029;

        $r169 = args[opti#8];

        virtualinvoke permissionNames#4.<android.util.ArraySet: boolean add(java.lang.Object)>($r169);

        opti#8 = opti#8 + 1;

        goto label028;

     label029:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(56);

        goto label056;

     label030:
        $r141 = "pref";

        $z57 = virtualinvoke $r141.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z57 != 0 goto label031;

        $r144 = "preferred";

        $z56 = virtualinvoke $r144.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z56 == 0 goto label032;

     label031:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(512);

        goto label056;

     label032:
        $r143 = "preferred-xml";

        $z73 = virtualinvoke $r143.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z73 == 0 goto label033;

        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(1024);

        $i22 = lengthof args;

        if opti#8 >= $i22 goto label056;

        $r177 = "--full";

        $r178 = args[opti#8];

        $z85 = virtualinvoke $r177.<java.lang.String: boolean equals(java.lang.Object)>($r178);

        if $z85 == 0 goto label056;

        fullPreferred#1 = 1;

        goto label056;

     label033:
        $r161 = "d";

        $z74 = virtualinvoke $r161.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z74 != 0 goto label034;

        $r162 = "domain-preferred-apps";

        $z75 = virtualinvoke $r162.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z75 == 0 goto label035;

     label034:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(32768);

        goto label056;

     label035:
        $r163 = "p";

        $z76 = virtualinvoke $r163.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z76 != 0 goto label036;

        $r164 = "packages";

        $z77 = virtualinvoke $r164.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z77 == 0 goto label037;

     label036:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(16);

        goto label056;

     label037:
        $r165 = "s";

        $z78 = virtualinvoke $r165.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z78 != 0 goto label038;

        $r166 = "shared-users";

        $z79 = virtualinvoke $r166.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z79 == 0 goto label039;

     label038:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(32);

        goto label056;

     label039:
        $r167 = "prov";

        $z80 = virtualinvoke $r167.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z80 != 0 goto label040;

        $r168 = "providers";

        $z65 = virtualinvoke $r168.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z65 == 0 goto label041;

     label040:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(128);

        goto label056;

     label041:
        $r153 = "m";

        $z66 = virtualinvoke $r153.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z66 != 0 goto label042;

        $r154 = "messages";

        $z67 = virtualinvoke $r154.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z67 == 0 goto label043;

     label042:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(64);

        goto label056;

     label043:
        $r155 = "v";

        $z68 = virtualinvoke $r155.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z68 != 0 goto label044;

        $r156 = "verifiers";

        $z69 = virtualinvoke $r156.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z69 == 0 goto label045;

     label044:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(256);

        goto label056;

     label045:
        $r157 = "i";

        $z70 = virtualinvoke $r157.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z70 != 0 goto label046;

        $r158 = "ifv";

        $z71 = virtualinvoke $r158.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z71 != 0 goto label046;

        $r159 = "intent-filter-verifiers";

        $z72 = virtualinvoke $r159.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z72 == 0 goto label047;

     label046:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(16384);

        goto label056;

     label047:
        $r160 = "version";

        $z84 = virtualinvoke $r160.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z84 == 0 goto label048;

        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(4096);

        goto label056;

     label048:
        $r176 = "k";

        $z83 = virtualinvoke $r176.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z83 != 0 goto label049;

        $r175 = "keysets";

        $z82 = virtualinvoke $r175.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z82 == 0 goto label050;

     label049:
        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(2048);

        goto label056;

     label050:
        $r174 = "installs";

        $z81 = virtualinvoke $r174.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z81 == 0 goto label051;

        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>(8192);

        goto label056;

     label051:
        $r173 = "write";

        $z86 = virtualinvoke $r173.<java.lang.String: boolean equals(java.lang.Object)>(opt#7);

        if $z86 == 0 goto label056;

        $r180 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        perm#16 = $r180;

        entermonitor $r180;

     label052:
        $r179 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r179.<com.android.server.pm.Settings: void writeLPr()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Settings written.");

        exitmonitor perm#16;

     label053:
        return;

     label054:
        $r223 := @caughtexception;

        ps#17 = $r223;

        exitmonitor perm#16;

     label055:
        throw ps#17;

     label056:
        if checkin#2 == 0 goto label057;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("vers,1");

     label057:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        opt#18 = $r2;

        entermonitor $r2;

     label058:
        $z2 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(4096);

        if $z2 == 0 goto label060;

        if packageName#3 != null goto label060;

        if checkin#2 != 0 goto label060;

        $z58 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean onTitlePrinted()>();

        if $z58 == 0 goto label059;

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label059:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Database versions:");

        $r146 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r145 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r145.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(pw, "  ");

        virtualinvoke $r146.<com.android.server.pm.Settings: void dumpVersionLPr(com.android.internal.util.IndentingPrintWriter)>($r145);

     label060:
        $z3 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(256);

        if $z3 == 0 goto label063;

        if packageName#3 != null goto label063;

        if checkin#2 != 0 goto label062;

        $z47 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean onTitlePrinted()>();

        if $z47 == 0 goto label061;

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label061:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Verifiers:");

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("  Required: ");

        $r128 = this.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>($r128);

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>(" (uid=");

        $r129 = this.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        $i12 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>($r129, 0);

        virtualinvoke pw.<java.io.PrintWriter: void print(int)>($i12);

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>(")");

        goto label063;

     label062:
        $r132 = this.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        if $r132 == null goto label063;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("vrfy,");

        $r130 = this.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>($r130);

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $r131 = this.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        $i9 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>($r131, 0);

        virtualinvoke pw.<java.io.PrintWriter: void println(int)>($i9);

     label063:
        $z0 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(16384);

        if $z0 == 0 goto label068;

        if packageName#3 != null goto label068;

        $r134 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent>;

        if $r134 == null goto label067;

        $r133 = this.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent>;

        perm#19 = virtualinvoke $r133.<android.content.ComponentName: java.lang.String getPackageName()>();

        if checkin#2 != 0 goto label065;

        $z48 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean onTitlePrinted()>();

        if $z48 == 0 goto label064;

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label064:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Intent Filter Verifier:");

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("  Using: ");

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>(perm#19);

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>(" (uid=");

        $i10 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>(perm#19, 0);

        virtualinvoke pw.<java.io.PrintWriter: void print(int)>($i10);

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>(")");

        goto label066;

     label065:
        if perm#19 == null goto label066;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("ifv,");

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>(perm#19);

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i11 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>(perm#19, 0);

        virtualinvoke pw.<java.io.PrintWriter: void println(int)>($i11);

     label066:
        goto label068;

     label067:
        virtualinvoke pw.<java.io.PrintWriter: void println()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("No Intent Filter Verifier available!");

     label068:
        $z1 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(1);

        if $z1 == 0 goto label079;

        if packageName#3 != null goto label079;

        perm#20 = 0;

        $r124 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r123 = virtualinvoke $r124.<android.util.ArrayMap: java.util.Set keySet()>();

        pkg#21 = interfaceinvoke $r123.<java.util.Set: java.util.Iterator iterator()>();

     label069:
        $z44 = interfaceinvoke pkg#21.<java.util.Iterator: boolean hasNext()>();

        if $z44 == 0 goto label079;

        $r122 = interfaceinvoke pkg#21.<java.util.Iterator: java.lang.Object next()>();

        user#22 = (java.lang.String) $r122;

        $r121 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r120 = virtualinvoke $r121.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(user#22);

        e#23 = (com.android.server.pm.PackageManagerService$SharedLibraryEntry) $r120;

        if checkin#2 != 0 goto label072;

        if perm#20 != 0 goto label071;

        $z49 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean onTitlePrinted()>();

        if $z49 == 0 goto label070;

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label070:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Libraries:");

        perm#20 = 1;

     label071:
        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        goto label073;

     label072:
        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("lib,");

     label073:
        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>(user#22);

        if checkin#2 != 0 goto label074;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>(" -> ");

     label074:
        $r119 = e#23.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String path>;

        if $r119 == null goto label076;

        if checkin#2 != 0 goto label075;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("(jar) ");

        $r136 = e#23.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String path>;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>($r136);

        goto label078;

     label075:
        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>(",jar,");

        $r135 = e#23.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String path>;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>($r135);

        goto label078;

     label076:
        if checkin#2 != 0 goto label077;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("(apk) ");

        $r117 = e#23.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String apk>;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>($r117);

        goto label078;

     label077:
        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>(",apk,");

        $r118 = e#23.<com.android.server.pm.PackageManagerService$SharedLibraryEntry: java.lang.String apk>;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>($r118);

     label078:
        virtualinvoke pw.<java.io.PrintWriter: void println()>();

        goto label069;

     label079:
        $z5 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(2);

        if $z5 == 0 goto label085;

        if packageName#3 != null goto label085;

        $z46 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean onTitlePrinted()>();

        if $z46 == 0 goto label080;

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label080:
        if checkin#2 != 0 goto label081;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Features:");

     label081:
        $r127 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        $r126 = virtualinvoke $r127.<android.util.ArrayMap: java.util.Set keySet()>();

        perm#24 = interfaceinvoke $r126.<java.util.Set: java.util.Iterator iterator()>();

     label082:
        $z45 = interfaceinvoke perm#24.<java.util.Iterator: boolean hasNext()>();

        if $z45 == 0 goto label085;

        $r125 = interfaceinvoke perm#24.<java.util.Iterator: java.lang.Object next()>();

        pkg#25 = (java.lang.String) $r125;

        if checkin#2 != 0 goto label083;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        goto label084;

     label083:
        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("feat,");

     label084:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>(pkg#25);

        goto label082;

     label085:
        if checkin#2 != 0 goto label097;

        $z37 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(4);

        if $z37 == 0 goto label097;

        $r112 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mActivities>;

        $z36 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean getTitlePrinted()>();

        if $z36 == 0 goto label086;

        $r224 = "\nActivity Resolver Table:";

        goto label087;

     label086:
        $r224 = "Activity Resolver Table:";

     label087:
        $z34 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isOptionEnabled(int)>(1);

        $z33 = virtualinvoke $r112.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(pw, $r224, "  ", packageName#3, $z34, 1);

        if $z33 == 0 goto label088;

        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setTitlePrinted(boolean)>(1);

     label088:
        $r111 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ActivityIntentResolver mReceivers>;

        $z35 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean getTitlePrinted()>();

        if $z35 == 0 goto label089;

        $r225 = "\nReceiver Resolver Table:";

        goto label090;

     label089:
        $r225 = "Receiver Resolver Table:";

     label090:
        $z32 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isOptionEnabled(int)>(1);

        $z31 = virtualinvoke $r111.<com.android.server.pm.PackageManagerService$ActivityIntentResolver: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(pw, $r225, "  ", packageName#3, $z32, 1);

        if $z31 == 0 goto label091;

        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setTitlePrinted(boolean)>(1);

     label091:
        $r116 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ServiceIntentResolver mServices>;

        $z43 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean getTitlePrinted()>();

        if $z43 == 0 goto label092;

        $r226 = "\nService Resolver Table:";

        goto label093;

     label092:
        $r226 = "Service Resolver Table:";

     label093:
        $z40 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isOptionEnabled(int)>(1);

        $z41 = virtualinvoke $r116.<com.android.server.pm.PackageManagerService$ServiceIntentResolver: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(pw, $r226, "  ", packageName#3, $z40, 1);

        if $z41 == 0 goto label094;

        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setTitlePrinted(boolean)>(1);

     label094:
        $r115 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ProviderIntentResolver mProviders>;

        $z42 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean getTitlePrinted()>();

        if $z42 == 0 goto label095;

        $r227 = "\nProvider Resolver Table:";

        goto label096;

     label095:
        $r227 = "Provider Resolver Table:";

     label096:
        $z38 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isOptionEnabled(int)>(1);

        $z39 = virtualinvoke $r115.<com.android.server.pm.PackageManagerService$ProviderIntentResolver: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(pw, $r227, "  ", packageName#3, $z38, 1);

        if $z39 == 0 goto label097;

        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setTitlePrinted(boolean)>(1);

     label097:
        if checkin#2 != 0 goto label102;

        $z27 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(512);

        if $z27 == 0 goto label102;

        perm#30 = 0;

     label098:
        $r91 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r90 = $r91.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $i8 = virtualinvoke $r90.<android.util.SparseArray: int size()>();

        if perm#30 >= $i8 goto label102;

        $r108 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r106 = $r108.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $r107 = virtualinvoke $r106.<android.util.SparseArray: java.lang.Object valueAt(int)>(perm#30);

        pkg#31 = (com.android.server.pm.PreferredIntentResolver) $r107;

        $r109 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r110 = $r109.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        user#32 = virtualinvoke $r110.<android.util.SparseArray: int keyAt(int)>(perm#30);

        $z30 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean getTitlePrinted()>();

        if $z30 == 0 goto label099;

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nPreferred Activities User ");

        $r114 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(user#32);

        $r113 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r228 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label100;

     label099:
        $r102 = new java.lang.StringBuilder;

        specialinvoke $r102.<java.lang.StringBuilder: void <init>()>();

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Preferred Activities User ");

        $r100 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(user#32);

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r228 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.String toString()>();

     label100:
        $z29 = virtualinvoke pkg#31.<com.android.server.pm.PreferredIntentResolver: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(pw, $r228, "  ", packageName#3, 1, 0);

        if $z29 == 0 goto label101;

        virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: void setTitlePrinted(boolean)>(1);

     label101:
        perm#30 = perm#30 + 1;

        goto label098;

     label102:
        if checkin#2 != 0 goto label108;

        $z28 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(1024);

        if $z28 == 0 goto label108;

        virtualinvoke pw.<java.io.PrintWriter: void flush()>();

        $r99 = new java.io.FileOutputStream;

        specialinvoke $r99.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(fd);

        perm#34 = $r99;

        $r98 = new java.io.BufferedOutputStream;

        specialinvoke $r98.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(perm#34);

        pkg#35 = $r98;

        $r97 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r97.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        user#36 = $r97;

     label103:
        $r89 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r88 = virtualinvoke $r89.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke user#36.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(pkg#35, $r88);

        $r87 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke user#36.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r87);

        interfaceinvoke user#36.<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

        $r92 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r92.<com.android.server.pm.Settings: void writePreferredActivitiesLPr(org.xmlpull.v1.XmlSerializer,int,boolean)>(user#36, 0, fullPreferred#1);

        interfaceinvoke user#36.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        interfaceinvoke user#36.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label104:
        goto label108;

     label105:
        $r189 := @caughtexception;

        e#37 = $r189;

        $r220 = new java.lang.StringBuilder;

        specialinvoke $r220.<java.lang.StringBuilder: void <init>()>();

        $r219 = virtualinvoke $r220.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed writing: ");

        $r218 = virtualinvoke $r219.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e#37);

        $r217 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r217);

        goto label108;

     label106:
        $r212 := @caughtexception;

        e#38 = $r212;

        $r211 = new java.lang.StringBuilder;

        specialinvoke $r211.<java.lang.StringBuilder: void <init>()>();

        $r210 = virtualinvoke $r211.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed writing: ");

        $r209 = virtualinvoke $r210.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e#38);

        $r216 = virtualinvoke $r209.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r216);

        goto label108;

     label107:
        $r194 := @caughtexception;

        e#39 = $r194;

        $r193 = new java.lang.StringBuilder;

        specialinvoke $r193.<java.lang.StringBuilder: void <init>()>();

        $r188 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed writing: ");

        $r187 = virtualinvoke $r188.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e#39);

        $r190 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r190);

     label108:
        if checkin#2 != 0 goto label120;

        $z24 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(32768);

        if $z24 == 0 goto label120;

        if packageName#3 != null goto label120;

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

        $r47 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r48 = $r47.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        perm#40 = virtualinvoke $r48.<android.util.ArrayMap: int size()>();

        if perm#40 != 0 goto label109;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("No applications!");

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

        goto label120;

     label109:
        $r46 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r53 = $r46.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        user#42 = virtualinvoke $r53.<android.util.ArrayMap: java.util.Collection values()>();

        $i5 = interfaceinvoke user#42.<java.util.Collection: int size()>();

        if $i5 != 0 goto label110;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("No domain preferred apps!");

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

        goto label120;

     label110:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("App verification status:");

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

        perm#43 = 0;

        e#44 = interfaceinvoke user#42.<java.util.Collection: java.util.Iterator iterator()>();

     label111:
        $z25 = interfaceinvoke e#44.<java.util.Iterator: boolean hasNext()>();

        if $z25 == 0 goto label113;

        $r82 = interfaceinvoke e#44.<java.util.Iterator: java.lang.Object next()>();

        ps#45 = (com.android.server.pm.PackageSetting) $r82;

        ivi#46 = virtualinvoke ps#45.<com.android.server.pm.PackageSetting: android.content.pm.IntentFilterVerificationInfo getIntentFilterVerificationInfo()>();

        if ivi#46 == null goto label111;

        $r83 = virtualinvoke ivi#46.<android.content.pm.IntentFilterVerificationInfo: java.lang.String getPackageName()>();

        if $r83 != null goto label112;

        goto label111;

     label112:
        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Package: ");

        $r86 = virtualinvoke ivi#46.<android.content.pm.IntentFilterVerificationInfo: java.lang.String getPackageName()>();

        $r72 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r73);

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Domains: ");

        $r76 = virtualinvoke ivi#46.<android.content.pm.IntentFilterVerificationInfo: java.lang.String getDomainsString()>();

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r78);

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r96 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Status:  ");

        $r95 = virtualinvoke ivi#46.<android.content.pm.IntentFilterVerificationInfo: java.lang.String getStatusString()>();

        $r94 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r95);

        $r93 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r93);

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

        perm#43 = perm#43 + 1;

        goto label111;

     label113:
        if perm#43 != 0 goto label114;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  No app verification established.");

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label114:
        $r52 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        e#47 = virtualinvoke $r52.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        ps#48 = lengthof e#47;

        ivi#49 = 0;

     label115:
        if ivi#49 >= ps#48 goto label120;

        userId = e#47[ivi#49];

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("App linkages for user ");

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(userId);

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r55);

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

        perm#50 = 0;

        i$ = interfaceinvoke user#42.<java.util.Collection: java.util.Iterator iterator()>();

     label116:
        $z26 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z26 == 0 goto label118;

        $r54 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        ps = (com.android.server.pm.PackageSetting) $r54;

        status = virtualinvoke ps.<com.android.server.pm.PackageSetting: long getDomainVerificationStatusForUser(int)>(userId);

        $l7 = status >> 32;

        $b6 = $l7 cmp 0L;

        if $b6 != 0 goto label117;

        goto label116;

     label117:
        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Package: ");

        $r69 = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r71 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r71);

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Domains: ");

        $r59 = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r62 = specialinvoke this.<com.android.server.pm.PackageManagerService: java.lang.String dumpDomainString(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r63);

        statusStr = staticinvoke <android.content.pm.IntentFilterVerificationInfo: java.lang.String getStatusStringFromValue(long)>(status);

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Status:  ");

        $r80 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusStr);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r81);

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

        perm#50 = perm#50 + 1;

        goto label116;

     label118:
        if perm#50 != 0 goto label119;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  No configured app linkages.");

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label119:
        ivi#49 = ivi#49 + 1;

        goto label115;

     label120:
        if checkin#2 != 0 goto label126;

        $z21 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(8);

        if $z21 == 0 goto label126;

        $r36 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r36.<com.android.server.pm.Settings: void dumpPermissionsLPr(java.io.PrintWriter,java.lang.String,android.util.ArraySet,com.android.server.pm.PackageManagerService$DumpState)>(pw, packageName#3, permissionNames#4, dumpState);

        if packageName#3 != null goto label126;

        if permissionNames#4 != null goto label126;

        perm#51 = 0;

     label121:
        $r45 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAppOpPermissionPackages>;

        $i4 = virtualinvoke $r45.<android.util.ArrayMap: int size()>();

        if perm#51 >= $i4 goto label126;

        if perm#51 != 0 goto label123;

        $z23 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean onTitlePrinted()>();

        if $z23 == 0 goto label122;

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label122:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("AppOp Permissions:");

     label123:
        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("  AppOp Permission ");

        $r43 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAppOpPermissionPackages>;

        $r44 = virtualinvoke $r43.<android.util.ArrayMap: java.lang.Object keyAt(int)>(perm#51);

        $r41 = (java.lang.String) $r44;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>($r41);

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>(":");

        $r42 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAppOpPermissionPackages>;

        $r40 = virtualinvoke $r42.<android.util.ArrayMap: java.lang.Object valueAt(int)>(perm#51);

        pkg#52 = (android.util.ArraySet) $r40;

        user#53 = 0;

     label124:
        $i3 = virtualinvoke pkg#52.<android.util.ArraySet: int size()>();

        if user#53 >= $i3 goto label125;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r49 = virtualinvoke pkg#52.<android.util.ArraySet: java.lang.Object valueAt(int)>(user#53);

        $r50 = (java.lang.String) $r49;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r50);

        user#53 = user#53 + 1;

        goto label124;

     label125:
        perm#51 = perm#51 + 1;

        goto label121;

     label126:
        if checkin#2 != 0 goto label137;

        $z14 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(128);

        if $z14 == 0 goto label137;

        perm#54 = 0;

        $r20 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ProviderIntentResolver mProviders>;

        $r21 = staticinvoke <com.android.server.pm.PackageManagerService$ProviderIntentResolver: android.util.ArrayMap access$2800(com.android.server.pm.PackageManagerService$ProviderIntentResolver)>($r20);

        $r22 = virtualinvoke $r21.<android.util.ArrayMap: java.util.Collection values()>();

        pkg#55 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();

     label127:
        $z16 = interfaceinvoke pkg#55.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label131;

        $r38 = interfaceinvoke pkg#55.<java.util.Iterator: java.lang.Object next()>();

        user#56 = (android.content.pm.PackageParser$Provider) $r38;

        if packageName#3 == null goto label128;

        $r39 = user#56.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r35 = $r39.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $z20 = virtualinvoke packageName#3.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z20 != 0 goto label128;

        goto label127;

     label128:
        if perm#54 != 0 goto label130;

        $z22 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean onTitlePrinted()>();

        if $z22 == 0 goto label129;

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label129:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Registered ContentProviders:");

        perm#54 = 1;

     label130:
        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke user#56.<android.content.pm.PackageParser$Provider: void printComponentShortName(java.io.PrintWriter)>(pw);

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r37 = virtualinvoke user#56.<android.content.pm.PackageParser$Provider: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r37);

        goto label127;

     label131:
        perm#57 = 0;

        $r18 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mProvidersByAuthority>;

        $r19 = virtualinvoke $r18.<android.util.ArrayMap: java.util.Set entrySet()>();

        pkg#58 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label132:
        $z17 = interfaceinvoke pkg#58.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label137;

        $r27 = interfaceinvoke pkg#58.<java.util.Iterator: java.lang.Object next()>();

        user#59 = (java.util.Map$Entry) $r27;

        $r28 = interfaceinvoke user#59.<java.util.Map$Entry: java.lang.Object getValue()>();

        e#60 = (android.content.pm.PackageParser$Provider) $r28;

        if packageName#3 == null goto label133;

        $r30 = e#60.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r31 = $r30.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $z19 = virtualinvoke packageName#3.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        if $z19 != 0 goto label133;

        goto label132;

     label133:
        if perm#57 != 0 goto label135;

        $z18 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean onTitlePrinted()>();

        if $z18 == 0 goto label134;

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label134:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("ContentProvider Authorities:");

        perm#57 = 1;

     label135:
        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("  [");

        $r29 = interfaceinvoke user#59.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r23 = (java.lang.String) $r29;

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>($r23);

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("]:");

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r24 = virtualinvoke e#60.<android.content.pm.PackageParser$Provider: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        $r25 = e#60.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        if $r25 == null goto label136;

        $r26 = e#60.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r33 = $r26.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r33 == null goto label136;

        $r32 = e#60.<android.content.pm.PackageParser$Provider: android.content.pm.ProviderInfo info>;

        $r34 = $r32.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        ps#61 = virtualinvoke $r34.<android.content.pm.ApplicationInfo: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("      applicationInfo=");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>(ps#61);

     label136:
        goto label132;

     label137:
        if checkin#2 != 0 goto label138;

        $z15 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(2048);

        if $z15 == 0 goto label138;

        $r17 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r16 = $r17.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        virtualinvoke $r16.<com.android.server.pm.KeySetManagerService: void dumpLPr(java.io.PrintWriter,java.lang.String,com.android.server.pm.PackageManagerService$DumpState)>(pw, packageName#3, dumpState);

     label138:
        $z6 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(16);

        if $z6 == 0 goto label139;

        $r12 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r12.<com.android.server.pm.Settings: void dumpPackagesLPr(java.io.PrintWriter,java.lang.String,android.util.ArraySet,com.android.server.pm.PackageManagerService$DumpState,boolean)>(pw, packageName#3, permissionNames#4, dumpState, checkin#2);

     label139:
        $z4 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(32);

        if $z4 == 0 goto label140;

        $r13 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r13.<com.android.server.pm.Settings: void dumpSharedUsersLPr(java.io.PrintWriter,java.lang.String,android.util.ArraySet,com.android.server.pm.PackageManagerService$DumpState,boolean)>(pw, packageName#3, permissionNames#4, dumpState, checkin#2);

     label140:
        if checkin#2 != 0 goto label142;

        $z12 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(8192);

        if $z12 == 0 goto label142;

        if packageName#3 != null goto label142;

        $z11 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean onTitlePrinted()>();

        if $z11 == 0 goto label141;

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label141:
        $r14 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        $r15 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r15.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String,int)>(pw, "  ", 120);

        virtualinvoke $r14.<com.android.server.pm.PackageInstallerService: void dump(com.android.internal.util.IndentingPrintWriter)>($r15);

     label142:
        if checkin#2 != 0 goto label152;

        $z8 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(64);

        if $z8 == 0 goto label152;

        if packageName#3 != null goto label152;

        $z9 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean onTitlePrinted()>();

        if $z9 == 0 goto label143;

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

     label143:
        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r10.<com.android.server.pm.Settings: void dumpReadMessagesLPr(java.io.PrintWriter,com.android.server.pm.PackageManagerService$DumpState)>(pw, dumpState);

        virtualinvoke pw.<java.io.PrintWriter: void println()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Package warning messages:");

        perm#62 = null;

     label144:
        $r9 = new java.io.BufferedReader;

        $r8 = new java.io.FileReader;

        $r7 = staticinvoke <com.android.server.pm.PackageManagerService: java.io.File getSettingsProblemFile()>();

        specialinvoke $r8.<java.io.FileReader: void <init>(java.io.File)>($r7);

        specialinvoke $r9.<java.io.BufferedReader: void <init>(java.io.Reader)>($r8);

        perm#62 = $r9;

     label145:
        $r11 = virtualinvoke perm#62.<java.io.BufferedReader: java.lang.String readLine()>();

        pkg#64 = $r11;

        if $r11 == null goto label147;

        $z13 = virtualinvoke pkg#64.<java.lang.String: boolean contains(java.lang.CharSequence)>("ignored: updated version");

        if $z13 == 0 goto label146;

        goto label145;

     label146:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>(pkg#64);

        goto label145;

     label147:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(perm#62);

        goto label152;

     label148:
        $r192 := @caughtexception;

     label149:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(perm#62);

        goto label152;

     label150:
        $r221 := @caughtexception;

        l23 = $r221;

     label151:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(perm#62);

        throw l23;

     label152:
        if checkin#2 == 0 goto label161;

        $z7 = virtualinvoke dumpState.<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>(64);

        if $z7 == 0 goto label161;

        perm#66 = null;

     label153:
        $r5 = new java.io.BufferedReader;

        $r3 = new java.io.FileReader;

        $r4 = staticinvoke <com.android.server.pm.PackageManagerService: java.io.File getSettingsProblemFile()>();

        specialinvoke $r3.<java.io.FileReader: void <init>(java.io.File)>($r4);

        specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        perm#66 = $r5;

     label154:
        $r6 = virtualinvoke perm#66.<java.io.BufferedReader: java.lang.String readLine()>();

        pkg#68 = $r6;

        if $r6 == null goto label156;

        $z10 = virtualinvoke pkg#68.<java.lang.String: boolean contains(java.lang.CharSequence)>("ignored: updated version");

        if $z10 == 0 goto label155;

        goto label154;

     label155:
        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>("msg,");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>(pkg#68);

        goto label154;

     label156:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(perm#66);

        goto label161;

     label157:
        $r222 := @caughtexception;

     label158:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(perm#66);

        goto label161;

     label159:
        $r191 := @caughtexception;

        l24 = $r191;

     label160:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(perm#66);

        throw l24;

     label161:
        exitmonitor opt#18;

     label162:
        goto label165;

     label163:
        $r183 := @caughtexception;

        l25 = $r183;

        exitmonitor opt#18;

     label164:
        throw l25;

     label165:
        return;

        catch java.lang.NumberFormatException from label014 to label015 with label016;
        catch java.lang.Throwable from label052 to label053 with label054;
        catch java.lang.Throwable from label054 to label055 with label054;
        catch java.lang.IllegalArgumentException from label103 to label104 with label105;
        catch java.lang.IllegalStateException from label103 to label104 with label106;
        catch java.io.IOException from label103 to label104 with label107;
        catch java.io.IOException from label144 to label147 with label148;
        catch java.lang.Throwable from label144 to label147 with label150;
        catch java.lang.Throwable from label148 to label149 with label150;
        catch java.lang.Throwable from label150 to label151 with label150;
        catch java.io.IOException from label153 to label156 with label157;
        catch java.lang.Throwable from label153 to label156 with label159;
        catch java.lang.Throwable from label157 to label158 with label159;
        catch java.lang.Throwable from label159 to label160 with label159;
        catch java.lang.Throwable from label058 to label162 with label163;
        catch java.lang.Throwable from label163 to label164 with label163;
    }

    private java.lang.String dumpDomainString(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, host, $r3, i$#8;
        java.util.List iviList, filters;
        android.util.ArraySet result, $r9, tmp$153320200;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z8;
        java.lang.Object $r2, $r6, $r8, $r10;
        java.util.ArrayList $r7;
        java.util.Iterator i$#1, i$#3, i$#4, ivi#7;
        android.content.pm.IntentFilterVerificationInfo ivi#2;
        android.content.IntentFilter ivi#5;
        java.lang.StringBuilder i$#6, tmp$2116705647;
        java.util.Collection tmp$844994587;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        iviList = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List getIntentFilterVerifications(java.lang.String)>(packageName);

        filters = virtualinvoke this.<com.android.server.pm.PackageManagerService: java.util.List getAllIntentFilters(java.lang.String)>(packageName);

        tmp$153320200 = new android.util.ArraySet;

        specialinvoke tmp$153320200.<android.util.ArraySet: void <init>()>();

        result = tmp$153320200;

        $i0 = interfaceinvoke iviList.<java.util.List: int size()>();

        if $i0 <= 0 goto label04;

        i$#1 = interfaceinvoke iviList.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z6 = interfaceinvoke i$#1.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label04;

        $r8 = interfaceinvoke i$#1.<java.util.Iterator: java.lang.Object next()>();

        ivi#2 = (android.content.pm.IntentFilterVerificationInfo) $r8;

        $r9 = virtualinvoke ivi#2.<android.content.pm.IntentFilterVerificationInfo: android.util.ArraySet getDomains()>();

        i$#3 = virtualinvoke $r9.<android.util.ArraySet: java.util.Iterator iterator()>();

     label02:
        $z8 = interfaceinvoke i$#3.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label03;

        $r10 = interfaceinvoke i$#3.<java.util.Iterator: java.lang.Object next()>();

        host = (java.lang.String) $r10;

        virtualinvoke result.<android.util.ArraySet: boolean add(java.lang.Object)>(host);

        goto label02;

     label03:
        goto label01;

     label04:
        if filters == null goto label08;

        $i4 = interfaceinvoke filters.<java.util.List: int size()>();

        if $i4 <= 0 goto label08;

        i$#4 = interfaceinvoke filters.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke i$#4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r6 = interfaceinvoke i$#4.<java.util.Iterator: java.lang.Object next()>();

        ivi#5 = (android.content.IntentFilter) $r6;

        $z2 = virtualinvoke ivi#5.<android.content.IntentFilter: boolean hasCategory(java.lang.String)>("android.intent.category.BROWSABLE");

        if $z2 == 0 goto label07;

        $z3 = virtualinvoke ivi#5.<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>("http");

        if $z3 != 0 goto label06;

        $z4 = virtualinvoke ivi#5.<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>("https");

        if $z4 == 0 goto label07;

     label06:
        $r7 = virtualinvoke ivi#5.<android.content.IntentFilter: java.util.ArrayList getHostsList()>();

        tmp$844994587 = (java.util.Collection) $r7;

        virtualinvoke result.<android.util.ArraySet: boolean addAll(java.util.Collection)>(tmp$844994587);

     label07:
        goto label05;

     label08:
        tmp$2116705647 = new java.lang.StringBuilder;

        $i1 = virtualinvoke result.<android.util.ArraySet: int size()>();

        $i2 = $i1 * 16;

        specialinvoke tmp$2116705647.<java.lang.StringBuilder: void <init>(int)>($i2);

        i$#6 = tmp$2116705647;

        ivi#7 = virtualinvoke result.<android.util.ArraySet: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke ivi#7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r2 = interfaceinvoke ivi#7.<java.util.Iterator: java.lang.Object next()>();

        i$#8 = (java.lang.String) $r2;

        $i3 = virtualinvoke i$#6.<java.lang.StringBuilder: int length()>();

        if $i3 <= 0 goto label10;

        virtualinvoke i$#6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label10:
        virtualinvoke i$#6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(i$#8);

        goto label09;

     label11:
        $r3 = virtualinvoke i$#6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    static java.lang.String getEncryptKey()
    {
        android.security.SystemKeyStore $r0, $r1;
        java.io.IOException $r2, sdEncKey#3;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10;
        java.lang.String $r6, $r11, sdEncKey#1;
        java.security.NoSuchAlgorithmException $r7, sdEncKey#2;

     label1:
        $r0 = staticinvoke <android.security.SystemKeyStore: android.security.SystemKeyStore getInstance()>();

        sdEncKey#1 = virtualinvoke $r0.<android.security.SystemKeyStore: java.lang.String retrieveKeyHexString(java.lang.String)>("AppsOnSD");

        if sdEncKey#1 != null goto label3;

        $r1 = staticinvoke <android.security.SystemKeyStore: android.security.SystemKeyStore getInstance()>();

        sdEncKey#1 = virtualinvoke $r1.<android.security.SystemKeyStore: java.lang.String generateNewKeyHexString(int,java.lang.String,java.lang.String)>(128, "AES", "AppsOnSD");

        if sdEncKey#1 != null goto label3;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "Failed to create encryption keys");

     label2:
        return null;

     label3:
        return sdEncKey#1;

     label4:
        $r7 := @caughtexception;

        sdEncKey#2 = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create encryption keys with exception: ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(sdEncKey#2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r11);

        return null;

     label5:
        $r2 := @caughtexception;

        sdEncKey#3 = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to retrieve encryption keys with exception: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(sdEncKey#3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r6);

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label4;
        catch java.io.IOException from label1 to label2 with label5;
    }

    public void updateExternalMediaStatus(boolean, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        boolean mediaStatus, reportStatus, $z0, $z1;
        int callingUid;
        android.util.ArrayMap l4, $r0;
        android.os.Message msg;
        java.lang.Throwable l6, $r13;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r7, $r14, $r15;
        com.android.server.pm.PackageManagerService$PackageHandler $r8, $r10, $r11;
        com.android.server.pm.PackageManagerService$20 $r9;
        java.lang.SecurityException $r12;
        byte $b1;

        this := @this: com.android.server.pm.PackageManagerService;

        mediaStatus := @parameter0: boolean;

        reportStatus := @parameter1: boolean;

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        if callingUid == 0 goto label01;

        if callingUid == 1000 goto label01;

        $r12 = new java.lang.SecurityException;

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>("Media status can only be updated by the system");

        throw $r12;

     label01:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r0;

        entermonitor $r0;

     label02:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updating external media status from ");

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mMediaMounted>;

        if $z0 == 0 goto label03;

        $r14 = "mounted";

        goto label04;

     label03:
        $r14 = "unmounted";

     label04:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        if mediaStatus == 0 goto label05;

        $r15 = "mounted";

        goto label06;

     label05:
        $r15 = "unmounted";

     label06:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r7);

        $z1 = this.<com.android.server.pm.PackageManagerService: boolean mMediaMounted>;

        if mediaStatus != $z1 goto label10;

        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        if reportStatus == 0 goto label07;

        $b1 = 1;

        goto label08;

     label07:
        $b1 = 0;

     label08:
        msg = virtualinvoke $r10.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int,int,int)>(12, $b1, -1);

        $r11 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r11.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendMessage(android.os.Message)>(msg);

        exitmonitor l4;

     label09:
        return;

     label10:
        this.<com.android.server.pm.PackageManagerService: boolean mMediaMounted> = mediaStatus;

        exitmonitor l4;

     label11:
        goto label14;

     label12:
        $r13 := @caughtexception;

        l6 = $r13;

        exitmonitor l4;

     label13:
        throw l6;

     label14:
        $r8 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r9 = new com.android.server.pm.PackageManagerService$20;

        specialinvoke $r9.<com.android.server.pm.PackageManagerService$20: void <init>(com.android.server.pm.PackageManagerService,boolean,boolean)>(this, mediaStatus, reportStatus);

        virtualinvoke $r8.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r9);

        return;

        catch java.lang.Throwable from label02 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void scanAvailableAsecs()
    {
        com.android.server.pm.PackageManagerService this;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void updateExternalMediaStatusInner(boolean,boolean,boolean)>(1, 0, 0);

        $z0 = this.<com.android.server.pm.PackageManagerService: boolean mShouldRestoreconData>;

        if $z0 == 0 goto label1;

        staticinvoke <com.android.server.pm.SELinuxMMAC: void setRestoreconDone()>();

        this.<com.android.server.pm.PackageManagerService: boolean mShouldRestoreconData> = 0;

     label1:
        return;
    }

    private void updateExternalMediaStatusInner(boolean, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        boolean isMounted, reportStatus, externalStorage, $z0, $z1, $z2, $z3, $z4;
        android.util.ArrayMap processCids, l7, $r0, $r1, $r5;
        java.lang.String[] list, arr$, $r6;
        int len$, uid, i$#2;
        java.lang.String cid, pkgName, $r8, $r13, $r15, $r16, $r17, $r18, $r24, $r30;
        com.android.server.pm.PackageSetting ps;
        com.android.server.pm.PackageManagerService$AsecInstallArgs args, $r7;
        java.lang.Throwable l16, $r29;
        com.android.server.pm.PackageInstallerService $r2;
        com.android.server.pm.Settings $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28;
        int[] uidArr#1;

        this := @this: com.android.server.pm.PackageManagerService;

        isMounted := @parameter0: boolean;

        reportStatus := @parameter1: boolean;

        externalStorage := @parameter2: boolean;

        $r0 = new android.util.ArrayMap;

        specialinvoke $r0.<android.util.ArrayMap: void <init>()>();

        processCids = $r0;

        uidArr#1 = <libcore.util.EmptyArray: int[] INT>;

        list = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String[] getSecureContainerList()>();

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(list);

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", "No secure containers found");

        goto label16;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l7 = $r1;

        entermonitor $r1;

     label02:
        arr$ = list;

        len$ = lengthof arr$;

        i$#2 = 0;

     label03:
        if i$#2 >= len$ goto label11;

        cid = arr$[i$#2];

        $z1 = staticinvoke <com.android.server.pm.PackageInstallerService: boolean isStageName(java.lang.String)>(cid);

        if $z1 == 0 goto label04;

        goto label10;

     label04:
        pkgName = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getAsecPackageName(java.lang.String)>(cid);

        if pkgName != null goto label05;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found stale container ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(cid);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with no package name");

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r30);

        goto label10;

     label05:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(pkgName);

        ps = (com.android.server.pm.PackageSetting) $r4;

        if ps != null goto label06;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found stale container ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(cid);

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with no matching settings");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r24);

        goto label10;

     label06:
        if externalStorage == 0 goto label07;

        if isMounted != 0 goto label07;

        $z4 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isExternal(com.android.server.pm.PackageSetting)>(ps);

        if $z4 != 0 goto label07;

        goto label10;

     label07:
        $r7 = new com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r6 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(com.android.server.pm.PackageSetting)>(ps);

        $z2 = virtualinvoke ps.<com.android.server.pm.PackageSetting: boolean isForwardLocked()>();

        specialinvoke $r7.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,java.lang.String[],boolean)>(this, cid, $r6, $z2);

        args = $r7;

        $r8 = ps.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        if $r8 == null goto label09;

        $r17 = ps.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r16 = virtualinvoke args.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getCodePath()>();

        $z3 = virtualinvoke $r17.<java.lang.String: boolean startsWith(java.lang.String)>($r16);

        if $z3 == 0 goto label09;

        $r18 = ps.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        virtualinvoke processCids.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(args, $r18);

        uid = ps.<com.android.server.pm.PackageSetting: int appId>;

        if uid == -1 goto label08;

        uidArr#1 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(uidArr#1, uid);

     label08:
        goto label10;

     label09:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found stale container ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(cid);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": expected codePath=");

        $r15 = ps.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r13);

     label10:
        i$#2 = i$#2 + 1;

        goto label03;

     label11:
        exitmonitor l7;

     label12:
        goto label15;

     label13:
        $r29 := @caughtexception;

        l16 = $r29;

        exitmonitor l7;

     label14:
        throw l16;

     label15:
        staticinvoke <java.util.Arrays: void sort(int[])>(uidArr#1);

     label16:
        if isMounted == 0 goto label17;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void loadMediaPackages(android.util.ArrayMap,int[])>(processCids, uidArr#1);

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void startCleaningPackages()>();

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        virtualinvoke $r2.<com.android.server.pm.PackageInstallerService: void onSecureContainersAvailable()>();

        goto label18;

     label17:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void unloadMediaPackages(android.util.ArrayMap,int[],boolean)>(processCids, uidArr#1, reportStatus);

     label18:
        return;

        catch java.lang.Throwable from label02 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private void sendResourcesChangedBroadcast(boolean, boolean, java.util.ArrayList, android.content.IIntentReceiver)
    {
        com.android.server.pm.PackageManagerService this;
        boolean mediaStatus, replacing;
        java.util.ArrayList infos;
        android.content.IIntentReceiver finishedReceiver;
        int size, $i0, i#1;
        java.lang.String[] packageNames;
        int[] packageUids;
        android.content.pm.ApplicationInfo info;
        java.lang.Object $r0;
        java.lang.String $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        mediaStatus := @parameter0: boolean;

        replacing := @parameter1: boolean;

        infos := @parameter2: java.util.ArrayList;

        finishedReceiver := @parameter3: android.content.IIntentReceiver;

        size = virtualinvoke infos.<java.util.ArrayList: int size()>();

        packageNames = newarray (java.lang.String)[size];

        packageUids = newarray (int)[size];

        i#1 = 0;

     label1:
        if i#1 >= size goto label2;

        $r0 = virtualinvoke infos.<java.util.ArrayList: java.lang.Object get(int)>(i#1);

        info = (android.content.pm.ApplicationInfo) $r0;

        $r1 = info.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        packageNames[i#1] = $r1;

        $i0 = info.<android.content.pm.ApplicationInfo: int uid>;

        packageUids[i#1] = $i0;

        i#1 = i#1 + 1;

        goto label1;

     label2:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.lang.String[],int[],android.content.IIntentReceiver)>(mediaStatus, replacing, packageNames, packageUids, finishedReceiver);

        return;
    }

    private void sendResourcesChangedBroadcast(boolean, boolean, java.util.ArrayList, int[], android.content.IIntentReceiver)
    {
        com.android.server.pm.PackageManagerService this;
        boolean mediaStatus, replacing;
        java.util.ArrayList pkgList;
        int[] uidArr;
        android.content.IIntentReceiver finishedReceiver;
        int $i0;
        java.lang.String[] $r0, $r2;
        java.lang.Object[] $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        mediaStatus := @parameter0: boolean;

        replacing := @parameter1: boolean;

        pkgList := @parameter2: java.util.ArrayList;

        uidArr := @parameter3: int[];

        finishedReceiver := @parameter4: android.content.IIntentReceiver;

        $i0 = virtualinvoke pkgList.<java.util.ArrayList: int size()>();

        $r0 = newarray (java.lang.String)[$i0];

        $r1 = virtualinvoke pkgList.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r0);

        $r2 = (java.lang.String[]) $r1;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.lang.String[],int[],android.content.IIntentReceiver)>(mediaStatus, 1, $r2, uidArr, null);

        return;
    }

    private void sendResourcesChangedBroadcast(boolean, boolean, java.lang.String[], int[], android.content.IIntentReceiver)
    {
        com.android.server.pm.PackageManagerService this;
        boolean mediaStatus, replacing;
        java.lang.String[] pkgList;
        int[] uidArr;
        android.content.IIntentReceiver finishedReceiver;
        int size;
        android.os.Bundle extras, $r0;
        java.lang.String action, $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        mediaStatus := @parameter0: boolean;

        replacing := @parameter1: boolean;

        pkgList := @parameter2: java.lang.String[];

        uidArr := @parameter3: int[];

        finishedReceiver := @parameter4: android.content.IIntentReceiver;

        size = lengthof pkgList;

        if size <= 0 goto label4;

        $r0 = new android.os.Bundle;

        specialinvoke $r0.<android.os.Bundle: void <init>()>();

        extras = $r0;

        virtualinvoke extras.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("android.intent.extra.changed_package_list", pkgList);

        if uidArr == null goto label1;

        virtualinvoke extras.<android.os.Bundle: void putIntArray(java.lang.String,int[])>("android.intent.extra.changed_uid_list", uidArr);

     label1:
        virtualinvoke extras.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.intent.extra.REPLACING", 1);

        if mediaStatus == 0 goto label2;

        $r1 = "android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE";

        goto label3;

     label2:
        $r1 = "android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE";

     label3:
        action = $r1;

        virtualinvoke this.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.content.IIntentReceiver,int[])>(action, null, extras, null, null, null);

     label4:
        return;
    }

    private void loadMediaPackages(android.util.ArrayMap, int[])
    {
        com.android.server.pm.PackageManagerService this;
        android.util.ArrayMap processCids, $r1, $r41, e#8, i$#9;
        int[] uidArr;
        java.util.ArrayList pkgList, $r0;
        java.util.Set keys;
        java.lang.Object l10, $r9, $r13, $r33;
        java.lang.Throwable l13, l14, l15, l16, $r55, $r67, $r78, $r79;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.pm.Settings $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i11, parseFlags#5;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r20, $r22, $r24, $r25, $r27, $r30, $r32, $r34, $r35, $r36, $r37, $r40, $r43, $r44, $r45, $r46, $r49, $r51, $r52, $r53, $r56, $r58, $r59, $r60, $r62, $r63, $r65, $r66, $r68, $r69, $r70, $r73, $r75, $r77;
        java.lang.String $r8, $r17, $r21, $r23, $r26, $r28, $r29, $r38, $r39, $r42, $r47, $r50, $r54, $r57, $r61, $r64, $r72, $r74, $r76, codePath#3;
        java.io.File $r31;
        android.content.pm.ApplicationInfo $r48;
        com.android.server.pm.PackageManagerException $r71, e#7;
        java.util.Iterator i$#1;
        com.android.server.pm.PackageManagerService$AsecInstallArgs args#2;
        byte retCode#4, codePath#11;
        android.content.pm.PackageParser$Package pkg#6;
        com.android.server.pm.Settings$VersionInfo args#10;

        this := @this: com.android.server.pm.PackageManagerService;

        processCids := @parameter0: android.util.ArrayMap;

        uidArr := @parameter1: int[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        pkgList = $r0;

        keys = virtualinvoke processCids.<android.util.ArrayMap: java.util.Set keySet()>();

        i$#1 = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke i$#1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label30;

        $r9 = interfaceinvoke i$#1.<java.util.Iterator: java.lang.Object next()>();

        args#2 = (com.android.server.pm.PackageManagerService$AsecInstallArgs) $r9;

        $r13 = virtualinvoke processCids.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(args#2);

        codePath#3 = (java.lang.String) $r13;

        retCode#4 = -18;

     label02:
        $i5 = virtualinvoke args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: int doPreInstall(int)>(1);

        if $i5 == 1 goto label04;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to mount cid : ");

        $r54 = args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r51 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when installing from sdcard");

        $r50 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r50);

     label03:
        if retCode#4 == 1 goto label01;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Container ");

        $r61 = args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r58 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is stale, retCode=");

        $r56 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(retCode#4);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r57);

        goto label01;

     label04:
        if codePath#3 == null goto label05;

        $r28 = virtualinvoke args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getCodePath()>();

        $z1 = virtualinvoke codePath#3.<java.lang.String: boolean startsWith(java.lang.String)>($r28);

        if $z1 != 0 goto label07;

     label05:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Container ");

        $r17 = args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r14 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cachepath ");

        $r21 = virtualinvoke args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getCodePath()>();

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match one in settings ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(codePath#3);

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r23);

     label06:
        if retCode#4 == 1 goto label01;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Container ");

        $r26 = args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is stale, retCode=");

        $r30 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(retCode#4);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r29);

        goto label01;

     label07:
        parseFlags#5 = this.<com.android.server.pm.PackageManagerService: int mDefParseFlags>;

        $z2 = virtualinvoke args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isExternalAsec()>();

        if $z2 == 0 goto label08;

        parseFlags#5 = parseFlags#5 | 32;

     label08:
        $z3 = virtualinvoke args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z3 == 0 goto label09;

        parseFlags#5 = parseFlags#5 | 16;

     label09:
        $r33 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l10 = $r33;

        entermonitor $r33;

     label10:
        pkg#6 = null;

     label11:
        $r31 = new java.io.File;

        specialinvoke $r31.<java.io.File: void <init>(java.lang.String)>(codePath#3);

        pkg#6 = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)>($r31, parseFlags#5, 0, 0L, null);

     label12:
        goto label14;

     label13:
        $r71 := @caughtexception;

        e#7 = $r71;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to scan ");

        $r68 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(codePath#3);

        $r75 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r74 = virtualinvoke e#7.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        $r76 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r76);

     label14:
        if pkg#6 == null goto label20;

        $r41 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        e#8 = $r41;

        entermonitor $r41;

     label15:
        retCode#4 = 1;

        $r47 = pkg#6.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke pkgList.<java.util.ArrayList: boolean add(java.lang.Object)>($r47);

        $r48 = pkg#6.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i11 = $r48.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: int doPostInstall(int,int)>(1, $i11);

        exitmonitor e#8;

     label16:
        goto label19;

     label17:
        $r78 := @caughtexception;

        l13 = $r78;

        exitmonitor e#8;

     label18:
        throw l13;

     label19:
        goto label21;

     label20:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to install pkg from  ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(codePath#3);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from sdcard");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r38);

     label21:
        exitmonitor l10;

     label22:
        goto label25;

     label23:
        $r79 := @caughtexception;

        l14 = $r79;

        exitmonitor l10;

     label24:
        throw l14;

     label25:
        if retCode#4 == 1 goto label29;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Container ");

        $r42 = args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is stale, retCode=");

        $r40 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(retCode#4);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r39);

        goto label29;

     label26:
        $r67 := @caughtexception;

        l15 = $r67;

     label27:
        if retCode#4 == 1 goto label28;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Container ");

        $r64 = args#2.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r63 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is stale, retCode=");

        $r73 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(retCode#4);

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r72);

     label28:
        throw l15;

     label29:
        goto label01;

     label30:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        i$#9 = $r1;

        entermonitor $r1;

     label31:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        args#10 = virtualinvoke $r2.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo getExternalVersion()>();

        codePath#11 = 1;

        $i0 = args#10.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        $i1 = this.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        if $i0 == $i1 goto label32;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Platform changed from ");

        $i4 = args#10.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $i3 = this.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; regranting permissions for external");

        $r8 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(4, $r8);

        codePath#11 = codePath#11 | 6;

     label32:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void updatePermissionsLPw(java.lang.String,android.content.pm.PackageParser$Package,int)>(null, null, codePath#11);

        virtualinvoke args#10.<com.android.server.pm.Settings$VersionInfo: void forceCurrent()>();

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r3.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor i$#9;

     label33:
        goto label36;

     label34:
        $r55 := @caughtexception;

        l16 = $r55;

        exitmonitor i$#9;

     label35:
        throw l16;

     label36:
        $i2 = virtualinvoke pkgList.<java.util.ArrayList: int size()>();

        if $i2 <= 0 goto label37;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,int[],android.content.IIntentReceiver)>(1, 0, pkgList, uidArr, null);

     label37:
        return;

        catch com.android.server.pm.PackageManagerException from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label10 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
        catch java.lang.Throwable from label02 to label03 with label26;
        catch java.lang.Throwable from label04 to label06 with label26;
        catch java.lang.Throwable from label07 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
        catch java.lang.Throwable from label31 to label33 with label34;
        catch java.lang.Throwable from label34 to label35 with label34;
    }

    private void unloadAllContainers(java.util.Set)
    {
        com.android.server.pm.PackageManagerService this;
        java.util.Set cidArgs;
        java.util.Iterator i$;
        com.android.server.pm.PackageManagerService$AsecInstallArgs arg;
        java.lang.Object l4, $r0, $r1;
        java.lang.Throwable l5, $r2;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService;

        cidArgs := @parameter0: java.util.Set;

        i$ = interfaceinvoke cidArgs.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r0 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        arg = (com.android.server.pm.PackageManagerService$AsecInstallArgs) $r0;

        $r1 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l4 = $r1;

        entermonitor $r1;

     label2:
        virtualinvoke arg.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean doPostDeleteLI(boolean)>(0);

        exitmonitor l4;

     label3:
        goto label6;

     label4:
        $r2 := @caughtexception;

        l5 = $r2;

        exitmonitor l4;

     label5:
        throw l5;

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void unloadMediaPackages(android.util.ArrayMap, int[], boolean)
    {
        com.android.server.pm.PackageManagerService this;
        android.util.ArrayMap processCids, $r3, i$#2;
        int[] uidArr;
        boolean reportStatus, res, $z0;
        java.util.ArrayList pkgList, failedList, tmp$143603106, tmp$2005166996;
        java.util.Set keys;
        com.android.server.pm.PackageManagerService$AsecInstallArgs args;
        java.lang.String pkgName, $r13;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo outInfo, tmp$1098474547;
        java.lang.Object l11, $r8, $r9;
        java.lang.Throwable l13, l14, $r14, $r15;
        com.android.server.pm.Settings $r2;
        int $i0;
        com.android.server.pm.PackageManagerService$PackageHandler $r4, $r5;
        java.lang.StringBuilder $r10, $r12, tmp$523871139;
        java.util.Iterator i$#1;
        byte $b2;
        android.os.Message i$#4;
        com.android.server.pm.PackageManagerService$21 tmp$1924362661;
        android.content.IIntentReceiver tmp$1041522057;

        this := @this: com.android.server.pm.PackageManagerService;

        processCids := @parameter0: android.util.ArrayMap;

        uidArr := @parameter1: int[];

        reportStatus := @parameter2: boolean;

        tmp$143603106 = new java.util.ArrayList;

        specialinvoke tmp$143603106.<java.util.ArrayList: void <init>()>();

        pkgList = tmp$143603106;

        tmp$2005166996 = new java.util.ArrayList;

        specialinvoke tmp$2005166996.<java.util.ArrayList: void <init>()>();

        failedList = tmp$2005166996;

        keys = virtualinvoke processCids.<android.util.ArrayMap: java.util.Set keySet()>();

        i$#1 = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke i$#1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r9 = interfaceinvoke i$#1.<java.util.Iterator: java.lang.Object next()>();

        args = (com.android.server.pm.PackageManagerService$AsecInstallArgs) $r9;

        pkgName = virtualinvoke args.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getPackageName()>();

        tmp$1098474547 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        specialinvoke tmp$1098474547.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void <init>(com.android.server.pm.PackageManagerService)>(this);

        outInfo = tmp$1098474547;

        $r8 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l11 = $r8;

        entermonitor $r8;

     label02:
        res = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>(pkgName, null, 0, null, null, 1, outInfo, 0);

        if res == 0 goto label03;

        virtualinvoke pkgList.<java.util.ArrayList: boolean add(java.lang.Object)>(pkgName);

        goto label04;

     label03:
        tmp$523871139 = new java.lang.StringBuilder;

        specialinvoke tmp$523871139.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke tmp$523871139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete pkg from sdcard : ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pkgName);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r13);

        virtualinvoke failedList.<java.util.ArrayList: boolean add(java.lang.Object)>(args);

     label04:
        exitmonitor l11;

     label05:
        goto label08;

     label06:
        $r14 := @caughtexception;

        l13 = $r14;

        exitmonitor l11;

     label07:
        throw l13;

     label08:
        goto label01;

     label09:
        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        i$#2 = $r3;

        entermonitor $r3;

     label10:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r2.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor i$#2;

     label11:
        goto label14;

     label12:
        $r15 := @caughtexception;

        l14 = $r15;

        exitmonitor i$#2;

     label13:
        throw l14;

     label14:
        $i0 = virtualinvoke pkgList.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label15;

        tmp$1924362661 = new com.android.server.pm.PackageManagerService$21;

        specialinvoke tmp$1924362661.<com.android.server.pm.PackageManagerService$21: void <init>(com.android.server.pm.PackageManagerService,boolean,java.util.Set)>(this, reportStatus, keys);

        tmp$1041522057 = (android.content.IIntentReceiver) tmp$1924362661;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,int[],android.content.IIntentReceiver)>(0, 0, pkgList, uidArr, tmp$1041522057);

        goto label18;

     label15:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        if reportStatus == 0 goto label16;

        $b2 = 1;

        goto label17;

     label16:
        $b2 = 0;

     label17:
        i$#4 = virtualinvoke $r4.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(12, $b2, -1, keys);

        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r5.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendMessage(android.os.Message)>(i$#4);

     label18:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void loadPrivatePackages(android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService this;
        android.os.storage.VolumeInfo vol;
        java.util.ArrayList loaded, $r0;
        int parseFlags, $i0, $i1, $i2, $i3, $i4;
        java.lang.Object l4, $r2, $r15;
        android.util.ArrayMap l5, $r1;
        com.android.server.pm.Settings$VersionInfo ver;
        java.util.List packages;
        com.android.server.pm.PackageSetting ps;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.PackageManagerException e, $r27;
        java.lang.Throwable l12, l13, $r23, $r34;
        com.android.server.pm.Settings $r3, $r6, $r7;
        java.lang.String $r4, $r5, $r14, $r16, $r20, $r21, $r22, $r24, $r28, $r33;
        boolean $z0, $z2;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r17, $r25, $r26, $r29, $r30, $r32;
        android.content.pm.ApplicationInfo $r18;
        java.io.File $r19, $r31;
        java.util.Iterator i$#1;
        byte i$#2;

        this := @this: com.android.server.pm.PackageManagerService;

        vol := @parameter0: android.os.storage.VolumeInfo;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        loaded = $r0;

        $i0 = this.<com.android.server.pm.PackageManagerService: int mDefParseFlags>;

        parseFlags = $i0 | 32;

        $r2 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l4 = $r2;

        entermonitor $r2;

     label01:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l5 = $r1;

        entermonitor $r1;

     label02:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = vol.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        ver = virtualinvoke $r3.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo findOrCreateVersion(java.lang.String)>($r4);

        $r6 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = vol.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        packages = virtualinvoke $r6.<com.android.server.pm.Settings: java.util.List getVolumePackagesLPr(java.lang.String)>($r5);

        i$#1 = interfaceinvoke packages.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke i$#1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r15 = interfaceinvoke i$#1.<java.util.Iterator: java.lang.Object next()>();

        ps = (com.android.server.pm.PackageSetting) $r15;

     label04:
        $r19 = ps.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        pkg = specialinvoke this.<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)>($r19, parseFlags, 16384, 0L, null);

        $r18 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        virtualinvoke loaded.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

     label05:
        goto label07;

     label06:
        $r27 := @caughtexception;

        e = $r27;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to scan ");

        $r31 = ps.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r28 = virtualinvoke e.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r33);

     label07:
        $r21 = <android.os.Build: java.lang.String FINGERPRINT>;

        $r22 = ver.<com.android.server.pm.Settings$VersionInfo: java.lang.String fingerprint>;

        $z2 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z2 != 0 goto label08;

        $r24 = ps.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        $r20 = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        specialinvoke this.<com.android.server.pm.PackageManagerService: int deleteCodeCacheDirsLI(java.lang.String,java.lang.String)>($r24, $r20);

     label08:
        goto label03;

     label09:
        i$#2 = 1;

        $i1 = ver.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        $i2 = this.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        if $i1 == $i2 goto label10;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Platform changed from ");

        $i3 = ver.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $i4 = this.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; regranting permissions for ");

        $r16 = vol.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r14 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(4, $r14);

        i$#2 = i$#2 | 6;

     label10:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void updatePermissionsLPw(java.lang.String,android.content.pm.PackageParser$Package,int)>(null, null, i$#2);

        virtualinvoke ver.<com.android.server.pm.Settings$VersionInfo: void forceCurrent()>();

        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r7.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor l5;

     label11:
        goto label14;

     label12:
        $r34 := @caughtexception;

        l12 = $r34;

        exitmonitor l5;

     label13:
        throw l12;

     label14:
        exitmonitor l4;

     label15:
        goto label18;

     label16:
        $r23 := @caughtexception;

        l13 = $r23;

        exitmonitor l4;

     label17:
        throw l13;

     label18:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,android.content.IIntentReceiver)>(1, 0, loaded, null);

        return;

        catch com.android.server.pm.PackageManagerException from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label01 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private void unloadPrivatePackages(android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService this;
        android.os.storage.VolumeInfo vol;
        java.util.ArrayList unloaded, $r0;
        java.lang.Object l3, $r1, $r6;
        android.util.ArrayMap l4, $r2;
        java.util.List packages;
        java.util.Iterator i$;
        com.android.server.pm.PackageSetting ps;
        android.content.pm.ApplicationInfo info;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo outInfo, $r10;
        java.lang.Throwable l10, l11, $r16, $r17;
        java.lang.String $r3, $r9, $r13;
        com.android.server.pm.Settings $r4, $r5;
        boolean $z0, $z1;
        android.content.pm.PackageParser$Package $r7, $r8;
        java.lang.StringBuilder $r11, $r12, $r15;
        java.io.File $r14;

        this := @this: com.android.server.pm.PackageManagerService;

        vol := @parameter0: android.os.storage.VolumeInfo;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        unloaded = $r0;

        $r1 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        l3 = $r1;

        entermonitor $r1;

     label01:
        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l4 = $r2;

        entermonitor $r2;

     label02:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = vol.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        packages = virtualinvoke $r4.<com.android.server.pm.Settings: java.util.List getVolumePackagesLPr(java.lang.String)>($r3);

        i$ = interfaceinvoke packages.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r6 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        ps = (com.android.server.pm.PackageSetting) $r6;

        $r8 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r8 != null goto label04;

        goto label03;

     label04:
        $r7 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        info = $r7.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r10 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        specialinvoke $r10.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void <init>(com.android.server.pm.PackageManagerService)>(this);

        outInfo = $r10;

        $r9 = ps.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z1 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>($r9, null, 0, null, null, 1, outInfo, 0);

        if $z1 == 0 goto label05;

        virtualinvoke unloaded.<java.util.ArrayList: boolean add(java.lang.Object)>(info);

        goto label06;

     label05:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to unload ");

        $r14 = ps.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r13);

     label06:
        goto label03;

     label07:
        $r5 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r5.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor l4;

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        l10 = $r17;

        exitmonitor l4;

     label10:
        throw l10;

     label11:
        exitmonitor l3;

     label12:
        goto label15;

     label13:
        $r16 := @caughtexception;

        l11 = $r16;

        exitmonitor l3;

     label14:
        throw l11;

     label15:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,android.content.IIntentReceiver)>(0, 0, unloaded, null);

        return;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private void reconcileUsers(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String volumeUuid, $r5, $r11, $r19, $r24, $r31;
        java.io.File[] files, arr$#1;
        android.content.pm.UserInfo info, i$#12;
        java.lang.Throwable l11, $r30;
        java.io.File $r0, file#4, file#13;
        android.content.Context $r1;
        java.lang.Object $r2, $r4, $r8, e#9;
        java.util.List $r3;
        boolean $z0, $z1, $z2, e#7;
        int $i0, $i1, $i2, len$#2, i$#3, userId#5;
        com.android.server.pm.UserManagerService $r6;
        com.android.server.pm.Installer $r7;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r14, $r16, $r18, $r20, $r21, $r22, $r25, $r26, $r27, $r28, $r29;
        java.lang.NumberFormatException $r15, e#6;
        java.io.IOException $r17, $r23, e#8, userId#14;
        android.os.UserManager arr$#10;
        java.util.Iterator len$#11;

        this := @this: com.android.server.pm.PackageManagerService;

        volumeUuid := @parameter0: java.lang.String;

        $r0 = staticinvoke <android.os.Environment: java.io.File getDataUserDirectory(java.lang.String)>(volumeUuid);

        files = staticinvoke <android.os.FileUtils: java.io.File[] listFilesOrEmpty(java.io.File)>($r0);

        arr$#1 = files;

        len$#2 = lengthof arr$#1;

        i$#3 = 0;

     label01:
        if i$#3 >= len$#2 goto label15;

        file#4 = arr$#1[i$#3];

        $z2 = virtualinvoke file#4.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label02;

        goto label14;

     label02:
        $r5 = virtualinvoke file#4.<java.io.File: java.lang.String getName()>();

        userId#5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r6 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        info = virtualinvoke $r6.<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>(userId#5);

     label03:
        goto label05;

     label04:
        $r15 := @caughtexception;

        e#6 = $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid user directory ");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(file#4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r19);

        goto label14;

     label05:
        e#7 = 0;

        if info != null goto label06;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destroying user directory ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(file#4);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because no matching user was found");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r11);

        e#7 = 1;

        goto label09;

     label06:
        $i2 = info.<android.content.pm.UserInfo: int serialNumber>;

        staticinvoke <com.android.server.pm.UserManagerService: void enforceSerialNumber(java.io.File,int)>(file#4, $i2);

     label07:
        goto label09;

     label08:
        $r17 := @caughtexception;

        e#8 = $r17;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destroying user directory ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(file#4);

        $r26 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because we failed to enforce serial number: ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e#8);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r24);

        e#7 = 1;

     label09:
        if e#7 == 0 goto label14;

        $r8 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        e#9 = $r8;

        entermonitor $r8;

     label10:
        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r7.<com.android.server.pm.Installer: int removeUserDataDirs(java.lang.String,int)>(volumeUuid, userId#5);

        exitmonitor e#9;

     label11:
        goto label14;

     label12:
        $r30 := @caughtexception;

        l11 = $r30;

        exitmonitor e#9;

     label13:
        throw l11;

     label14:
        i$#3 = i$#3 + 1;

        goto label01;

     label15:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "android/os/UserManager");

        arr$#10 = (android.os.UserManager) $r2;

        $r3 = virtualinvoke arr$#10.<android.os.UserManager: java.util.List getUsers()>();

        len$#11 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z0 = interfaceinvoke len$#11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $r4 = interfaceinvoke len$#11.<java.util.Iterator: java.lang.Object next()>();

        i$#12 = (android.content.pm.UserInfo) $r4;

        $i0 = i$#12.<android.content.pm.UserInfo: int id>;

        file#13 = staticinvoke <android.os.Environment: java.io.File getDataUserDirectory(java.lang.String,int)>(volumeUuid, $i0);

        $z1 = virtualinvoke file#13.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label17;

        goto label16;

     label17:
        staticinvoke <com.android.server.pm.UserManagerService: void prepareUserDirectory(java.io.File)>(file#13);

        $i1 = i$#12.<android.content.pm.UserInfo: int serialNumber>;

        staticinvoke <com.android.server.pm.UserManagerService: void enforceSerialNumber(java.io.File,int)>(file#13, $i1);

     label18:
        goto label20;

     label19:
        $r23 := @caughtexception;

        userId#14 = $r23;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create user directory on ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(volumeUuid);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r31, userId#14);

     label20:
        goto label16;

     label21:
        return;

        catch java.lang.NumberFormatException from label02 to label03 with label04;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.io.IOException from label17 to label18 with label19;
    }

    private void reconcileApps(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String volumeUuid, $r1, $r5, $r9, $r14, $r19, $r24, $r34, packageName#4;
        java.io.File[] files, arr$;
        int len$, i$#1;
        java.io.File file, $r0;
        boolean isPackage, $z0, $z1, $z2, $z3, $z5, $z6, destroyApp#3;
        android.util.ArrayMap l11, $r2, $r3;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l13, l14, $r26, $r27;
        com.android.server.pm.Settings $r4;
        java.lang.Object $r6, $r7, pkg#7;
        com.android.server.pm.Installer $r8;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r25, $r28, $r29, $r31, $r32, $r33;
        android.content.pm.PackageParser$PackageParserException $r30, pkg#6;
        android.content.pm.PackageParser$PackageLite pkg#5;

        this := @this: com.android.server.pm.PackageManagerService;

        volumeUuid := @parameter0: java.lang.String;

        $r0 = staticinvoke <android.os.Environment: java.io.File getDataAppDirectory(java.lang.String)>(volumeUuid);

        files = staticinvoke <android.os.FileUtils: java.io.File[] listFilesOrEmpty(java.io.File)>($r0);

        arr$ = files;

        len$ = lengthof arr$;

        i$#1 = 0;

     label01:
        if i$#1 >= len$ goto label24;

        file = arr$[i$#1];

        $z0 = staticinvoke <android.content.pm.PackageParser: boolean isApkFile(java.io.File)>(file);

        if $z0 != 0 goto label02;

        $z5 = virtualinvoke file.<java.io.File: boolean isDirectory()>();

        if $z5 == 0 goto label03;

     label02:
        $r1 = virtualinvoke file.<java.io.File: java.lang.String getName()>();

        $z1 = staticinvoke <com.android.server.pm.PackageInstallerService: boolean isStageName(java.lang.String)>($r1);

        if $z1 != 0 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        isPackage = $z6;

        if isPackage != 0 goto label05;

        goto label23;

     label05:
        destroyApp#3 = 0;

        packageName#4 = null;

     label06:
        pkg#5 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>(file, 4);

        packageName#4 = pkg#5.<android.content.pm.PackageParser$PackageLite: java.lang.String packageName>;

        $r2 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l11 = $r2;

        entermonitor $r2;

     label07:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName#4);

        ps = (com.android.server.pm.PackageSetting) $r6;

        if ps != null goto label08;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destroying ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName#4);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on + ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(volumeUuid);

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because we found no install record");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r24);

        destroyApp#3 = 1;

        goto label09;

     label08:
        $r5 = ps.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(volumeUuid, $r5);

        if $z2 != 0 goto label09;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destroying ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName#4);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(volumeUuid);

        $r13 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because we expected it on ");

        $r14 = ps.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r19);

        destroyApp#3 = 1;

     label09:
        exitmonitor l11;

     label10:
        goto label13;

     label11:
        $r26 := @caughtexception;

        l13 = $r26;

        exitmonitor l11;

     label12:
        throw l13;

     label13:
        goto label15;

     label14:
        $r30 := @caughtexception;

        pkg#6 = $r30;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destroying ");

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(file);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to parse failure: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(pkg#6);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void logCriticalInfo(int,java.lang.String)>(5, $r34);

        destroyApp#3 = 1;

     label15:
        if destroyApp#3 == 0 goto label23;

        $r7 = this.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        pkg#7 = $r7;

        entermonitor $r7;

     label16:
        if packageName#4 == null goto label17;

        specialinvoke this.<com.android.server.pm.PackageManagerService: int removeDataDirsLI(java.lang.String,java.lang.String)>(volumeUuid, packageName#4);

     label17:
        $z3 = virtualinvoke file.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label18;

        $r8 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r9 = virtualinvoke file.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r8.<com.android.server.pm.Installer: int rmPackageDir(java.lang.String)>($r9);

        goto label19;

     label18:
        virtualinvoke file.<java.io.File: boolean delete()>();

     label19:
        exitmonitor pkg#7;

     label20:
        goto label23;

     label21:
        $r27 := @caughtexception;

        l14 = $r27;

        exitmonitor pkg#7;

     label22:
        throw l14;

     label23:
        i$#1 = i$#1 + 1;

        goto label01;

     label24:
        return;

        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch android.content.pm.PackageParser$PackageParserException from label06 to label13 with label14;
        catch java.lang.Throwable from label16 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    private void unfreezePackage(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName;
        android.util.ArrayMap l2, $r0, $r2;
        com.android.server.pm.PackageSetting ps;
        java.lang.Throwable l4, $r4;
        com.android.server.pm.Settings $r1;
        java.lang.Object $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = $r1.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps = (com.android.server.pm.PackageSetting) $r3;

        if ps == null goto label2;

        ps.<com.android.server.pm.PackageSetting: boolean frozen> = 0;

     label2:
        exitmonitor l2;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        l4 = $r4;

        exitmonitor l2;

     label5:
        throw l4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int movePackage(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, volumeUuid, $r6;
        int moveId;
        com.android.server.pm.PackageManagerException e, $r2;
        android.content.Context $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.lang.StringBuilder $r3, $r4, $r5;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r7;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        volumeUuid := @parameter1: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MOVE_PACKAGE", null);

        $r1 = this.<com.android.server.pm.PackageManagerService: java.util.concurrent.atomic.AtomicInteger mNextMoveId>;

        moveId = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

     label1:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void movePackageInternal(java.lang.String,java.lang.String,int)>(packageName, volumeUuid, moveId);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to move ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r6, e);

        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        staticinvoke <com.android.server.pm.PackageManagerService$MoveCallbacks: void access$5700(com.android.server.pm.PackageManagerService$MoveCallbacks,int,int)>($r7, moveId, -6);

     label4:
        return moveId;

        catch com.android.server.pm.PackageManagerException from label1 to label2 with label3;
    }

    private void movePackageInternal(java.lang.String, java.lang.String, int) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, volumeUuid, installerPackageName, packageAbiOverride, seinfo, label, $r13, $r18, $r24, $r49, currentVolumeUuid#4, dataAppName#21;
        int moveId, appId, $i0, $i1, $i2;
        android.os.UserHandle user, tmp$1167726699;
        android.os.storage.StorageManager storage;
        android.content.pm.PackageManager pm;
        java.io.File codeFile, probe#5, probeOat#6, measurePath#14, tmp$1861067039, tmp$1924599984, tmp$1229714652;
        android.content.pm.PackageParser$Package pkg;
        java.lang.Throwable l23, $r45, $r46, $r47, measurePath#7, volume#9;
        com.android.server.pm.PackageManagerService$22 installObserver, tmp$1860113374;
        java.util.concurrent.CountDownLatch installedLatch, tmp$473836399;
        com.android.server.pm.PackageManagerService$OriginInfo origin;
        java.lang.Object $r1, $r5, $r7;
        android.content.Context $r2, $r3;
        android.util.ArrayMap $r4, $r6, $r10, token#1;
        com.android.server.pm.Settings $r9;
        android.content.pm.ApplicationInfo $r11, $r12, $r15, $r20, $r21, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, currentAsec#3, $z12, probeOat#13, $z13;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r23, $r30;
        java.lang.CharSequence $r26;
        byte $b3, probe#11, probe#23;
        long $l4, $l5, $l6, token#8, startFreeBytes#19, sizeBytes#20;
        com.android.server.pm.Installer $r31, startFreeBytes#18;
        com.android.server.pm.PackageManagerService$PackageHandler $r32, $r35;
        android.os.storage.VolumeInfo $r37, volume#15;
        java.lang.StringBuilder $r41, $r50, tmp$1205744180;
        com.android.server.pm.PackageSetting ps#2;
        android.os.Bundle ps#10, tmp$797410933;
        android.content.pm.PackageStats volume#17, tmp$1326394951;
        com.android.server.pm.PackageManagerService$MoveInfo move#22, tmp$811045224;
        android.os.Message dataAppName#24;
        com.android.server.pm.PackageManagerException tmp$305331062, tmp$1174424354, tmp$2052421288, tmp$1081678286, tmp$478741071, tmp$790270827, tmp$126279273, tmp$555655065;
        com.android.server.pm.PackageManagerService$23 tmp$1957393020;
        com.android.server.pm.PackageManagerService$InstallParams tmp$1823296958;
        android.content.pm.IPackageInstallObserver2 tmp$873626339;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        volumeUuid := @parameter1: java.lang.String;

        moveId := @parameter2: int;

        tmp$1167726699 = new android.os.UserHandle;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke tmp$1167726699.<android.os.UserHandle: void <init>(int)>($i0);

        user = tmp$1167726699;

        $r3 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r1 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "android/os/storage/StorageManager");

        storage = (android.os.storage.StorageManager) $r1;

        $r2 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        pm = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r6 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        token#1 = $r6;

        entermonitor $r6;

     label01:
        $r4 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r5;

        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r10 = $r9.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        ps#2 = (com.android.server.pm.PackageSetting) $r7;

        if pkg == null goto label02;

        if ps#2 != null goto label03;

     label02:
        tmp$305331062 = new com.android.server.pm.PackageManagerException;

        specialinvoke tmp$305331062.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, "Missing package");

        throw tmp$305331062;

     label03:
        $r12 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $z1 = virtualinvoke $r12.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z1 == 0 goto label04;

        tmp$1174424354 = new com.android.server.pm.PackageManagerException;

        specialinvoke tmp$1174424354.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-3, "Cannot move system application");

        throw tmp$1174424354;

     label04:
        $r11 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $z0 = virtualinvoke $r11.<android.content.pm.ApplicationInfo: boolean isExternalAsec()>();

        if $z0 == 0 goto label05;

        currentAsec#3 = 1;

        currentVolumeUuid#4 = "primary_physical";

        goto label08;

     label05:
        $r15 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $z2 = virtualinvoke $r15.<android.content.pm.ApplicationInfo: boolean isForwardLocked()>();

        if $z2 == 0 goto label06;

        currentAsec#3 = 1;

        currentVolumeUuid#4 = "forward_locked";

        goto label08;

     label06:
        currentAsec#3 = 0;

        currentVolumeUuid#4 = ps#2.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        tmp$1861067039 = new java.io.File;

        $r13 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        specialinvoke tmp$1861067039.<java.io.File: void <init>(java.lang.String)>($r13);

        probe#5 = tmp$1861067039;

        tmp$1924599984 = new java.io.File;

        specialinvoke tmp$1924599984.<java.io.File: void <init>(java.io.File,java.lang.String)>(probe#5, "oat");

        probeOat#6 = tmp$1924599984;

        $z4 = virtualinvoke probe#5.<java.io.File: boolean isDirectory()>();

        if $z4 == 0 goto label07;

        $z3 = virtualinvoke probeOat#6.<java.io.File: boolean isDirectory()>();

        if $z3 != 0 goto label08;

     label07:
        tmp$2052421288 = new com.android.server.pm.PackageManagerException;

        specialinvoke tmp$2052421288.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-6, "Move only supported for modern cluster style installs");

        throw tmp$2052421288;

     label08:
        $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(currentVolumeUuid#4, volumeUuid);

        if $z6 == 0 goto label09;

        tmp$1081678286 = new com.android.server.pm.PackageManagerException;

        tmp$1205744180 = new java.lang.StringBuilder;

        specialinvoke tmp$1205744180.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke tmp$1205744180.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package already moved to ");

        $r50 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(volumeUuid);

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke tmp$1081678286.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-6, $r49);

        throw tmp$1081678286;

     label09:
        $z5 = ps#2.<com.android.server.pm.PackageSetting: boolean frozen>;

        if $z5 == 0 goto label10;

        tmp$478741071 = new com.android.server.pm.PackageManagerException;

        specialinvoke tmp$478741071.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-7, "Failed to move already frozen package");

        throw tmp$478741071;

     label10:
        ps#2.<com.android.server.pm.PackageSetting: boolean frozen> = 1;

        tmp$1229714652 = new java.io.File;

        $r18 = pkg.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        specialinvoke tmp$1229714652.<java.io.File: void <init>(java.lang.String)>($r18);

        codeFile = tmp$1229714652;

        installerPackageName = ps#2.<com.android.server.pm.PackageSetting: java.lang.String installerPackageName>;

        packageAbiOverride = ps#2.<com.android.server.pm.PackageSetting: java.lang.String cpuAbiOverrideString>;

        $r21 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r21.<android.content.pm.ApplicationInfo: int uid>;

        appId = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        $r20 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        seinfo = $r20.<android.content.pm.ApplicationInfo: java.lang.String seinfo>;

        $r25 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r26 = virtualinvoke pm.<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>($r25);

        label = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r26);

        exitmonitor token#1;

     label11:
        goto label14;

     label12:
        $r45 := @caughtexception;

        measurePath#7 = $r45;

        exitmonitor token#1;

     label13:
        throw measurePath#7;

     label14:
        token#8 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label15:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)>(packageName, appId, "move pkg");

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token#8);

        goto label19;

     label17:
        $r47 := @caughtexception;

        volume#9 = $r47;

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token#8);

        throw volume#9;

     label19:
        tmp$797410933 = new android.os.Bundle;

        specialinvoke tmp$797410933.<android.os.Bundle: void <init>()>();

        ps#10 = tmp$797410933;

        virtualinvoke ps#10.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.intent.extra.PACKAGE_NAME", packageName);

        virtualinvoke ps#10.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.intent.extra.TITLE", label);

        $r23 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        staticinvoke <com.android.server.pm.PackageManagerService$MoveCallbacks: void access$5800(com.android.server.pm.PackageManagerService$MoveCallbacks,int,android.os.Bundle)>($r23, moveId, ps#10);

        $r24 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        $z8 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r24, volumeUuid);

        if $z8 == 0 goto label22;

        probe#11 = 16;

        if currentAsec#3 != 0 goto label20;

        $z12 = 1;

        goto label21;

     label20:
        $z12 = 0;

     label21:
        probeOat#13 = $z12;

        measurePath#14 = staticinvoke <android.os.Environment: java.io.File getDataAppDirectory(java.lang.String)>(volumeUuid);

        goto label28;

     label22:
        $z9 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>("primary_physical", volumeUuid);

        if $z9 == 0 goto label23;

        probe#11 = 8;

        probeOat#13 = 0;

        $r37 = virtualinvoke storage.<android.os.storage.StorageManager: android.os.storage.VolumeInfo getPrimaryPhysicalVolume()>();

        measurePath#14 = virtualinvoke $r37.<android.os.storage.VolumeInfo: java.io.File getPath()>();

        goto label28;

     label23:
        volume#15 = virtualinvoke storage.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByUuid(java.lang.String)>(volumeUuid);

        if volume#15 == null goto label24;

        $i2 = virtualinvoke volume#15.<android.os.storage.VolumeInfo: int getType()>();

        if $i2 != 1 goto label24;

        $z7 = virtualinvoke volume#15.<android.os.storage.VolumeInfo: boolean isMountedWritable()>();

        if $z7 != 0 goto label25;

     label24:
        specialinvoke this.<com.android.server.pm.PackageManagerService: void unfreezePackage(java.lang.String)>(packageName);

        tmp$790270827 = new com.android.server.pm.PackageManagerException;

        specialinvoke tmp$790270827.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-6, "Move location not mounted private volume");

        throw tmp$790270827;

     label25:
        if currentAsec#3 != 0 goto label26;

        $z13 = 1;

        goto label27;

     label26:
        $z13 = 0;

     label27:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z13);

        probe#11 = 16;

        probeOat#13 = 1;

        measurePath#14 = staticinvoke <android.os.Environment: java.io.File getDataAppDirectory(java.lang.String)>(volumeUuid);

     label28:
        tmp$1326394951 = new android.content.pm.PackageStats;

        specialinvoke tmp$1326394951.<android.content.pm.PackageStats: void <init>(java.lang.String,int)>(null, -1);

        volume#17 = tmp$1326394951;

        $r31 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        startFreeBytes#18 = $r31;

        entermonitor $r31;

     label29:
        $z10 = specialinvoke this.<com.android.server.pm.PackageManagerService: boolean getPackageSizeInfoLI(java.lang.String,int,android.content.pm.PackageStats)>(packageName, -1, volume#17);

        if $z10 != 0 goto label30;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void unfreezePackage(java.lang.String)>(packageName);

        tmp$126279273 = new com.android.server.pm.PackageManagerException;

        specialinvoke tmp$126279273.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-6, "Failed to measure package size");

        throw tmp$126279273;

     label30:
        exitmonitor startFreeBytes#18;

     label31:
        goto label34;

     label32:
        $r46 := @caughtexception;

        l23 = $r46;

        exitmonitor startFreeBytes#18;

     label33:
        throw l23;

     label34:
        startFreeBytes#19 = virtualinvoke measurePath#14.<java.io.File: long getFreeSpace()>();

        if probeOat#13 == 0 goto label35;

        $l5 = volume#17.<android.content.pm.PackageStats: long codeSize>;

        $l6 = volume#17.<android.content.pm.PackageStats: long dataSize>;

        sizeBytes#20 = $l5 + $l6;

        goto label36;

     label35:
        sizeBytes#20 = volume#17.<android.content.pm.PackageStats: long codeSize>;

     label36:
        $l4 = virtualinvoke storage.<android.os.storage.StorageManager: long getStorageBytesUntilLow(java.io.File)>(measurePath#14);

        $b3 = sizeBytes#20 cmp $l4;

        if $b3 <= 0 goto label37;

        specialinvoke this.<com.android.server.pm.PackageManagerService: void unfreezePackage(java.lang.String)>(packageName);

        tmp$555655065 = new com.android.server.pm.PackageManagerException;

        specialinvoke tmp$555655065.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-6, "Not enough free space to move");

        throw tmp$555655065;

     label37:
        $r30 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        staticinvoke <com.android.server.pm.PackageManagerService$MoveCallbacks: void access$5700(com.android.server.pm.PackageManagerService$MoveCallbacks,int,int)>($r30, moveId, 10);

        tmp$473836399 = new java.util.concurrent.CountDownLatch;

        specialinvoke tmp$473836399.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        installedLatch = tmp$473836399;

        tmp$1860113374 = new com.android.server.pm.PackageManagerService$22;

        specialinvoke tmp$1860113374.<com.android.server.pm.PackageManagerService$22: void <init>(com.android.server.pm.PackageManagerService,java.util.concurrent.CountDownLatch,java.lang.String,int)>(this, installedLatch, packageName, moveId);

        installObserver = tmp$1860113374;

        if probeOat#13 == 0 goto label38;

        tmp$1957393020 = new com.android.server.pm.PackageManagerService$23;

        specialinvoke tmp$1957393020.<com.android.server.pm.PackageManagerService$23: void <init>(com.android.server.pm.PackageManagerService,java.util.concurrent.CountDownLatch,long,java.io.File,long,int)>(this, installedLatch, startFreeBytes#19, measurePath#14, sizeBytes#20, moveId);

        virtualinvoke tmp$1957393020.<com.android.server.pm.PackageManagerService$23: void start()>();

        dataAppName#21 = virtualinvoke codeFile.<java.io.File: java.lang.String getName()>();

        tmp$811045224 = new com.android.server.pm.PackageManagerService$MoveInfo;

        specialinvoke tmp$811045224.<com.android.server.pm.PackageManagerService$MoveInfo: void <init>(com.android.server.pm.PackageManagerService,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>(this, moveId, currentVolumeUuid#4, volumeUuid, packageName, dataAppName#21, appId, seinfo);

        move#22 = tmp$811045224;

        goto label39;

     label38:
        move#22 = null;

     label39:
        probe#23 = probe#11 | 2;

        $r35 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        dataAppName#24 = virtualinvoke $r35.<com.android.server.pm.PackageManagerService$PackageHandler: android.os.Message obtainMessage(int)>(5);

        origin = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromExistingFile(java.io.File)>(codeFile);

        tmp$1823296958 = new com.android.server.pm.PackageManagerService$InstallParams;

        tmp$873626339 = (android.content.pm.IPackageInstallObserver2) installObserver;

        specialinvoke tmp$1823296958.<com.android.server.pm.PackageManagerService$InstallParams: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$OriginInfo,com.android.server.pm.PackageManagerService$MoveInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,java.lang.String,android.content.pm.VerificationParams,android.os.UserHandle,java.lang.String,java.lang.String[])>(this, origin, move#22, tmp$873626339, probe#23, installerPackageName, volumeUuid, null, user, packageAbiOverride, null);

        dataAppName#24.<android.os.Message: java.lang.Object obj> = tmp$1823296958;

        $r32 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        virtualinvoke $r32.<com.android.server.pm.PackageManagerService$PackageHandler: boolean sendMessage(android.os.Message)>(dataAppName#24);

        return;

        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label29 to label31 with label32;
        catch java.lang.Throwable from label32 to label33 with label32;
    }

    public int movePrimaryStorage(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String volumeUuid;
        int realMoveId;
        android.os.Bundle extras, tmp$2103942253;
        com.android.server.pm.PackageManagerService$24 callback, tmp$731368227;
        android.os.storage.StorageManager storage;
        android.content.Context $r0, $r5;
        java.util.concurrent.atomic.AtomicInteger $r1;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r3;
        java.lang.Object $r6;
        android.content.pm.IPackageMoveObserver tmp$1729895143;

        this := @this: com.android.server.pm.PackageManagerService;

        volumeUuid := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MOVE_PACKAGE", null);

        $r1 = this.<com.android.server.pm.PackageManagerService: java.util.concurrent.atomic.AtomicInteger mNextMoveId>;

        realMoveId = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        tmp$2103942253 = new android.os.Bundle;

        specialinvoke tmp$2103942253.<android.os.Bundle: void <init>()>();

        extras = tmp$2103942253;

        virtualinvoke extras.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.os.storage.extra.FS_UUID", volumeUuid);

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        staticinvoke <com.android.server.pm.PackageManagerService$MoveCallbacks: void access$5800(com.android.server.pm.PackageManagerService$MoveCallbacks,int,android.os.Bundle)>($r3, realMoveId, extras);

        tmp$731368227 = new com.android.server.pm.PackageManagerService$24;

        specialinvoke tmp$731368227.<com.android.server.pm.PackageManagerService$24: void <init>(com.android.server.pm.PackageManagerService,int)>(this, realMoveId);

        callback = tmp$731368227;

        $r5 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "android/os/storage/StorageManager");

        storage = (android.os.storage.StorageManager) $r6;

        tmp$1729895143 = (android.content.pm.IPackageMoveObserver) callback;

        virtualinvoke storage.<android.os.storage.StorageManager: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>(volumeUuid, tmp$1729895143);

        return realMoveId;
    }

    public int getMoveStatus(int)
    {
        com.android.server.pm.PackageManagerService this;
        int moveId, $i0;
        android.content.Context $r0;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r1;
        android.util.SparseIntArray $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        moveId := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        $r2 = staticinvoke <com.android.server.pm.PackageManagerService$MoveCallbacks: android.util.SparseIntArray access$6200(com.android.server.pm.PackageManagerService$MoveCallbacks)>($r1);

        $i0 = virtualinvoke $r2.<android.util.SparseIntArray: int get(int)>(moveId);

        return $i0;
    }

    public void registerMoveCallback(android.content.pm.IPackageMoveObserver)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.IPackageMoveObserver callback;
        android.content.Context $r0;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        callback := @parameter0: android.content.pm.IPackageMoveObserver;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        virtualinvoke $r1.<com.android.server.pm.PackageManagerService$MoveCallbacks: void register(android.content.pm.IPackageMoveObserver)>(callback);

        return;
    }

    public void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)
    {
        com.android.server.pm.PackageManagerService this;
        android.content.pm.IPackageMoveObserver callback;
        android.content.Context $r0;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        callback := @parameter0: android.content.pm.IPackageMoveObserver;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        virtualinvoke $r1.<com.android.server.pm.PackageManagerService$MoveCallbacks: void unregister(android.content.pm.IPackageMoveObserver)>(callback);

        return;
    }

    public boolean setInstallLocation(int)
    {
        com.android.server.pm.PackageManagerService this;
        int loc, $i0;
        android.content.Context $r0, $r1;
        android.content.ContentResolver $r2;

        this := @this: com.android.server.pm.PackageManagerService;

        loc := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS", null);

        $i0 = virtualinvoke this.<com.android.server.pm.PackageManagerService: int getInstallLocation()>();

        if $i0 != loc goto label1;

        return 1;

     label1:
        if loc == 0 goto label2;

        if loc == 1 goto label2;

        if loc != 2 goto label3;

     label2:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, "default_install_location", loc);

        return 1;

     label3:
        return 0;
    }

    public int getInstallLocation()
    {
        com.android.server.pm.PackageManagerService this;
        android.content.Context $r0;
        android.content.ContentResolver $r1;
        int $i0;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "default_install_location", 0);

        return $i0;
    }

    void cleanUpUserLILPw(com.android.server.pm.UserManagerService, int)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.UserManagerService userManager;
        int userHandle;
        android.os.storage.StorageManager storage;
        java.util.Iterator i$;
        android.os.storage.VolumeInfo vol;
        java.lang.String volumeUuid;
        android.util.ArraySet $r0;
        java.lang.Integer $r1;
        com.android.server.pm.Settings $r2;
        com.android.server.pm.PackageManagerService$PendingPackageBroadcasts $r3;
        com.android.server.pm.Installer $r4, $r10;
        android.util.SparseBooleanArray $r5;
        android.content.Context $r6;
        java.lang.Object $r7, $r9;
        java.util.List $r8;
        boolean $z1;

        this := @this: com.android.server.pm.PackageManagerService;

        userManager := @parameter0: com.android.server.pm.UserManagerService;

        userHandle := @parameter1: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(userHandle);

        virtualinvoke $r0.<android.util.ArraySet: boolean remove(java.lang.Object)>($r1);

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r2.<com.android.server.pm.Settings: void removeUserLPw(int)>(userHandle);

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts>;

        virtualinvoke $r3.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void remove(int)>(userHandle);

        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        if $r4 == null goto label2;

        $r6 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "android/os/storage/StorageManager");

        storage = (android.os.storage.StorageManager) $r7;

        $r8 = virtualinvoke storage.<android.os.storage.StorageManager: java.util.List getWritablePrivateVolumes()>();

        i$ = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        vol = (android.os.storage.VolumeInfo) $r9;

        volumeUuid = virtualinvoke vol.<android.os.storage.VolumeInfo: java.lang.String getFsUuid()>();

        $r10 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r10.<com.android.server.pm.Installer: int removeUserDataDirs(java.lang.String,int)>(volumeUuid, userHandle);

        goto label1;

     label2:
        $r5 = this.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mUserNeedsBadging>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void delete(int)>(userHandle);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void removeUnusedPackagesLILPw(com.android.server.pm.UserManagerService,int)>(userManager, userHandle);

        return;
    }

    private void removeUnusedPackagesLILPw(com.android.server.pm.UserManagerService, int)
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.UserManagerService userManager;
        int userHandle, $i0, $i1, $i2, $i3, $i4, i#2;
        boolean DEBUG_CLEAN_APKS, $z0, $z2, keep#1;
        int[] users;
        java.util.Iterator psit;
        com.android.server.pm.PackageSetting ps;
        java.lang.String packageName;
        com.android.server.pm.Settings $r0;
        android.util.ArrayMap $r1;
        java.util.Collection $r2;
        android.content.pm.PackageParser$Package $r3, $r5;
        java.lang.Object $r4;
        com.android.server.pm.PackageManagerService$PackageHandler $r6;
        com.android.server.pm.PackageManagerService$25 $r7;

        this := @this: com.android.server.pm.PackageManagerService;

        userManager := @parameter0: com.android.server.pm.UserManagerService;

        userHandle := @parameter1: int;

        DEBUG_CLEAN_APKS = 0;

        users = virtualinvoke userManager.<com.android.server.pm.UserManagerService: int[] getUserIdsLPr()>();

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r1 = $r0.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.util.Collection values()>();

        psit = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke psit.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r4 = interfaceinvoke psit.<java.util.Iterator: java.lang.Object next()>();

        ps = (com.android.server.pm.PackageSetting) $r4;

        $r3 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        if $r3 != null goto label2;

        goto label1;

     label2:
        $r5 = ps.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$Package pkg>;

        packageName = $r5.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $i0 = ps.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i2 = $i0 & 1;

        if $i2 == 0 goto label3;

        goto label1;

     label3:
        keep#1 = 0;

        i#2 = 0;

     label4:
        $i1 = lengthof users;

        if i#2 >= $i1 goto label6;

        $i3 = users[i#2];

        if $i3 == userHandle goto label5;

        $i4 = users[i#2];

        $z2 = virtualinvoke ps.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>($i4);

        if $z2 == 0 goto label5;

        keep#1 = 1;

        goto label6;

     label5:
        i#2 = i#2 + 1;

        goto label4;

     label6:
        if keep#1 != 0 goto label7;

        $r6 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageHandler mHandler>;

        $r7 = new com.android.server.pm.PackageManagerService$25;

        specialinvoke $r7.<com.android.server.pm.PackageManagerService$25: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int)>(this, packageName, userHandle);

        virtualinvoke $r6.<com.android.server.pm.PackageManagerService$PackageHandler: boolean post(java.lang.Runnable)>($r7);

     label7:
        goto label1;

     label8:
        return;
    }

    void createNewUserLILPw(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userHandle;
        com.android.server.pm.Installer $r0, $r1, $r2;
        com.android.server.pm.Settings $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        userHandle := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        if $r0 == null goto label1;

        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r1.<com.android.server.pm.Installer: int createUserConfig(int)>(userHandle);

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r3.<com.android.server.pm.Settings: void createNewUserLILPw(com.android.server.pm.PackageManagerService,com.android.server.pm.Installer,int)>(this, $r2, userHandle);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void applyFactoryDefaultBrowserLPw(int)>(userHandle);

        specialinvoke this.<com.android.server.pm.PackageManagerService: void primeDomainVerificationsLPw(int)>(userHandle);

     label1:
        return;
    }

    void newUserCreated(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userHandle;
        com.android.server.pm.DefaultPermissionGrantPolicy $r0;

        this := @this: com.android.server.pm.PackageManagerService;

        userHandle := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.DefaultPermissionGrantPolicy mDefaultPermissionPolicy>;

        virtualinvoke $r0.<com.android.server.pm.DefaultPermissionGrantPolicy: void grantDefaultPermissions(int)>(userHandle);

        return;
    }

    public android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity() throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService this;
        android.util.ArrayMap l1, $r1;
        java.lang.Throwable l2, $r4;
        android.content.Context $r0;
        com.android.server.pm.Settings $r2;
        android.content.pm.VerifierDeviceIdentity $r3;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can read the verifier device identity");

        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l1 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = virtualinvoke $r2.<com.android.server.pm.Settings: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentityLPw()>();

        exitmonitor l1;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        l2 = $r4;

        exitmonitor l1;

     label4:
        throw l2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setPermissionEnforced(java.lang.String, boolean)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String permission, $r1, $r6;
        boolean enforced, $z0, $z2;
        android.os.RemoteException l6, $r15;
        java.lang.Throwable l7, $r16, $r17, token#2;
        android.content.Context $r0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        com.android.server.pm.Settings $r7, $r9, $r11, $r14;
        android.util.ArrayMap $r8, am#1;
        java.lang.Boolean $r10, $r12, $r13;
        android.app.IActivityManager am#3;
        long token#4;

        this := @this: com.android.server.pm.PackageManagerService;

        permission := @parameter0: java.lang.String;

        enforced := @parameter1: boolean;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.GRANT_RUNTIME_PERMISSIONS", "setPermissionEnforced");

        $r1 = "android.permission.READ_EXTERNAL_STORAGE";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(permission);

        if $z0 == 0 goto label15;

        $r8 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        am#1 = $r8;

        entermonitor $r8;

     label01:
        $r7 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r10 = $r7.<com.android.server.pm.Settings: java.lang.Boolean mReadExternalStorageEnforced>;

        if $r10 == null goto label02;

        $r14 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r13 = $r14.<com.android.server.pm.Settings: java.lang.Boolean mReadExternalStorageEnforced>;

        $z2 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == enforced goto label03;

     label02:
        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(enforced);

        $r9.<com.android.server.pm.Settings: java.lang.Boolean mReadExternalStorageEnforced> = $r12;

        $r11 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r11.<com.android.server.pm.Settings: void writeLPr()>();

     label03:
        exitmonitor am#1;

     label04:
        goto label07;

     label05:
        $r16 := @caughtexception;

        token#2 = $r16;

        exitmonitor am#1;

     label06:
        throw token#2;

     label07:
        am#3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        if am#3 == null goto label14;

        token#4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label08:
        interfaceinvoke am#3.<android.app.IActivityManager: boolean killProcessesBelowForeground(java.lang.String)>("setPermissionEnforcement");

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token#4);

        goto label14;

     label10:
        $r15 := @caughtexception;

        l6 = $r15;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token#4);

        goto label14;

     label12:
        $r17 := @caughtexception;

        l7 = $r17;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token#4);

        throw l7;

     label14:
        goto label16;

     label15:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No selective enforcement for ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(permission);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label16:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public boolean isPermissionEnforced(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String permission;

        this := @this: com.android.server.pm.PackageManagerService;

        permission := @parameter0: java.lang.String;

        return 1;
    }

    public boolean isStorageLow()
    {
        com.android.server.pm.PackageManagerService this;
        long token;
        com.android.server.storage.DeviceStorageMonitorInternal dsm;
        java.lang.Throwable l5, $r1;
        java.lang.Object $r0;
        boolean l4#1, l4#2;

        this := @this: com.android.server.pm.PackageManagerService;

        token = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r0 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "com/android/server/storage/DeviceStorageMonitorInternal");

        dsm = (com.android.server.storage.DeviceStorageMonitorInternal) $r0;

        if dsm == null goto label3;

        l4#1 = interfaceinvoke dsm.<com.android.server.storage.DeviceStorageMonitorInternal: boolean isMemoryLow()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        return l4#1;

     label3:
        l4#2 = 0;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        return l4#2;

     label5:
        $r1 := @caughtexception;

        l5 = $r1;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        throw l5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.content.pm.IPackageInstaller getPackageInstaller()
    {
        com.android.server.pm.PackageManagerService this;
        com.android.server.pm.PackageInstallerService $r0;
        android.content.pm.IPackageInstaller tmp$783802582;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        tmp$783802582 = (android.content.pm.IPackageInstaller) $r0;

        return tmp$783802582;
    }

    private boolean userNeedsBadging(int)
    {
        com.android.server.pm.PackageManagerService this;
        int userId, index;
        android.content.pm.UserInfo userInfo;
        long token;
        android.util.SparseBooleanArray $r0, $r1, $r3;
        boolean $z0, $z1, b#2;
        com.android.server.pm.UserManagerService $r2;
        java.lang.Throwable $r4, b#1;

        this := @this: com.android.server.pm.PackageManagerService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mUserNeedsBadging>;

        index = virtualinvoke $r0.<android.util.SparseBooleanArray: int indexOfKey(int)>(userId);

        if index >= 0 goto label8;

        token = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = <com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService sUserManager>;

        userInfo = virtualinvoke $r2.<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>(userId);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        goto label5;

     label3:
        $r4 := @caughtexception;

        b#1 = $r4;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        throw b#1;

     label5:
        if userInfo == null goto label6;

        $z1 = virtualinvoke userInfo.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label6;

        b#2 = 1;

        goto label7;

     label6:
        b#2 = 0;

     label7:
        $r3 = this.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mUserNeedsBadging>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void put(int,boolean)>(userId, b#2);

        return b#2;

     label8:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mUserNeedsBadging>;

        $z0 = virtualinvoke $r1.<android.util.SparseBooleanArray: boolean valueAt(int)>(index);

        return $z0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.content.pm.KeySet getKeySetByAlias(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, alias, $r9, $r15;
        android.util.ArrayMap l3, $r0, $r1;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.KeySetManagerService ksms;
        java.lang.Throwable l6, $r14;
        java.lang.Object $r2;
        com.android.server.pm.Settings $r3;
        android.content.pm.KeySet $r4;
        com.android.server.pm.KeySetHandle $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r12, $r13;
        java.lang.IllegalArgumentException $r11;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        alias := @parameter1: java.lang.String;

        if packageName == null goto label1;

        if alias != null goto label2;

     label1:
        return null;

     label2:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label3:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r2;

        if pkg != null goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeySet requested for unknown package:");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r9);

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label4:
        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        ksms = $r3.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        $r4 = new android.content.pm.KeySet;

        $r5 = virtualinvoke ksms.<com.android.server.pm.KeySetManagerService: com.android.server.pm.KeySetHandle getKeySetByAliasAndPackageNameLPr(java.lang.String,java.lang.String)>(packageName, alias);

        specialinvoke $r4.<android.content.pm.KeySet: void <init>(android.os.IBinder)>($r5);

        exitmonitor l3;

     label5:
        return $r4;

     label6:
        $r14 := @caughtexception;

        l6 = $r14;

        exitmonitor l3;

     label7:
        throw l6;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.content.pm.KeySet getSigningKeySet(java.lang.String)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r10, $r15;
        android.util.ArrayMap l2, $r0, $r1;
        android.content.pm.PackageParser$Package pkg;
        com.android.server.pm.KeySetManagerService ksms;
        java.lang.Throwable l5, $r17;
        java.lang.Object $r2;
        android.content.pm.ApplicationInfo $r3;
        int $i0, $i1, $i2;
        com.android.server.pm.Settings $r4;
        android.content.pm.KeySet $r5;
        com.android.server.pm.KeySetHandle $r6;
        java.lang.StringBuilder $r7, $r9, $r11, $r13, $r14, $r16;
        java.lang.SecurityException $r8;
        java.lang.IllegalArgumentException $r12;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        if packageName != null goto label1;

        return null;

     label1:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l2 = $r0;

        entermonitor $r0;

     label2:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r2;

        if pkg != null goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeySet requested for unknown package:");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r10);

        $r12 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r12;

     label3:
        $r3 = pkg.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r3.<android.content.pm.ApplicationInfo: int uid>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == $i1 goto label4;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if 1000 == $i2 goto label4;

        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("May not access signing KeySet of other apps.");

        throw $r8;

     label4:
        $r4 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        ksms = $r4.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        $r5 = new android.content.pm.KeySet;

        $r6 = virtualinvoke ksms.<com.android.server.pm.KeySetManagerService: com.android.server.pm.KeySetHandle getSigningKeySetByPackageNameLPr(java.lang.String)>(packageName);

        specialinvoke $r5.<android.content.pm.KeySet: void <init>(android.os.IBinder)>($r6);

        exitmonitor l2;

     label5:
        return $r5;

     label6:
        $r17 := @caughtexception;

        l5 = $r17;

        exitmonitor l2;

     label7:
        throw l5;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean isPackageSignedByKeySet(java.lang.String, android.content.pm.KeySet)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r8, $r14;
        android.content.pm.KeySet ks;
        android.util.ArrayMap l3, $r0, $r1;
        android.content.pm.PackageParser$Package pkg;
        android.os.IBinder ksh;
        com.android.server.pm.KeySetManagerService ksms;
        java.lang.Throwable l7, $r13;
        java.lang.Object $r2;
        boolean $z0, $z1;
        com.android.server.pm.Settings $r3;
        com.android.server.pm.KeySetHandle $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r11, $r12;
        java.lang.IllegalArgumentException $r10;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        ks := @parameter1: android.content.pm.KeySet;

        if packageName == null goto label1;

        if ks != null goto label2;

     label1:
        return 0;

     label2:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label3:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r2;

        if pkg != null goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeySet requested for unknown package:");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r8);

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label4:
        ksh = virtualinvoke ks.<android.content.pm.KeySet: android.os.IBinder getToken()>();

        $z0 = ksh instanceof com.android.server.pm.KeySetHandle;

        if $z0 == 0 goto label6;

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        ksms = $r3.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        $r4 = (com.android.server.pm.KeySetHandle) ksh;

        $z1 = virtualinvoke ksms.<com.android.server.pm.KeySetManagerService: boolean packageIsSignedByLPr(java.lang.String,com.android.server.pm.KeySetHandle)>(packageName, $r4);

        exitmonitor l3;

     label5:
        return $z1;

     label6:
        exitmonitor l3;

     label7:
        return 0;

     label8:
        $r13 := @caughtexception;

        l7 = $r13;

        exitmonitor l3;

     label9:
        throw l7;

        catch java.lang.Throwable from label3 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public boolean isPackageSignedByKeySetExactly(java.lang.String, android.content.pm.KeySet)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String packageName, $r8, $r14;
        android.content.pm.KeySet ks;
        android.util.ArrayMap l3, $r0, $r1;
        android.content.pm.PackageParser$Package pkg;
        android.os.IBinder ksh;
        com.android.server.pm.KeySetManagerService ksms;
        java.lang.Throwable l7, $r13;
        java.lang.Object $r2;
        boolean $z0, $z1;
        com.android.server.pm.Settings $r3;
        com.android.server.pm.KeySetHandle $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r11, $r12;
        java.lang.IllegalArgumentException $r10;

        this := @this: com.android.server.pm.PackageManagerService;

        packageName := @parameter0: java.lang.String;

        ks := @parameter1: android.content.pm.KeySet;

        if packageName == null goto label1;

        if ks != null goto label2;

     label1:
        return 0;

     label2:
        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label3:
        $r1 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r2;

        if pkg != null goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeySet requested for unknown package:");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r8);

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label4:
        ksh = virtualinvoke ks.<android.content.pm.KeySet: android.os.IBinder getToken()>();

        $z0 = ksh instanceof com.android.server.pm.KeySetHandle;

        if $z0 == 0 goto label6;

        $r3 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        ksms = $r3.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        $r4 = (com.android.server.pm.KeySetHandle) ksh;

        $z1 = virtualinvoke ksms.<com.android.server.pm.KeySetManagerService: boolean packageIsSignedByExactlyLPr(java.lang.String,com.android.server.pm.KeySetHandle)>(packageName, $r4);

        exitmonitor l3;

     label5:
        return $z1;

     label6:
        exitmonitor l3;

     label7:
        return 0;

     label8:
        $r13 := @caughtexception;

        l7 = $r13;

        exitmonitor l3;

     label9:
        throw l7;

        catch java.lang.Throwable from label3 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public void getUsageStatsIfNoPackageUsageInfo()
    {
        com.android.server.pm.PackageManagerService this;
        android.app.usage.UsageStatsManager usm;
        long now, $l0, $l1, $l2;
        java.util.Map stats;
        java.util.Iterator i$;
        java.util.Map$Entry entry;
        java.lang.String packageName;
        android.content.pm.PackageParser$Package pkg;
        android.app.usage.UsageStats usage;
        com.android.server.pm.PackageManagerService$PackageUsage $r0, $r9;
        boolean $z0, $z1;
        android.content.Context $r1;
        java.lang.Object $r2, $r4, $r6, $r7, $r8;
        java.util.Set $r3;
        android.util.ArrayMap $r5;
        java.lang.IllegalStateException $r10;

        this := @this: com.android.server.pm.PackageManagerService;

        $r0 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageUsage mPackageUsage>;

        $z0 = virtualinvoke $r0.<com.android.server.pm.PackageManagerService$PackageUsage: boolean isHistoricalPackageUsageAvailable()>();

        if $z0 != 0 goto label4;

        $r1 = this.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("usagestats");

        usm = (android.app.usage.UsageStatsManager) $r2;

        if usm != null goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("UsageStatsManager must be initialized");

        throw $r10;

     label1:
        now = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = this.<com.android.server.pm.PackageManagerService: long mDexOptLRUThresholdInMills>;

        $l1 = now - $l0;

        stats = virtualinvoke usm.<android.app.usage.UsageStatsManager: java.util.Map queryAndAggregateUsageStats(long,long)>($l1, now);

        $r3 = interfaceinvoke stats.<java.util.Map: java.util.Set entrySet()>();

        i$ = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        packageName = (java.lang.String) $r6;

        $r5 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(packageName);

        pkg = (android.content.pm.PackageParser$Package) $r8;

        if pkg != null goto label3;

        goto label2;

     label3:
        $r7 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        usage = (android.app.usage.UsageStats) $r7;

        $l2 = virtualinvoke usage.<android.app.usage.UsageStats: long getLastTimeUsed()>();

        pkg.<android.content.pm.PackageParser$Package: long mLastPackageUsageTimeInMills> = $l2;

        $r9 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageUsage mPackageUsage>;

        staticinvoke <com.android.server.pm.PackageManagerService$PackageUsage: boolean access$6302(com.android.server.pm.PackageManagerService$PackageUsage,boolean)>($r9, 1);

        goto label2;

     label4:
        return;
    }

    private static void checkDowngrade(android.content.pm.PackageParser$Package, android.content.pm.PackageInfoLite) throws com.android.server.pm.PackageManagerException
    {
        android.content.pm.PackageParser$Package before;
        android.content.pm.PackageInfoLite after;
        java.lang.String splitName, $r15, $r25, $r28;
        int j, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i#1;
        java.lang.String[] $r0, $r1, $r2, $r3;
        boolean $z0;
        int[] $r4, $r5, $r11, $r16;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r17, $r19, $r20, $r21, $r23, $r24, $r26, $r27, $r29, $r30;
        com.android.server.pm.PackageManagerException $r7, $r18, $r22;

        before := @parameter0: android.content.pm.PackageParser$Package;

        after := @parameter1: android.content.pm.PackageInfoLite;

        $i1 = after.<android.content.pm.PackageInfoLite: int versionCode>;

        $i0 = before.<android.content.pm.PackageParser$Package: int mVersionCode>;

        if $i1 >= $i0 goto label1;

        $r22 = new com.android.server.pm.PackageManagerException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update version code ");

        $i13 = after.<android.content.pm.PackageInfoLite: int versionCode>;

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is older than current ");

        $i14 = before.<android.content.pm.PackageParser$Package: int mVersionCode>;

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-25, $r28);

        throw $r22;

     label1:
        $i3 = after.<android.content.pm.PackageInfoLite: int versionCode>;

        $i2 = before.<android.content.pm.PackageParser$Package: int mVersionCode>;

        if $i3 != $i2 goto label5;

        $i5 = after.<android.content.pm.PackageInfoLite: int baseRevisionCode>;

        $i4 = before.<android.content.pm.PackageParser$Package: int baseRevisionCode>;

        if $i5 >= $i4 goto label2;

        $r18 = new com.android.server.pm.PackageManagerException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update base revision code ");

        $i12 = after.<android.content.pm.PackageInfoLite: int baseRevisionCode>;

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is older than current ");

        $i11 = before.<android.content.pm.PackageParser$Package: int baseRevisionCode>;

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-25, $r25);

        throw $r18;

     label2:
        $r0 = after.<android.content.pm.PackageInfoLite: java.lang.String[] splitNames>;

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r0);

        if $z0 != 0 goto label5;

        i#1 = 0;

     label3:
        $r1 = after.<android.content.pm.PackageInfoLite: java.lang.String[] splitNames>;

        $i6 = lengthof $r1;

        if i#1 >= $i6 goto label5;

        $r2 = after.<android.content.pm.PackageInfoLite: java.lang.String[] splitNames>;

        splitName = $r2[i#1];

        $r3 = before.<android.content.pm.PackageParser$Package: java.lang.String[] splitNames>;

        j = staticinvoke <com.android.internal.util.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($r3, splitName);

        if j == -1 goto label4;

        $r5 = after.<android.content.pm.PackageInfoLite: int[] splitRevisionCodes>;

        $i7 = $r5[i#1];

        $r4 = before.<android.content.pm.PackageParser$Package: int[] splitRevisionCodes>;

        $i8 = $r4[j];

        if $i7 >= $i8 goto label4;

        $r7 = new com.android.server.pm.PackageManagerException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update split ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(splitName);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" revision code ");

        $r11 = after.<android.content.pm.PackageInfoLite: int[] splitRevisionCodes>;

        $i9 = $r11[i#1];

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is older than current ");

        $r16 = before.<android.content.pm.PackageParser$Package: int[] splitRevisionCodes>;

        $i10 = $r16[j];

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-25, $r15);

        throw $r7;

     label4:
        i#1 = i#1 + 1;

        goto label3;

     label5:
        return;
    }

    public void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[], int)
    {
        com.android.server.pm.PackageManagerService this;
        java.lang.String[] packageNames;
        int userId;
        android.util.ArrayMap l3, $r0;
        long identity;
        java.lang.Throwable l6, l7, $r2, $r3;
        com.android.server.pm.DefaultPermissionGrantPolicy $r1;

        this := @this: com.android.server.pm.PackageManagerService;

        packageNames := @parameter0: java.lang.String[];

        userId := @parameter1: int;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrPhoneCaller(java.lang.String)>("grantPermissionsToEnabledCarrierApps");

        $r0 = this.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        l3 = $r0;

        entermonitor $r0;

     label01:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r1 = this.<com.android.server.pm.PackageManagerService: com.android.server.pm.DefaultPermissionGrantPolicy mDefaultPermissionPolicy>;

        virtualinvoke $r1.<com.android.server.pm.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToEnabledCarrierAppsLPr(java.lang.String[],int)>(packageNames, userId);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        goto label06;

     label04:
        $r3 := @caughtexception;

        l6 = $r3;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l6;

     label06:
        exitmonitor l3;

     label07:
        goto label10;

     label08:
        $r2 := @caughtexception;

        l7 = $r2;

        exitmonitor l3;

     label09:
        throw l7;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private static void enforceSystemOrPhoneCaller(java.lang.String)
    {
        java.lang.String tag, $r6;
        int callingUid;
        java.lang.SecurityException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;

        tag := @parameter0: java.lang.String;

        callingUid = staticinvoke <android.os.Binder: int getCallingUid()>();

        if callingUid == 1001 goto label1;

        if callingUid == 1000 goto label1;

        $r0 = new java.lang.SecurityException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot call ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tag);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from UID ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(callingUid);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label1:
        return;
    }

    static boolean access$200(android.content.pm.PackageParser$ActivityIntentInfo)
    {
        android.content.pm.PackageParser$ActivityIntentInfo x0;
        boolean $z0;

        x0 := @parameter0: android.content.pm.PackageParser$ActivityIntentInfo;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasValidDomains(android.content.pm.PackageParser$ActivityIntentInfo)>(x0);

        return $z0;
    }

    static com.android.server.pm.PackageManagerService$DefaultContainerConnection access$600(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService x0;
        com.android.server.pm.PackageManagerService$DefaultContainerConnection $r0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r0 = x0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$DefaultContainerConnection mDefContainerConn>;

        return $r0;
    }

    static com.android.internal.app.IMediaContainerService access$702(com.android.server.pm.PackageManagerService, com.android.internal.app.IMediaContainerService)
    {
        com.android.server.pm.PackageManagerService x0;
        com.android.internal.app.IMediaContainerService x1;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: com.android.internal.app.IMediaContainerService;

        x0.<com.android.server.pm.PackageManagerService: com.android.internal.app.IMediaContainerService mContainerService> = x1;

        return x1;
    }

    static com.android.internal.app.IMediaContainerService access$700(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService x0;
        com.android.internal.app.IMediaContainerService $r0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r0 = x0.<com.android.server.pm.PackageManagerService: com.android.internal.app.IMediaContainerService mContainerService>;

        return $r0;
    }

    static void access$800(com.android.server.pm.PackageManagerService, java.lang.String, boolean, java.util.ArrayList, int)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;
        boolean x2;
        java.util.ArrayList x3;
        int x4;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: boolean;

        x3 := @parameter3: java.util.ArrayList;

        x4 := @parameter4: int;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void sendPackageChangedBroadcast(java.lang.String,boolean,java.util.ArrayList,int)>(x1, 1, x3, x4);

        return;
    }

    static void access$900(com.android.server.pm.PackageManagerService, android.content.pm.PackageParser$Package, int, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService x0;
        android.content.pm.PackageParser$Package x1;
        int x2;
        java.lang.String[] x3;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: android.content.pm.PackageParser$Package;

        x2 := @parameter2: int;

        x3 := @parameter3: java.lang.String[];

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void grantRequestedRuntimePermissions(android.content.pm.PackageParser$Package,int,java.lang.String[])>(x1, x2, x3);

        return;
    }

    static boolean access$1000(android.content.pm.PackageParser$Package)
    {
        android.content.pm.PackageParser$Package x0;
        boolean $z0;

        x0 := @parameter0: android.content.pm.PackageParser$Package;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isExternal(android.content.pm.PackageParser$Package)>(x0);

        return $z0;
    }

    static void access$1100(com.android.server.pm.PackageManagerService, boolean, boolean, java.util.ArrayList, int[], android.content.IIntentReceiver)
    {
        com.android.server.pm.PackageManagerService x0;
        boolean x1, x2;
        java.util.ArrayList x3;
        int[] x4;
        android.content.IIntentReceiver x5;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: boolean;

        x2 := @parameter2: boolean;

        x3 := @parameter3: java.util.ArrayList;

        x4 := @parameter4: int[];

        x5 := @parameter5: android.content.IIntentReceiver;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,int[],android.content.IIntentReceiver)>(1, 1, x3, x4, null);

        return;
    }

    static boolean access$1200(com.android.server.pm.PackageManagerService, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;
        int x2;
        boolean $z0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: int;

        $z0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: boolean packageIsBrowser(java.lang.String,int)>(x1, x2);

        return $z0;
    }

    static int access$1300(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService x0;
        int $i0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        $i0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: int getUnknownSourcesSettings()>();

        return $i0;
    }

    static void access$1400(com.android.server.pm.PackageManagerService, java.util.Set)
    {
        com.android.server.pm.PackageManagerService x0;
        java.util.Set x1;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.util.Set;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void unloadAllContainers(java.util.Set)>(x1);

        return;
    }

    static android.util.ArraySet access$1500(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService x0;
        android.util.ArraySet $r0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r0 = x0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers>;

        return $r0;
    }

    static int access$1600(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService x0;
        int $i0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        $i0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: int getDefaultVerificationResponse()>();

        return $i0;
    }

    static void access$1700(com.android.server.pm.PackageManagerService, int, android.net.Uri, int, android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService x0;
        int x1, x3;
        android.net.Uri x2;
        android.os.UserHandle x4;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: int;

        x2 := @parameter2: android.net.Uri;

        x3 := @parameter3: int;

        x4 := @parameter4: android.os.UserHandle;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void broadcastPackageVerified(int,android.net.Uri,int,android.os.UserHandle)>(x1, x2, x3, x4);

        return;
    }

    static void access$1800(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallArgs, int)
    {
        com.android.server.pm.PackageManagerService x0;
        com.android.server.pm.PackageManagerService$InstallArgs x1;
        int x2;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: com.android.server.pm.PackageManagerService$InstallArgs;

        x2 := @parameter2: int;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void processPendingInstall(com.android.server.pm.PackageManagerService$InstallArgs,int)>(x1, x2);

        return;
    }

    static void access$1900(com.android.server.pm.PackageManagerService, int, int, boolean, android.content.pm.PackageParser$Package)
    {
        com.android.server.pm.PackageManagerService x0;
        int x1, x2;
        boolean x3;
        android.content.pm.PackageParser$Package x4;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: int;

        x2 := @parameter2: int;

        x3 := @parameter3: boolean;

        x4 := @parameter4: android.content.pm.PackageParser$Package;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void verifyIntentFiltersIfNeeded(int,int,boolean,android.content.pm.PackageParser$Package)>(x1, x2, x3, x4);

        return;
    }

    static com.android.server.pm.PackageManagerService$IntentFilterVerifier access$2000(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService x0;
        com.android.server.pm.PackageManagerService$IntentFilterVerifier $r0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r0 = x0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier>;

        return $r0;
    }

    static void access$2100(com.android.server.pm.PackageManagerService, java.lang.String)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void reconcileUsers(java.lang.String)>(x1);

        return;
    }

    static void access$2200(com.android.server.pm.PackageManagerService, java.lang.String)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void reconcileApps(java.lang.String)>(x1);

        return;
    }

    static void access$2300(com.android.server.pm.PackageManagerService, android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService x0;
        android.os.storage.VolumeInfo x1;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: android.os.storage.VolumeInfo;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void loadPrivatePackages(android.os.storage.VolumeInfo)>(x1);

        return;
    }

    static void access$2400(com.android.server.pm.PackageManagerService, android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService x0;
        android.os.storage.VolumeInfo x1;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: android.os.storage.VolumeInfo;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void unloadPrivatePackages(android.os.storage.VolumeInfo)>(x1);

        return;
    }

    static void access$2900(com.android.server.pm.PackageManagerService, int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService x0;
        int x1, x2;
        java.lang.String x3;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: int;

        x2 := @parameter2: int;

        x3 := @parameter3: java.lang.String;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void killUid(int,int,java.lang.String)>(x1, x2, "permission grant or revoke changed gids");

        return;
    }

    static boolean access$3100(com.android.server.pm.PackageManagerService, int)
    {
        com.android.server.pm.PackageManagerService x0;
        int x1;
        boolean $z0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: int;

        $z0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: boolean userNeedsBadging(int)>(x1);

        return $z0;
    }

    static java.util.Comparator access$3200()
    {
        java.util.Comparator $r0;

        $r0 = <com.android.server.pm.PackageManagerService: java.util.Comparator mResolvePrioritySorter>;

        return $r0;
    }

    static void access$3300(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallArgs, com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService x0;
        com.android.server.pm.PackageManagerService$InstallArgs x1;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo x2;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: com.android.server.pm.PackageManagerService$InstallArgs;

        x2 := @parameter2: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void installPackageLI(com.android.server.pm.PackageManagerService$InstallArgs,com.android.server.pm.PackageManagerService$PackageInstalledInfo)>(x1, x2);

        return;
    }

    static boolean access$3400(com.android.server.pm.PackageManagerService, java.lang.String, int, android.content.pm.PackageStats)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;
        int x2;
        android.content.pm.PackageStats x3;
        boolean $z0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: int;

        x3 := @parameter3: android.content.pm.PackageStats;

        $z0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: boolean getPackageSizeInfoLI(java.lang.String,int,android.content.pm.PackageStats)>(x1, x2, x3);

        return $z0;
    }

    static long access$3500(com.android.internal.app.IMediaContainerService, java.io.File[]) throws android.os.RemoteException
    {
        com.android.internal.app.IMediaContainerService x0;
        java.io.File[] x1;
        long $l0;

        x0 := @parameter0: com.android.internal.app.IMediaContainerService;

        x1 := @parameter1: java.io.File[];

        $l0 = staticinvoke <com.android.server.pm.PackageManagerService: long calculateDirectorySize(com.android.internal.app.IMediaContainerService,java.io.File[])>(x0, x1);

        return $l0;
    }

    static void access$3600(android.content.pm.PackageParser$Package, android.content.pm.PackageInfoLite) throws com.android.server.pm.PackageManagerException
    {
        android.content.pm.PackageParser$Package x0;
        android.content.pm.PackageInfoLite x1;

        x0 := @parameter0: android.content.pm.PackageParser$Package;

        x1 := @parameter1: android.content.pm.PackageInfoLite;

        staticinvoke <com.android.server.pm.PackageManagerService: void checkDowngrade(android.content.pm.PackageParser$Package,android.content.pm.PackageInfoLite)>(x0, x1);

        return;
    }

    static com.android.server.pm.PackageManagerService$InstallArgs access$3700(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService x0;
        com.android.server.pm.PackageManagerService$InstallParams x1;
        com.android.server.pm.PackageManagerService$InstallArgs $r0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: com.android.server.pm.PackageManagerService$InstallParams;

        $r0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgs(com.android.server.pm.PackageManagerService$InstallParams)>(x1);

        return $r0;
    }

    static boolean access$3800(com.android.server.pm.PackageManagerService, int, int)
    {
        com.android.server.pm.PackageManagerService x0;
        int x1, x2;
        boolean $z0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: int;

        x2 := @parameter2: int;

        $z0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: boolean isVerificationEnabled(int,int)>(x1, x2);

        return $z0;
    }

    static int access$3908(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService x0;
        int $i0, $i1;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        $i0 = x0.<com.android.server.pm.PackageManagerService: int mPendingVerificationToken>;

        $i1 = $i0 + 1;

        x0.<com.android.server.pm.PackageManagerService: int mPendingVerificationToken> = $i1;

        return $i0;
    }

    static java.util.List access$4000(com.android.server.pm.PackageManagerService, android.content.pm.PackageInfoLite, java.util.List, com.android.server.pm.PackageVerificationState)
    {
        com.android.server.pm.PackageManagerService x0;
        android.content.pm.PackageInfoLite x1;
        java.util.List x2, $r0;
        com.android.server.pm.PackageVerificationState x3;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: android.content.pm.PackageInfoLite;

        x2 := @parameter2: java.util.List;

        x3 := @parameter3: com.android.server.pm.PackageVerificationState;

        $r0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: java.util.List matchVerifiers(android.content.pm.PackageInfoLite,java.util.List,com.android.server.pm.PackageVerificationState)>(x1, x2, x3);

        return $r0;
    }

    static android.content.ComponentName access$4100(com.android.server.pm.PackageManagerService, java.lang.String, java.util.List)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;
        java.util.List x2;
        android.content.ComponentName $r0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: java.util.List;

        $r0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: android.content.ComponentName matchComponentForVerifier(java.lang.String,java.util.List)>(x1, x2);

        return $r0;
    }

    static long access$4200(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService x0;
        long $l0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        $l0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: long getVerificationTimeout()>();

        return $l0;
    }

    static java.io.File access$4400(com.android.server.pm.PackageManagerService, java.io.File, java.lang.String)
    {
        com.android.server.pm.PackageManagerService x0;
        java.io.File x1, $r0;
        java.lang.String x2;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.io.File;

        x2 := @parameter2: java.lang.String;

        $r0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: java.io.File getNextCodePath(java.io.File,java.lang.String)>(x1, x2);

        return $r0;
    }

    static void access$4500(com.android.server.pm.PackageManagerService, java.util.List, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService x0;
        java.util.List x1;
        java.lang.String[] x2;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.util.List;

        x2 := @parameter2: java.lang.String[];

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void removeDexFiles(java.util.List,java.lang.String[])>(x1, x2);

        return;
    }

    static boolean access$4600(com.android.server.pm.PackageManagerService, java.lang.String)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;
        boolean $z0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        $z0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: boolean isAsecExternal(java.lang.String)>(x1);

        return $z0;
    }

    static java.lang.String access$4700(java.lang.String, com.android.server.pm.PackageSetting)
    {
        java.lang.String x0, $r0;
        com.android.server.pm.PackageSetting x1;

        x0 := @parameter0: java.lang.String;

        x1 := @parameter1: com.android.server.pm.PackageSetting;

        $r0 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String deriveAbiOverride(java.lang.String,com.android.server.pm.PackageSetting)>(x0, x1);

        return $r0;
    }

    static java.lang.String access$4800(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String x0, x1, x2, $r0;

        x0 := @parameter0: java.lang.String;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: java.lang.String;

        $r0 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getNextCodePath(java.lang.String,java.lang.String,java.lang.String)>(x0, x1, x2);

        return $r0;
    }

    static int access$4900(com.android.server.pm.PackageManagerService, java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1, x2;
        int $i0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: java.lang.String;

        $i0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: int removeDataDirsLI(java.lang.String,java.lang.String)>(x1, x2);

        return $i0;
    }

    static int access$5000(com.android.server.pm.PackageManagerService, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;
        int x2, x3, $i0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: int;

        x3 := @parameter3: int;

        $i0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,int,int)>(x1, x2, x3);

        return $i0;
    }

    static void access$5100(com.android.server.pm.PackageManagerService, java.lang.String, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1, x3;
        int x2;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: int;

        x3 := @parameter3: java.lang.String;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)>(x1, x2, "permission grant or revoke changed gids");

        return;
    }

    static boolean access$5300(com.android.server.pm.PackageManagerService, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;
        int x2;
        boolean $z0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: int;

        $z0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: boolean clearApplicationUserDataLI(java.lang.String,int)>(x1, x2);

        return $z0;
    }

    static void access$5400(com.android.server.pm.PackageManagerService, java.lang.String, int, boolean)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;
        int x2;
        boolean x3;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: int;

        x3 := @parameter3: boolean;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void clearExternalStorageDataSync(java.lang.String,int,boolean)>(x1, x2, x3);

        return;
    }

    static boolean access$5500(com.android.server.pm.PackageManagerService, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;
        int x2;
        boolean $z0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: int;

        $z0 = specialinvoke x0.<com.android.server.pm.PackageManagerService: boolean deleteApplicationCacheFilesLI(java.lang.String,int)>(x1, x2);

        return $z0;
    }

    static void access$5600(com.android.server.pm.PackageManagerService, boolean, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService x0;
        boolean x1, x2, x3;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: boolean;

        x2 := @parameter2: boolean;

        x3 := @parameter3: boolean;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void updateExternalMediaStatusInner(boolean,boolean,boolean)>(x1, x2, x3);

        return;
    }

    static void access$5900(com.android.server.pm.PackageManagerService, java.lang.String)
    {
        com.android.server.pm.PackageManagerService x0;
        java.lang.String x1;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        x1 := @parameter1: java.lang.String;

        specialinvoke x0.<com.android.server.pm.PackageManagerService: void unfreezePackage(java.lang.String)>(x1);

        return;
    }

    static com.android.server.pm.PackageManagerService$MoveCallbacks access$6000(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService x0;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r0;

        x0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r0 = x0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        return $r0;
    }

    static void <clinit>()
    {
        int[] $r0;
        android.content.ComponentName $r1;
        android.content.Intent $r2, $r3, $r5, $r7;
        android.net.Uri $r8;
        com.android.server.pm.PackageManagerService$6 $r10;
        com.android.server.pm.PackageManagerService$7 $r11;

        <com.android.server.pm.PackageManagerService: java.lang.String SD_ENCRYPTION_ALGORITHM> = "AES";

        <com.android.server.pm.PackageManagerService: java.lang.String SD_ENCRYPTION_KEYSTORE_NAME> = "AppsOnSD";

        <com.android.server.pm.PackageManagerService: boolean DEBUG_SD_INSTALL> = 0;

        <com.android.server.pm.PackageManagerService: int UPDATE_PERMISSIONS_REPLACE_ALL> = 4;

        <com.android.server.pm.PackageManagerService: int UPDATE_PERMISSIONS_REPLACE_PKG> = 2;

        <com.android.server.pm.PackageManagerService: int UPDATE_PERMISSIONS_ALL> = 1;

        <com.android.server.pm.PackageManagerService: java.lang.String TAG_INTENT_FILTER_VERIFICATION> = "iv";

        <com.android.server.pm.PackageManagerService: java.lang.String TAG_DEFAULT_APPS> = "da";

        <com.android.server.pm.PackageManagerService: java.lang.String TAG_PREFERRED_BACKUP> = "pa";

        <com.android.server.pm.PackageManagerService: int BROADCAST_DELAY> = 10000;

        <com.android.server.pm.PackageManagerService: int WRITE_SETTINGS_DELAY> = 10000;

        <com.android.server.pm.PackageManagerService: int INTENT_FILTER_VERIFIED> = 18;

        <com.android.server.pm.PackageManagerService: int START_INTENT_FILTER_VERIFICATIONS> = 17;

        <com.android.server.pm.PackageManagerService: int CHECK_PENDING_VERIFICATION> = 16;

        <com.android.server.pm.PackageManagerService: int PACKAGE_VERIFIED> = 15;

        <com.android.server.pm.PackageManagerService: int WRITE_PACKAGE_RESTRICTIONS> = 14;

        <com.android.server.pm.PackageManagerService: int WRITE_SETTINGS> = 13;

        <com.android.server.pm.PackageManagerService: int UPDATED_MEDIA_STATUS> = 12;

        <com.android.server.pm.PackageManagerService: int MCS_GIVE_UP> = 11;

        <com.android.server.pm.PackageManagerService: int MCS_RECONNECT> = 10;

        <com.android.server.pm.PackageManagerService: int POST_INSTALL> = 9;

        <com.android.server.pm.PackageManagerService: int FIND_INSTALL_LOC> = 8;

        <com.android.server.pm.PackageManagerService: int START_CLEANING_PACKAGE> = 7;

        <com.android.server.pm.PackageManagerService: int MCS_UNBIND> = 6;

        <com.android.server.pm.PackageManagerService: int INIT_COPY> = 5;

        <com.android.server.pm.PackageManagerService: int END_COPY> = 4;

        <com.android.server.pm.PackageManagerService: int MCS_BOUND> = 3;

        <com.android.server.pm.PackageManagerService: int SEND_PENDING_BROADCAST> = 1;

        <com.android.server.pm.PackageManagerService: int GRANT_UPGRADE> = 5;

        <com.android.server.pm.PackageManagerService: int GRANT_RUNTIME> = 4;

        <com.android.server.pm.PackageManagerService: int GRANT_INSTALL_LEGACY> = 3;

        <com.android.server.pm.PackageManagerService: int GRANT_INSTALL> = 2;

        <com.android.server.pm.PackageManagerService: int GRANT_DENIED> = 1;

        <com.android.server.pm.PackageManagerService: java.lang.String VENDOR_OVERLAY_DIR> = "/vendor/overlay";

        <com.android.server.pm.PackageManagerService: java.lang.String PACKAGE_MIME_TYPE> = "application/vnd.android.package-archive";

        <com.android.server.pm.PackageManagerService: java.lang.String KILL_APP_REASON_PERMISSIONS_REVOKED> = "permissions revoked";

        <com.android.server.pm.PackageManagerService: java.lang.String KILL_APP_REASON_GIDS_CHANGED> = "permission grant or revoke changed gids";

        <com.android.server.pm.PackageManagerService: java.lang.String DEFAULT_CONTAINER_PACKAGE> = "com.android.defcontainer";

        <com.android.server.pm.PackageManagerService: int DEFAULT_VERIFICATION_RESPONSE> = 1;

        <com.android.server.pm.PackageManagerService: long DEFAULT_VERIFICATION_TIMEOUT> = 10000L;

        <com.android.server.pm.PackageManagerService: boolean DEFAULT_VERIFY_ENABLE> = 1;

        <com.android.server.pm.PackageManagerService: long DEFAULT_MANDATORY_FSTRIM_INTERVAL> = 259200000L;

        <com.android.server.pm.PackageManagerService: long WATCHDOG_TIMEOUT> = 600000L;

        <com.android.server.pm.PackageManagerService: int REMOVE_CHATTY> = 65536;

        <com.android.server.pm.PackageManagerService: int SCAN_INITIAL> = 16384;

        <com.android.server.pm.PackageManagerService: int SCAN_MOVE> = 8192;

        <com.android.server.pm.PackageManagerService: int SCAN_REQUIRE_KNOWN> = 4096;

        <com.android.server.pm.PackageManagerService: int SCAN_REPLACING> = 2048;

        <com.android.server.pm.PackageManagerService: int SCAN_DELETE_DATA_ON_FAILURES> = 1024;

        <com.android.server.pm.PackageManagerService: int SCAN_TRUSTED_OVERLAY> = 512;

        <com.android.server.pm.PackageManagerService: int SCAN_BOOTING> = 256;

        <com.android.server.pm.PackageManagerService: int SCAN_DEFER_DEX> = 128;

        <com.android.server.pm.PackageManagerService: int SCAN_UPDATE_TIME> = 64;

        <com.android.server.pm.PackageManagerService: int SCAN_NO_PATHS> = 32;

        <com.android.server.pm.PackageManagerService: int SCAN_NEW_INSTALL> = 16;

        <com.android.server.pm.PackageManagerService: int SCAN_UPDATE_SIGNATURE> = 8;

        <com.android.server.pm.PackageManagerService: int SCAN_FORCE_DEX> = 4;

        <com.android.server.pm.PackageManagerService: int SCAN_NO_DEX> = 2;

        <com.android.server.pm.PackageManagerService: java.lang.String INSTALL_PACKAGE_SUFFIX> = "-";

        <com.android.server.pm.PackageManagerService: int MAX_PERMISSION_TREE_FOOTPRINT> = 32768;

        <com.android.server.pm.PackageManagerService: int SHELL_UID> = 2000;

        <com.android.server.pm.PackageManagerService: int BLUETOOTH_UID> = 1002;

        <com.android.server.pm.PackageManagerService: int NFC_UID> = 1027;

        <com.android.server.pm.PackageManagerService: int LOG_UID> = 1007;

        <com.android.server.pm.PackageManagerService: int RADIO_UID> = 1001;

        <com.android.server.pm.PackageManagerService: boolean CLEAR_RUNTIME_PERMISSIONS_ON_UPGRADE> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_ABI_SELECTION> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_DEXOPT> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_VERIFY> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_PACKAGE_SCANNING> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_INTENT_MATCHING> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_PACKAGE_INFO> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_SHOW_INFO> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_BROADCASTS> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_REMOVE> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTALL> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_BACKUP> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_DOMAIN_VERIFICATION> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_UPGRADE> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_PREFERRED> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_SETTINGS> = 0;

        <com.android.server.pm.PackageManagerService: java.lang.String TAG> = "PackageManager";

        $r0 = newarray (int)[0];

        <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY> = $r0;

        $r1 = new android.content.ComponentName;

        specialinvoke $r1.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.defcontainer", "com.android.defcontainer.DefaultContainerService");

        <com.android.server.pm.PackageManagerService: android.content.ComponentName DEFAULT_CONTAINER_COMPONENT> = $r1;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        <com.android.server.pm.PackageManagerService: android.content.Intent sBrowserIntent> = $r2;

        $r3 = <com.android.server.pm.PackageManagerService: android.content.Intent sBrowserIntent>;

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.VIEW");

        $r5 = <com.android.server.pm.PackageManagerService: android.content.Intent sBrowserIntent>;

        virtualinvoke $r5.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.BROWSABLE");

        $r7 = <com.android.server.pm.PackageManagerService: android.content.Intent sBrowserIntent>;

        $r8 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("http:");

        virtualinvoke $r7.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r8);

        $r10 = new com.android.server.pm.PackageManagerService$6;

        specialinvoke $r10.<com.android.server.pm.PackageManagerService$6: void <init>()>();

        <com.android.server.pm.PackageManagerService: java.util.Comparator mResolvePrioritySorter> = $r10;

        $r11 = new com.android.server.pm.PackageManagerService$7;

        specialinvoke $r11.<com.android.server.pm.PackageManagerService$7: void <init>()>();

        <com.android.server.pm.PackageManagerService: java.util.Comparator mProviderInitOrderSorter> = $r11;

        return;
    }
}
