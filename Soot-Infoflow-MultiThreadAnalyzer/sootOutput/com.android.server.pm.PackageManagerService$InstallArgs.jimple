abstract class com.android.server.pm.PackageManagerService$InstallArgs extends java.lang.Object
{
    final com.android.server.pm.PackageManagerService$OriginInfo origin;
    final com.android.server.pm.PackageManagerService$MoveInfo move;
    final android.content.pm.IPackageInstallObserver2 observer;
    final int installFlags;
    final java.lang.String installerPackageName;
    final java.lang.String volumeUuid;
    final android.content.pm.ManifestDigest manifestDigest;
    final android.os.UserHandle user;
    final java.lang.String abiOverride;
    final java.lang.String[] installGrantPermissions;
    java.lang.String[] instructionSets;

    void <init>(com.android.server.pm.PackageManagerService$OriginInfo, com.android.server.pm.PackageManagerService$MoveInfo, android.content.pm.IPackageInstallObserver2, int, java.lang.String, java.lang.String, android.content.pm.ManifestDigest, android.os.UserHandle, java.lang.String[], java.lang.String, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService$InstallArgs this;
        com.android.server.pm.PackageManagerService$OriginInfo origin;
        com.android.server.pm.PackageManagerService$MoveInfo move;
        android.content.pm.IPackageInstallObserver2 observer;
        int installFlags;
        java.lang.String installerPackageName, volumeUuid, abiOverride;
        android.content.pm.ManifestDigest manifestDigest;
        android.os.UserHandle user;
        java.lang.String[] instructionSets, installGrantPermissions;

        this := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        origin := @parameter0: com.android.server.pm.PackageManagerService$OriginInfo;

        move := @parameter1: com.android.server.pm.PackageManagerService$MoveInfo;

        observer := @parameter2: android.content.pm.IPackageInstallObserver2;

        installFlags := @parameter3: int;

        installerPackageName := @parameter4: java.lang.String;

        volumeUuid := @parameter5: java.lang.String;

        manifestDigest := @parameter6: android.content.pm.ManifestDigest;

        user := @parameter7: android.os.UserHandle;

        instructionSets := @parameter8: java.lang.String[];

        abiOverride := @parameter9: java.lang.String;

        installGrantPermissions := @parameter10: java.lang.String[];

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin> = origin;

        this.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$MoveInfo move> = null;

        this.<com.android.server.pm.PackageManagerService$InstallArgs: int installFlags> = installFlags;

        this.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.IPackageInstallObserver2 observer> = null;

        this.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String installerPackageName> = null;

        this.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String volumeUuid> = null;

        this.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.ManifestDigest manifestDigest> = null;

        this.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user> = null;

        this.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String[] instructionSets> = instructionSets;

        this.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String abiOverride> = null;

        this.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String[] installGrantPermissions> = null;

        return;
    }

    abstract int copyApk(com.android.internal.app.IMediaContainerService, boolean) throws android.os.RemoteException;

    abstract int doPreInstall(int);

    abstract boolean doRename(int, android.content.pm.PackageParser$Package, java.lang.String);

    abstract int doPostInstall(int, int);

    abstract java.lang.String getCodePath();

    abstract java.lang.String getResourcePath();

    abstract void cleanUpResourcesLI();

    abstract boolean doPostDeleteLI(boolean);

    int doPreCopy()
    {
        com.android.server.pm.PackageManagerService$InstallArgs this;

        this := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        return 1;
    }

    int doPostCopy(int)
    {
        com.android.server.pm.PackageManagerService$InstallArgs this;
        int uid;

        this := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        uid := @parameter0: int;

        return 1;
    }

    protected boolean isFwdLocked()
    {
        com.android.server.pm.PackageManagerService$InstallArgs this;
        int $i0, $i1;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        $i0 = this.<com.android.server.pm.PackageManagerService$InstallArgs: int installFlags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean isExternalAsec()
    {
        com.android.server.pm.PackageManagerService$InstallArgs this;
        int $i0, $i1;
        boolean $z0;

        this := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        $i0 = this.<com.android.server.pm.PackageManagerService$InstallArgs: int installFlags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    android.os.UserHandle getUser()
    {
        com.android.server.pm.PackageManagerService$InstallArgs this;
        android.os.UserHandle $r0;

        this := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        $r0 = this.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        return $r0;
    }
}
