public class com.android.server.LocationManagerService extends android.location.ILocationManager$Stub
{
    private static final java.lang.String TAG;
    public static final boolean D;
    private static final java.lang.String WAKELOCK_KEY;
    private static final int RESOLUTION_LEVEL_NONE;
    private static final int RESOLUTION_LEVEL_COARSE;
    private static final int RESOLUTION_LEVEL_FINE;
    private static final java.lang.String ACCESS_MOCK_LOCATION;
    private static final java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS;
    private static final java.lang.String INSTALL_LOCATION_PROVIDER;
    private static final java.lang.String NETWORK_LOCATION_SERVICE_ACTION;
    private static final java.lang.String FUSED_LOCATION_SERVICE_ACTION;
    private static final int MSG_LOCATION_CHANGED;
    private static final long NANOS_PER_MILLI;
    private static final long HIGH_POWER_INTERVAL_MS;
    private static final int MAX_PROVIDER_SCHEDULING_JITTER_MS;
    private static final android.location.LocationRequest DEFAULT_LOCATION_REQUEST;
    private final android.content.Context mContext;
    private final android.app.AppOpsManager mAppOps;
    private final java.lang.Object mLock;
    private com.android.server.location.LocationFudger mLocationFudger;
    private com.android.server.location.GeofenceManager mGeofenceManager;
    private android.content.pm.PackageManager mPackageManager;
    private android.os.PowerManager mPowerManager;
    private android.os.UserManager mUserManager;
    private com.android.server.location.GeocoderProxy mGeocodeProvider;
    private android.location.IGpsStatusProvider mGpsStatusProvider;
    private android.location.INetInitiatedListener mNetInitiatedListener;
    private com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler;
    private com.android.server.location.PassiveProvider mPassiveProvider;
    private com.android.server.location.LocationBlacklist mBlacklist;
    private com.android.server.location.GpsMeasurementsProvider mGpsMeasurementsProvider;
    private com.android.server.location.GpsNavigationMessageProvider mGpsNavigationMessageProvider;
    private final java.util.Set mEnabledProviders;
    private final java.util.Set mDisabledProviders;
    private final java.util.HashMap mMockProviders;
    private final java.util.HashMap mReceivers;
    private final java.util.ArrayList mProviders;
    private final java.util.HashMap mRealProviders;
    private final java.util.HashMap mProvidersByName;
    private final java.util.HashMap mRecordsByProvider;
    private final com.android.server.location.LocationRequestStatistics mRequestStatistics;
    private final java.util.HashMap mLastLocation;
    private final java.util.HashMap mLastLocationCoarseInterval;
    private final java.util.ArrayList mProxyProviders;
    private int mCurrentUserId;
    private int[] mCurrentUserProfiles;
    private final com.android.internal.content.PackageMonitor mPackageMonitor;

    public void <init>(android.content.Context)
    {
        com.android.server.LocationManagerService this;
        android.content.Context context;
        java.lang.Object $r0, $r14;
        java.util.HashSet $r1, $r2;
        java.util.HashMap $r3, $r4, $r6, $r7, $r8, $r10, $r11;
        java.util.ArrayList $r5, $r12;
        com.android.server.location.LocationRequestStatistics $r9;
        int[] $r13;
        com.android.server.LocationManagerService$4 $r15;
        boolean $z0;
        android.app.AppOpsManager $r16;

        this := @this: com.android.server.LocationManagerService;

        context := @parameter0: android.content.Context;

        specialinvoke this.<android.location.ILocationManager$Stub: void <init>()>();

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        this.<com.android.server.LocationManagerService: java.lang.Object mLock> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        this.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        this.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        this.<com.android.server.LocationManagerService: java.util.HashMap mReceivers> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        this.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        this.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider> = $r8;

        $r9 = new com.android.server.location.LocationRequestStatistics;

        specialinvoke $r9.<com.android.server.location.LocationRequestStatistics: void <init>()>();

        this.<com.android.server.LocationManagerService: com.android.server.location.LocationRequestStatistics mRequestStatistics> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        this.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders> = $r12;

        this.<com.android.server.LocationManagerService: int mCurrentUserId> = 0;

        $r13 = newarray (int)[1];

        $r13[0] = 0;

        this.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles> = $r13;

        $r15 = new com.android.server.LocationManagerService$4;

        specialinvoke $r15.<com.android.server.LocationManagerService$4: void <init>(com.android.server.LocationManagerService)>(this);

        this.<com.android.server.LocationManagerService: com.android.internal.content.PackageMonitor mPackageMonitor> = $r15;

        this.<com.android.server.LocationManagerService: android.content.Context mContext> = context;

        $r14 = virtualinvoke context.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r16 = (android.app.AppOpsManager) $r14;

        this.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps> = $r16;

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", "Constructed");

     label1:
        return;
    }

    public void systemRunning()
    {
        com.android.server.LocationManagerService this;
        com.android.server.LocationManagerService$1 callback, $r20;
        java.lang.Throwable l3, $r39;
        java.lang.Object $r0, $r4, $r21, intentFilter#1;
        boolean $z0;
        android.content.Context $r1, $r3, $r12, $r13, $r17, $r22, $r24, $r30, $r33;
        android.content.pm.PackageManager $r2;
        android.os.PowerManager $r5;
        com.android.server.LocationManagerService$LocationWorkerHandler $r6, $r10, $r14, $r26, $r31, $r37;
        com.android.internal.os.BackgroundThread $r7;
        android.os.Looper $r8, $r34;
        com.android.server.location.LocationFudger $r9;
        com.android.server.location.LocationBlacklist $r11, $r16, $r18;
        com.android.server.location.GeofenceManager $r15;
        android.app.AppOpsManager $r19;
        int $i0;
        android.os.UserManager $r23;
        com.android.server.LocationManagerService$2 $r25;
        android.content.ContentResolver $r27;
        android.net.Uri $r28;
        com.android.internal.content.PackageMonitor $r29;
        com.android.server.LocationManagerService$3 $r32;
        android.content.IntentFilter $r35, intentFilter#2;
        android.os.UserHandle $r38;

        this := @this: com.android.server.LocationManagerService;

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        intentFilter#1 = $r0;

        entermonitor $r0;

     label1:
        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", "systemReady()");

     label2:
        $r1 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        this.<com.android.server.LocationManagerService: android.content.pm.PackageManager mPackageManager> = $r2;

        $r3 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r5 = (android.os.PowerManager) $r4;

        this.<com.android.server.LocationManagerService: android.os.PowerManager mPowerManager> = $r5;

        $r6 = new com.android.server.LocationManagerService$LocationWorkerHandler;

        $r7 = staticinvoke <com.android.internal.os.BackgroundThread: com.android.internal.os.BackgroundThread get()>();

        $r8 = virtualinvoke $r7.<com.android.internal.os.BackgroundThread: android.os.Looper getLooper()>();

        specialinvoke $r6.<com.android.server.LocationManagerService$LocationWorkerHandler: void <init>(com.android.server.LocationManagerService,android.os.Looper)>(this, $r8);

        this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler> = $r6;

        $r9 = new com.android.server.location.LocationFudger;

        $r12 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r10 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        specialinvoke $r9.<com.android.server.location.LocationFudger: void <init>(android.content.Context,android.os.Handler)>($r12, $r10);

        this.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger> = $r9;

        $r11 = new com.android.server.location.LocationBlacklist;

        $r13 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r14 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        specialinvoke $r11.<com.android.server.location.LocationBlacklist: void <init>(android.content.Context,android.os.Handler)>($r13, $r14);

        this.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist> = $r11;

        $r16 = this.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        virtualinvoke $r16.<com.android.server.location.LocationBlacklist: void init()>();

        $r15 = new com.android.server.location.GeofenceManager;

        $r17 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r18 = this.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        specialinvoke $r15.<com.android.server.location.GeofenceManager: void <init>(android.content.Context,com.android.server.location.LocationBlacklist)>($r17, $r18);

        this.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager> = $r15;

        $r20 = new com.android.server.LocationManagerService$1;

        specialinvoke $r20.<com.android.server.LocationManagerService$1: void <init>(com.android.server.LocationManagerService)>(this);

        callback = $r20;

        $r19 = this.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r19.<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>(0, null, callback);

        $r22 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r21 = virtualinvoke $r22.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r23 = (android.os.UserManager) $r21;

        this.<com.android.server.LocationManagerService: android.os.UserManager mUserManager> = $r23;

        $i0 = this.<com.android.server.LocationManagerService: int mCurrentUserId>;

        virtualinvoke this.<com.android.server.LocationManagerService: void updateUserProfiles(int)>($i0);

        specialinvoke this.<com.android.server.LocationManagerService: void loadProvidersLocked()>();

        specialinvoke this.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor intentFilter#1;

     label3:
        goto label6;

     label4:
        $r39 := @caughtexception;

        l3 = $r39;

        exitmonitor intentFilter#1;

     label5:
        throw l3;

     label6:
        $r24 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r27 = virtualinvoke $r24.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r28 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("location_providers_allowed");

        $r25 = new com.android.server.LocationManagerService$2;

        $r26 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        specialinvoke $r25.<com.android.server.LocationManagerService$2: void <init>(com.android.server.LocationManagerService,android.os.Handler)>(this, $r26);

        virtualinvoke $r27.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r28, 1, $r25, -1);

        $r29 = this.<com.android.server.LocationManagerService: com.android.internal.content.PackageMonitor mPackageMonitor>;

        $r30 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r31 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r34 = virtualinvoke $r31.<com.android.server.LocationManagerService$LocationWorkerHandler: android.os.Looper getLooper()>();

        virtualinvoke $r29.<com.android.internal.content.PackageMonitor: void register(android.content.Context,android.os.Looper,boolean)>($r30, $r34, 1);

        $r35 = new android.content.IntentFilter;

        specialinvoke $r35.<android.content.IntentFilter: void <init>()>();

        intentFilter#2 = $r35;

        virtualinvoke intentFilter#2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        virtualinvoke intentFilter#2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.MANAGED_PROFILE_ADDED");

        virtualinvoke intentFilter#2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.MANAGED_PROFILE_REMOVED");

        $r33 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r32 = new com.android.server.LocationManagerService$3;

        specialinvoke $r32.<com.android.server.LocationManagerService$3: void <init>(com.android.server.LocationManagerService)>(this);

        $r38 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r37 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r33.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r32, $r38, intentFilter#2, null, $r37);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void updateUserProfiles(int)
    {
        com.android.server.LocationManagerService this;
        int currentUserId, $i0, $i1, $i2, i#1;
        java.util.List profiles;
        java.lang.Object l3, $r1, $r5;
        java.lang.Throwable l5, $r7;
        android.os.UserManager $r0;
        int[] $r2, $r3, $r4;
        android.content.pm.UserInfo $r6;

        this := @this: com.android.server.LocationManagerService;

        currentUserId := @parameter0: int;

        $r0 = this.<com.android.server.LocationManagerService: android.os.UserManager mUserManager>;

        profiles = virtualinvoke $r0.<android.os.UserManager: java.util.List getProfiles(int)>(currentUserId);

        $r1 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l3 = $r1;

        entermonitor $r1;

     label1:
        $i0 = interfaceinvoke profiles.<java.util.List: int size()>();

        $r2 = newarray (int)[$i0];

        this.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles> = $r2;

        i#1 = 0;

     label2:
        $r3 = this.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles>;

        $i1 = lengthof $r3;

        if i#1 >= $i1 goto label3;

        $r4 = this.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles>;

        $r5 = interfaceinvoke profiles.<java.util.List: java.lang.Object get(int)>(i#1);

        $r6 = (android.content.pm.UserInfo) $r5;

        $i2 = $r6.<android.content.pm.UserInfo: int id>;

        $r4[i#1] = $i2;

        i#1 = i#1 + 1;

        goto label2;

     label3:
        exitmonitor l3;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        l5 = $r7;

        exitmonitor l3;

     label6:
        throw l5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean isCurrentProfile(int)
    {
        com.android.server.LocationManagerService this;
        int userId, $i0, $i1, i#1;
        java.lang.Object l2, $r0;
        java.lang.Throwable l4, $r3;
        int[] $r1, $r2;

        this := @this: com.android.server.LocationManagerService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        i#1 = 0;

     label2:
        $r1 = this.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles>;

        $i0 = lengthof $r1;

        if i#1 >= $i0 goto label5;

        $r2 = this.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles>;

        $i1 = $r2[i#1];

        if $i1 != userId goto label4;

        exitmonitor l2;

     label3:
        return 1;

     label4:
        i#1 = i#1 + 1;

        goto label2;

     label5:
        exitmonitor l2;

     label6:
        return 0;

     label7:
        $r3 := @caughtexception;

        l4 = $r3;

        exitmonitor l2;

     label8:
        throw l4;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void ensureFallbackFusedProviderPresentLocked(java.util.ArrayList)
    {
        com.android.server.LocationManagerService this;
        java.util.ArrayList pkgs, sigSets;
        android.content.pm.PackageManager pm;
        java.lang.String systemPackageName, packageName, $r16, $r20, $r26, $r27, $r31, $r36, $r41;
        java.util.List rInfos;
        java.util.Iterator i$;
        android.content.pm.ResolveInfo rInfo;
        android.content.Context $r0, $r1, $r2;
        int $i0, $i2, $i3, $i4, pInfo#3;
        android.content.Intent $r3;
        java.lang.IllegalStateException $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.content.pm.ServiceInfo $r5, $r8, $r9, $r14;
        java.lang.Object $r6;
        android.content.pm.Signature[] $r7;
        android.os.Bundle $r10, $r11;
        java.lang.StringBuilder $r12, $r13, $r15, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r38, $r39, $r40, $r42, $r43, $r44;
        android.content.pm.ApplicationInfo $r17;
        android.content.pm.PackageManager$NameNotFoundException $r37, pInfo#2;
        android.content.pm.PackageInfo pInfo#1;

        this := @this: com.android.server.LocationManagerService;

        pkgs := @parameter0: java.util.ArrayList;

        $r0 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        pm = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r1 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        systemPackageName = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $r2 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        sigSets = staticinvoke <com.android.server.ServiceWatcher: java.util.ArrayList getSignatureSets(android.content.Context,java.util.List)>($r2, pkgs);

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("com.android.location.service.FusedLocationProvider");

        $i0 = this.<com.android.server.LocationManagerService: int mCurrentUserId>;

        rInfos = virtualinvoke pm.<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>($r3, 128, $i0);

        i$ = interfaceinvoke rInfos.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r6 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        rInfo = (android.content.pm.ResolveInfo) $r6;

        $r5 = rInfo.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        packageName = $r5.<android.content.pm.ServiceInfo: java.lang.String packageName>;

     label02:
        pInfo#1 = virtualinvoke pm.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(packageName, 64);

        $r7 = pInfo#1.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        $z1 = staticinvoke <com.android.server.ServiceWatcher: boolean isSignatureMatch(android.content.pm.Signature[],java.util.List)>($r7, sigSets);

        if $z1 != 0 goto label04;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resolves service ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.android.location.service.FusedLocationProvider");

        $r35 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but has wrong signature, ignoring");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r36);

     label03:
        goto label01;

     label04:
        goto label06;

     label05:
        $r37 := @caughtexception;

        pInfo#2 = $r37;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing package: ");

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r41 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocationManagerService", $r41);

        goto label01;

     label06:
        $r8 = rInfo.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r10 = $r8.<android.content.pm.ServiceInfo: android.os.Bundle metaData>;

        if $r10 != null goto label07;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found fused provider without metadata: ");

        $r30 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r31);

        goto label01;

     label07:
        $r9 = rInfo.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r11 = $r9.<android.content.pm.ServiceInfo: android.os.Bundle metaData>;

        pInfo#3 = virtualinvoke $r11.<android.os.Bundle: int getInt(java.lang.String,int)>("serviceVersion", -1);

        if pInfo#3 != 0 goto label11;

        $r14 = rInfo.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r17 = $r14.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r17.<android.content.pm.ApplicationInfo: int flags>;

        $i2 = $i4 & 1;

        if $i2 != 0 goto label08;

        $z5 = <com.android.server.LocationManagerService: boolean D>;

        if $z5 == 0 goto label01;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fallback candidate not in /system: ");

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r27);

        goto label01;

     label08:
        $i3 = virtualinvoke pm.<android.content.pm.PackageManager: int checkSignatures(java.lang.String,java.lang.String)>(systemPackageName, packageName);

        if $i3 == 0 goto label09;

        $z4 = <com.android.server.LocationManagerService: boolean D>;

        if $z4 == 0 goto label01;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fallback candidate not signed the same as system: ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r26);

        goto label01;

     label09:
        $z3 = <com.android.server.LocationManagerService: boolean D>;

        if $z3 == 0 goto label10;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found fallback provider: ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r20);

     label10:
        return;

     label11:
        $z2 = <com.android.server.LocationManagerService: boolean D>;

        if $z2 == 0 goto label12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fallback candidate not version 0: ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r16);

     label12:
        goto label01;

     label13:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to find a fused location provider that is in the system partition with version 0 and signed with the platform certificate. Such a package is needed to provide a default fused location provider in the event that no other fused location provider has been installed or is currently available. For example, coreOnly boot mode when decrypting the data partition. The fallback must also be marked coreApp=\"true\" in the manifest");

        throw $r4;

        catch android.content.pm.PackageManager$NameNotFoundException from label02 to label03 with label05;
    }

    private void loadProvidersLocked()
    {
        com.android.server.LocationManagerService this;
        com.android.server.location.PassiveProvider passiveProvider, tmp$1848826740;
        com.android.server.location.GpsLocationProvider gpsProvider, tmp$84913000;
        android.content.res.Resources resources;
        java.util.ArrayList providerPackageNames, $r52, $r54, tmp$439376604;
        java.lang.String[] pkgs, arr$, fragments, proxy#6;
        com.android.server.location.LocationProviderProxy networkProvider, fusedLocationProvider;
        int len$, $i7, $i8, i$#7;
        java.lang.String testProviderString, name, $r2, $r23, $r24, $r25, $r29, $r30, $r31, $r32, $r33, $r37, $r38, $r45, $r50, $r60, $r62;
        com.android.internal.location.ProviderProperties properties, tmp$862013306;
        java.util.Set $r0, $r51;
        com.android.server.LocationManagerService$LocationWorkerHandler $r3, $r11, $r13, $r18, $r21, $r39, $r46;
        android.os.Looper $r5;
        android.content.Context $r6, $r8, $r12, $r14, $r16, $r19, $r40, $r44, $r48, $r49;
        com.android.server.location.GpsMeasurementsProvider $r7;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.android.server.location.GpsNavigationMessageProvider $r9;
        com.android.server.location.GeocoderProxy $r17, $r20;
        android.location.IGpsGeofenceHardware $r22;
        java.util.HashMap $r26, $r56, $r58, $r65;
        java.lang.Object $r27;
        java.lang.StringBuilder $r35, $r42, $r43, $r61, $r63, tmp$1400193374, tmp$1510624967;
        android.hardware.location.ActivityRecognitionHardware $r41;
        android.hardware.location.IFusedLocationHardware $r47;
        java.util.List $r53;
        android.location.IGpsStatusProvider $r59;
        android.location.INetInitiatedListener $r66;
        com.android.server.location.FlpHardwareProvider flpHardwareProvider#1;
        com.android.server.location.FusedProxy fusedProxy#2;
        android.location.IFusedGeofenceHardware $r68;
        com.android.server.location.GeofenceProxy fusedProxy#4;
        com.android.server.location.ActivityRecognitionProxy proxy#5;
        java.lang.IllegalStateException tmp$834677793;
        java.lang.IllegalArgumentException tmp$1874803681;
        com.android.server.location.LocationProviderInterface tmp$1753497211, tmp$1396188371;

        this := @this: com.android.server.LocationManagerService;

        tmp$1848826740 = new com.android.server.location.PassiveProvider;

        specialinvoke tmp$1848826740.<com.android.server.location.PassiveProvider: void <init>(android.location.ILocationManager)>(this);

        passiveProvider = tmp$1848826740;

        tmp$1753497211 = (com.android.server.location.LocationProviderInterface) passiveProvider;

        specialinvoke this.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(tmp$1753497211);

        $r0 = this.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $r2 = virtualinvoke passiveProvider.<com.android.server.location.PassiveProvider: java.lang.String getName()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r2);

        this.<com.android.server.LocationManagerService: com.android.server.location.PassiveProvider mPassiveProvider> = passiveProvider;

        tmp$84913000 = new com.android.server.location.GpsLocationProvider;

        $r6 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r3 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r5 = virtualinvoke $r3.<com.android.server.LocationManagerService$LocationWorkerHandler: android.os.Looper getLooper()>();

        specialinvoke tmp$84913000.<com.android.server.location.GpsLocationProvider: void <init>(android.content.Context,android.location.ILocationManager,android.os.Looper)>($r6, this, $r5);

        gpsProvider = tmp$84913000;

        $z1 = staticinvoke <com.android.server.location.GpsLocationProvider: boolean isSupported()>();

        if $z1 == 0 goto label01;

        $r59 = virtualinvoke gpsProvider.<com.android.server.location.GpsLocationProvider: android.location.IGpsStatusProvider getGpsStatusProvider()>();

        this.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider> = $r59;

        $r66 = virtualinvoke gpsProvider.<com.android.server.location.GpsLocationProvider: android.location.INetInitiatedListener getNetInitiatedListener()>();

        this.<com.android.server.LocationManagerService: android.location.INetInitiatedListener mNetInitiatedListener> = $r66;

        tmp$1396188371 = (com.android.server.location.LocationProviderInterface) gpsProvider;

        specialinvoke this.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(tmp$1396188371);

        $r65 = this.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        virtualinvoke $r65.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("gps", gpsProvider);

     label01:
        $r7 = virtualinvoke gpsProvider.<com.android.server.location.GpsLocationProvider: com.android.server.location.GpsMeasurementsProvider getGpsMeasurementsProvider()>();

        this.<com.android.server.LocationManagerService: com.android.server.location.GpsMeasurementsProvider mGpsMeasurementsProvider> = $r7;

        $r9 = virtualinvoke gpsProvider.<com.android.server.location.GpsLocationProvider: com.android.server.location.GpsNavigationMessageProvider getGpsNavigationMessageProvider()>();

        this.<com.android.server.LocationManagerService: com.android.server.location.GpsNavigationMessageProvider mGpsNavigationMessageProvider> = $r9;

        $r8 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        resources = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        tmp$439376604 = new java.util.ArrayList;

        specialinvoke tmp$439376604.<java.util.ArrayList: void <init>()>();

        providerPackageNames = tmp$439376604;

        pkgs = virtualinvoke resources.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236008);

        $z2 = <com.android.server.LocationManagerService: boolean D>;

        if $z2 == 0 goto label02;

        tmp$1400193374 = new java.lang.StringBuilder;

        specialinvoke tmp$1400193374.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke tmp$1400193374.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("certificates for location providers pulled from: ");

        $r62 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(pkgs);

        $r61 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r60);

     label02:
        if pkgs == null goto label03;

        $r53 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(pkgs);

        virtualinvoke providerPackageNames.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r53);

     label03:
        specialinvoke this.<com.android.server.LocationManagerService: void ensureFallbackFusedProviderPresentLocked(java.util.ArrayList)>(providerPackageNames);

        $r12 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r11 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        networkProvider = staticinvoke <com.android.server.location.LocationProviderProxy: com.android.server.location.LocationProviderProxy createAndBind(android.content.Context,java.lang.String,java.lang.String,int,int,int,android.os.Handler)>($r12, "network", "com.android.location.service.v3.NetworkLocationProvider", 17956932, 17039394, 17236008, $r11);

        if networkProvider == null goto label04;

        $r56 = this.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        virtualinvoke $r56.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("network", networkProvider);

        $r54 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders>;

        virtualinvoke $r54.<java.util.ArrayList: boolean add(java.lang.Object)>(networkProvider);

        specialinvoke this.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(networkProvider);

        goto label05;

     label04:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocationManagerService", "no network location provider found");

     label05:
        $r14 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r13 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        fusedLocationProvider = staticinvoke <com.android.server.location.LocationProviderProxy: com.android.server.location.LocationProviderProxy createAndBind(android.content.Context,java.lang.String,java.lang.String,int,int,int,android.os.Handler)>($r14, "fused", "com.android.location.service.FusedLocationProvider", 17956933, 17039395, 17236008, $r13);

        if fusedLocationProvider == null goto label06;

        specialinvoke this.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(fusedLocationProvider);

        $r52 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders>;

        virtualinvoke $r52.<java.util.ArrayList: boolean add(java.lang.Object)>(fusedLocationProvider);

        $r51 = this.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $r50 = virtualinvoke fusedLocationProvider.<com.android.server.location.LocationProviderProxy: java.lang.String getName()>();

        interfaceinvoke $r51.<java.util.Set: boolean add(java.lang.Object)>($r50);

        $r58 = this.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        virtualinvoke $r58.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("fused", fusedLocationProvider);

        goto label07;

     label06:
        tmp$834677793 = new java.lang.IllegalStateException;

        specialinvoke tmp$834677793.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Location service needs a fused location provider");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "no fused location provider found", tmp$834677793);

     label07:
        $r16 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r18 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r17 = staticinvoke <com.android.server.location.GeocoderProxy: com.android.server.location.GeocoderProxy createAndBind(android.content.Context,int,int,int,android.os.Handler)>($r16, 17956935, 17039397, 17236008, $r18);

        this.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider> = $r17;

        $r20 = this.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r20 != null goto label08;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "no geocoder provider found");

     label08:
        $z3 = staticinvoke <com.android.server.location.FlpHardwareProvider: boolean isSupported()>();

        if $z3 == 0 goto label10;

        $r49 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        flpHardwareProvider#1 = staticinvoke <com.android.server.location.FlpHardwareProvider: com.android.server.location.FlpHardwareProvider getInstance(android.content.Context)>($r49);

        $r48 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r46 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r47 = virtualinvoke flpHardwareProvider#1.<com.android.server.location.FlpHardwareProvider: android.hardware.location.IFusedLocationHardware getLocationHardware()>();

        fusedProxy#2 = staticinvoke <com.android.server.location.FusedProxy: com.android.server.location.FusedProxy createAndBind(android.content.Context,android.os.Handler,android.hardware.location.IFusedLocationHardware,int,int,int)>($r48, $r46, $r47, 17956934, 17039396, 17236008);

        if fusedProxy#2 != null goto label09;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "Unable to bind FusedProxy.");

     label09:
        goto label11;

     label10:
        flpHardwareProvider#1 = null;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "FLP HAL not supported");

     label11:
        $r19 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r21 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r22 = virtualinvoke gpsProvider.<com.android.server.location.GpsLocationProvider: android.location.IGpsGeofenceHardware getGpsGeofenceProxy()>();

        if flpHardwareProvider#1 == null goto label12;

        $r68 = virtualinvoke flpHardwareProvider#1.<com.android.server.location.FlpHardwareProvider: android.location.IFusedGeofenceHardware getGeofenceHardware()>();

        goto label13;

     label12:
        $r68 = null;

     label13:
        fusedProxy#4 = staticinvoke <com.android.server.location.GeofenceProxy: com.android.server.location.GeofenceProxy createAndBind(android.content.Context,int,int,int,android.os.Handler,android.location.IGpsGeofenceHardware,android.location.IFusedGeofenceHardware)>($r19, 17956936, 17039398, 17236008, $r21, $r22, $r68);

        if fusedProxy#4 != null goto label14;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "Unable to bind FLP Geofence proxy.");

     label14:
        $z4 = staticinvoke <android.hardware.location.ActivityRecognitionHardware: boolean isSupported()>();

        if $z4 == 0 goto label16;

        $r40 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r39 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r44 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r41 = staticinvoke <android.hardware.location.ActivityRecognitionHardware: android.hardware.location.ActivityRecognitionHardware getInstance(android.content.Context)>($r44);

        proxy#5 = staticinvoke <com.android.server.location.ActivityRecognitionProxy: com.android.server.location.ActivityRecognitionProxy createAndBind(android.content.Context,android.os.Handler,android.hardware.location.ActivityRecognitionHardware,int,int,int)>($r40, $r39, $r41, 17956937, 17039399, 17236008);

        if proxy#5 != null goto label15;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "Unable to bind ActivityRecognitionProxy.");

     label15:
        goto label17;

     label16:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "Hardware Activity-Recognition not supported.");

     label17:
        proxy#6 = virtualinvoke resources.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236009);

        arr$ = proxy#6;

        len$ = lengthof arr$;

        i$#7 = 0;

     label18:
        if i$#7 >= len$ goto label20;

        testProviderString = arr$[i$#7];

        fragments = virtualinvoke testProviderString.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r23 = fragments[0];

        name = virtualinvoke $r23.<java.lang.String: java.lang.String trim()>();

        $r26 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r27 = virtualinvoke $r26.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(name);

        if $r27 == null goto label19;

        tmp$1874803681 = new java.lang.IllegalArgumentException;

        tmp$1510624967 = new java.lang.StringBuilder;

        specialinvoke tmp$1510624967.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke tmp$1510624967.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r43 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" already exists");

        $r45 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke tmp$1874803681.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r45);

        throw tmp$1874803681;

     label19:
        tmp$862013306 = new com.android.internal.location.ProviderProperties;

        $r29 = fragments[1];

        $z5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r29);

        $r24 = fragments[2];

        $z6 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r24);

        $r25 = fragments[3];

        $z9 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r25);

        $r32 = fragments[4];

        $z10 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r32);

        $r33 = fragments[5];

        $z7 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r33);

        $r30 = fragments[6];

        $z8 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r30);

        $r31 = fragments[7];

        $z11 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r31);

        $r37 = fragments[8];

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r37);

        $r38 = fragments[9];

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r38);

        specialinvoke tmp$862013306.<com.android.internal.location.ProviderProperties: void <init>(boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>($z5, $z6, $z9, $z10, $z7, $z8, $z11, $i8, $i7);

        properties = tmp$862013306;

        specialinvoke this.<com.android.server.LocationManagerService: void addTestProviderLocked(java.lang.String,com.android.internal.location.ProviderProperties)>(name, properties);

        i$#7 = i$#7 + 1;

        goto label18;

     label20:
        return;
    }

    private void switchUser(int)
    {
        com.android.server.LocationManagerService this;
        int userId, $i0;
        java.lang.Object l2, $r2, $r7;
        java.util.Iterator i$;
        com.android.server.location.LocationProviderInterface p;
        java.lang.Throwable l5, $r8;
        com.android.server.location.LocationBlacklist $r0;
        com.android.server.LocationManagerService$LocationWorkerHandler $r1;
        java.util.HashMap $r3, $r4;
        java.util.ArrayList $r5;
        boolean $z0;
        java.lang.String $r6;

        this := @this: com.android.server.LocationManagerService;

        userId := @parameter0: int;

        $i0 = this.<com.android.server.LocationManagerService: int mCurrentUserId>;

        if $i0 != userId goto label1;

        return;

     label1:
        $r0 = this.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        virtualinvoke $r0.<com.android.server.location.LocationBlacklist: void switchUser(int)>(userId);

        $r1 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r1.<com.android.server.LocationManagerService$LocationWorkerHandler: void removeMessages(int)>(1);

        $r2 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l2 = $r2;

        entermonitor $r2;

     label2:
        $r3 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r3.<java.util.HashMap: void clear()>();

        $r4 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r4.<java.util.HashMap: void clear()>();

        $r5 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        i$ = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        p = (com.android.server.location.LocationProviderInterface) $r7;

        $r6 = interfaceinvoke p.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        specialinvoke this.<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)>($r6, 0);

        goto label3;

     label4:
        this.<com.android.server.LocationManagerService: int mCurrentUserId> = userId;

        virtualinvoke this.<com.android.server.LocationManagerService: void updateUserProfiles(int)>(userId);

        specialinvoke this.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor l2;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        l5 = $r8;

        exitmonitor l2;

     label7:
        throw l5;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void locationCallbackFinished(android.location.ILocationListener)
    {
        com.android.server.LocationManagerService this;
        android.location.ILocationListener listener;
        java.lang.Object l2, $r0, $r2;
        android.os.IBinder binder;
        com.android.server.LocationManagerService$Receiver receiver, l5;
        long identity;
        java.lang.Throwable l8, l9, $r4, $r5;
        java.util.HashMap $r1;

        this := @this: com.android.server.LocationManagerService;

        listener := @parameter0: android.location.ILocationListener;

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l2 = $r0;

        entermonitor $r0;

     label01:
        binder = interfaceinvoke listener.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(binder);

        receiver = (com.android.server.LocationManagerService$Receiver) $r2;

        if receiver == null goto label06;

        l5 = receiver;

        entermonitor receiver;

     label02:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        staticinvoke <com.android.server.LocationManagerService$Receiver: void access$1500(com.android.server.LocationManagerService$Receiver)>(receiver);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        exitmonitor l5;

     label03:
        goto label06;

     label04:
        $r5 := @caughtexception;

        l8 = $r5;

        exitmonitor l5;

     label05:
        throw l8;

     label06:
        exitmonitor l2;

     label07:
        goto label10;

     label08:
        $r4 := @caughtexception;

        l9 = $r4;

        exitmonitor l2;

     label09:
        throw l9;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void addProviderLocked(com.android.server.location.LocationProviderInterface)
    {
        com.android.server.LocationManagerService this;
        com.android.server.location.LocationProviderInterface provider;
        java.util.ArrayList $r0;
        java.util.HashMap $r1;
        java.lang.String $r2;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: com.android.server.location.LocationProviderInterface;

        $r0 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(provider);

        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r2 = interfaceinvoke provider.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, provider);

        return;
    }

    private void removeProviderLocked(com.android.server.location.LocationProviderInterface)
    {
        com.android.server.LocationManagerService this;
        com.android.server.location.LocationProviderInterface provider;
        java.util.ArrayList $r0;
        java.util.HashMap $r1;
        java.lang.String $r2;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: com.android.server.location.LocationProviderInterface;

        interfaceinvoke provider.<com.android.server.location.LocationProviderInterface: void disable()>();

        $r0 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        virtualinvoke $r0.<java.util.ArrayList: boolean remove(java.lang.Object)>(provider);

        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r2 = interfaceinvoke provider.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r2);

        return;
    }

    private boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider;
        android.content.ContentResolver resolver;
        java.util.Set $r0, $r1;
        boolean $z0, $z1, $z2;
        android.content.Context $r2;
        int $i0;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>(provider);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = this.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        $z1 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(provider);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r2 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        resolver = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = this.<com.android.server.LocationManagerService: int mCurrentUserId>;

        $z2 = staticinvoke <android.provider.Settings$Secure: boolean isLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,int)>(resolver, provider, $i0);

        return $z2;
    }

    private boolean isAllowedByUserSettingsLocked(java.lang.String, int)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider;
        int uid, $i0;
        boolean $z0, $z1, $z2;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        uid := @parameter1: int;

        $i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(uid);

        $z0 = specialinvoke this.<com.android.server.LocationManagerService: boolean isCurrentProfile(int)>($i0);

        if $z0 != 0 goto label1;

        $z2 = specialinvoke this.<com.android.server.LocationManagerService: boolean isUidALocationProvider(int)>(uid);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        $z1 = specialinvoke this.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(provider);

        return $z1;
    }

    private java.lang.String getResolutionPermission(int)
    {
        com.android.server.LocationManagerService this;
        int resolutionLevel;

        this := @this: com.android.server.LocationManagerService;

        resolutionLevel := @parameter0: int;

        lookupswitch(resolutionLevel)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label3;
        };

     label1:
        return "android.permission.ACCESS_FINE_LOCATION";

     label2:
        return "android.permission.ACCESS_COARSE_LOCATION";

     label3:
        return null;
    }

    private int getAllowedResolutionLevel(int, int)
    {
        com.android.server.LocationManagerService this;
        int pid, uid, $i0, $i1;
        android.content.Context $r0, $r1;

        this := @this: com.android.server.LocationManagerService;

        pid := @parameter0: int;

        uid := @parameter1: int;

        $r0 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r0.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACCESS_FINE_LOCATION", pid, uid);

        if $i0 != 0 goto label1;

        return 2;

     label1:
        $r1 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACCESS_COARSE_LOCATION", pid, uid);

        if $i1 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private int getCallerAllowedResolutionLevel()
    {
        com.android.server.LocationManagerService this;
        int $i0, $i1, $i2;

        this := @this: com.android.server.LocationManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = specialinvoke this.<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)>($i0, $i1);

        return $i2;
    }

    private void checkResolutionLevelIsSufficientForGeofenceUse(int)
    {
        com.android.server.LocationManagerService this;
        int allowedResolutionLevel;
        java.lang.SecurityException $r0;

        this := @this: com.android.server.LocationManagerService;

        allowedResolutionLevel := @parameter0: int;

        if allowedResolutionLevel >= 2 goto label1;

        $r0 = new java.lang.SecurityException;

        specialinvoke $r0.<java.lang.SecurityException: void <init>(java.lang.String)>("Geofence usage requires ACCESS_FINE_LOCATION permission");

        throw $r0;

     label1:
        return;
    }

    private int getMinimumResolutionLevelForProviderUse(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, $r0, $r1, $r2, $r3;
        com.android.server.location.LocationProviderInterface lp;
        com.android.internal.location.ProviderProperties properties;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.HashMap $r4;
        java.lang.Object $r5;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        $r0 = "gps";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(provider);

        if $z0 != 0 goto label1;

        $r1 = "passive";

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(provider);

        if $z1 == 0 goto label2;

     label1:
        return 2;

     label2:
        $r2 = "network";

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(provider);

        if $z2 != 0 goto label3;

        $r3 = "fused";

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(provider);

        if $z3 == 0 goto label4;

     label3:
        return 1;

     label4:
        $r4 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        lp = (com.android.server.location.LocationProviderInterface) $r5;

        if lp == null goto label7;

        properties = interfaceinvoke lp.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        if properties == null goto label7;

        $z4 = properties.<com.android.internal.location.ProviderProperties: boolean mRequiresSatellite>;

        if $z4 == 0 goto label5;

        return 2;

     label5:
        $z6 = properties.<com.android.internal.location.ProviderProperties: boolean mRequiresNetwork>;

        if $z6 != 0 goto label6;

        $z5 = properties.<com.android.internal.location.ProviderProperties: boolean mRequiresCell>;

        if $z5 == 0 goto label7;

     label6:
        return 1;

     label7:
        return 2;
    }

    private void checkResolutionLevelIsSufficientForProviderUse(int, java.lang.String)
    {
        com.android.server.LocationManagerService this;
        int allowedResolutionLevel, requiredResolutionLevel;
        java.lang.String providerName, $r6, $r14, $r19;
        java.lang.SecurityException $r0, $r7, $r13;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18;

        this := @this: com.android.server.LocationManagerService;

        allowedResolutionLevel := @parameter0: int;

        providerName := @parameter1: java.lang.String;

        requiredResolutionLevel = specialinvoke this.<com.android.server.LocationManagerService: int getMinimumResolutionLevelForProviderUse(java.lang.String)>(providerName);

        if allowedResolutionLevel >= requiredResolutionLevel goto label4;

        lookupswitch(requiredResolutionLevel)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label3;
        };

     label1:
        $r0 = new java.lang.SecurityException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(providerName);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" location provider ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requires ACCESS_FINE_LOCATION permission.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label2:
        $r7 = new java.lang.SecurityException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(providerName);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" location provider ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requires ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permission.");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label3:
        $r13 = new java.lang.SecurityException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Insufficient permission for \"");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(providerName);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" location provider.");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label4:
        return;
    }

    private void checkDeviceStatsAllowed()
    {
        com.android.server.LocationManagerService this;
        android.content.Context $r0;

        this := @this: com.android.server.LocationManagerService;

        $r0 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_DEVICE_STATS", null);

        return;
    }

    private void checkUpdateAppOpsAllowed()
    {
        com.android.server.LocationManagerService this;
        android.content.Context $r0;

        this := @this: com.android.server.LocationManagerService;

        $r0 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_APP_OPS_STATS", null);

        return;
    }

    public static int resolutionLevelToOp(int)
    {
        int allowedResolutionLevel;

        allowedResolutionLevel := @parameter0: int;

        if allowedResolutionLevel == 0 goto label2;

        if allowedResolutionLevel != 1 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        return -1;
    }

    boolean reportLocationAccessNoThrow(int, java.lang.String, int)
    {
        com.android.server.LocationManagerService this;
        int uid, allowedResolutionLevel, op, $i0;
        java.lang.String packageName;
        android.app.AppOpsManager $r0;

        this := @this: com.android.server.LocationManagerService;

        uid := @parameter0: int;

        packageName := @parameter1: java.lang.String;

        allowedResolutionLevel := @parameter2: int;

        op = staticinvoke <com.android.server.LocationManagerService: int resolutionLevelToOp(int)>(allowedResolutionLevel);

        if op < 0 goto label1;

        $r0 = this.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        $i0 = virtualinvoke $r0.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)>(op, uid, packageName);

        if $i0 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    boolean checkLocationAccess(int, java.lang.String, int)
    {
        com.android.server.LocationManagerService this;
        int uid, allowedResolutionLevel, op, $i0;
        java.lang.String packageName;
        android.app.AppOpsManager $r0;

        this := @this: com.android.server.LocationManagerService;

        uid := @parameter0: int;

        packageName := @parameter1: java.lang.String;

        allowedResolutionLevel := @parameter2: int;

        op = staticinvoke <com.android.server.LocationManagerService: int resolutionLevelToOp(int)>(allowedResolutionLevel);

        if op < 0 goto label1;

        $r0 = this.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        $i0 = virtualinvoke $r0.<android.app.AppOpsManager: int checkOp(int,int,java.lang.String)>(op, uid, packageName);

        if $i0 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public java.util.List getAllProviders()
    {
        com.android.server.LocationManagerService this;
        java.util.ArrayList out, $r1, $r2, $r3;
        java.lang.Object l2, $r0, $r8;
        java.util.Iterator i$;
        com.android.server.location.LocationProviderInterface provider;
        java.lang.String name, $r7, $r9;
        java.lang.Throwable l6, $r10;
        int $i0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r5, $r6;

        this := @this: com.android.server.LocationManagerService;

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = new java.util.ArrayList;

        $r2 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        out = $r1;

        $r3 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        i$ = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        provider = (com.android.server.location.LocationProviderInterface) $r8;

        name = interfaceinvoke provider.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r9 = "fused";

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z2 == 0 goto label3;

        goto label2;

     label3:
        virtualinvoke out.<java.util.ArrayList: boolean add(java.lang.Object)>(name);

        goto label2;

     label4:
        exitmonitor l2;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        l6 = $r10;

        exitmonitor l2;

     label7:
        throw l6;

     label8:
        $z1 = <com.android.server.LocationManagerService: boolean D>;

        if $z1 == 0 goto label9;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAllProviders()=");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(out);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r7);

     label9:
        return out;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.util.List getProviders(android.location.Criteria, boolean)
    {
        com.android.server.LocationManagerService this;
        android.location.Criteria criteria;
        boolean enabledOnly, $z0, $z1, $z2, $z3, $z5;
        int allowedResolutionLevel, uid, $i0, $i2;
        java.util.ArrayList out, $r1, $r2, $r3;
        long identity;
        java.lang.Object l8, $r0, $r9;
        java.util.Iterator i$;
        com.android.server.location.LocationProviderInterface provider;
        java.lang.String name, $r7, $r8;
        java.lang.Throwable l12, l13, $r11, $r12;
        java.lang.StringBuilder $r4, $r5, $r6;
        com.android.internal.location.ProviderProperties $r10;

        this := @this: com.android.server.LocationManagerService;

        criteria := @parameter0: android.location.Criteria;

        enabledOnly := @parameter1: boolean;

        allowedResolutionLevel = specialinvoke this.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l8 = $r0;

        entermonitor $r0;

     label02:
        $r2 = new java.util.ArrayList;

        $r1 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        out = $r2;

        $r3 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        i$ = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r9 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        provider = (com.android.server.location.LocationProviderInterface) $r9;

        name = interfaceinvoke provider.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r8 = "fused";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z2 == 0 goto label04;

        goto label03;

     label04:
        $i2 = specialinvoke this.<com.android.server.LocationManagerService: int getMinimumResolutionLevelForProviderUse(java.lang.String)>(name);

        if allowedResolutionLevel < $i2 goto label07;

        if enabledOnly == 0 goto label05;

        $z5 = specialinvoke this.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(name, uid);

        if $z5 != 0 goto label05;

        goto label03;

     label05:
        if criteria == null goto label06;

        $r10 = interfaceinvoke provider.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        $z3 = staticinvoke <android.location.LocationProvider: boolean propertiesMeetCriteria(java.lang.String,com.android.internal.location.ProviderProperties,android.location.Criteria)>(name, $r10, criteria);

        if $z3 != 0 goto label06;

        goto label03;

     label06:
        virtualinvoke out.<java.util.ArrayList: boolean add(java.lang.Object)>(name);

     label07:
        goto label03;

     label08:
        exitmonitor l8;

     label09:
        goto label12;

     label10:
        $r11 := @caughtexception;

        l12 = $r11;

        exitmonitor l8;

     label11:
        throw l12;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        goto label15;

     label13:
        $r12 := @caughtexception;

        l13 = $r12;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l13;

     label15:
        $z1 = <com.android.server.LocationManagerService: boolean D>;

        if $z1 == 0 goto label16;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProviders()=");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(out);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r7);

     label16:
        return out;

        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public java.lang.String getBestProvider(android.location.Criteria, boolean)
    {
        com.android.server.LocationManagerService this;
        android.location.Criteria criteria;
        boolean enabledOnly, $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r22, $r23;
        java.lang.String $r7, $r15, $r21, result#3, result#5;
        java.util.List providers#2, providers#4;

        this := @this: com.android.server.LocationManagerService;

        criteria := @parameter0: android.location.Criteria;

        enabledOnly := @parameter1: boolean;

        providers#2 = virtualinvoke this.<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>(criteria, enabledOnly);

        $z0 = interfaceinvoke providers#2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        result#3 = specialinvoke this.<com.android.server.LocationManagerService: java.lang.String pickBest(java.util.List)>(providers#2);

        $z4 = <com.android.server.LocationManagerService: boolean D>;

        if $z4 == 0 goto label1;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getBestProvider(");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(criteria);

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(enabledOnly);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(result#3);

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r21);

     label1:
        return result#3;

     label2:
        providers#4 = virtualinvoke this.<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>(null, enabledOnly);

        $z1 = interfaceinvoke providers#4.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        result#5 = specialinvoke this.<com.android.server.LocationManagerService: java.lang.String pickBest(java.util.List)>(providers#4);

        $z3 = <com.android.server.LocationManagerService: boolean D>;

        if $z3 == 0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getBestProvider(");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(criteria);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(enabledOnly);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(result#5);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r15);

     label3:
        return result#5;

     label4:
        $z2 = <com.android.server.LocationManagerService: boolean D>;

        if $z2 == 0 goto label5;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getBestProvider(");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(criteria);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(enabledOnly);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(null);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r7);

     label5:
        return null;
    }

    private java.lang.String pickBest(java.util.List)
    {
        com.android.server.LocationManagerService this;
        java.util.List providers;
        boolean $z0, $z1;
        java.lang.Object $r0;
        java.lang.String $r1;

        this := @this: com.android.server.LocationManagerService;

        providers := @parameter0: java.util.List;

        $z0 = interfaceinvoke providers.<java.util.List: boolean contains(java.lang.Object)>("gps");

        if $z0 == 0 goto label1;

        return "gps";

     label1:
        $z1 = interfaceinvoke providers.<java.util.List: boolean contains(java.lang.Object)>("network");

        if $z1 == 0 goto label2;

        return "network";

     label2:
        $r0 = interfaceinvoke providers.<java.util.List: java.lang.Object get(int)>(0);

        $r1 = (java.lang.String) $r0;

        return $r1;
    }

    public boolean providerMeetsCriteria(java.lang.String, android.location.Criteria)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, $r2, $r10, $r15;
        android.location.Criteria criteria;
        com.android.server.location.LocationProviderInterface p;
        boolean result, $z0;
        java.util.HashMap $r0;
        java.lang.Object $r1;
        com.android.internal.location.ProviderProperties $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r13, $r14, $r16;
        java.lang.IllegalArgumentException $r12;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        criteria := @parameter1: android.location.Criteria;

        $r0 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        p = (com.android.server.location.LocationProviderInterface) $r1;

        if p != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider=");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(provider);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r12;

     label1:
        $r2 = interfaceinvoke p.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r3 = interfaceinvoke p.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        result = staticinvoke <android.location.LocationProvider: boolean propertiesMeetCriteria(java.lang.String,com.android.internal.location.ProviderProperties,android.location.Criteria)>($r2, $r3, criteria);

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("providerMeetsCriteria(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(provider);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(criteria);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(result);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r10);

     label2:
        return result;
    }

    private void updateProvidersLocked()
    {
        com.android.server.LocationManagerService this;
        com.android.server.location.LocationProviderInterface p;
        boolean isEnabled, shouldBeEnabled, changesMade#1;
        java.lang.String name;
        java.util.ArrayList $r0, $r7;
        int $i0, i#2;
        android.content.Intent $r1, $r4;
        android.content.Context $r2, $r5;
        android.os.UserHandle $r3, $r6;
        java.lang.Object $r8;
        java.util.HashMap $r9, $r10;

        this := @this: com.android.server.LocationManagerService;

        changesMade#1 = 0;

        $r0 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        i#2 = $i0 - 1;

     label1:
        if i#2 < 0 goto label4;

        $r7 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i#2);

        p = (com.android.server.location.LocationProviderInterface) $r8;

        isEnabled = interfaceinvoke p.<com.android.server.location.LocationProviderInterface: boolean isEnabled()>();

        name = interfaceinvoke p.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        shouldBeEnabled = specialinvoke this.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(name);

        if isEnabled == 0 goto label2;

        if shouldBeEnabled != 0 goto label2;

        specialinvoke this.<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)>(name, 0);

        $r10 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r10.<java.util.HashMap: void clear()>();

        $r9 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

        changesMade#1 = 1;

        goto label3;

     label2:
        if isEnabled != 0 goto label3;

        if shouldBeEnabled == 0 goto label3;

        specialinvoke this.<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)>(name, 1);

        changesMade#1 = 1;

     label3:
        i#2 = i#2 + -1;

        goto label1;

     label4:
        if changesMade#1 == 0 goto label5;

        $r2 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.location.PROVIDERS_CHANGED");

        $r3 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r2.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r1, $r3);

        $r5 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.location.MODE_CHANGED");

        $r6 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r4, $r6);

     label5:
        return;
    }

    private void updateProviderListenersLocked(java.lang.String, boolean)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider;
        boolean enabled, $z0, $z1;
        com.android.server.location.LocationProviderInterface p;
        java.util.ArrayList records, $r10, deadReceivers#2;
        com.android.server.LocationManagerService$UpdateRecord record;
        java.util.HashMap $r0, $r2;
        java.lang.Object $r1, $r3, $r4, $r7;
        int $i0, $i1, $i2, listeners#1, N#3, i#4, N#5;
        com.android.server.LocationManagerService$Receiver $r5, $r6, $r8, $r9;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        enabled := @parameter1: boolean;

        listeners#1 = 0;

        $r0 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        p = (com.android.server.location.LocationProviderInterface) $r1;

        if p != null goto label01;

        return;

     label01:
        deadReceivers#2 = null;

        $r2 = this.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        records = (java.util.ArrayList) $r3;

        if records == null goto label06;

        N#3 = virtualinvoke records.<java.util.ArrayList: int size()>();

        i#4 = 0;

     label02:
        if i#4 >= N#3 goto label06;

        $r7 = virtualinvoke records.<java.util.ArrayList: java.lang.Object get(int)>(i#4);

        record = (com.android.server.LocationManagerService$UpdateRecord) $r7;

        $r6 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i2 = $r6.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i2);

        $z0 = specialinvoke this.<com.android.server.LocationManagerService: boolean isCurrentProfile(int)>($i1);

        if $z0 == 0 goto label05;

        $r8 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $z1 = virtualinvoke $r8.<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)>(provider, enabled);

        if $z1 != 0 goto label04;

        if deadReceivers#2 != null goto label03;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        deadReceivers#2 = $r10;

     label03:
        $r9 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        virtualinvoke deadReceivers#2.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label04:
        listeners#1 = listeners#1 + 1;

     label05:
        i#4 = i#4 + 1;

        goto label02;

     label06:
        if deadReceivers#2 == null goto label08;

        $i0 = virtualinvoke deadReceivers#2.<java.util.ArrayList: int size()>();

        N#5 = $i0 - 1;

     label07:
        if N#5 < 0 goto label08;

        $r4 = virtualinvoke deadReceivers#2.<java.util.ArrayList: java.lang.Object get(int)>(N#5);

        $r5 = (com.android.server.LocationManagerService$Receiver) $r4;

        specialinvoke this.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>($r5);

        N#5 = N#5 + -1;

        goto label07;

     label08:
        if enabled == 0 goto label09;

        interfaceinvoke p.<com.android.server.location.LocationProviderInterface: void enable()>();

        if listeners#1 <= 0 goto label10;

        specialinvoke this.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(provider);

        goto label10;

     label09:
        interfaceinvoke p.<com.android.server.location.LocationProviderInterface: void disable()>();

     label10:
        return;
    }

    private void applyRequirementsLocked(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, $r11, $r18, $r24, $r32;
        com.android.server.location.LocationProviderInterface p;
        java.util.ArrayList records;
        android.os.WorkSource worksource, $r4, $r14, $r20, $r22, $r25;
        com.android.internal.location.ProviderRequest providerRequest, $r5;
        com.android.server.LocationManagerService$UpdateRecord record, record;
        android.location.LocationRequest locationRequest, locationRequest#2;
        java.util.HashMap $r0, $r2;
        java.lang.Object $r1, $r3, $r12, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z7, $z8;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        long $l1, $l2, $l3, $l4, $l12, $l15, $l17, i$#3;
        com.android.server.LocationManagerService$Receiver $r13, $r15, $r16, $r17, $r19, $r21, $r23, $r26, $r28, $r29, $r31;
        int $i5, $i6, $i8, $i9, $i10, $i11, $i13, $i14;
        byte $b7, $b16;
        java.util.List $r30;
        java.util.Iterator i$#1, locationRequest#4;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        p = (com.android.server.location.LocationProviderInterface) $r1;

        if p != null goto label1;

        return;

     label1:
        $r2 = this.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        records = (java.util.ArrayList) $r3;

        $r4 = new android.os.WorkSource;

        specialinvoke $r4.<android.os.WorkSource: void <init>()>();

        worksource = $r4;

        $r5 = new com.android.internal.location.ProviderRequest;

        specialinvoke $r5.<com.android.internal.location.ProviderRequest: void <init>()>();

        providerRequest = $r5;

        if records == null goto label8;

        i$#1 = virtualinvoke records.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke i$#1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r27 = interfaceinvoke i$#1.<java.util.Iterator: java.lang.Object next()>();

        record = (com.android.server.LocationManagerService$UpdateRecord) $r27;

        $r26 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i10 = $r26.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $i11 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i10);

        $z7 = specialinvoke this.<com.android.server.LocationManagerService: boolean isCurrentProfile(int)>($i11);

        if $z7 == 0 goto label3;

        $r29 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i14 = $r29.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $r28 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r32 = $r28.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r31 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i13 = $r31.<com.android.server.LocationManagerService$Receiver: int mAllowedResolutionLevel>;

        $z8 = virtualinvoke this.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>($i14, $r32, $i13);

        if $z8 == 0 goto label3;

        locationRequest#2 = record.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $r30 = providerRequest.<com.android.internal.location.ProviderRequest: java.util.List locationRequests>;

        interfaceinvoke $r30.<java.util.List: boolean add(java.lang.Object)>(locationRequest#2);

        $l12 = virtualinvoke locationRequest#2.<android.location.LocationRequest: long getInterval()>();

        $l15 = providerRequest.<com.android.internal.location.ProviderRequest: long interval>;

        $b16 = $l12 cmp $l15;

        if $b16 >= 0 goto label3;

        providerRequest.<com.android.internal.location.ProviderRequest: boolean reportLocation> = 1;

        $l17 = virtualinvoke locationRequest#2.<android.location.LocationRequest: long getInterval()>();

        providerRequest.<com.android.internal.location.ProviderRequest: long interval> = $l17;

     label3:
        goto label2;

     label4:
        $z2 = providerRequest.<com.android.internal.location.ProviderRequest: boolean reportLocation>;

        if $z2 == 0 goto label8;

        $l1 = providerRequest.<com.android.internal.location.ProviderRequest: long interval>;

        $l3 = $l1 + 1000L;

        $l2 = $l3 * 3L;

        i$#3 = $l2 / 2L;

        locationRequest#4 = virtualinvoke records.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke locationRequest#4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r12 = interfaceinvoke locationRequest#4.<java.util.Iterator: java.lang.Object next()>();

        record = (com.android.server.LocationManagerService$UpdateRecord) $r12;

        $r13 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i5 = $r13.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $i6 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i5);

        $z4 = specialinvoke this.<com.android.server.LocationManagerService: boolean isCurrentProfile(int)>($i6);

        if $z4 == 0 goto label7;

        locationRequest = record.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $l4 = virtualinvoke locationRequest.<android.location.LocationRequest: long getInterval()>();

        $b7 = $l4 cmp i$#3;

        if $b7 > 0 goto label7;

        $r16 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r14 = $r16.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        if $r14 == null goto label6;

        $r21 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r20 = $r21.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        $i9 = virtualinvoke $r20.<android.os.WorkSource: int size()>();

        if $i9 <= 0 goto label6;

        $r19 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r25 = $r19.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        $r24 = virtualinvoke $r25.<android.os.WorkSource: java.lang.String getName(int)>(0);

        if $r24 == null goto label6;

        $r23 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r22 = $r23.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        virtualinvoke worksource.<android.os.WorkSource: boolean add(android.os.WorkSource)>($r22);

        goto label7;

     label6:
        $r15 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i8 = $r15.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $r17 = record.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r18 = $r17.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        virtualinvoke worksource.<android.os.WorkSource: boolean add(int,java.lang.String)>($i8, $r18);

     label7:
        goto label5;

     label8:
        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label9;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider request: ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(provider);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(providerRequest);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r11);

     label9:
        interfaceinvoke p.<com.android.server.location.LocationProviderInterface: void setRequest(com.android.internal.location.ProviderRequest,android.os.WorkSource)>(providerRequest, worksource);

        return;
    }

    private com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener, int, int, java.lang.String, android.os.WorkSource, boolean)
    {
        com.android.server.LocationManagerService this;
        android.location.ILocationListener listener, $r6;
        int pid, uid;
        java.lang.String packageName;
        android.os.WorkSource workSource;
        boolean hideFromAppOps;
        android.os.IBinder binder, $r5;
        android.os.RemoteException e, $r7;
        java.util.HashMap $r0, $r3;
        java.lang.Object $r1;
        com.android.server.LocationManagerService$Receiver $r2, receiver#1;

        this := @this: com.android.server.LocationManagerService;

        listener := @parameter0: android.location.ILocationListener;

        pid := @parameter1: int;

        uid := @parameter2: int;

        packageName := @parameter3: java.lang.String;

        workSource := @parameter4: android.os.WorkSource;

        hideFromAppOps := @parameter5: boolean;

        binder = interfaceinvoke listener.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        $r0 = this.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(binder);

        receiver#1 = (com.android.server.LocationManagerService$Receiver) $r1;

        if receiver#1 != null goto label4;

        $r2 = new com.android.server.LocationManagerService$Receiver;

        specialinvoke $r2.<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(this, listener, null, pid, uid, packageName, workSource, hideFromAppOps);

        receiver#1 = $r2;

        $r3 = this.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(binder, receiver#1);

     label1:
        $r6 = virtualinvoke receiver#1.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        $r5 = interfaceinvoke $r6.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(receiver#1, 0);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        e = $r7;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "linkToDeath failed:", e);

        return null;

     label4:
        return receiver#1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent, int, int, java.lang.String, android.os.WorkSource, boolean)
    {
        com.android.server.LocationManagerService this;
        android.app.PendingIntent intent;
        int pid, uid;
        java.lang.String packageName;
        android.os.WorkSource workSource;
        boolean hideFromAppOps;
        java.util.HashMap $r0, $r3;
        java.lang.Object $r1;
        com.android.server.LocationManagerService$Receiver $r2, receiver#1;

        this := @this: com.android.server.LocationManagerService;

        intent := @parameter0: android.app.PendingIntent;

        pid := @parameter1: int;

        uid := @parameter2: int;

        packageName := @parameter3: java.lang.String;

        workSource := @parameter4: android.os.WorkSource;

        hideFromAppOps := @parameter5: boolean;

        $r0 = this.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(intent);

        receiver#1 = (com.android.server.LocationManagerService$Receiver) $r1;

        if receiver#1 != null goto label1;

        $r2 = new com.android.server.LocationManagerService$Receiver;

        specialinvoke $r2.<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(this, null, intent, pid, uid, packageName, workSource, hideFromAppOps);

        receiver#1 = $r2;

        $r3 = this.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(intent, receiver#1);

     label1:
        return receiver#1;
    }

    private android.location.LocationRequest createSanitizedRequest(android.location.LocationRequest, int)
    {
        com.android.server.LocationManagerService this;
        android.location.LocationRequest request, sanitizedRequest, $r0;
        int resolutionLevel, $i4;
        long $l0, $l1, $l3, $l5, $l7;
        byte $b2, $b6, $b8;

        this := @this: com.android.server.LocationManagerService;

        request := @parameter0: android.location.LocationRequest;

        resolutionLevel := @parameter1: int;

        $r0 = new android.location.LocationRequest;

        specialinvoke $r0.<android.location.LocationRequest: void <init>(android.location.LocationRequest)>(request);

        sanitizedRequest = $r0;

        if resolutionLevel >= 2 goto label5;

        $i4 = virtualinvoke sanitizedRequest.<android.location.LocationRequest: int getQuality()>();

        lookupswitch($i4)
        {
            case 100: goto label1;
            case 203: goto label2;
            default: goto label3;
        };

     label1:
        virtualinvoke sanitizedRequest.<android.location.LocationRequest: android.location.LocationRequest setQuality(int)>(102);

        goto label3;

     label2:
        virtualinvoke sanitizedRequest.<android.location.LocationRequest: android.location.LocationRequest setQuality(int)>(201);

     label3:
        $l5 = virtualinvoke sanitizedRequest.<android.location.LocationRequest: long getInterval()>();

        $b6 = $l5 cmp 600000L;

        if $b6 >= 0 goto label4;

        virtualinvoke sanitizedRequest.<android.location.LocationRequest: android.location.LocationRequest setInterval(long)>(600000L);

     label4:
        $l7 = virtualinvoke sanitizedRequest.<android.location.LocationRequest: long getFastestInterval()>();

        $b8 = $l7 cmp 600000L;

        if $b8 >= 0 goto label5;

        virtualinvoke sanitizedRequest.<android.location.LocationRequest: android.location.LocationRequest setFastestInterval(long)>(600000L);

     label5:
        $l0 = virtualinvoke sanitizedRequest.<android.location.LocationRequest: long getFastestInterval()>();

        $l1 = virtualinvoke sanitizedRequest.<android.location.LocationRequest: long getInterval()>();

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label6;

        $l3 = virtualinvoke request.<android.location.LocationRequest: long getInterval()>();

        virtualinvoke request.<android.location.LocationRequest: android.location.LocationRequest setFastestInterval(long)>($l3);

     label6:
        return sanitizedRequest;
    }

    private void checkPackageName(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String packageName, pkg, $r5, $r9, $r15;
        int uid, len$, i$#1;
        java.lang.String[] packages, arr$;
        android.content.pm.PackageManager $r0;
        java.lang.SecurityException $r1, $r6, $r12;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r10, $r11, $r13, $r14;
        boolean $z0;

        this := @this: com.android.server.LocationManagerService;

        packageName := @parameter0: java.lang.String;

        if packageName != null goto label1;

        $r12 = new java.lang.SecurityException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid package name: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>($r15);

        throw $r12;

     label1:
        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r0 = this.<com.android.server.LocationManagerService: android.content.pm.PackageManager mPackageManager>;

        packages = virtualinvoke $r0.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(uid);

        if packages != null goto label2;

        $r6 = new java.lang.SecurityException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid UID ");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(uid);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label2:
        arr$ = packages;

        len$ = lengthof arr$;

        i$#1 = 0;

     label3:
        if i$#1 >= len$ goto label5;

        pkg = arr$[i$#1];

        $z0 = virtualinvoke packageName.<java.lang.String: boolean equals(java.lang.Object)>(pkg);

        if $z0 == 0 goto label4;

        return;

     label4:
        i$#1 = i$#1 + 1;

        goto label3;

     label5:
        $r1 = new java.lang.SecurityException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid package name: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    private void checkPendingIntent(android.app.PendingIntent)
    {
        com.android.server.LocationManagerService this;
        android.app.PendingIntent intent;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        this := @this: com.android.server.LocationManagerService;

        intent := @parameter0: android.app.PendingIntent;

        if intent != null goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid pending intent: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(intent);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label1:
        return;
    }

    private com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener, android.app.PendingIntent, int, int, java.lang.String, android.os.WorkSource, boolean)
    {
        com.android.server.LocationManagerService this;
        android.location.ILocationListener listener;
        android.app.PendingIntent intent;
        int pid, uid;
        java.lang.String packageName;
        android.os.WorkSource workSource;
        boolean hideFromAppOps;
        com.android.server.LocationManagerService$Receiver $r0, $r1;
        java.lang.IllegalArgumentException $r2, $r3;

        this := @this: com.android.server.LocationManagerService;

        listener := @parameter0: android.location.ILocationListener;

        intent := @parameter1: android.app.PendingIntent;

        pid := @parameter2: int;

        uid := @parameter3: int;

        packageName := @parameter4: java.lang.String;

        workSource := @parameter5: android.os.WorkSource;

        hideFromAppOps := @parameter6: boolean;

        if intent != null goto label1;

        if listener != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("need either listener or intent");

        throw $r3;

     label1:
        if intent == null goto label2;

        if listener == null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot register both listener and intent");

        throw $r2;

     label2:
        if intent == null goto label3;

        specialinvoke this.<com.android.server.LocationManagerService: void checkPendingIntent(android.app.PendingIntent)>(intent);

        $r1 = specialinvoke this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(intent, pid, uid, packageName, workSource, hideFromAppOps);

        return $r1;

     label3:
        $r0 = specialinvoke this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String,android.os.WorkSource,boolean)>(listener, pid, uid, packageName, workSource, hideFromAppOps);

        return $r0;
    }

    public void requestLocationUpdates(android.location.LocationRequest, android.location.ILocationListener, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService this;
        android.location.ILocationListener listener;
        android.app.PendingIntent intent;
        java.lang.String packageName, $r0;
        int allowedResolutionLevel, pid, uid, $i0;
        android.os.WorkSource workSource;
        boolean hideFromAppOps;
        android.location.LocationRequest sanitizedRequest, request#1;
        long identity;
        java.lang.Object l13, $r1;
        com.android.server.LocationManagerService$Receiver recevier;
        java.lang.Throwable l15, l16, $r2, $r3;

        this := @this: com.android.server.LocationManagerService;

        request#1 := @parameter0: android.location.LocationRequest;

        listener := @parameter1: android.location.ILocationListener;

        intent := @parameter2: android.app.PendingIntent;

        packageName := @parameter3: java.lang.String;

        if request#1 != null goto label01;

        request#1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label01:
        specialinvoke this.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(packageName);

        allowedResolutionLevel = specialinvoke this.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        $r0 = virtualinvoke request#1.<android.location.LocationRequest: java.lang.String getProvider()>();

        specialinvoke this.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(allowedResolutionLevel, $r0);

        workSource = virtualinvoke request#1.<android.location.LocationRequest: android.os.WorkSource getWorkSource()>();

        if workSource == null goto label02;

        $i0 = virtualinvoke workSource.<android.os.WorkSource: int size()>();

        if $i0 <= 0 goto label02;

        specialinvoke this.<com.android.server.LocationManagerService: void checkDeviceStatsAllowed()>();

     label02:
        hideFromAppOps = virtualinvoke request#1.<android.location.LocationRequest: boolean getHideFromAppOps()>();

        if hideFromAppOps == 0 goto label03;

        specialinvoke this.<com.android.server.LocationManagerService: void checkUpdateAppOpsAllowed()>();

     label03:
        sanitizedRequest = specialinvoke this.<com.android.server.LocationManagerService: android.location.LocationRequest createSanitizedRequest(android.location.LocationRequest,int)>(request#1, allowedResolutionLevel);

        pid = staticinvoke <android.os.Binder: int getCallingPid()>();

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        virtualinvoke this.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>(uid, packageName, allowedResolutionLevel);

        $r1 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l13 = $r1;

        entermonitor $r1;

     label05:
        recevier = specialinvoke this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(listener, intent, pid, uid, packageName, workSource, hideFromAppOps);

        specialinvoke this.<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(android.location.LocationRequest,com.android.server.LocationManagerService$Receiver,int,int,java.lang.String)>(sanitizedRequest, recevier, pid, uid, packageName);

        exitmonitor l13;

     label06:
        goto label09;

     label07:
        $r2 := @caughtexception;

        l15 = $r2;

        exitmonitor l13;

     label08:
        throw l15;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        goto label12;

     label10:
        $r3 := @caughtexception;

        l16 = $r3;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l16;

     label12:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void requestLocationUpdatesLocked(android.location.LocationRequest, com.android.server.LocationManagerService$Receiver, int, int, java.lang.String)
    {
        com.android.server.LocationManagerService this;
        com.android.server.LocationManagerService$Receiver receiver;
        int pid, uid, $i0;
        java.lang.String packageName, name, $r10, $r12, $r24;
        com.android.server.location.LocationProviderInterface provider;
        com.android.server.LocationManagerService$UpdateRecord record, oldRecord, $r2;
        boolean isProviderEnabled, $z0;
        java.util.HashMap $r0, $r4;
        java.lang.Object $r1, $r3;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        java.lang.IllegalArgumentException $r6, $r23;
        android.location.LocationRequest request#1;

        this := @this: com.android.server.LocationManagerService;

        request#1 := @parameter0: android.location.LocationRequest;

        receiver := @parameter1: com.android.server.LocationManagerService$Receiver;

        pid := @parameter2: int;

        uid := @parameter3: int;

        packageName := @parameter4: java.lang.String;

        if request#1 != null goto label1;

        request#1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label1:
        name = virtualinvoke request#1.<android.location.LocationRequest: java.lang.String getProvider()>();

        if name != null goto label2;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider name must not be null");

        throw $r23;

     label2:
        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("request ");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(receiver);

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(request#1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r19 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(uid);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r24);

     label3:
        $r0 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(name);

        provider = (com.android.server.location.LocationProviderInterface) $r1;

        if provider != null goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider doesn\'t exist: ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        $r2 = new com.android.server.LocationManagerService$UpdateRecord;

        specialinvoke $r2.<com.android.server.LocationManagerService$UpdateRecord: void <init>(com.android.server.LocationManagerService,java.lang.String,android.location.LocationRequest,com.android.server.LocationManagerService$Receiver)>(this, name, request#1, receiver);

        record = $r2;

        $r4 = receiver.<com.android.server.LocationManagerService$Receiver: java.util.HashMap mUpdateRecords>;

        $r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, record);

        oldRecord = (com.android.server.LocationManagerService$UpdateRecord) $r3;

        if oldRecord == null goto label5;

        virtualinvoke oldRecord.<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)>(0);

     label5:
        isProviderEnabled = specialinvoke this.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(name, uid);

        if isProviderEnabled == 0 goto label6;

        specialinvoke this.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(name);

        goto label7;

     label6:
        virtualinvoke receiver.<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)>(name, 0);

     label7:
        virtualinvoke receiver.<com.android.server.LocationManagerService$Receiver: void updateMonitoring(boolean)>(1);

        return;
    }

    public void removeUpdates(android.location.ILocationListener, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService this;
        android.location.ILocationListener listener;
        android.app.PendingIntent intent;
        java.lang.String packageName;
        int pid, uid;
        java.lang.Object l6, $r0;
        com.android.server.LocationManagerService$Receiver receiver;
        long identity;
        java.lang.Throwable l12, l13, $r1, $r2;

        this := @this: com.android.server.LocationManagerService;

        listener := @parameter0: android.location.ILocationListener;

        intent := @parameter1: android.app.PendingIntent;

        packageName := @parameter2: java.lang.String;

        specialinvoke this.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(packageName);

        pid = staticinvoke <android.os.Binder: int getCallingPid()>();

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l6 = $r0;

        entermonitor $r0;

     label01:
        receiver = specialinvoke this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(listener, intent, pid, uid, packageName, null, 0);

        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        specialinvoke this.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>(receiver);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        goto label06;

     label04:
        $r2 := @caughtexception;

        l12 = $r2;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l12;

     label06:
        exitmonitor l6;

     label07:
        goto label10;

     label08:
        $r1 := @caughtexception;

        l13 = $r1;

        exitmonitor l6;

     label09:
        throw l13;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)
    {
        com.android.server.LocationManagerService this;
        com.android.server.LocationManagerService$Receiver receiver, providers#1;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.lang.Object $r0, $r2, $r4, $r7;
        java.util.HashMap $r1, oldRecords#4;
        java.util.HashSet $r3, providers#3;
        java.util.Collection $r5;
        java.util.Set $r6;
        android.os.IBinder $r8;
        android.location.ILocationListener $r9;
        java.lang.StringBuilder $r11, $r12, $r15;
        java.lang.String $r13, $r16, record#8;
        int $i0;
        java.lang.Throwable $r14, oldRecords#2;
        java.util.Iterator i$#5, i$#7;
        com.android.server.LocationManagerService$UpdateRecord record#6;

        this := @this: com.android.server.LocationManagerService;

        receiver := @parameter0: com.android.server.LocationManagerService$Receiver;

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label01;

        $r11 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remove ");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(receiver);

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("LocationManagerService", $r16);

     label01:
        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r0 = receiver.<com.android.server.LocationManagerService$Receiver: java.lang.Object mKey>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r0);

        if $r2 == null goto label06;

        $z5 = virtualinvoke receiver.<com.android.server.LocationManagerService$Receiver: boolean isListener()>();

        if $z5 == 0 goto label06;

        $r9 = virtualinvoke receiver.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        $r8 = interfaceinvoke $r9.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r8.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(receiver, 0);

        providers#1 = receiver;

        entermonitor receiver;

     label02:
        virtualinvoke receiver.<com.android.server.LocationManagerService$Receiver: void clearPendingBroadcastsLocked()>();

        exitmonitor providers#1;

     label03:
        goto label06;

     label04:
        $r14 := @caughtexception;

        oldRecords#2 = $r14;

        exitmonitor providers#1;

     label05:
        throw oldRecords#2;

     label06:
        virtualinvoke receiver.<com.android.server.LocationManagerService$Receiver: void updateMonitoring(boolean)>(0);

        $r3 = new java.util.HashSet;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        providers#3 = $r3;

        oldRecords#4 = receiver.<com.android.server.LocationManagerService$Receiver: java.util.HashMap mUpdateRecords>;

        if oldRecords#4 == null goto label09;

        $r5 = virtualinvoke oldRecords#4.<java.util.HashMap: java.util.Collection values()>();

        i$#5 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke i$#5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r7 = interfaceinvoke i$#5.<java.util.Iterator: java.lang.Object next()>();

        record#6 = (com.android.server.LocationManagerService$UpdateRecord) $r7;

        virtualinvoke record#6.<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)>(0);

        goto label07;

     label08:
        $r6 = virtualinvoke oldRecords#4.<java.util.HashMap: java.util.Set keySet()>();

        virtualinvoke providers#3.<java.util.HashSet: boolean addAll(java.util.Collection)>($r6);

     label09:
        i$#7 = virtualinvoke providers#3.<java.util.HashSet: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke i$#7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r4 = interfaceinvoke i$#7.<java.util.Iterator: java.lang.Object next()>();

        record#8 = (java.lang.String) $r4;

        $z2 = specialinvoke this.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(record#8);

        if $z2 != 0 goto label11;

        goto label10;

     label11:
        specialinvoke this.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(record#8);

        goto label10;

     label12:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
    }

    private void applyAllProviderRequirementsLocked()
    {
        com.android.server.LocationManagerService this;
        java.util.Iterator i$;
        com.android.server.location.LocationProviderInterface p;
        java.util.ArrayList $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;
        java.lang.String $r2, $r3;

        this := @this: com.android.server.LocationManagerService;

        $r0 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        i$ = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        p = (com.android.server.location.LocationProviderInterface) $r1;

        $r2 = interfaceinvoke p.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $z1 = specialinvoke this.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>($r2);

        if $z1 != 0 goto label2;

        goto label1;

     label2:
        $r3 = interfaceinvoke p.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        specialinvoke this.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>($r3);

        goto label1;

     label3:
        return;
    }

    public android.location.Location getLastLocation(android.location.LocationRequest, java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String packageName, $r0, $r17, $r18, $r24, name#5;
        int allowedResolutionLevel, uid;
        long identity;
        com.android.server.location.LocationProviderInterface provider;
        android.location.Location l12, $r7, $r8, $r11, location#8, noGPSLocation#10, noGPSLocation#11;
        java.lang.Throwable l13, l14, $r23, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.android.server.location.LocationBlacklist $r1;
        java.lang.Object $r2, $r4, $r5, $r12, l7#4;
        java.util.HashMap $r3, $r6, $r10;
        com.android.server.location.LocationFudger $r9;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r25;
        android.location.LocationRequest request#1;

        this := @this: com.android.server.LocationManagerService;

        request#1 := @parameter0: android.location.LocationRequest;

        packageName := @parameter1: java.lang.String;

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label01;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getLastLocation: ");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(request#1);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r24);

     label01:
        if request#1 != null goto label02;

        request#1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label02:
        allowedResolutionLevel = specialinvoke this.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke this.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(packageName);

        $r0 = virtualinvoke request#1.<android.location.LocationRequest: java.lang.String getProvider()>();

        specialinvoke this.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(allowedResolutionLevel, $r0);

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r1 = this.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        $z1 = virtualinvoke $r1.<com.android.server.location.LocationBlacklist: boolean isBlacklisted(java.lang.String)>(packageName);

        if $z1 == 0 goto label05;

        $z5 = <com.android.server.LocationManagerService: boolean D>;

        if $z5 == 0 goto label04;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not returning last loc for blacklisted app: ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r18);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return null;

     label05:
        $z2 = virtualinvoke this.<com.android.server.LocationManagerService: boolean reportLocationAccessNoThrow(int,java.lang.String,int)>(uid, packageName, allowedResolutionLevel);

        if $z2 != 0 goto label07;

        $z4 = <com.android.server.LocationManagerService: boolean D>;

        if $z4 == 0 goto label06;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not returning last loc for no op app: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(packageName);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r17);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return null;

     label07:
        $r2 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l7#4 = $r2;

        entermonitor $r2;

     label08:
        name#5 = virtualinvoke request#1.<android.location.LocationRequest: java.lang.String getProvider()>();

        if name#5 != null goto label09;

        name#5 = "fused";

     label09:
        $r3 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(name#5);

        provider = (com.android.server.location.LocationProviderInterface) $r4;

        if provider != null goto label11;

        exitmonitor l7#4;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return null;

     label11:
        $z3 = specialinvoke this.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(name#5, uid);

        if $z3 != 0 goto label13;

        exitmonitor l7#4;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return null;

     label13:
        if allowedResolutionLevel >= 2 goto label14;

        $r10 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        $r12 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(name#5);

        location#8 = (android.location.Location) $r12;

        goto label15;

     label14:
        $r6 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        $r5 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(name#5);

        location#8 = (android.location.Location) $r5;

     label15:
        if location#8 != null goto label17;

        exitmonitor l7#4;

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return null;

     label17:
        if allowedResolutionLevel >= 2 goto label20;

        noGPSLocation#10 = virtualinvoke location#8.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

        if noGPSLocation#10 == null goto label19;

        $r8 = new android.location.Location;

        $r9 = this.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger>;

        $r11 = virtualinvoke $r9.<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)>(noGPSLocation#10);

        specialinvoke $r8.<android.location.Location: void <init>(android.location.Location)>($r11);

        l12 = $r8;

        exitmonitor l7#4;

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return l12;

     label19:
        goto label22;

     label20:
        $r7 = new android.location.Location;

        specialinvoke $r7.<android.location.Location: void <init>(android.location.Location)>(location#8);

        noGPSLocation#11 = $r7;

        exitmonitor l7#4;

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return noGPSLocation#11;

     label22:
        exitmonitor l7#4;

     label23:
        goto label26;

     label24:
        $r26 := @caughtexception;

        l13 = $r26;

        exitmonitor l7#4;

     label25:
        throw l13;

     label26:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return null;

     label27:
        $r23 := @caughtexception;

        l14 = $r23;

     label28:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l14;

        catch java.lang.Throwable from label08 to label10 with label24;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Throwable from label13 to label16 with label24;
        catch java.lang.Throwable from label17 to label18 with label24;
        catch java.lang.Throwable from label19 to label21 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
        catch java.lang.Throwable from label03 to label04 with label27;
        catch java.lang.Throwable from label05 to label06 with label27;
        catch java.lang.Throwable from label07 to label10 with label27;
        catch java.lang.Throwable from label11 to label12 with label27;
        catch java.lang.Throwable from label13 to label16 with label27;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch java.lang.Throwable from label19 to label21 with label27;
        catch java.lang.Throwable from label22 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    public void requestGeofence(android.location.LocationRequest, android.location.Geofence, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService this;
        android.location.Geofence geofence;
        android.app.PendingIntent intent;
        java.lang.String packageName, $r0, $r9;
        int allowedResolutionLevel, uid, $i0;
        android.location.LocationRequest sanitizedRequest, request#1;
        long identity;
        java.lang.Throwable l10, $r10;
        boolean $z0;
        com.android.server.location.GeofenceManager $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: com.android.server.LocationManagerService;

        request#1 := @parameter0: android.location.LocationRequest;

        geofence := @parameter1: android.location.Geofence;

        intent := @parameter2: android.app.PendingIntent;

        packageName := @parameter3: java.lang.String;

        if request#1 != null goto label1;

        request#1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label1:
        allowedResolutionLevel = specialinvoke this.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke this.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForGeofenceUse(int)>(allowedResolutionLevel);

        specialinvoke this.<com.android.server.LocationManagerService: void checkPendingIntent(android.app.PendingIntent)>(intent);

        specialinvoke this.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(packageName);

        $r0 = virtualinvoke request#1.<android.location.LocationRequest: java.lang.String getProvider()>();

        specialinvoke this.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(allowedResolutionLevel, $r0);

        sanitizedRequest = specialinvoke this.<com.android.server.LocationManagerService: android.location.LocationRequest createSanitizedRequest(android.location.LocationRequest,int)>(request#1, allowedResolutionLevel);

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestGeofence: ");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(sanitizedRequest);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(geofence);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(intent);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r9);

     label2:
        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(uid);

        if $i0 == 0 goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", "proximity alerts are currently available only to the primary user");

        return;

     label3:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label4:
        $r1 = this.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager>;

        virtualinvoke $r1.<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,int,int,java.lang.String)>(sanitizedRequest, geofence, intent, allowedResolutionLevel, uid, packageName);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        goto label8;

     label6:
        $r10 := @caughtexception;

        l10 = $r10;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l10;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void removeGeofence(android.location.Geofence, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService this;
        android.location.Geofence geofence;
        android.app.PendingIntent intent;
        java.lang.String packageName, $r5;
        long identity;
        java.lang.Throwable l6, $r7;
        int $i0;
        boolean $z0;
        com.android.server.location.GeofenceManager $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6;

        this := @this: com.android.server.LocationManagerService;

        geofence := @parameter0: android.location.Geofence;

        intent := @parameter1: android.app.PendingIntent;

        packageName := @parameter2: java.lang.String;

        $i0 = specialinvoke this.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke this.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForGeofenceUse(int)>($i0);

        specialinvoke this.<com.android.server.LocationManagerService: void checkPendingIntent(android.app.PendingIntent)>(intent);

        specialinvoke this.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(packageName);

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeGeofence: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(geofence);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(intent);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r5);

     label1:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r0 = this.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager>;

        virtualinvoke $r0.<com.android.server.location.GeofenceManager: void removeFence(android.location.Geofence,android.app.PendingIntent)>(geofence, intent);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        goto label6;

     label4:
        $r7 := @caughtexception;

        l6 = $r7;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l6;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean addGpsStatusListener(android.location.IGpsStatusListener, java.lang.String)
    {
        com.android.server.LocationManagerService this;
        android.location.IGpsStatusListener listener;
        java.lang.String packageName;
        int allowedResolutionLevel, uid;
        long ident;
        java.lang.Throwable l8, $r3;
        boolean $z0, e#1;
        android.location.IGpsStatusProvider $r0, $r1;
        android.os.RemoteException $r2, e#2;

        this := @this: com.android.server.LocationManagerService;

        listener := @parameter0: android.location.IGpsStatusListener;

        packageName := @parameter1: java.lang.String;

        allowedResolutionLevel = specialinvoke this.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke this.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(allowedResolutionLevel, "gps");

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        ident = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $z0 = virtualinvoke this.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>(uid, packageName, allowedResolutionLevel);

        if $z0 != 0 goto label03;

        e#1 = 0;

     label02:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        return e#1;

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        goto label06;

     label04:
        $r3 := @caughtexception;

        l8 = $r3;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        throw l8;

     label06:
        $r0 = this.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider>;

        if $r0 != null goto label07;

        return 0;

     label07:
        $r1 = this.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider>;

        interfaceinvoke $r1.<android.location.IGpsStatusProvider: void addGpsStatusListener(android.location.IGpsStatusListener)>(listener);

     label08:
        goto label10;

     label09:
        $r2 := @caughtexception;

        e#2 = $r2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "mGpsStatusProvider.addGpsStatusListener failed", e#2);

        return 0;

     label10:
        return 1;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch android.os.RemoteException from label07 to label08 with label09;
    }

    public void removeGpsStatusListener(android.location.IGpsStatusListener)
    {
        com.android.server.LocationManagerService this;
        android.location.IGpsStatusListener listener;
        java.lang.Object l2, $r0;
        java.lang.Exception e, $r3;
        java.lang.Throwable l4, $r2;
        android.location.IGpsStatusProvider $r1;

        this := @this: com.android.server.LocationManagerService;

        listener := @parameter0: android.location.IGpsStatusListener;

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider>;

        interfaceinvoke $r1.<android.location.IGpsStatusProvider: void removeGpsStatusListener(android.location.IGpsStatusListener)>(listener);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        e = $r3;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "mGpsStatusProvider.removeGpsStatusListener failed", e);

     label4:
        exitmonitor l2;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        l4 = $r2;

        exitmonitor l2;

     label7:
        throw l4;

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean addGpsMeasurementsListener(android.location.IGpsMeasurementsListener, java.lang.String)
    {
        com.android.server.LocationManagerService this;
        android.location.IGpsMeasurementsListener listener;
        java.lang.String packageName;
        int allowedResolutionLevel, uid;
        long identity;
        boolean hasLocationAccess, $z0;
        java.lang.Throwable l8, $r1;
        com.android.server.location.GpsMeasurementsProvider $r0;
        android.os.IInterface tmp$967341867;

        this := @this: com.android.server.LocationManagerService;

        listener := @parameter0: android.location.IGpsMeasurementsListener;

        packageName := @parameter1: java.lang.String;

        allowedResolutionLevel = specialinvoke this.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke this.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(allowedResolutionLevel, "gps");

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        hasLocationAccess = virtualinvoke this.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>(uid, packageName, allowedResolutionLevel);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        goto label5;

     label3:
        $r1 := @caughtexception;

        l8 = $r1;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l8;

     label5:
        if hasLocationAccess != 0 goto label6;

        return 0;

     label6:
        $r0 = this.<com.android.server.LocationManagerService: com.android.server.location.GpsMeasurementsProvider mGpsMeasurementsProvider>;

        tmp$967341867 = (android.os.IInterface) listener;

        $z0 = virtualinvoke $r0.<com.android.server.location.GpsMeasurementsProvider: boolean addListener(android.os.IInterface)>(tmp$967341867);

        return $z0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeGpsMeasurementsListener(android.location.IGpsMeasurementsListener)
    {
        com.android.server.LocationManagerService this;
        android.location.IGpsMeasurementsListener listener;
        com.android.server.location.GpsMeasurementsProvider $r0;
        android.os.IInterface tmp$1913059008;

        this := @this: com.android.server.LocationManagerService;

        listener := @parameter0: android.location.IGpsMeasurementsListener;

        $r0 = this.<com.android.server.LocationManagerService: com.android.server.location.GpsMeasurementsProvider mGpsMeasurementsProvider>;

        tmp$1913059008 = (android.os.IInterface) listener;

        virtualinvoke $r0.<com.android.server.location.GpsMeasurementsProvider: void removeListener(android.os.IInterface)>(tmp$1913059008);

        return;
    }

    public boolean addGpsNavigationMessageListener(android.location.IGpsNavigationMessageListener, java.lang.String)
    {
        com.android.server.LocationManagerService this;
        android.location.IGpsNavigationMessageListener listener;
        java.lang.String packageName;
        int allowedResolutionLevel, uid;
        long identity;
        boolean hasLocationAccess, $z0;
        java.lang.Throwable l8, $r1;
        com.android.server.location.GpsNavigationMessageProvider $r0;
        android.os.IInterface tmp$958320424;

        this := @this: com.android.server.LocationManagerService;

        listener := @parameter0: android.location.IGpsNavigationMessageListener;

        packageName := @parameter1: java.lang.String;

        allowedResolutionLevel = specialinvoke this.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke this.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(allowedResolutionLevel, "gps");

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        hasLocationAccess = virtualinvoke this.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>(uid, packageName, allowedResolutionLevel);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        goto label5;

     label3:
        $r1 := @caughtexception;

        l8 = $r1;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l8;

     label5:
        if hasLocationAccess != 0 goto label6;

        return 0;

     label6:
        $r0 = this.<com.android.server.LocationManagerService: com.android.server.location.GpsNavigationMessageProvider mGpsNavigationMessageProvider>;

        tmp$958320424 = (android.os.IInterface) listener;

        $z0 = virtualinvoke $r0.<com.android.server.location.GpsNavigationMessageProvider: boolean addListener(android.os.IInterface)>(tmp$958320424);

        return $z0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeGpsNavigationMessageListener(android.location.IGpsNavigationMessageListener)
    {
        com.android.server.LocationManagerService this;
        android.location.IGpsNavigationMessageListener listener;
        com.android.server.location.GpsNavigationMessageProvider $r0;
        android.os.IInterface tmp$361457680;

        this := @this: com.android.server.LocationManagerService;

        listener := @parameter0: android.location.IGpsNavigationMessageListener;

        $r0 = this.<com.android.server.LocationManagerService: com.android.server.location.GpsNavigationMessageProvider mGpsNavigationMessageProvider>;

        tmp$361457680 = (android.os.IInterface) listener;

        virtualinvoke $r0.<com.android.server.location.GpsNavigationMessageProvider: void removeListener(android.os.IInterface)>(tmp$361457680);

        return;
    }

    public boolean sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, command;
        android.os.Bundle extras;
        java.lang.Object l4, $r1, $r3;
        com.android.server.location.LocationProviderInterface p;
        java.lang.Throwable l6, $r6;
        int $i0, $i1;
        android.content.Context $r0;
        java.util.HashMap $r2;
        boolean $z0;
        java.lang.NullPointerException $r4;
        java.lang.SecurityException $r5;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        command := @parameter1: java.lang.String;

        extras := @parameter2: android.os.Bundle;

        if provider != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $i0 = specialinvoke this.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke this.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>($i0, provider);

        $r0 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ACCESS_LOCATION_EXTRA_COMMANDS");

        if $i1 == 0 goto label2;

        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_LOCATION_EXTRA_COMMANDS permission");

        throw $r5;

     label2:
        $r1 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l4 = $r1;

        entermonitor $r1;

     label3:
        $r2 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        p = (com.android.server.location.LocationProviderInterface) $r3;

        if p != null goto label5;

        exitmonitor l4;

     label4:
        return 0;

     label5:
        $z0 = interfaceinvoke p.<com.android.server.location.LocationProviderInterface: boolean sendExtraCommand(java.lang.String,android.os.Bundle)>(command, extras);

        exitmonitor l4;

     label6:
        return $z0;

     label7:
        $r6 := @caughtexception;

        l6 = $r6;

        exitmonitor l4;

     label8:
        throw l6;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean sendNiResponse(int, int)
    {
        com.android.server.LocationManagerService this;
        int notifId, userResponse, $i0, $i1;
        android.os.RemoteException e, $r2;
        android.location.INetInitiatedListener $r0;
        boolean $z0;
        java.lang.SecurityException $r1;

        this := @this: com.android.server.LocationManagerService;

        notifId := @parameter0: int;

        userResponse := @parameter1: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 == $i1 goto label1;

        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("calling sendNiResponse from outside of the system is not allowed");

        throw $r1;

     label1:
        $r0 = this.<com.android.server.LocationManagerService: android.location.INetInitiatedListener mNetInitiatedListener>;

        $z0 = interfaceinvoke $r0.<android.location.INetInitiatedListener: boolean sendNiResponse(int,int)>(notifId, userResponse);

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "RemoteException in LocationManagerService.sendNiResponse");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider;
        com.android.server.location.LocationProviderInterface p;
        java.lang.Object l3, $r1, $r2, $r4;
        java.lang.Throwable l4, $r6;
        java.util.HashMap $r0, $r3;
        int $i0;
        com.android.internal.location.ProviderProperties $r5;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        if $r1 != null goto label1;

        return null;

     label1:
        $i0 = specialinvoke this.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke this.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>($i0, provider);

        $r2 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l3 = $r2;

        entermonitor $r2;

     label2:
        $r3 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        p = (com.android.server.location.LocationProviderInterface) $r4;

        exitmonitor l3;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        l4 = $r6;

        exitmonitor l3;

     label5:
        throw l4;

     label6:
        if p != null goto label7;

        return null;

     label7:
        $r5 = interfaceinvoke p.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        return $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isProviderEnabled(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, $r0;
        int uid;
        long identity;
        java.lang.Object l5, $r1, $r3;
        com.android.server.location.LocationProviderInterface p;
        java.lang.Throwable l8, l9, $r4, $r5;
        boolean $z0, l7#1, l7#2;
        java.util.HashMap $r2;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        $r0 = "fused";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(provider);

        if $z0 == 0 goto label01;

        return 0;

     label01:
        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r1 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l5 = $r1;

        entermonitor $r1;

     label03:
        $r2 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        p = (com.android.server.location.LocationProviderInterface) $r3;

        if p != null goto label05;

        l7#1 = 0;

        exitmonitor l5;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return l7#1;

     label05:
        l7#2 = specialinvoke this.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(provider, uid);

        exitmonitor l5;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return l7#2;

     label07:
        $r4 := @caughtexception;

        l8 = $r4;

        exitmonitor l5;

     label08:
        throw l8;

     label09:
        $r5 := @caughtexception;

        l9 = $r5;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        throw l9;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label02 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label10 with label09;
    }

    private boolean isUidALocationProvider(int)
    {
        com.android.server.LocationManagerService this;
        int uid;
        java.util.Iterator i$;
        com.android.server.location.LocationProviderProxy proxy;
        com.android.server.location.GeocoderProxy $r0, $r4;
        java.util.ArrayList $r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        java.lang.String $r3, $r5;

        this := @this: com.android.server.LocationManagerService;

        uid := @parameter0: int;

        if uid != 1000 goto label1;

        return 1;

     label1:
        $r0 = this.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r0 == null goto label2;

        $r4 = this.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        $r5 = virtualinvoke $r4.<com.android.server.location.GeocoderProxy: java.lang.String getConnectedPackageName()>();

        $z2 = specialinvoke this.<com.android.server.LocationManagerService: boolean doesUidHavePackage(int,java.lang.String)>(uid, $r5);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        $r1 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders>;

        i$ = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        proxy = (com.android.server.location.LocationProviderProxy) $r2;

        $r3 = virtualinvoke proxy.<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()>();

        $z1 = specialinvoke this.<com.android.server.LocationManagerService: boolean doesUidHavePackage(int,java.lang.String)>(uid, $r3);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        goto label3;

     label5:
        return 0;
    }

    private void checkCallerIsProvider()
    {
        com.android.server.LocationManagerService this;
        android.content.Context $r0;
        int $i0, $i1;
        boolean $z0;
        java.lang.SecurityException $r1;

        this := @this: com.android.server.LocationManagerService;

        $r0 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_LOCATION_PROVIDER");

        if $i0 != 0 goto label1;

        return;

     label1:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke this.<com.android.server.LocationManagerService: boolean isUidALocationProvider(int)>($i1);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("need INSTALL_LOCATION_PROVIDER permission, or UID of a currently bound location provider");

        throw $r1;
    }

    private boolean doesUidHavePackage(int, java.lang.String)
    {
        com.android.server.LocationManagerService this;
        int uid, len$, i$#1;
        java.lang.String packageName, name;
        java.lang.String[] packageNames, arr$;
        android.content.pm.PackageManager $r0;
        boolean $z0;

        this := @this: com.android.server.LocationManagerService;

        uid := @parameter0: int;

        packageName := @parameter1: java.lang.String;

        if packageName != null goto label1;

        return 0;

     label1:
        $r0 = this.<com.android.server.LocationManagerService: android.content.pm.PackageManager mPackageManager>;

        packageNames = virtualinvoke $r0.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(uid);

        if packageNames != null goto label2;

        return 0;

     label2:
        arr$ = packageNames;

        len$ = lengthof arr$;

        i$#1 = 0;

     label3:
        if i$#1 >= len$ goto label5;

        name = arr$[i$#1];

        $z0 = virtualinvoke packageName.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        i$#1 = i$#1 + 1;

        goto label3;

     label5:
        return 0;
    }

    public void reportLocation(android.location.Location, boolean)
    {
        com.android.server.LocationManagerService this;
        android.location.Location location;
        boolean passive, $z0;
        android.os.Message m;
        com.android.server.LocationManagerService$LocationWorkerHandler $r0, $r1, $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        byte $b1;

        this := @this: com.android.server.LocationManagerService;

        location := @parameter0: android.location.Location;

        passive := @parameter1: boolean;

        specialinvoke this.<com.android.server.LocationManagerService: void checkCallerIsProvider()>();

        $z0 = virtualinvoke location.<android.location.Location: boolean isComplete()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping incomplete location: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(location);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r6);

        return;

     label1:
        $r0 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r0.<com.android.server.LocationManagerService$LocationWorkerHandler: void removeMessages(int,java.lang.Object)>(1, location);

        $r1 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        m = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r1, 1, location);

        if passive == 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = 0;

     label3:
        m.<android.os.Message: int arg1> = $b1;

        $r2 = this.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r2.<com.android.server.LocationManagerService$LocationWorkerHandler: void dispatchMessage_LocationManagerService__LocationWorkerHandler_1(android.os.Message)>(m);

        return;
    }

    private static boolean shouldBroadcastSafe(android.location.Location, android.location.Location, com.android.server.LocationManagerService$UpdateRecord, long)
    {
        android.location.Location loc, lastLoc;
        com.android.server.LocationManagerService$UpdateRecord record;
        long now, minTime, delta, $l0, $l1, $l2, $l4, $l8;
        double minDistance, $d0;
        android.location.LocationRequest $r0, $r1, $r2, $r3;
        byte $b3, $b5, $b7, $b9;
        float $f0, $f1;
        int $i6;

        loc := @parameter0: android.location.Location;

        lastLoc := @parameter1: android.location.Location;

        record := @parameter2: com.android.server.LocationManagerService$UpdateRecord;

        now := @parameter3: long;

        if lastLoc != null goto label1;

        return 1;

     label1:
        $r0 = record.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        minTime = virtualinvoke $r0.<android.location.LocationRequest: long getFastestInterval()>();

        $l0 = virtualinvoke loc.<android.location.Location: long getElapsedRealtimeNanos()>();

        $l1 = virtualinvoke lastLoc.<android.location.Location: long getElapsedRealtimeNanos()>();

        $l2 = $l0 - $l1;

        delta = $l2 / 1000000L;

        $l4 = minTime - 100L;

        $b3 = delta cmp $l4;

        if $b3 >= 0 goto label2;

        return 0;

     label2:
        $r1 = record.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $f0 = virtualinvoke $r1.<android.location.LocationRequest: float getSmallestDisplacement()>();

        minDistance = (double) $f0;

        $b5 = minDistance cmpl 0.0;

        if $b5 <= 0 goto label3;

        $f1 = virtualinvoke loc.<android.location.Location: float distanceTo(android.location.Location)>(lastLoc);

        $d0 = (double) $f1;

        $b9 = $d0 cmpg minDistance;

        if $b9 > 0 goto label3;

        return 0;

     label3:
        $r2 = record.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $i6 = virtualinvoke $r2.<android.location.LocationRequest: int getNumUpdates()>();

        if $i6 > 0 goto label4;

        return 0;

     label4:
        $r3 = record.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $l8 = virtualinvoke $r3.<android.location.LocationRequest: long getExpireAt()>();

        $b7 = $l8 cmp now;

        if $b7 >= 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    private void handleLocationChangedLocked(android.location.Location, boolean)
    {
        com.android.server.LocationManagerService this;
        android.location.Location location, $r31, $r48, $r56, noGPSLocation#2, lastLocation#4, lastNoGPSLocation#5, lastLocationCoarseInterval#6, noGPSLocation#7, coarseLocation#8, notifyLocation#15, lastLoc#16, lastLoc#17;
        boolean passive, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, receiverDead#13;
        long now, timeDiffNanos, newStatusUpdateTime, $l1, $l2, $l9, lastLoc#18;
        java.lang.String provider, $r13, $r15, $r20, $r24, $r29, $r33, $r36, $r38, $r41, $r51, $r53, $r58;
        com.android.server.location.LocationProviderInterface p;
        java.util.ArrayList records, $r16, $r17, deadReceivers#9, deadUpdateRecords#10;
        android.os.Bundle extras, $r8;
        int status, receiverUserId, $i3, $i4, $i5, $i7, $i8, $i10, $i13, $i14;
        com.android.server.LocationManagerService$Receiver receiver, r#20;
        java.util.HashMap $r0, $r1, $r3, $r6, $r47, $r57;
        java.lang.Object $r2, $r4, $r5, $r7, $r9, $r10, $r11;
        byte $b0, $b6, $b11, $b12;
        com.android.server.location.LocationBlacklist $r12;
        android.location.LocationRequest $r14, $r18, $r27;
        java.lang.StringBuilder $r19, $r21, $r22, $r23, $r25, $r26, $r28, $r30, $r32, $r34, $r35, $r37, $r39, $r40, $r42, $r43, $r44, $r45, $r46, $r49, $r50, $r52, $r54;
        com.android.server.location.LocationFudger $r55;
        java.util.Iterator i$#11, i$#19, i$#21;
        com.android.server.LocationManagerService$UpdateRecord r#12, r#22;

        this := @this: com.android.server.LocationManagerService;

        location := @parameter0: android.location.Location;

        passive := @parameter1: boolean;

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label01;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("incoming location: ");

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(location);

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r51);

     label01:
        now = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        if passive == 0 goto label02;

        $r58 = "passive";

        goto label03;

     label02:
        $r58 = virtualinvoke location.<android.location.Location: java.lang.String getProvider()>();

     label03:
        provider = $r58;

        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        p = (com.android.server.location.LocationProviderInterface) $r2;

        if p != null goto label04;

        return;

     label04:
        noGPSLocation#2 = virtualinvoke location.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

        $r0 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        $r5 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        lastLocation#4 = (android.location.Location) $r5;

        if lastLocation#4 != null goto label05;

        $r48 = new android.location.Location;

        specialinvoke $r48.<android.location.Location: void <init>(java.lang.String)>(provider);

        lastLocation#4 = $r48;

        $r47 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r47.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(provider, lastLocation#4);

        goto label06;

     label05:
        lastNoGPSLocation#5 = virtualinvoke lastLocation#4.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

        if noGPSLocation#2 != null goto label06;

        if lastNoGPSLocation#5 == null goto label06;

        virtualinvoke location.<android.location.Location: void setExtraLocation(java.lang.String,android.location.Location)>("noGPSLocation", lastNoGPSLocation#5);

     label06:
        virtualinvoke lastLocation#4.<android.location.Location: void set(android.location.Location)>(location);

        $r3 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        lastLocationCoarseInterval#6 = (android.location.Location) $r4;

        if lastLocationCoarseInterval#6 != null goto label07;

        $r56 = new android.location.Location;

        specialinvoke $r56.<android.location.Location: void <init>(android.location.Location)>(location);

        lastLocationCoarseInterval#6 = $r56;

        $r57 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r57.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(provider, lastLocationCoarseInterval#6);

     label07:
        $l1 = virtualinvoke location.<android.location.Location: long getElapsedRealtimeNanos()>();

        $l2 = virtualinvoke lastLocationCoarseInterval#6.<android.location.Location: long getElapsedRealtimeNanos()>();

        timeDiffNanos = $l1 - $l2;

        $b0 = timeDiffNanos cmp 600000000000L;

        if $b0 <= 0 goto label08;

        virtualinvoke lastLocationCoarseInterval#6.<android.location.Location: void set(android.location.Location)>(location);

     label08:
        noGPSLocation#7 = virtualinvoke lastLocationCoarseInterval#6.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

        $r6 = this.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        records = (java.util.ArrayList) $r7;

        if records == null goto label09;

        $i3 = virtualinvoke records.<java.util.ArrayList: int size()>();

        if $i3 != 0 goto label10;

     label09:
        return;

     label10:
        coarseLocation#8 = null;

        if noGPSLocation#7 == null goto label11;

        $r55 = this.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger>;

        coarseLocation#8 = virtualinvoke $r55.<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)>(noGPSLocation#7);

     label11:
        newStatusUpdateTime = interfaceinvoke p.<com.android.server.location.LocationProviderInterface: long getStatusUpdateTime()>();

        $r8 = new android.os.Bundle;

        specialinvoke $r8.<android.os.Bundle: void <init>()>();

        extras = $r8;

        status = interfaceinvoke p.<com.android.server.location.LocationProviderInterface: int getStatus(android.os.Bundle)>(extras);

        deadReceivers#9 = null;

        deadUpdateRecords#10 = null;

        i$#11 = virtualinvoke records.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke i$#11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label30;

        $r10 = interfaceinvoke i$#11.<java.util.Iterator: java.lang.Object next()>();

        r#12 = (com.android.server.LocationManagerService$UpdateRecord) $r10;

        receiver = r#12.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        receiverDead#13 = 0;

        $i4 = receiver.<com.android.server.LocationManagerService$Receiver: int mUid>;

        receiverUserId = staticinvoke <android.os.UserHandle: int getUserId(int)>($i4);

        $z4 = specialinvoke this.<com.android.server.LocationManagerService: boolean isCurrentProfile(int)>(receiverUserId);

        if $z4 != 0 goto label13;

        $i13 = receiver.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $z14 = specialinvoke this.<com.android.server.LocationManagerService: boolean isUidALocationProvider(int)>($i13);

        if $z14 != 0 goto label13;

        $z13 = <com.android.server.LocationManagerService: boolean D>;

        if $z13 == 0 goto label12;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipping loc update for background user ");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(receiverUserId);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (current user: ");

        $i14 = this.<com.android.server.LocationManagerService: int mCurrentUserId>;

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", app: ");

        $r41 = receiver.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r40 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r54 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r53);

        goto label12;

     label13:
        $r12 = this.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        $r13 = receiver.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $z6 = virtualinvoke $r12.<com.android.server.location.LocationBlacklist: boolean isBlacklisted(java.lang.String)>($r13);

        if $z6 == 0 goto label14;

        $z12 = <com.android.server.LocationManagerService: boolean D>;

        if $z12 == 0 goto label12;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipping loc update for blacklisted app: ");

        $r33 = receiver.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r39 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r38);

        goto label12;

     label14:
        $i8 = receiver.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $r15 = receiver.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $i7 = receiver.<com.android.server.LocationManagerService$Receiver: int mAllowedResolutionLevel>;

        $z5 = virtualinvoke this.<com.android.server.LocationManagerService: boolean reportLocationAccessNoThrow(int,java.lang.String,int)>($i8, $r15, $i7);

        if $z5 != 0 goto label15;

        $z11 = <com.android.server.LocationManagerService: boolean D>;

        if $z11 == 0 goto label12;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipping loc update for no op app: ");

        $r29 = receiver.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r35 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r36);

        goto label12;

     label15:
        $i5 = receiver.<com.android.server.LocationManagerService$Receiver: int mAllowedResolutionLevel>;

        if $i5 >= 2 goto label16;

        notifyLocation#15 = coarseLocation#8;

        goto label17;

     label16:
        notifyLocation#15 = lastLocation#4;

     label17:
        if notifyLocation#15 == null goto label22;

        lastLoc#16 = r#12.<com.android.server.LocationManagerService$UpdateRecord: android.location.Location mLastFixBroadcast>;

        if lastLoc#16 == null goto label18;

        $z10 = staticinvoke <com.android.server.LocationManagerService: boolean shouldBroadcastSafe(android.location.Location,android.location.Location,com.android.server.LocationManagerService$UpdateRecord,long)>(notifyLocation#15, lastLoc#16, r#12, now);

        if $z10 == 0 goto label22;

     label18:
        if lastLoc#16 != null goto label19;

        $r31 = new android.location.Location;

        specialinvoke $r31.<android.location.Location: void <init>(android.location.Location)>(notifyLocation#15);

        lastLoc#17 = $r31;

        r#12.<com.android.server.LocationManagerService$UpdateRecord: android.location.Location mLastFixBroadcast> = lastLoc#17;

        goto label20;

     label19:
        virtualinvoke lastLoc#16.<android.location.Location: void set(android.location.Location)>(notifyLocation#15);

     label20:
        $z9 = virtualinvoke receiver.<com.android.server.LocationManagerService$Receiver: boolean callLocationChangedLocked(android.location.Location)>(notifyLocation#15);

        if $z9 != 0 goto label21;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException calling onLocationChanged on ");

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(receiver);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r24);

        receiverDead#13 = 1;

     label21:
        $r27 = r#12.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        virtualinvoke $r27.<android.location.LocationRequest: void decrementNumUpdates()>();

     label22:
        lastLoc#18 = r#12.<com.android.server.LocationManagerService$UpdateRecord: long mLastStatusBroadcast>;

        $b6 = newStatusUpdateTime cmp lastLoc#18;

        if $b6 <= 0 goto label24;

        $b11 = lastLoc#18 cmp 0L;

        if $b11 != 0 goto label23;

        if status == 2 goto label24;

     label23:
        r#12.<com.android.server.LocationManagerService$UpdateRecord: long mLastStatusBroadcast> = newStatusUpdateTime;

        $z8 = virtualinvoke receiver.<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)>(provider, status, extras);

        if $z8 != 0 goto label24;

        receiverDead#13 = 1;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException calling onStatusChanged on ");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(receiver);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r20);

     label24:
        $r14 = r#12.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $i10 = virtualinvoke $r14.<android.location.LocationRequest: int getNumUpdates()>();

        if $i10 <= 0 goto label25;

        $r18 = r#12.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $l9 = virtualinvoke $r18.<android.location.LocationRequest: long getExpireAt()>();

        $b12 = $l9 cmp now;

        if $b12 >= 0 goto label27;

     label25:
        if deadUpdateRecords#10 != null goto label26;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        deadUpdateRecords#10 = $r17;

     label26:
        virtualinvoke deadUpdateRecords#10.<java.util.ArrayList: boolean add(java.lang.Object)>(r#12);

     label27:
        if receiverDead#13 == 0 goto label29;

        if deadReceivers#9 != null goto label28;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        deadReceivers#9 = $r16;

     label28:
        $z7 = virtualinvoke deadReceivers#9.<java.util.ArrayList: boolean contains(java.lang.Object)>(receiver);

        if $z7 != 0 goto label29;

        virtualinvoke deadReceivers#9.<java.util.ArrayList: boolean add(java.lang.Object)>(receiver);

     label29:
        goto label12;

     label30:
        if deadReceivers#9 == null goto label32;

        i$#19 = virtualinvoke deadReceivers#9.<java.util.ArrayList: java.util.Iterator iterator()>();

     label31:
        $z3 = interfaceinvoke i$#19.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label32;

        $r11 = interfaceinvoke i$#19.<java.util.Iterator: java.lang.Object next()>();

        r#20 = (com.android.server.LocationManagerService$Receiver) $r11;

        specialinvoke this.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>(r#20);

        goto label31;

     label32:
        if deadUpdateRecords#10 == null goto label35;

        i$#21 = virtualinvoke deadUpdateRecords#10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label33:
        $z2 = interfaceinvoke i$#21.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label34;

        $r9 = interfaceinvoke i$#21.<java.util.Iterator: java.lang.Object next()>();

        r#22 = (com.android.server.LocationManagerService$UpdateRecord) $r9;

        virtualinvoke r#22.<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)>(1);

        goto label33;

     label34:
        specialinvoke this.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(provider);

     label35:
        return;
    }

    private boolean isMockProvider(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider;
        java.lang.Object l2, $r0;
        java.lang.Throwable l3, $r2;
        java.util.HashMap $r1;
        boolean $z0;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>(provider);

        exitmonitor l2;

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        l3 = $r2;

        exitmonitor l2;

     label4:
        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleLocationChanged(android.location.Location, boolean)
    {
        com.android.server.LocationManagerService this;
        android.location.Location location, myLocation, $r0;
        boolean passive, $z0, $z1, $z2;
        java.lang.String provider;
        java.lang.Object l5, $r1;
        java.lang.Throwable l6, $r3;
        com.android.server.location.PassiveProvider $r2;

        this := @this: com.android.server.LocationManagerService;

        location := @parameter0: android.location.Location;

        passive := @parameter1: boolean;

        $r0 = new android.location.Location;

        specialinvoke $r0.<android.location.Location: void <init>(android.location.Location)>(location);

        myLocation = $r0;

        provider = virtualinvoke myLocation.<android.location.Location: java.lang.String getProvider()>();

        $z0 = virtualinvoke myLocation.<android.location.Location: boolean isFromMockProvider()>();

        if $z0 != 0 goto label1;

        $z2 = specialinvoke this.<com.android.server.LocationManagerService: boolean isMockProvider(java.lang.String)>(provider);

        if $z2 == 0 goto label1;

        virtualinvoke myLocation.<android.location.Location: void setIsFromMockProvider(boolean)>(1);

     label1:
        $r1 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l5 = $r1;

        entermonitor $r1;

     label2:
        $z1 = specialinvoke this.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(provider);

        if $z1 == 0 goto label4;

        if passive != 0 goto label3;

        $r2 = this.<com.android.server.LocationManagerService: com.android.server.location.PassiveProvider mPassiveProvider>;

        virtualinvoke $r2.<com.android.server.location.PassiveProvider: void updateLocation(android.location.Location)>(myLocation);

     label3:
        specialinvoke this.<com.android.server.LocationManagerService: void handleLocationChangedLocked(android.location.Location,boolean)>(myLocation, passive);

     label4:
        exitmonitor l5;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        l6 = $r3;

        exitmonitor l5;

     label7:
        throw l6;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean geocoderIsPresent()
    {
        com.android.server.LocationManagerService this;
        com.android.server.location.GeocoderProxy $r0;
        boolean $z0;

        this := @this: com.android.server.LocationManagerService;

        $r0 = this.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getFromLocation(double, double, int, android.location.GeocoderParams, java.util.List)
    {
        com.android.server.LocationManagerService this;
        double latitude, longitude;
        int maxResults;
        android.location.GeocoderParams params;
        java.util.List addrs;
        com.android.server.location.GeocoderProxy $r0, $r1;
        java.lang.String $r2;

        this := @this: com.android.server.LocationManagerService;

        latitude := @parameter0: double;

        longitude := @parameter1: double;

        maxResults := @parameter2: int;

        params := @parameter3: android.location.GeocoderParams;

        addrs := @parameter4: java.util.List;

        $r0 = this.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r0 == null goto label1;

        $r1 = this.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        $r2 = virtualinvoke $r1.<com.android.server.location.GeocoderProxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>(latitude, longitude, maxResults, params, addrs);

        return $r2;

     label1:
        return null;
    }

    public java.lang.String getFromLocationName(java.lang.String, double, double, double, double, int, android.location.GeocoderParams, java.util.List)
    {
        com.android.server.LocationManagerService this;
        java.lang.String locationName, $r2;
        double lowerLeftLatitude, lowerLeftLongitude, upperRightLatitude, upperRightLongitude;
        int maxResults;
        android.location.GeocoderParams params;
        java.util.List addrs;
        com.android.server.location.GeocoderProxy $r0, $r1;

        this := @this: com.android.server.LocationManagerService;

        locationName := @parameter0: java.lang.String;

        lowerLeftLatitude := @parameter1: double;

        lowerLeftLongitude := @parameter2: double;

        upperRightLatitude := @parameter3: double;

        upperRightLongitude := @parameter4: double;

        maxResults := @parameter5: int;

        params := @parameter6: android.location.GeocoderParams;

        addrs := @parameter7: java.util.List;

        $r0 = this.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r0 == null goto label1;

        $r1 = this.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        $r2 = virtualinvoke $r1.<com.android.server.location.GeocoderProxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>(locationName, lowerLeftLatitude, lowerLeftLongitude, upperRightLatitude, upperRightLongitude, maxResults, params, addrs);

        return $r2;

     label1:
        return null;
    }

    private void checkMockPermissionsSafe()
    {
        com.android.server.LocationManagerService this;
        boolean allowMocks, $z0;
        android.content.Context $r0, $r2;
        android.content.ContentResolver $r1;
        int $i0, $i1;
        java.lang.SecurityException $r3, $r4;

        this := @this: com.android.server.LocationManagerService;

        $r0 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "mock_location", 0);

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        allowMocks = $z0;

        if allowMocks != 0 goto label3;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_MOCK_LOCATION secure setting");

        throw $r4;

     label3:
        $r2 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_MOCK_LOCATION");

        if $i1 == 0 goto label4;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_MOCK_LOCATION permission");

        throw $r3;

     label4:
        return;
    }

    public void addTestProvider(java.lang.String, com.android.internal.location.ProviderProperties)
    {
        com.android.server.LocationManagerService this;
        java.lang.String name, $r0, $r2, $r5, $r6;
        com.android.internal.location.ProviderProperties properties;
        long identity;
        java.lang.Object l5, $r1, $r4;
        com.android.server.location.LocationProviderInterface p;
        java.lang.Throwable l7, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.util.HashMap $r3;
        java.lang.IllegalArgumentException $r7;

        this := @this: com.android.server.LocationManagerService;

        name := @parameter0: java.lang.String;

        properties := @parameter1: com.android.internal.location.ProviderProperties;

        specialinvoke this.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r0 = "passive";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot mock the passive location provider");

        throw $r7;

     label1:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r1 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l5 = $r1;

        entermonitor $r1;

     label2:
        $r2 = "gps";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z1 != 0 goto label3;

        $r5 = "network";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z2 != 0 goto label3;

        $r6 = "fused";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z3 == 0 goto label4;

     label3:
        $r3 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(name);

        p = (com.android.server.location.LocationProviderInterface) $r4;

        if p == null goto label4;

        specialinvoke this.<com.android.server.LocationManagerService: void removeProviderLocked(com.android.server.location.LocationProviderInterface)>(p);

     label4:
        specialinvoke this.<com.android.server.LocationManagerService: void addTestProviderLocked(java.lang.String,com.android.internal.location.ProviderProperties)>(name, properties);

        specialinvoke this.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor l5;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        l7 = $r8;

        exitmonitor l5;

     label7:
        throw l7;

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void addTestProviderLocked(java.lang.String, com.android.internal.location.ProviderProperties)
    {
        com.android.server.LocationManagerService this;
        java.lang.String name, $r14;
        com.android.internal.location.ProviderProperties properties;
        com.android.server.location.MockProvider provider, tmp$835830824;
        java.util.HashMap $r0, $r3, $r5, $r7;
        java.lang.Object $r1;
        java.lang.StringBuilder $r11, $r12, $r13, tmp$667777901;
        java.lang.IllegalArgumentException tmp$146944233;
        com.android.server.location.LocationProviderInterface tmp$148305459;

        this := @this: com.android.server.LocationManagerService;

        name := @parameter0: java.lang.String;

        properties := @parameter1: com.android.internal.location.ProviderProperties;

        $r0 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(name);

        if $r1 == null goto label1;

        tmp$146944233 = new java.lang.IllegalArgumentException;

        tmp$667777901 = new java.lang.StringBuilder;

        specialinvoke tmp$667777901.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke tmp$667777901.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" already exists");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke tmp$146944233.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw tmp$146944233;

     label1:
        tmp$835830824 = new com.android.server.location.MockProvider;

        specialinvoke tmp$835830824.<com.android.server.location.MockProvider: void <init>(java.lang.String,android.location.ILocationManager,com.android.internal.location.ProviderProperties)>(name, this, properties);

        provider = tmp$835830824;

        tmp$148305459 = (com.android.server.location.LocationProviderInterface) provider;

        specialinvoke this.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(tmp$148305459);

        $r3 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, provider);

        $r5 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, null);

        $r7 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, null);

        return;
    }

    public void removeTestProvider(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, $r16;
        java.lang.Object l2, $r0, $r2, $r4, $r8;
        com.android.server.location.MockProvider mockProvider;
        long identity;
        com.android.server.location.LocationProviderInterface realProvider, $r5;
        java.lang.Throwable l7, $r18;
        java.util.HashMap $r1, $r3, $r6, $r7, $r9;
        java.lang.StringBuilder $r12, $r14, $r15, $r17;
        java.lang.IllegalArgumentException $r13;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        specialinvoke this.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        virtualinvoke this.<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)>(provider);

        virtualinvoke this.<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)>(provider);

        virtualinvoke this.<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)>(provider);

        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(provider);

        mockProvider = (com.android.server.location.MockProvider) $r2;

        if mockProvider != null goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(provider);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label2:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r3 = this.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        $r5 = (com.android.server.location.LocationProviderInterface) $r4;

        specialinvoke this.<com.android.server.LocationManagerService: void removeProviderLocked(com.android.server.location.LocationProviderInterface)>($r5);

        $r6 = this.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        realProvider = (com.android.server.location.LocationProviderInterface) $r8;

        if realProvider == null goto label3;

        specialinvoke this.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(realProvider);

     label3:
        $r7 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(provider, null);

        $r9 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(provider, null);

        specialinvoke this.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        exitmonitor l2;

     label4:
        goto label7;

     label5:
        $r18 := @caughtexception;

        l7 = $r18;

        exitmonitor l2;

     label6:
        throw l7;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setTestProviderLocation(java.lang.String, android.location.Location)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, $r9;
        android.location.Location loc;
        java.lang.Object l3, $r0, $r2;
        com.android.server.location.MockProvider mockProvider;
        long identity;
        java.lang.Throwable l7, $r8;
        java.util.HashMap $r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        loc := @parameter1: android.location.Location;

        specialinvoke this.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        mockProvider = (com.android.server.location.MockProvider) $r2;

        if mockProvider != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(provider);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        virtualinvoke mockProvider.<com.android.server.location.MockProvider: void setLocation(android.location.Location)>(loc);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        exitmonitor l3;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        l7 = $r8;

        exitmonitor l3;

     label5:
        throw l7;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void clearTestProviderLocation(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, $r8;
        java.lang.Object l2, $r0, $r2;
        com.android.server.location.MockProvider mockProvider;
        java.lang.Throwable l4, $r9;
        java.util.HashMap $r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        specialinvoke this.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        mockProvider = (com.android.server.location.MockProvider) $r2;

        if mockProvider != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(provider);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        virtualinvoke mockProvider.<com.android.server.location.MockProvider: void clearLocation()>();

        exitmonitor l2;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        l4 = $r9;

        exitmonitor l2;

     label5:
        throw l4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setTestProviderEnabled(java.lang.String, boolean)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, $r13;
        boolean enabled;
        java.lang.Object l3, $r0, $r2;
        com.android.server.location.MockProvider mockProvider;
        long identity;
        java.lang.Throwable l7, $r12;
        java.util.HashMap $r1;
        java.util.Set $r3, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        enabled := @parameter1: boolean;

        specialinvoke this.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        mockProvider = (com.android.server.location.MockProvider) $r2;

        if mockProvider != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(provider);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label2:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if enabled == 0 goto label3;

        virtualinvoke mockProvider.<com.android.server.location.MockProvider: void enable()>();

        $r5 = this.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(provider);

        $r6 = this.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(provider);

        goto label4;

     label3:
        virtualinvoke mockProvider.<com.android.server.location.MockProvider: void disable()>();

        $r3 = this.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(provider);

        $r4 = this.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(provider);

     label4:
        specialinvoke this.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        exitmonitor l3;

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        l7 = $r12;

        exitmonitor l3;

     label7:
        throw l7;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void clearTestProviderEnabled(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, $r9;
        java.lang.Object l2, $r0, $r2;
        com.android.server.location.MockProvider mockProvider;
        long identity;
        java.lang.Throwable l6, $r11;
        java.util.HashMap $r1;
        java.util.Set $r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r10;
        java.lang.IllegalArgumentException $r6;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        specialinvoke this.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        mockProvider = (com.android.server.location.MockProvider) $r2;

        if mockProvider != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(provider);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label2:
        identity = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r3 = this.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(provider);

        $r4 = this.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>(provider);

        specialinvoke this.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(identity);

        exitmonitor l2;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        l6 = $r11;

        exitmonitor l2;

     label5:
        throw l6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setTestProviderStatus(java.lang.String, int, android.os.Bundle, long)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, $r9;
        int status;
        android.os.Bundle extras;
        long updateTime;
        java.lang.Object l6, $r0, $r2;
        com.android.server.location.MockProvider mockProvider;
        java.lang.Throwable l8, $r8;
        java.util.HashMap $r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        status := @parameter1: int;

        extras := @parameter2: android.os.Bundle;

        updateTime := @parameter3: long;

        specialinvoke this.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l6 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        mockProvider = (com.android.server.location.MockProvider) $r2;

        if mockProvider != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(provider);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        virtualinvoke mockProvider.<com.android.server.location.MockProvider: void setStatus(int,android.os.Bundle,long)>(status, extras, updateTime);

        exitmonitor l6;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        l8 = $r8;

        exitmonitor l6;

     label5:
        throw l8;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void clearTestProviderStatus(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String provider, $r8;
        java.lang.Object l2, $r0, $r2;
        com.android.server.location.MockProvider mockProvider;
        java.lang.Throwable l4, $r9;
        java.util.HashMap $r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        this := @this: com.android.server.LocationManagerService;

        provider := @parameter0: java.lang.String;

        specialinvoke this.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r0 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(provider);

        mockProvider = (com.android.server.location.MockProvider) $r2;

        if mockProvider != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(provider);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        virtualinvoke mockProvider.<com.android.server.location.MockProvider: void clearStatus()>();

        exitmonitor l2;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        l4 = $r9;

        exitmonitor l2;

     label5:
        throw l4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void log(java.lang.String)
    {
        com.android.server.LocationManagerService this;
        java.lang.String log;
        boolean $z0;

        this := @this: com.android.server.LocationManagerService;

        log := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LocationManagerService", 2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LocationManagerService", log);

     label1:
        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.LocationManagerService this;
        java.io.FileDescriptor fd;
        java.io.PrintWriter pw;
        java.lang.String[] args;
        java.lang.Object l4, $r1, $r23, $r36, $r39, $r42, $r45, $r52, $r57, $r58, $r61, $r62, $r64, $r67, $r69, $r70, $r86, $r89, $r94, $r99, $r102;
        java.lang.Throwable l9, $r110;
        android.content.Context $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.HashMap $r2, $r4, $r8, $r10, $r12, $r19, $r38;
        java.util.Collection $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.Set $r5, $r7, $r9, $r11, $r14, $r16, $r35, $r44, $r50;
        com.android.server.location.LocationRequestStatistics $r6;
        com.android.server.location.GeofenceManager $r13;
        com.android.server.location.LocationBlacklist $r18;
        java.util.ArrayList $r20, $r101;
        com.android.server.location.LocationFudger $r21;
        java.lang.StringBuilder $r22, $r25, $r26, $r29, $r30, $r33, $r34, $r40, $r41, $r46, $r47, $r49, $r51, $r53, $r54, $r56, $r59, $r60, $r65, $r66, $r68, $r71, $r73, $r74, $r75, $r76, $r77, $r79, $r80, $r82, $r83, $r84, $r87, $r88, $r92, $r93, $r95, $r96, $r97, $r103, $r104, $r105, $r106, $r107, $r108;
        java.lang.String $r24, $r27, $r28, $r31, $r32, $r37, $r48, $r55, $r63, $r72, $r78, $r81, $r85, $r90, $r91, $r98, $r100, $r109, i$#13, i$#17, receiver#20, receiver#22;
        com.android.server.location.MockProvider $r43;
        java.util.Iterator i$#1, i$#3, i$#5, i$#7, i$#11, i$#15, i$#19, i$#21, i$#23, i$#25;
        com.android.server.LocationManagerService$Receiver receiver#2;
        java.util.Map$Entry receiver#4, receiver#8, receiver#12, receiver#16, receiver#24;
        com.android.server.LocationManagerService$UpdateRecord record#6;
        com.android.server.location.LocationRequestStatistics$PackageProviderKey i$#9;
        com.android.server.location.LocationRequestStatistics$PackageStatistics record#10;
        android.location.Location record#14, record#18;
        com.android.server.location.LocationProviderInterface receiver#26;
        com.android.server.location.LocationProviderProxy i$#27;

        this := @this: com.android.server.LocationManagerService;

        fd := @parameter0: java.io.FileDescriptor;

        pw := @parameter1: java.io.PrintWriter;

        args := @parameter2: java.lang.String[];

        $r0 = this.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label01;

        $r97 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        $r105 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump LocationManagerService from from pid=");

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r109);

        return;

     label01:
        $r1 = this.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        l4 = $r1;

        entermonitor $r1;

     label02:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("Current Location Manager state:");

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  Location Listeners:");

        $r2 = this.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        i$#1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke i$#1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r94 = interfaceinvoke i$#1.<java.util.Iterator: java.lang.Object next()>();

        receiver#2 = (com.android.server.LocationManagerService$Receiver) $r94;

        $r93 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r96 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r95 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(receiver#2);

        $r98 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r98);

        goto label03;

     label04:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  Active Records by Provider:");

        $r4 = this.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set entrySet()>();

        i$#3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke i$#3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r89 = interfaceinvoke i$#3.<java.util.Iterator: java.lang.Object next()>();

        receiver#4 = (java.util.Map$Entry) $r89;

        $r88 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r86 = interfaceinvoke receiver#4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r85 = (java.lang.String) $r86;

        $r84 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r83 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r100 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r100);

        $r99 = interfaceinvoke receiver#4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r101 = (java.util.ArrayList) $r99;

        i$#5 = virtualinvoke $r101.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        $z11 = interfaceinvoke i$#5.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label07;

        $r102 = interfaceinvoke i$#5.<java.util.Iterator: java.lang.Object next()>();

        record#6 = (com.android.server.LocationManagerService$UpdateRecord) $r102;

        $r104 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        $r103 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        $r92 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(record#6);

        $r91 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r91);

        goto label06;

     label07:
        goto label05;

     label08:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  Historical Records by Provider:");

        $r6 = this.<com.android.server.LocationManagerService: com.android.server.location.LocationRequestStatistics mRequestStatistics>;

        $r8 = $r6.<com.android.server.location.LocationRequestStatistics: java.util.HashMap statistics>;

        $r7 = virtualinvoke $r8.<java.util.HashMap: java.util.Set entrySet()>();

        i$#7 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke i$#7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r69 = interfaceinvoke i$#7.<java.util.Iterator: java.lang.Object next()>();

        receiver#8 = (java.util.Map$Entry) $r69;

        $r70 = interfaceinvoke receiver#8.<java.util.Map$Entry: java.lang.Object getKey()>();

        i$#9 = (com.android.server.location.LocationRequestStatistics$PackageProviderKey) $r70;

        $r67 = interfaceinvoke receiver#8.<java.util.Map$Entry: java.lang.Object getValue()>();

        record#10 = (com.android.server.location.LocationRequestStatistics$PackageStatistics) $r67;

        $r68 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r81 = i$#9.<com.android.server.location.LocationRequestStatistics$PackageProviderKey: java.lang.String packageName>;

        $r80 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r79 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r78 = i$#9.<com.android.server.location.LocationRequestStatistics$PackageProviderKey: java.lang.String providerName>;

        $r77 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        $r76 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(record#10);

        $r90 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r90);

        goto label09;

     label10:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  Last Known Locations:");

        $r10 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        $r9 = virtualinvoke $r10.<java.util.HashMap: java.util.Set entrySet()>();

        i$#11 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke i$#11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r64 = interfaceinvoke i$#11.<java.util.Iterator: java.lang.Object next()>();

        receiver#12 = (java.util.Map$Entry) $r64;

        $r61 = interfaceinvoke receiver#12.<java.util.Map$Entry: java.lang.Object getKey()>();

        i$#13 = (java.lang.String) $r61;

        $r62 = interfaceinvoke receiver#12.<java.util.Map$Entry: java.lang.Object getValue()>();

        record#14 = (android.location.Location) $r62;

        $r59 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r73 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(i$#13);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r71 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(record#14);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r72);

        goto label11;

     label12:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  Last Known Locations Coarse Intervals:");

        $r12 = this.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        $r11 = virtualinvoke $r12.<java.util.HashMap: java.util.Set entrySet()>();

        i$#15 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z4 = interfaceinvoke i$#15.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label14;

        $r58 = interfaceinvoke i$#15.<java.util.Iterator: java.lang.Object next()>();

        receiver#16 = (java.util.Map$Entry) $r58;

        $r57 = interfaceinvoke receiver#16.<java.util.Map$Entry: java.lang.Object getKey()>();

        i$#17 = (java.lang.String) $r57;

        $r52 = interfaceinvoke receiver#16.<java.util.Map$Entry: java.lang.Object getValue()>();

        record#18 = (android.location.Location) $r52;

        $r51 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(i$#17);

        $r65 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(record#18);

        $r63 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r63);

        goto label13;

     label14:
        $r13 = this.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager>;

        virtualinvoke $r13.<com.android.server.location.GeofenceManager: void dump(java.io.PrintWriter)>(pw);

        $r14 = this.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $i2 = interfaceinvoke $r14.<java.util.Set: int size()>();

        if $i2 <= 0 goto label16;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  Enabled Providers:");

        $r50 = this.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        i$#19 = interfaceinvoke $r50.<java.util.Set: java.util.Iterator iterator()>();

     label15:
        $z10 = interfaceinvoke i$#19.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label16;

        $r45 = interfaceinvoke i$#19.<java.util.Iterator: java.lang.Object next()>();

        receiver#20 = (java.lang.String) $r45;

        $r47 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r56 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(receiver#20);

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r55);

        goto label15;

     label16:
        $r16 = this.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        $i1 = interfaceinvoke $r16.<java.util.Set: int size()>();

        if $i1 <= 0 goto label18;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  Disabled Providers:");

        $r44 = this.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        i$#21 = interfaceinvoke $r44.<java.util.Set: java.util.Iterator iterator()>();

     label17:
        $z9 = interfaceinvoke i$#21.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label18;

        $r39 = interfaceinvoke i$#21.<java.util.Iterator: java.lang.Object next()>();

        receiver#22 = (java.lang.String) $r39;

        $r40 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r49 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(receiver#22);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>($r48);

        goto label17;

     label18:
        virtualinvoke pw.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("  ");

        $r18 = this.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        virtualinvoke $r18.<com.android.server.location.LocationBlacklist: void dump(java.io.PrintWriter)>(pw);

        $r19 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $i3 = virtualinvoke $r19.<java.util.HashMap: int size()>();

        if $i3 <= 0 goto label20;

        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>("  Mock Providers:");

        $r38 = this.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r35 = virtualinvoke $r38.<java.util.HashMap: java.util.Set entrySet()>();

        i$#23 = interfaceinvoke $r35.<java.util.Set: java.util.Iterator iterator()>();

     label19:
        $z7 = interfaceinvoke i$#23.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label20;

        $r36 = interfaceinvoke i$#23.<java.util.Iterator: java.lang.Object next()>();

        receiver#24 = (java.util.Map$Entry) $r36;

        $r42 = interfaceinvoke receiver#24.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r43 = (com.android.server.location.MockProvider) $r42;

        virtualinvoke $r43.<com.android.server.location.MockProvider: void dump(java.io.PrintWriter,java.lang.String)>(pw, "      ");

        goto label19;

     label20:
        virtualinvoke pw.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("  fudger: ");

        $r21 = this.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger>;

        virtualinvoke $r21.<com.android.server.location.LocationFudger: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(fd, pw, args);

        $i4 = lengthof args;

        if $i4 <= 0 goto label22;

        $r37 = "short";

        $r31 = args[0];

        $z8 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        if $z8 == 0 goto label22;

        exitmonitor l4;

     label21:
        return;

     label22:
        $r20 = this.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        i$#25 = virtualinvoke $r20.<java.util.ArrayList: java.util.Iterator iterator()>();

     label23:
        $z5 = interfaceinvoke i$#25.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label25;

        $r23 = interfaceinvoke i$#25.<java.util.Iterator: java.lang.Object next()>();

        receiver#26 = (com.android.server.location.LocationProviderInterface) $r23;

        $r22 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r27 = interfaceinvoke receiver#26.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Internal State");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>($r24);

        $z6 = receiver#26 instanceof com.android.server.location.LocationProviderProxy;

        if $z6 == 0 goto label24;

        i$#27 = (com.android.server.location.LocationProviderProxy) receiver#26;

        $r30 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r28 = virtualinvoke i$#27.<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()>();

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<java.io.PrintWriter: void print(java.lang.String)>($r32);

     label24:
        virtualinvoke pw.<java.io.PrintWriter: void println(java.lang.String)>(":");

        interfaceinvoke receiver#26.<com.android.server.location.LocationProviderInterface: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(fd, pw, args);

        goto label23;

     label25:
        exitmonitor l4;

     label26:
        goto label29;

     label27:
        $r110 := @caughtexception;

        l9 = $r110;

        exitmonitor l4;

     label28:
        throw l9;

     label29:
        return;

        catch java.lang.Throwable from label02 to label21 with label27;
        catch java.lang.Throwable from label22 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    static java.lang.Object access$000(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;
        java.lang.Object $r0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        $r0 = x0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        return $r0;
    }

    static java.util.HashMap access$100(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;
        java.util.HashMap $r0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        $r0 = x0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        return $r0;
    }

    static void access$200(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        specialinvoke x0.<com.android.server.LocationManagerService: void applyAllProviderRequirementsLocked()>();

        return;
    }

    static void access$300(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        specialinvoke x0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        return;
    }

    static void access$400(com.android.server.LocationManagerService, int)
    {
        com.android.server.LocationManagerService x0;
        int x1;

        x0 := @parameter0: com.android.server.LocationManagerService;

        x1 := @parameter1: int;

        specialinvoke x0.<com.android.server.LocationManagerService: void switchUser(int)>(x1);

        return;
    }

    static int access$500(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;
        int $i0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        $i0 = x0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        return $i0;
    }

    static int access$600(com.android.server.LocationManagerService, int, int)
    {
        com.android.server.LocationManagerService x0;
        int x1, x2, $i0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        x1 := @parameter1: int;

        x2 := @parameter2: int;

        $i0 = specialinvoke x0.<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)>(x1, x2);

        return $i0;
    }

    static android.os.PowerManager access$700(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;
        android.os.PowerManager $r0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        $r0 = x0.<com.android.server.LocationManagerService: android.os.PowerManager mPowerManager>;

        return $r0;
    }

    static boolean access$800(com.android.server.LocationManagerService, java.lang.String)
    {
        com.android.server.LocationManagerService x0;
        java.lang.String x1;
        boolean $z0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        x1 := @parameter1: java.lang.String;

        $z0 = specialinvoke x0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(x1);

        return $z0;
    }

    static java.util.HashMap access$900(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;
        java.util.HashMap $r0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        $r0 = x0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        return $r0;
    }

    static android.content.Context access$1000(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;
        android.content.Context $r0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        $r0 = x0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        return $r0;
    }

    static android.app.AppOpsManager access$1100(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;
        android.app.AppOpsManager $r0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        $r0 = x0.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        return $r0;
    }

    static com.android.server.LocationManagerService$LocationWorkerHandler access$1200(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;
        com.android.server.LocationManagerService$LocationWorkerHandler $r0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        $r0 = x0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        return $r0;
    }

    static java.lang.String access$1300(com.android.server.LocationManagerService, int)
    {
        com.android.server.LocationManagerService x0;
        int x1;
        java.lang.String $r0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        x1 := @parameter1: int;

        $r0 = specialinvoke x0.<com.android.server.LocationManagerService: java.lang.String getResolutionPermission(int)>(x1);

        return $r0;
    }

    static void access$1400(com.android.server.LocationManagerService, com.android.server.LocationManagerService$Receiver)
    {
        com.android.server.LocationManagerService x0;
        com.android.server.LocationManagerService$Receiver x1;

        x0 := @parameter0: com.android.server.LocationManagerService;

        x1 := @parameter1: com.android.server.LocationManagerService$Receiver;

        specialinvoke x0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>(x1);

        return;
    }

    static java.util.HashMap access$1600(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;
        java.util.HashMap $r0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        $r0 = x0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        return $r0;
    }

    static com.android.server.location.LocationRequestStatistics access$1700(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService x0;
        com.android.server.location.LocationRequestStatistics $r0;

        x0 := @parameter0: com.android.server.LocationManagerService;

        $r0 = x0.<com.android.server.LocationManagerService: com.android.server.location.LocationRequestStatistics mRequestStatistics>;

        return $r0;
    }

    static void access$1800(com.android.server.LocationManagerService, android.location.Location, boolean)
    {
        com.android.server.LocationManagerService x0;
        android.location.Location x1;
        boolean x2;

        x0 := @parameter0: com.android.server.LocationManagerService;

        x1 := @parameter1: android.location.Location;

        x2 := @parameter2: boolean;

        specialinvoke x0.<com.android.server.LocationManagerService: void handleLocationChanged(android.location.Location,boolean)>(x1, x2);

        return;
    }

    static void <clinit>()
    {
        boolean $z0;
        android.location.LocationRequest $r0;

        <com.android.server.LocationManagerService: int MAX_PROVIDER_SCHEDULING_JITTER_MS> = 100;

        <com.android.server.LocationManagerService: long HIGH_POWER_INTERVAL_MS> = 300000L;

        <com.android.server.LocationManagerService: long NANOS_PER_MILLI> = 1000000L;

        <com.android.server.LocationManagerService: int MSG_LOCATION_CHANGED> = 1;

        <com.android.server.LocationManagerService: java.lang.String FUSED_LOCATION_SERVICE_ACTION> = "com.android.location.service.FusedLocationProvider";

        <com.android.server.LocationManagerService: java.lang.String NETWORK_LOCATION_SERVICE_ACTION> = "com.android.location.service.v3.NetworkLocationProvider";

        <com.android.server.LocationManagerService: java.lang.String INSTALL_LOCATION_PROVIDER> = "android.permission.INSTALL_LOCATION_PROVIDER";

        <com.android.server.LocationManagerService: java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS> = "android.permission.ACCESS_LOCATION_EXTRA_COMMANDS";

        <com.android.server.LocationManagerService: java.lang.String ACCESS_MOCK_LOCATION> = "android.permission.ACCESS_MOCK_LOCATION";

        <com.android.server.LocationManagerService: int RESOLUTION_LEVEL_FINE> = 2;

        <com.android.server.LocationManagerService: int RESOLUTION_LEVEL_COARSE> = 1;

        <com.android.server.LocationManagerService: int RESOLUTION_LEVEL_NONE> = 0;

        <com.android.server.LocationManagerService: java.lang.String WAKELOCK_KEY> = "LocationManagerService";

        <com.android.server.LocationManagerService: java.lang.String TAG> = "LocationManagerService";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LocationManagerService", 3);

        <com.android.server.LocationManagerService: boolean D> = $z0;

        $r0 = new android.location.LocationRequest;

        specialinvoke $r0.<android.location.LocationRequest: void <init>()>();

        <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST> = $r0;

        return;
    }
}
