public class com.android.server.ConnectivityService extends android.net.IConnectivityManager$Stub implements android.app.PendingIntent$OnFinished
{
    private static final java.lang.String TAG;
    private static final boolean DBG;
    private static final boolean VDBG;
    private static final boolean SAMPLE_DBG;
    private static final boolean LOGD_RULES;
    private static final int RESTORE_DEFAULT_NETWORK_DELAY;
    private static final java.lang.String NETWORK_RESTORE_DELAY_PROP_NAME;
    private static final int DEFAULT_FAIL_FAST_TIME_MS;
    private static final java.lang.String FAIL_FAST_TIME_MS;
    private static final java.lang.String ACTION_PKT_CNT_SAMPLE_INTERVAL_ELAPSED;
    private static final int SAMPLE_INTERVAL_ELAPSED_REQUEST_CODE;
    private final int mReleasePendingIntentDelayMs;
    private android.app.PendingIntent mSampleIntervalElapsedIntent;
    private static final int DEFAULT_SAMPLING_INTERVAL_IN_SECONDS;
    private static final int DEFAULT_START_SAMPLING_INTERVAL_IN_SECONDS;
    android.app.AlarmManager mAlarmManager;
    private com.android.server.connectivity.Tethering mTethering;
    private final com.android.server.connectivity.PermissionMonitor mPermissionMonitor;
    private android.security.KeyStore mKeyStore;
    private final android.util.SparseArray mVpns;
    private boolean mLockdownEnabled;
    private com.android.server.net.LockdownVpnTracker mLockdownTracker;
    private java.lang.Object mRulesLock;
    private android.util.SparseIntArray mUidRules;
    private java.util.HashSet mMeteredIfaces;
    private android.net.NetworkStateTracker[] mNetTrackers;
    private android.content.Context mContext;
    private int mNetworkPreference;
    private int mDefaultInetConditionPublished;
    private java.lang.Object mDnsLock;
    private int mNumDnsEntries;
    private boolean mTestMode;
    private static com.android.server.ConnectivityService sServiceInstance;
    private android.os.INetworkManagementService mNetd;
    private android.net.INetworkStatsService mStatsService;
    private android.net.INetworkPolicyManager mPolicyManager;
    private java.lang.String mCurrentTcpBufferSizes;
    private static final int ENABLED;
    private static final int DISABLED;
    private static final int EVENT_CHANGE_MOBILE_DATA_ENABLED;
    private static final int EVENT_CLEAR_NET_TRANSITION_WAKELOCK;
    private static final int EVENT_APPLY_GLOBAL_HTTP_PROXY;
    private static final int EVENT_SET_DEPENDENCY_MET;
    private static final int EVENT_SEND_STICKY_BROADCAST_INTENT;
    private static final int EVENT_ENABLE_FAIL_FAST_MOBILE_DATA;
    private static final int EVENT_SAMPLE_INTERVAL_ELAPSED;
    private static final int EVENT_PROXY_HAS_CHANGED;
    private static final int EVENT_REGISTER_NETWORK_FACTORY;
    private static final int EVENT_REGISTER_NETWORK_AGENT;
    private static final int EVENT_REGISTER_NETWORK_REQUEST;
    private static final int EVENT_TIMEOUT_NETWORK_REQUEST;
    private static final int EVENT_REGISTER_NETWORK_LISTENER;
    private static final int EVENT_RELEASE_NETWORK_REQUEST;
    private static final int EVENT_UNREGISTER_NETWORK_FACTORY;
    private static final int EVENT_EXPIRE_NET_TRANSITION_WAKELOCK;
    private static final int EVENT_SYSTEM_READY;
    private static final int EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT;
    private static final int EVENT_RELEASE_NETWORK_REQUEST_WITH_INTENT;
    private final com.android.server.ConnectivityService$InternalHandler mHandler;
    private final com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler;
    private boolean mSystemReady;
    private android.content.Intent mInitialBroadcast;
    private android.os.PowerManager$WakeLock mNetTransitionWakeLock;
    private java.lang.String mNetTransitionWakeLockCausedBy;
    private int mNetTransitionWakeLockSerialNumber;
    private int mNetTransitionWakeLockTimeout;
    private final android.os.PowerManager$WakeLock mPendingIntentWakeLock;
    private java.net.InetAddress mDefaultDns;
    private static final int INET_CONDITION_LOG_MAX_SIZE;
    private java.util.ArrayList mInetLog;
    private volatile android.net.ProxyInfo mDefaultProxy;
    private java.lang.Object mProxyLock;
    private boolean mDefaultProxyDisabled;
    private android.net.ProxyInfo mGlobalProxy;
    private com.android.server.connectivity.PacManager mPacManager;
    private com.android.server.ConnectivityService$SettingsObserver mSettingsObserver;
    private android.os.UserManager mUserManager;
    android.net.NetworkConfig[] mNetConfigs;
    int mNetworksDefined;
    java.util.List mProtectedNetworks;
    private com.android.server.connectivity.DataConnectionStats mDataConnectionStats;
    private java.util.concurrent.atomic.AtomicInteger mEnableFailFastMobileDataTag;
    android.telephony.TelephonyManager mTelephonyManager;
    private static final int MIN_NET_ID;
    private static final int MAX_NET_ID;
    private int mNextNetId;
    private int mNextNetworkRequestId;
    private com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker;
    private android.net.INetworkManagementEventObserver mDataActivityObserver;
    private android.net.INetworkPolicyListener mPolicyListener;
    private android.content.BroadcastReceiver mUserPresentReceiver;
    private static final java.lang.String DEFAULT_TCP_BUFFER_SIZES;
    private static final java.lang.String NOTIFICATION_ID;
    private volatile boolean mIsNotificationVisible;
    private static final java.lang.String PROVISIONING_URL_PATH;
    private final java.io.File mProvisioningUrlFile;
    private static final java.lang.String TAG_PROVISIONING_URLS;
    private static final java.lang.String TAG_PROVISIONING_URL;
    private static final java.lang.String TAG_REDIRECTED_URL;
    private static final java.lang.String ATTR_MCC;
    private static final java.lang.String ATTR_MNC;
    private static final int REDIRECTED_PROVISIONING;
    private static final int PROVISIONING;
    private android.content.BroadcastReceiver mUserIntentReceiver;
    private final java.util.HashMap mNetworkFactoryInfos;
    private final java.util.HashMap mNetworkRequests;
    private final android.util.SparseArray mNetworkForRequestId;
    private final android.util.SparseArray mNetworkForNetId;
    private final java.util.HashMap mNetworkAgentInfos;
    private final android.net.NetworkRequest mDefaultRequest;

    public void <init>(android.content.Context, android.os.INetworkManagementService, android.net.INetworkStatsService, android.net.INetworkPolicyManager)
    {
        com.android.server.ConnectivityService this;
        android.content.Context context, $r37, $r43, $r50, $r70, $r78, $r82, $r84, $r95, $r97, $r106, $r109;
        android.os.INetworkManagementService netManager, $r45, $r71, $r81, $r88, $r90;
        android.net.INetworkStatsService statsService, $r47;
        android.net.INetworkPolicyManager policyManager, $r41, $r55;
        android.net.NetworkCapabilities netCap, tmp$1988368988;
        com.android.server.ConnectivityService$NetworkRequestInfo nri, tmp$1573006951;
        android.os.HandlerThread handlerThread, tmp$146814614;
        boolean wifiOnly, $z0, $z1, $z2, $z3, $z5, $z6;
        java.lang.String[] naStrings, arr$#7;
        java.util.HashSet $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, len$#8, i$#9, i$#15, naString#16, n#17;
        java.util.HashMap $r24, tmp$75424399, tmp$1323897125, tmp$584326261;
        android.net.NetworkRequest $r26, $r27, tmp$1490323286;
        android.os.Looper $r29, $r34, $r68;
        android.content.ContentResolver $r32, $r39, $r139;
        java.lang.String $r33, $r66, $r74, $r99, $r116, $r122, $r137, $r141, $r142, $r146, $r147, $r152, id#1, name#2, id#3, naString#10, tmp$907339032;
        java.net.InetAddress $r35;
        android.content.res.Resources $r36, $r51, $r64, $r65;
        java.lang.Object $r38, $r40, $r44, $r46, $r48, $r52, $r94, $r112, tmp$1797405894, tmp$865619102, tmp$110710964;
        android.security.KeyStore $r42;
        android.os.PowerManager$WakeLock $r49, $r59;
        android.telephony.TelephonyManager $r53;
        android.net.INetworkPolicyListener $r54, tmp$2033468416;
        java.lang.StringBuilder $r57, $r58, $r103, $r104, $r123, $r124, $r125, $r129, $r132, $r133, $r136, $r140, $r143, $r145, $r148, $r153, tmp$784350225, tmp$1559276654, tmp$366010952, tmp$902431179, tmp$509146324, tmp$644639969, tmp$1771627320, tmp$2121668094;
        android.net.NetworkConfig[] $r60, $r67, $r100, $r114, $r127;
        android.net.NetworkStateTracker[] $r61;
        android.net.NetworkConfig $r63, $r102, $r115, n#11, tmp$133690711;
        com.android.server.ConnectivityService$InternalHandler $r73, $r85, $r110, tmp$1272712043;
        com.android.server.connectivity.Tethering $r76, tmp$186413147;
        android.content.BroadcastReceiver $r77;
        android.os.UserHandle $r80;
        com.android.server.ConnectivityService$SettingsObserver $r83, tmp$452846755;
        android.net.INetworkManagementEventObserver $r89, tmp$1083269340;
        android.app.AlarmManager $r93;
        com.android.server.connectivity.DataConnectionStats $r96, tmp$1117787375;
        android.os.UserManager $r111;
        java.util.List $r117, $r119;
        java.lang.Integer $r118, $r120;
        com.android.server.ConnectivityService$LegacyTypeTracker $r121, $r128, tmp$523926406;
        java.lang.IllegalArgumentException $r134, name#4;
        android.os.RemoteException $r149, $r151, name#5, i$#20;
        java.lang.Exception $r150, n#12;
        android.os.PowerManager name#6;
        int[] arr$#13, len$#14;
        android.content.IntentFilter len$#19, i$#21, tmp$996035868, tmp$1979670509, tmp$252999342;
        android.util.SparseArray tmp$1484643946, tmp$1184545272, tmp$73712873;
        android.util.SparseIntArray tmp$1486596241;
        java.util.concurrent.atomic.AtomicInteger tmp$703854311;
        com.android.server.ConnectivityService$2 tmp$1277835454;
        com.android.server.ConnectivityService$3 tmp$494090143;
        com.android.server.ConnectivityService$4 tmp$1188762579;
        java.io.File tmp$577728771;
        com.android.server.ConnectivityService$5 tmp$1468899871;
        android.os.Binder tmp$1414537498;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler tmp$170489338;
        java.util.ArrayList tmp$1440831076, tmp$555526790;
        com.android.server.connectivity.PermissionMonitor tmp$79858272;
        com.android.server.ConnectivityService$1 tmp$13134181;
        com.android.server.connectivity.PacManager tmp$1821831627;

        this := @this: com.android.server.ConnectivityService;

        context := @parameter0: android.content.Context;

        netManager := @parameter1: android.os.INetworkManagementService;

        statsService := @parameter2: android.net.INetworkStatsService;

        policyManager := @parameter3: android.net.INetworkPolicyManager;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke this.<android.net.IConnectivityManager$Stub: void <init>()>();

        tmp$1484643946 = new android.util.SparseArray;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1484643946.<android.util.SparseArray: void <init>()>();

        this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns> = tmp$1484643946;

        tmp$1797405894 = new java.lang.Object;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1797405894.<java.lang.Object: void <init>()>();

        this.<com.android.server.ConnectivityService: java.lang.Object mRulesLock> = tmp$1797405894;

        tmp$1486596241 = new android.util.SparseIntArray;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1486596241.<android.util.SparseIntArray: void <init>()>();

        this.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules> = tmp$1486596241;

        $r4 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        this.<com.android.server.ConnectivityService: java.util.HashSet mMeteredIfaces> = $r4;

        this.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = 0;

        tmp$865619102 = new java.lang.Object;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$865619102.<java.lang.Object: void <init>()>();

        this.<com.android.server.ConnectivityService: java.lang.Object mDnsLock> = tmp$865619102;

        this.<com.android.server.ConnectivityService: java.lang.String mNetTransitionWakeLockCausedBy> = "";

        this.<com.android.server.ConnectivityService: android.net.ProxyInfo mDefaultProxy> = null;

        tmp$110710964 = new java.lang.Object;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$110710964.<java.lang.Object: void <init>()>();

        this.<com.android.server.ConnectivityService: java.lang.Object mProxyLock> = tmp$110710964;

        this.<com.android.server.ConnectivityService: boolean mDefaultProxyDisabled> = 0;

        this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy> = null;

        this.<com.android.server.ConnectivityService: com.android.server.connectivity.PacManager mPacManager> = null;

        tmp$703854311 = new java.util.concurrent.atomic.AtomicInteger;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$703854311.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicInteger mEnableFailFastMobileDataTag> = tmp$703854311;

        this.<com.android.server.ConnectivityService: int mNextNetId> = 100;

        this.<com.android.server.ConnectivityService: int mNextNetworkRequestId> = 1;

        tmp$523926406 = new com.android.server.ConnectivityService$LegacyTypeTracker;

        specialinvoke tmp$523926406.<com.android.server.ConnectivityService$LegacyTypeTracker: void <init>(com.android.server.ConnectivityService)>(this);

        this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker> = tmp$523926406;

        tmp$1277835454 = new com.android.server.ConnectivityService$2;

        specialinvoke tmp$1277835454.<com.android.server.ConnectivityService$2: void <init>(com.android.server.ConnectivityService)>(this);

        tmp$1083269340 = (android.net.INetworkManagementEventObserver) tmp$1277835454;

        this.<com.android.server.ConnectivityService: android.net.INetworkManagementEventObserver mDataActivityObserver> = tmp$1083269340;

        tmp$494090143 = new com.android.server.ConnectivityService$3;

        specialinvoke tmp$494090143.<com.android.server.ConnectivityService$3: void <init>(com.android.server.ConnectivityService)>(this);

        tmp$2033468416 = (android.net.INetworkPolicyListener) tmp$494090143;

        this.<com.android.server.ConnectivityService: android.net.INetworkPolicyListener mPolicyListener> = tmp$2033468416;

        tmp$1188762579 = new com.android.server.ConnectivityService$4;

        specialinvoke tmp$1188762579.<com.android.server.ConnectivityService$4: void <init>(com.android.server.ConnectivityService)>(this);

        this.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mUserPresentReceiver> = tmp$1188762579;

        this.<com.android.server.ConnectivityService: boolean mIsNotificationVisible> = 0;

        tmp$577728771 = new java.io.File;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$577728771.<java.io.File: void <init>(java.lang.String)>("/data/misc/radio/provisioning_urls.xml");

        this.<com.android.server.ConnectivityService: java.io.File mProvisioningUrlFile> = tmp$577728771;

        tmp$1468899871 = new com.android.server.ConnectivityService$5;

        specialinvoke tmp$1468899871.<com.android.server.ConnectivityService$5: void <init>(com.android.server.ConnectivityService)>(this);

        this.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mUserIntentReceiver> = tmp$1468899871;

        tmp$75424399 = new java.util.HashMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$75424399.<java.util.HashMap: void <init>()>();

        this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkFactoryInfos> = tmp$75424399;

        tmp$1323897125 = new java.util.HashMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1323897125.<java.util.HashMap: void <init>()>();

        this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests> = tmp$1323897125;

        tmp$1184545272 = new android.util.SparseArray;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1184545272.<android.util.SparseArray: void <init>()>();

        this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId> = tmp$1184545272;

        tmp$73712873 = new android.util.SparseArray;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$73712873.<android.util.SparseArray: void <init>()>();

        this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId> = tmp$73712873;

        tmp$584326261 = new java.util.HashMap;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$584326261.<java.util.HashMap: void <init>()>();

        this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos> = tmp$584326261;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        tmp$1988368988 = new android.net.NetworkCapabilities;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1988368988.<android.net.NetworkCapabilities: void <init>()>();

        netCap = tmp$1988368988;

        virtualinvoke netCap.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(12);

        virtualinvoke netCap.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(13);

        tmp$1490323286 = new android.net.NetworkRequest;

        $i0 = specialinvoke this.<com.android.server.ConnectivityService: int nextNetworkRequestId()>();

        specialinvoke tmp$1490323286.<android.net.NetworkRequest: void <init>(android.net.NetworkCapabilities,int,int)>(netCap, -1, $i0);

        this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest> = tmp$1490323286;

        tmp$1573006951 = new com.android.server.ConnectivityService$NetworkRequestInfo;

        $r26 = this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        tmp$1414537498 = new android.os.Binder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1414537498.<android.os.Binder: void <init>()>();

        specialinvoke tmp$1573006951.<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.os.Messenger,android.net.NetworkRequest,android.os.IBinder,boolean)>(this, null, $r26, tmp$1414537498, 1);

        nri = tmp$1573006951;

        $r24 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r27 = this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        virtualinvoke $r24.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, nri);

        tmp$146814614 = new android.os.HandlerThread;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$146814614.<android.os.HandlerThread: void <init>(java.lang.String)>("ConnectivityServiceThread");

        handlerThread = tmp$146814614;

        virtualinvoke handlerThread.<android.os.HandlerThread: void start()>();

        tmp$1272712043 = new com.android.server.ConnectivityService$InternalHandler;

        $r29 = virtualinvoke handlerThread.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke tmp$1272712043.<com.android.server.ConnectivityService$InternalHandler: void <init>(com.android.server.ConnectivityService,android.os.Looper)>(this, $r29);

        this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler> = tmp$1272712043;

        tmp$170489338 = new com.android.server.ConnectivityService$NetworkStateTrackerHandler;

        $r34 = virtualinvoke handlerThread.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke tmp$170489338.<com.android.server.ConnectivityService$NetworkStateTrackerHandler: void <init>(com.android.server.ConnectivityService,android.os.Looper)>(this, $r34);

        this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler> = tmp$170489338;

        $r33 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("net.hostname");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r33);

        if $z0 == 0 goto label01;

        $r139 = virtualinvoke context.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        id#1 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r139, "android_id");

        if id#1 == null goto label01;

        $i14 = virtualinvoke id#1.<java.lang.String: int length()>();

        if $i14 <= 0 goto label01;

        tmp$907339032 = new java.lang.String;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$907339032.<java.lang.String: void <init>(java.lang.String)>("android-");

        name#2 = virtualinvoke tmp$907339032.<java.lang.String: java.lang.String concat(java.lang.String)>(id#1);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("net.hostname", name#2);

     label01:
        $r32 = virtualinvoke context.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        id#3 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r32, "default_dns_server");

        if id#3 == null goto label02;

        $i16 = virtualinvoke id#3.<java.lang.String: int length()>();

        if $i16 != 0 goto label03;

     label02:
        $r36 = virtualinvoke context.<android.content.Context: android.content.res.Resources getResources()>();

        id#3 = virtualinvoke $r36.<android.content.res.Resources: java.lang.String getString(int)>(17039402);

     label03:
        $r35 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>(id#3);

        this.<com.android.server.ConnectivityService: java.net.InetAddress mDefaultDns> = $r35;

     label04:
        goto label06;

     label05:
        $r134 := @caughtexception;

        tmp$784350225 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$784350225.<java.lang.StringBuilder: void <init>()>();

        $r132 = virtualinvoke tmp$784350225.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error setting defaultDns using ");

        $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(id#3);

        $r152 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r152);

     label06:
        $r39 = virtualinvoke context.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r39, "connectivity_release_pending_intent_delay_ms", 5000);

        this.<com.android.server.ConnectivityService: int mReleasePendingIntentDelayMs> = $i1;

        $r38 = staticinvoke <com.android.server.ConnectivityService: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(context, "missing Context");

        $r37 = (android.content.Context) $r38;

        this.<com.android.server.ConnectivityService: android.content.Context mContext> = $r37;

        $r44 = staticinvoke <com.android.server.ConnectivityService: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(netManager, "missing INetworkManagementService");

        $r45 = (android.os.INetworkManagementService) $r44;

        this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd> = $r45;

        $r46 = staticinvoke <com.android.server.ConnectivityService: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(statsService, "missing INetworkStatsService");

        $r47 = (android.net.INetworkStatsService) $r46;

        this.<com.android.server.ConnectivityService: android.net.INetworkStatsService mStatsService> = $r47;

        $r40 = staticinvoke <com.android.server.ConnectivityService: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(policyManager, "missing INetworkPolicyManager");

        $r41 = (android.net.INetworkPolicyManager) $r40;

        this.<com.android.server.ConnectivityService: android.net.INetworkPolicyManager mPolicyManager> = $r41;

        $r42 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        this.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore> = $r42;

        $r43 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r52 = virtualinvoke $r43.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r53 = (android.telephony.TelephonyManager) $r52;

        this.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager> = $r53;

     label07:
        $r55 = this.<com.android.server.ConnectivityService: android.net.INetworkPolicyManager mPolicyManager>;

        $r54 = this.<com.android.server.ConnectivityService: android.net.INetworkPolicyListener mPolicyListener>;

        interfaceinvoke $r55.<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>($r54);

     label08:
        goto label10;

     label09:
        $r149 := @caughtexception;

        name#5 = $r149;

        tmp$1559276654 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1559276654.<java.lang.StringBuilder: void <init>()>();

        $r143 = virtualinvoke tmp$1559276654.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to register INetworkPolicyListener");

        $r146 = virtualinvoke name#5.<android.os.RemoteException: java.lang.String toString()>();

        $r145 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r146);

        $r142 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r142);

     label10:
        $r48 = virtualinvoke context.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        name#6 = (android.os.PowerManager) $r48;

        $r49 = virtualinvoke name#6.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "ConnectivityService");

        this.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock> = $r49;

        $r50 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r51 = virtualinvoke $r50.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r51.<android.content.res.Resources: int getInteger(int)>(17694733);

        this.<com.android.server.ConnectivityService: int mNetTransitionWakeLockTimeout> = $i2;

        $r59 = virtualinvoke name#6.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "ConnectivityService");

        this.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mPendingIntentWakeLock> = $r59;

        $r61 = newarray (android.net.NetworkStateTracker)[18];

        this.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers> = $r61;

        $r60 = newarray (android.net.NetworkConfig)[18];

        this.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs> = $r60;

        wifiOnly = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.radio.noril", 0);

        tmp$366010952 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$366010952.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke tmp$366010952.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wifiOnly=");

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(wifiOnly);

        $r66 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r66);

        $r65 = virtualinvoke context.<android.content.Context: android.content.res.Resources getResources()>();

        naStrings = virtualinvoke $r65.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17235981);

        arr$#7 = naStrings;

        len$#8 = lengthof arr$#7;

        i$#9 = 0;

     label11:
        if i$#9 >= len$#8 goto label22;

        naString#10 = arr$#7[i$#9];

     label12:
        tmp$133690711 = new android.net.NetworkConfig;

        specialinvoke tmp$133690711.<android.net.NetworkConfig: void <init>(java.lang.String)>(naString#10);

        n#11 = tmp$133690711;

        $i5 = n#11.<android.net.NetworkConfig: int type>;

        if $i5 <= 17 goto label14;

        tmp$902431179 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$902431179.<java.lang.StringBuilder: void <init>()>();

        $r136 = virtualinvoke tmp$902431179.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in networkAttributes - ignoring attempt to define type ");

        $i15 = n#11.<android.net.NetworkConfig: int type>;

        $r140 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r141 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r141);

     label13:
        goto label21;

     label14:
        if wifiOnly == 0 goto label16;

        $i8 = n#11.<android.net.NetworkConfig: int type>;

        $z5 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>($i8);

        if $z5 == 0 goto label16;

        tmp$509146324 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$509146324.<java.lang.StringBuilder: void <init>()>();

        $r125 = virtualinvoke tmp$509146324.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("networkAttributes - ignoring mobile as this dev is wifiOnly ");

        $i9 = n#11.<android.net.NetworkConfig: int type>;

        $r124 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r137 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r137);

     label15:
        goto label21;

     label16:
        $r114 = this.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $i6 = n#11.<android.net.NetworkConfig: int type>;

        $r115 = $r114[$i6];

        if $r115 == null goto label18;

        tmp$644639969 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$644639969.<java.lang.StringBuilder: void <init>()>();

        $r129 = virtualinvoke tmp$644639969.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in networkAttributes - ignoring attempt to redefine type ");

        $i12 = n#11.<android.net.NetworkConfig: int type>;

        $r123 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r122 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r122);

     label17:
        goto label21;

     label18:
        $r128 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $i7 = n#11.<android.net.NetworkConfig: int type>;

        virtualinvoke $r128.<com.android.server.ConnectivityService$LegacyTypeTracker: void addSupportedType(int)>($i7);

        $r127 = this.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $i11 = n#11.<android.net.NetworkConfig: int type>;

        $r127[$i11] = n#11;

        $i10 = this.<com.android.server.ConnectivityService: int mNetworksDefined>;

        $i13 = $i10 + 1;

        this.<com.android.server.ConnectivityService: int mNetworksDefined> = $i13;

     label19:
        goto label21;

     label20:
        $r150 := @caughtexception;

     label21:
        i$#9 = i$#9 + 1;

        goto label11;

     label22:
        $r67 = this.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r63 = $r67[17];

        if $r63 != null goto label23;

        $r121 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r121.<com.android.server.ConnectivityService$LegacyTypeTracker: void addSupportedType(int)>(17);

        $i3 = this.<com.android.server.ConnectivityService: int mNetworksDefined>;

        $i4 = $i3 + 1;

        this.<com.android.server.ConnectivityService: int mNetworksDefined> = $i4;

     label23:
        tmp$1440831076 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1440831076.<java.util.ArrayList: void <init>()>();

        this.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks> = tmp$1440831076;

        $r64 = virtualinvoke context.<android.content.Context: android.content.res.Resources getResources()>();

        arr$#13 = virtualinvoke $r64.<android.content.res.Resources: int[] getIntArray(int)>(17235982);

        len$#14 = arr$#13;

        i$#15 = lengthof len$#14;

        naString#16 = 0;

     label24:
        if naString#16 >= i$#15 goto label27;

        n#17 = len$#14[naString#16];

        $r100 = this.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r102 = $r100[n#17];

        if $r102 == null goto label25;

        $r117 = this.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks>;

        $r118 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(n#17);

        $z3 = interfaceinvoke $r117.<java.util.List: boolean contains(java.lang.Object)>($r118);

        if $z3 != 0 goto label25;

        $r119 = this.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks>;

        $r120 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(n#17);

        interfaceinvoke $r119.<java.util.List: boolean add(java.lang.Object)>($r120);

        goto label26;

     label25:
        tmp$1771627320 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1771627320.<java.lang.StringBuilder: void <init>()>();

        $r104 = virtualinvoke tmp$1771627320.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring protectedNetwork ");

        $r103 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(n#17);

        $r116 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r116);

     label26:
        naString#16 = naString#16 + 1;

        goto label24;

     label27:
        $r74 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("cm.test.mode");

        $z1 = virtualinvoke $r74.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z1 == 0 goto label28;

        $r99 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.type");

        $z2 = virtualinvoke $r99.<java.lang.String: boolean equals(java.lang.Object)>("eng");

        if $z2 == 0 goto label28;

        $z6 = 1;

        goto label29;

     label28:
        $z6 = 0;

     label29:
        this.<com.android.server.ConnectivityService: boolean mTestMode> = $z6;

        tmp$186413147 = new com.android.server.connectivity.Tethering;

        $r70 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r71 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r73 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r68 = virtualinvoke $r73.<com.android.server.ConnectivityService$InternalHandler: android.os.Looper getLooper()>();

        specialinvoke tmp$186413147.<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.os.Looper)>($r70, $r71, statsService, $r68);

        this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering> = tmp$186413147;

        tmp$79858272 = new com.android.server.connectivity.PermissionMonitor;

        $r82 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r81 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        specialinvoke tmp$79858272.<com.android.server.connectivity.PermissionMonitor: void <init>(android.content.Context,android.os.INetworkManagementService)>($r82, $r81);

        this.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor> = tmp$79858272;

        tmp$996035868 = new android.content.IntentFilter;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$996035868.<android.content.IntentFilter: void <init>()>();

        len$#19 = tmp$996035868;

        virtualinvoke len$#19.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STARTING");

        virtualinvoke len$#19.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STOPPING");

        $r78 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r77 = this.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mUserIntentReceiver>;

        $r80 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r78.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r77, $r80, len$#19, null, null);

     label30:
        $r90 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r76 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        interfaceinvoke $r90.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r76);

        $r88 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r89 = this.<com.android.server.ConnectivityService: android.net.INetworkManagementEventObserver mDataActivityObserver>;

        interfaceinvoke $r88.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r89);

     label31:
        goto label33;

     label32:
        $r151 := @caughtexception;

        i$#20 = $r151;

        tmp$2121668094 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$2121668094.<java.lang.StringBuilder: void <init>()>();

        $r153 = virtualinvoke tmp$2121668094.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error registering observer :");

        $r148 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(i$#20);

        $r147 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r147);

     label33:
        tmp$555526790 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$555526790.<java.util.ArrayList: void <init>()>();

        this.<com.android.server.ConnectivityService: java.util.ArrayList mInetLog> = tmp$555526790;

        tmp$452846755 = new com.android.server.ConnectivityService$SettingsObserver;

        $r85 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        specialinvoke tmp$452846755.<com.android.server.ConnectivityService$SettingsObserver: void <init>(android.os.Handler,int)>($r85, 9);

        this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$SettingsObserver mSettingsObserver> = tmp$452846755;

        $r83 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$SettingsObserver mSettingsObserver>;

        $r84 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r83.<com.android.server.ConnectivityService$SettingsObserver: void observe(android.content.Context)>($r84);

        tmp$1117787375 = new com.android.server.connectivity.DataConnectionStats;

        $r97 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        specialinvoke tmp$1117787375.<com.android.server.connectivity.DataConnectionStats: void <init>(android.content.Context)>($r97);

        this.<com.android.server.ConnectivityService: com.android.server.connectivity.DataConnectionStats mDataConnectionStats> = tmp$1117787375;

        $r96 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.DataConnectionStats mDataConnectionStats>;

        virtualinvoke $r96.<com.android.server.connectivity.DataConnectionStats: void startMonitoring()>();

        $r95 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r94 = virtualinvoke $r95.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        $r93 = (android.app.AlarmManager) $r94;

        this.<com.android.server.ConnectivityService: android.app.AlarmManager mAlarmManager> = $r93;

        tmp$1979670509 = new android.content.IntentFilter;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1979670509.<android.content.IntentFilter: void <init>()>();

        i$#21 = tmp$1979670509;

        virtualinvoke i$#21.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.ConnectivityService.action.PKT_CNT_SAMPLE_INTERVAL_ELAPSED");

        $r106 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        tmp$13134181 = new com.android.server.ConnectivityService$1;

        specialinvoke tmp$13134181.<com.android.server.ConnectivityService$1: void <init>(com.android.server.ConnectivityService)>(this);

        tmp$252999342 = new android.content.IntentFilter;

        specialinvoke tmp$252999342.<android.content.IntentFilter: void <init>(android.content.IntentFilter)>(i$#21);

        virtualinvoke $r106.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(tmp$13134181, tmp$252999342);

        tmp$1821831627 = new com.android.server.connectivity.PacManager;

        $r109 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r110 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        specialinvoke tmp$1821831627.<com.android.server.connectivity.PacManager: void <init>(android.content.Context,android.os.Handler,int)>($r109, $r110, 16);

        this.<com.android.server.ConnectivityService: com.android.server.connectivity.PacManager mPacManager> = tmp$1821831627;

        $r112 = virtualinvoke context.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r111 = (android.os.UserManager) $r112;

        this.<com.android.server.ConnectivityService: android.os.UserManager mUserManager> = $r111;

        return;

        catch java.lang.IllegalArgumentException from label03 to label04 with label05;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Exception from label12 to label13 with label20;
        catch java.lang.Exception from label14 to label15 with label20;
        catch java.lang.Exception from label16 to label17 with label20;
        catch java.lang.Exception from label18 to label19 with label20;
        catch android.os.RemoteException from label30 to label31 with label32;
    }

    private synchronized int nextNetworkRequestId()
    {
        com.android.server.ConnectivityService this;
        int $i0, $i1;

        this := @this: com.android.server.ConnectivityService;

        $i0 = this.<com.android.server.ConnectivityService: int mNextNetworkRequestId>;

        $i1 = $i0 + 1;

        this.<com.android.server.ConnectivityService: int mNextNetworkRequestId> = $i1;

        return $i0;
    }

    private void assignNextNetId(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai;
        android.util.SparseArray l2, $r0, $r2, $r5;
        int netId, $i0, $i1, i#1;
        java.lang.Throwable l5, $r6;
        java.lang.IllegalStateException $r1;
        java.lang.Object $r3;
        android.net.Network $r4;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        l2 = $r0;

        entermonitor $r0;

     label01:
        i#1 = 100;

     label02:
        if i#1 > 65535 goto label06;

        netId = this.<com.android.server.ConnectivityService: int mNextNetId>;

        $i0 = this.<com.android.server.ConnectivityService: int mNextNetId>;

        $i1 = $i0 + 1;

        this.<com.android.server.ConnectivityService: int mNextNetId> = $i1;

        if $i1 <= 65535 goto label03;

        this.<com.android.server.ConnectivityService: int mNextNetId> = 100;

     label03:
        $r2 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(netId);

        if $r3 != null goto label05;

        $r4 = new android.net.Network;

        specialinvoke $r4.<android.net.Network: void <init>(int)>(netId);

        nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network> = $r4;

        $r5 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(netId, nai);

        exitmonitor l2;

     label04:
        return;

     label05:
        i#1 = i#1 + 1;

        goto label02;

     label06:
        exitmonitor l2;

     label07:
        goto label10;

     label08:
        $r6 := @caughtexception;

        l5 = $r6;

        exitmonitor l2;

     label09:
        throw l5;

     label10:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No free netIds");

        throw $r1;

        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private boolean teardown(android.net.NetworkStateTracker)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkStateTracker netTracker;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        netTracker := @parameter0: android.net.NetworkStateTracker;

        $z0 = interfaceinvoke netTracker.<android.net.NetworkStateTracker: boolean teardown()>();

        if $z0 == 0 goto label1;

        interfaceinvoke netTracker.<android.net.NetworkStateTracker: void setTeardownRequested(boolean)>(1);

        return 1;

     label1:
        return 0;
    }

    private android.net.NetworkState getFilteredNetworkState(int, int)
    {
        com.android.server.ConnectivityService this;
        int networkType, uid;
        com.android.server.connectivity.NetworkAgentInfo nai, l9;
        java.lang.Throwable l10, $r19;
        com.android.server.ConnectivityService$LegacyTypeTracker $r0, $r2;
        boolean $z0;
        android.net.NetworkState $r1;
        android.net.NetworkInfo $r3, $r9, $r10, info#1, info#6;
        android.net.NetworkInfo$DetailedState $r4;
        java.lang.String $r5, subscriberId#5, $r20;
        android.net.NetworkCapabilities $r6, $r13, $r14, nc#3;
        android.net.LinkProperties $r7, $r11, $r12, lp#2;
        android.net.Network $r15, $r16, network#4;
        android.net.NetworkMisc $r17, $r18;

        this := @this: com.android.server.ConnectivityService;

        networkType := @parameter0: int;

        uid := @parameter1: int;

        info#1 = null;

        lp#2 = null;

        nc#3 = null;

        network#4 = null;

        subscriberId#5 = null;

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $z0 = virtualinvoke $r0.<com.android.server.ConnectivityService$LegacyTypeTracker: boolean isTypeSupported(int)>(networkType);

        if $z0 == 0 goto label10;

        $r2 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        nai = virtualinvoke $r2.<com.android.server.ConnectivityService$LegacyTypeTracker: com.android.server.connectivity.NetworkAgentInfo getNetworkForType(int)>(networkType);

        if nai == null goto label08;

        l9 = nai;

        entermonitor nai;

     label01:
        $r10 = new android.net.NetworkInfo;

        $r9 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        specialinvoke $r10.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r9);

        info#6 = $r10;

        $r12 = new android.net.LinkProperties;

        $r11 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r12.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r11);

        lp#2 = $r12;

        $r14 = new android.net.NetworkCapabilities;

        $r13 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke $r14.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>($r13);

        nc#3 = $r14;

        $r16 = new android.net.Network;

        $r15 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        specialinvoke $r16.<android.net.Network: void <init>(android.net.Network)>($r15);

        network#4 = $r16;

        $r18 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMisc networkMisc>;

        if $r18 == null goto label02;

        $r17 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMisc networkMisc>;

        $r20 = $r17.<android.net.NetworkMisc: java.lang.String subscriberId>;

        goto label03;

     label02:
        $r20 = null;

     label03:
        subscriberId#5 = $r20;

        exitmonitor l9;

     label04:
        goto label07;

     label05:
        $r19 := @caughtexception;

        l10 = $r19;

        exitmonitor l9;

     label06:
        throw l10;

     label07:
        virtualinvoke info#6.<android.net.NetworkInfo: void setType(int)>(networkType);

        goto label09;

     label08:
        $r3 = new android.net.NetworkInfo;

        $r5 = staticinvoke <android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)>(networkType);

        specialinvoke $r3.<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>(networkType, 0, $r5, "");

        info#6 = $r3;

        $r4 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        virtualinvoke info#6.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r4, null, null);

        virtualinvoke info#6.<android.net.NetworkInfo: void setIsAvailable(boolean)>(1);

        $r7 = new android.net.LinkProperties;

        specialinvoke $r7.<android.net.LinkProperties: void <init>()>();

        lp#2 = $r7;

        $r6 = new android.net.NetworkCapabilities;

        specialinvoke $r6.<android.net.NetworkCapabilities: void <init>()>();

        nc#3 = $r6;

        network#4 = null;

     label09:
        info#1 = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkInfo getFilteredNetworkInfo(android.net.NetworkInfo,android.net.LinkProperties,int)>(info#6, lp#2, uid);

     label10:
        $r1 = new android.net.NetworkState;

        specialinvoke $r1.<android.net.NetworkState: void <init>(android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,android.net.Network,java.lang.String,java.lang.String)>(info#1, lp#2, nc#3, network#4, subscriberId#5, null);

        return $r1;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    private com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)
    {
        com.android.server.ConnectivityService this;
        android.net.Network network;
        android.util.SparseArray l2, $r0, $r1;
        java.lang.Throwable l3, $r4;
        int $i0;
        java.lang.Object $r2;
        com.android.server.connectivity.NetworkAgentInfo $r3;

        this := @this: com.android.server.ConnectivityService;

        network := @parameter0: android.net.Network;

        if network != null goto label1;

        return null;

     label1:
        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        l2 = $r0;

        entermonitor $r0;

     label2:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $i0 = network.<android.net.Network: int netId>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        $r3 = (com.android.server.connectivity.NetworkAgentInfo) $r2;

        exitmonitor l2;

     label3:
        return $r3;

     label4:
        $r4 := @caughtexception;

        l3 = $r4;

        exitmonitor l2;

     label5:
        throw l3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private android.net.Network[] getVpnUnderlyingNetworks(int)
    {
        com.android.server.ConnectivityService this;
        int uid, user;
        android.util.SparseArray l3, $r0, $r1;
        com.android.server.connectivity.Vpn vpn;
        java.lang.Throwable l5, $r4;
        boolean $z0, $z1;
        java.lang.Object $r2;
        android.net.Network[] $r3;

        this := @this: com.android.server.ConnectivityService;

        uid := @parameter0: int;

        $z0 = this.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

        if $z0 != 0 goto label7;

        user = staticinvoke <android.os.UserHandle: int getUserId(int)>(uid);

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(user);

        vpn = (com.android.server.connectivity.Vpn) $r2;

        if vpn == null goto label3;

        $z1 = virtualinvoke vpn.<com.android.server.connectivity.Vpn: boolean appliesToUid(int)>(uid);

        if $z1 == 0 goto label3;

        $r3 = virtualinvoke vpn.<com.android.server.connectivity.Vpn: android.net.Network[] getUnderlyingNetworks()>();

        exitmonitor l3;

     label2:
        return $r3;

     label3:
        exitmonitor l3;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        l5 = $r4;

        exitmonitor l3;

     label6:
        throw l5;

     label7:
        return null;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private android.net.NetworkState getUnfilteredActiveNetworkState(int)
    {
        com.android.server.ConnectivityService this;
        int uid, $i0, $i1;
        android.net.Network[] networks;
        com.android.server.connectivity.NetworkAgentInfo l9, nai#6;
        java.lang.Throwable l10, $r16;
        android.net.NetworkRequest $r0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        android.net.NetworkState $r4;
        android.net.NetworkInfo $r5, $r6, info#1;
        android.net.LinkProperties $r7, $r8, lp#2;
        android.net.NetworkCapabilities $r9, $r10, nc#3;
        android.net.Network $r11, $r12, $r15, network#4;
        android.net.NetworkMisc $r13, $r14;
        java.lang.String subscriberId#5, $r17;

        this := @this: com.android.server.ConnectivityService;

        uid := @parameter0: int;

        info#1 = null;

        lp#2 = null;

        nc#3 = null;

        network#4 = null;

        subscriberId#5 = null;

        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r0 = this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $i0 = $r0.<android.net.NetworkRequest: int requestId>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        nai#6 = (com.android.server.connectivity.NetworkAgentInfo) $r2;

        networks = specialinvoke this.<com.android.server.ConnectivityService: android.net.Network[] getVpnUnderlyingNetworks(int)>(uid);

        if networks == null goto label2;

        $i1 = lengthof networks;

        if $i1 <= 0 goto label1;

        $r15 = networks[0];

        nai#6 = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>($r15);

        goto label2;

     label1:
        nai#6 = null;

     label2:
        if nai#6 == null goto label9;

        l9 = nai#6;

        entermonitor nai#6;

     label3:
        $r6 = new android.net.NetworkInfo;

        $r5 = nai#6.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        specialinvoke $r6.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r5);

        info#1 = $r6;

        $r8 = new android.net.LinkProperties;

        $r7 = nai#6.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r8.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r7);

        lp#2 = $r8;

        $r10 = new android.net.NetworkCapabilities;

        $r9 = nai#6.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke $r10.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>($r9);

        nc#3 = $r10;

        $r12 = new android.net.Network;

        $r11 = nai#6.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        specialinvoke $r12.<android.net.Network: void <init>(android.net.Network)>($r11);

        network#4 = $r12;

        $r13 = nai#6.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMisc networkMisc>;

        if $r13 == null goto label4;

        $r14 = nai#6.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMisc networkMisc>;

        $r17 = $r14.<android.net.NetworkMisc: java.lang.String subscriberId>;

        goto label5;

     label4:
        $r17 = null;

     label5:
        subscriberId#5 = $r17;

        exitmonitor l9;

     label6:
        goto label9;

     label7:
        $r16 := @caughtexception;

        l10 = $r16;

        exitmonitor l9;

     label8:
        throw l10;

     label9:
        $r4 = new android.net.NetworkState;

        specialinvoke $r4.<android.net.NetworkState: void <init>(android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,android.net.Network,java.lang.String,java.lang.String)>(info#1, lp#2, nc#3, network#4, subscriberId#5, null);

        return $r4;

        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private boolean isNetworkWithLinkPropertiesBlocked(android.net.LinkProperties, int)
    {
        com.android.server.ConnectivityService this;
        android.net.LinkProperties lp;
        int uid, uidRules, $i0;
        boolean networkCostly;
        java.lang.String iface, $r4;
        java.lang.Object l6, $r0;
        java.lang.Throwable l7, $r3;
        java.util.HashSet $r1;
        android.util.SparseIntArray $r2;

        this := @this: com.android.server.ConnectivityService;

        lp := @parameter0: android.net.LinkProperties;

        uid := @parameter1: int;

        if lp != null goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r4 = virtualinvoke lp.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

     label2:
        iface = $r4;

        $r0 = this.<com.android.server.ConnectivityService: java.lang.Object mRulesLock>;

        l6 = $r0;

        entermonitor $r0;

     label3:
        $r1 = this.<com.android.server.ConnectivityService: java.util.HashSet mMeteredIfaces>;

        networkCostly = virtualinvoke $r1.<java.util.HashSet: boolean contains(java.lang.Object)>(iface);

        $r2 = this.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        uidRules = virtualinvoke $r2.<android.util.SparseIntArray: int get(int,int)>(uid, 0);

        exitmonitor l6;

     label4:
        goto label7;

     label5:
        $r3 := @caughtexception;

        l7 = $r3;

        exitmonitor l6;

     label6:
        throw l7;

     label7:
        if networkCostly == 0 goto label8;

        $i0 = uidRules & 1;

        if $i0 == 0 goto label8;

        return 1;

     label8:
        return 0;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private android.net.NetworkInfo getFilteredNetworkInfo(android.net.NetworkInfo, android.net.LinkProperties, int)
    {
        com.android.server.ConnectivityService this;
        android.net.LinkProperties lp;
        int uid;
        com.android.server.net.LockdownVpnTracker $r0, $r1;
        boolean $z0;
        android.net.NetworkInfo $r2, info#1;
        android.net.NetworkInfo$DetailedState $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9;
        java.lang.String $r6, $r10;

        this := @this: com.android.server.ConnectivityService;

        info#1 := @parameter0: android.net.NetworkInfo;

        lp := @parameter1: android.net.LinkProperties;

        uid := @parameter2: int;

        if info#1 == null goto label1;

        $z0 = specialinvoke this.<com.android.server.ConnectivityService: boolean isNetworkWithLinkPropertiesBlocked(android.net.LinkProperties,int)>(lp, uid);

        if $z0 == 0 goto label1;

        $r2 = new android.net.NetworkInfo;

        specialinvoke $r2.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(info#1);

        info#1 = $r2;

        $r3 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState BLOCKED>;

        virtualinvoke info#1.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r3, null, null);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("returning Blocked NetworkInfo for ifname=");

        $r6 = virtualinvoke lp.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(uid);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r10);

     label1:
        if info#1 == null goto label2;

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        if $r0 == null goto label2;

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        info#1 = virtualinvoke $r1.<com.android.server.net.LockdownVpnTracker: android.net.NetworkInfo augmentNetworkInfo(android.net.NetworkInfo)>(info#1);

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("returning Locked NetworkInfo");

     label2:
        return info#1;
    }

    public android.net.NetworkInfo getActiveNetworkInfo()
    {
        com.android.server.ConnectivityService this;
        int uid;
        android.net.NetworkState state;
        android.net.LinkProperties $r0;
        android.net.NetworkInfo $r1, $r2;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        state = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>(uid);

        $r1 = state.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $r0 = state.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        $r2 = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkInfo getFilteredNetworkInfo(android.net.NetworkInfo,android.net.LinkProperties,int)>($r1, $r0, uid);

        return $r2;
    }

    private android.net.NetworkInfo getProvisioningNetworkInfo()
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkInfo[] arr$;
        int len$, i$#2;
        android.net.NetworkInfo ni, provNi#1;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        provNi#1 = null;

        arr$ = virtualinvoke this.<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()>();

        len$ = lengthof arr$;

        i$#2 = 0;

     label1:
        if i$#2 >= len$ goto label3;

        ni = arr$[i$#2];

        $z0 = virtualinvoke ni.<android.net.NetworkInfo: boolean isConnectedToProvisioningNetwork()>();

        if $z0 == 0 goto label2;

        provNi#1 = ni;

        goto label3;

     label2:
        i$#2 = i$#2 + 1;

        goto label1;

     label3:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProvisioningNetworkInfo: X provNi=");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(provNi#1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r3);

        return provNi#1;
    }

    public android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()
    {
        com.android.server.ConnectivityService this;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;
        android.net.NetworkInfo provNi#1;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        provNi#1 = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkInfo getProvisioningNetworkInfo()>();

        if provNi#1 != null goto label1;

        provNi#1 = virtualinvoke this.<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()>();

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProvisioningOrActiveNetworkInfo: X provNi=");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(provNi#1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r3);

        return provNi#1;
    }

    public android.net.NetworkInfo getActiveNetworkInfoUnfiltered()
    {
        com.android.server.ConnectivityService this;
        int uid;
        android.net.NetworkState state;
        android.net.NetworkInfo $r0;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        state = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>(uid);

        $r0 = state.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        return $r0;
    }

    public android.net.NetworkInfo getActiveNetworkInfoForUid(int)
    {
        com.android.server.ConnectivityService this;
        int uid;
        android.net.NetworkState state;
        android.net.LinkProperties $r0;
        android.net.NetworkInfo $r1, $r2;

        this := @this: com.android.server.ConnectivityService;

        uid := @parameter0: int;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        state = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>(uid);

        $r1 = state.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $r0 = state.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        $r2 = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkInfo getFilteredNetworkInfo(android.net.NetworkInfo,android.net.LinkProperties,int)>($r1, $r0, uid);

        return $r2;
    }

    public android.net.NetworkInfo getNetworkInfo(int)
    {
        com.android.server.ConnectivityService this;
        int networkType, uid, $i0;
        android.net.Network[] $r0;
        android.net.NetworkInfo $r1, $r2, $r3, $r5, $r6;
        android.net.LinkProperties $r4;
        android.net.NetworkState state#1, state#2;

        this := @this: com.android.server.ConnectivityService;

        networkType := @parameter0: int;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r0 = specialinvoke this.<com.android.server.ConnectivityService: android.net.Network[] getVpnUnderlyingNetworks(int)>(uid);

        if $r0 == null goto label1;

        state#1 = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>(uid);

        $r2 = state#1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        if $r2 == null goto label1;

        $r3 = state#1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $i0 = virtualinvoke $r3.<android.net.NetworkInfo: int getType()>();

        if $i0 != networkType goto label1;

        $r5 = state#1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $r4 = state#1.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        $r6 = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkInfo getFilteredNetworkInfo(android.net.NetworkInfo,android.net.LinkProperties,int)>($r5, $r4, uid);

        return $r6;

     label1:
        state#2 = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkState getFilteredNetworkState(int,int)>(networkType, uid);

        $r1 = state#2.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        return $r1;
    }

    public android.net.NetworkInfo getNetworkInfoForNetwork(android.net.Network)
    {
        com.android.server.ConnectivityService this;
        android.net.Network network;
        int uid;
        com.android.server.connectivity.NetworkAgentInfo nai, l5;
        java.lang.Throwable l6, $r4;
        android.net.NetworkInfo $r1, $r2, info#1, info#2;
        android.net.LinkProperties $r3;

        this := @this: com.android.server.ConnectivityService;

        network := @parameter0: android.net.Network;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        info#1 = null;

        nai = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(network);

        if nai == null goto label5;

        l5 = nai;

        entermonitor nai;

     label1:
        $r1 = new android.net.NetworkInfo;

        $r2 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        specialinvoke $r1.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r2);

        info#2 = $r1;

        $r3 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        info#1 = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkInfo getFilteredNetworkInfo(android.net.NetworkInfo,android.net.LinkProperties,int)>(info#2, $r3, uid);

        exitmonitor l5;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        l6 = $r4;

        exitmonitor l5;

     label4:
        throw l6;

     label5:
        return info#1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.net.NetworkInfo[] getAllNetworkInfo()
    {
        com.android.server.ConnectivityService this;
        java.util.ArrayList result;
        android.net.NetworkInfo info;
        int $i0, networkType#1;
        android.net.NetworkInfo[] $r0, $r2;
        java.lang.Object[] $r1;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        result = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        networkType#1 = 0;

     label1:
        if networkType#1 > 17 goto label3;

        info = virtualinvoke this.<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)>(networkType#1);

        if info == null goto label2;

        virtualinvoke result.<java.util.ArrayList: boolean add(java.lang.Object)>(info);

     label2:
        networkType#1 = networkType#1 + 1;

        goto label1;

     label3:
        $i0 = virtualinvoke result.<java.util.ArrayList: int size()>();

        $r0 = newarray (android.net.NetworkInfo)[$i0];

        $r1 = virtualinvoke result.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r0);

        $r2 = (android.net.NetworkInfo[]) $r1;

        return $r2;
    }

    public android.net.Network getNetworkForType(int)
    {
        com.android.server.ConnectivityService this;
        int networkType, uid;
        android.net.NetworkState state;
        android.net.LinkProperties $r0;
        boolean $z0;
        android.net.Network $r1;

        this := @this: com.android.server.ConnectivityService;

        networkType := @parameter0: int;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        state = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkState getFilteredNetworkState(int,int)>(networkType, uid);

        $r0 = state.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        $z0 = specialinvoke this.<com.android.server.ConnectivityService: boolean isNetworkWithLinkPropertiesBlocked(android.net.LinkProperties,int)>($r0, uid);

        if $z0 != 0 goto label1;

        $r1 = state.<android.net.NetworkState: android.net.Network network>;

        return $r1;

     label1:
        return null;
    }

    public android.net.Network[] getAllNetworks()
    {
        com.android.server.ConnectivityService this;
        java.util.ArrayList result, $r0;
        android.util.SparseArray l2, $r1, $r2, $r7;
        java.lang.Throwable l4, $r11;
        int $i0, $i1, i#1;
        android.net.Network[] $r3, $r5;
        java.lang.Object[] $r4;
        android.net.Network $r6, $r10;
        com.android.server.connectivity.NetworkAgentInfo $r8;
        java.lang.Object $r9;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        result = $r0;

        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        l2 = $r1;

        entermonitor $r1;

     label1:
        i#1 = 0;

     label2:
        $r2 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i#1 >= $i0 goto label3;

        $r6 = new android.net.Network;

        $r7 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r9 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#1);

        $r8 = (com.android.server.connectivity.NetworkAgentInfo) $r9;

        $r10 = $r8.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        specialinvoke $r6.<android.net.Network: void <init>(android.net.Network)>($r10);

        virtualinvoke result.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i#1 = i#1 + 1;

        goto label2;

     label3:
        exitmonitor l2;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        l4 = $r11;

        exitmonitor l2;

     label6:
        throw l4;

     label7:
        $i1 = virtualinvoke result.<java.util.ArrayList: int size()>();

        $r3 = newarray (android.net.Network)[$i1];

        $r4 = virtualinvoke result.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (android.net.Network[]) $r4;

        return $r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private android.net.NetworkCapabilities getNetworkCapabilitiesAndValidation(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai, l2;
        android.net.NetworkCapabilities nc, $r1, $r2;
        java.lang.Throwable l4, $r5;
        boolean $z0, $z1;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        if nai == null goto label9;

        l2 = nai;

        entermonitor nai;

     label1:
        $z0 = nai.<com.android.server.connectivity.NetworkAgentInfo: boolean created>;

        if $z0 == 0 goto label5;

        $r1 = new android.net.NetworkCapabilities;

        $r2 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke $r1.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>($r2);

        nc = $r1;

        $z1 = nai.<com.android.server.connectivity.NetworkAgentInfo: boolean lastValidated>;

        if $z1 == 0 goto label2;

        virtualinvoke nc.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(16);

        goto label3;

     label2:
        virtualinvoke nc.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(16);

     label3:
        exitmonitor l2;

     label4:
        return nc;

     label5:
        exitmonitor l2;

     label6:
        goto label9;

     label7:
        $r5 := @caughtexception;

        l4 = $r5;

        exitmonitor l2;

     label8:
        throw l4;

     label9:
        return null;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int)
    {
        com.android.server.ConnectivityService this;
        int userId, len$, $i0, i$#4;
        java.util.HashMap result, $r0;
        com.android.server.connectivity.Vpn vpn;
        android.net.Network[] networks, arr$;
        android.net.Network network, $r8, $r10;
        java.lang.Throwable l12, $r11;
        com.android.server.connectivity.NetworkAgentInfo $r1, nai#1, nai#5;
        boolean $z0;
        java.util.Collection $r2;
        android.util.SparseArray $r3, $r6, out#3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        android.net.NetworkCapabilities nc#2, nc#6;
        android.net.NetworkCapabilities[] out#7, out#8;

        this := @this: com.android.server.ConnectivityService;

        userId := @parameter0: int;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        result = $r0;

        nai#1 = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        $r1 = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        nc#2 = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilitiesAndValidation(com.android.server.connectivity.NetworkAgentInfo)>($r1);

        if nc#2 == null goto label1;

        $r10 = nai#1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        virtualinvoke result.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, nc#2);

     label1:
        $z0 = this.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

        if $z0 != 0 goto label9;

        $r3 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        out#3 = $r3;

        entermonitor $r3;

     label2:
        $r6 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r5 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(userId);

        vpn = (com.android.server.connectivity.Vpn) $r5;

        if vpn == null goto label5;

        networks = virtualinvoke vpn.<com.android.server.connectivity.Vpn: android.net.Network[] getUnderlyingNetworks()>();

        if networks == null goto label5;

        arr$ = networks;

        len$ = lengthof arr$;

        i$#4 = 0;

     label3:
        if i$#4 >= len$ goto label5;

        network = arr$[i$#4];

        nai#5 = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(network);

        nc#6 = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilitiesAndValidation(com.android.server.connectivity.NetworkAgentInfo)>(nai#5);

        if nc#6 == null goto label4;

        $r8 = nai#5.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        virtualinvoke result.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, nc#6);

     label4:
        i$#4 = i$#4 + 1;

        goto label3;

     label5:
        exitmonitor out#3;

     label6:
        goto label9;

     label7:
        $r11 := @caughtexception;

        l12 = $r11;

        exitmonitor out#3;

     label8:
        throw l12;

     label9:
        $i0 = virtualinvoke result.<java.util.HashMap: int size()>();

        out#7 = newarray (android.net.NetworkCapabilities)[$i0];

        $r2 = virtualinvoke result.<java.util.HashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(out#7);

        out#8 = (android.net.NetworkCapabilities[]) $r4;

        return out#8;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean isNetworkSupported(int)
    {
        com.android.server.ConnectivityService this;
        int networkType;
        com.android.server.ConnectivityService$LegacyTypeTracker $r0;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        networkType := @parameter0: int;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $z0 = virtualinvoke $r0.<com.android.server.ConnectivityService$LegacyTypeTracker: boolean isTypeSupported(int)>(networkType);

        return $z0;
    }

    public android.net.LinkProperties getActiveLinkProperties()
    {
        com.android.server.ConnectivityService this;
        int uid;
        android.net.NetworkState state;
        android.net.LinkProperties $r0;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        state = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>(uid);

        $r0 = state.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        return $r0;
    }

    public android.net.LinkProperties getLinkPropertiesForType(int)
    {
        com.android.server.ConnectivityService this;
        int networkType;
        com.android.server.connectivity.NetworkAgentInfo nai, l3;
        java.lang.Throwable l4, $r4;
        com.android.server.ConnectivityService$LegacyTypeTracker $r0;
        android.net.LinkProperties $r2, $r3;

        this := @this: com.android.server.ConnectivityService;

        networkType := @parameter0: int;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        nai = virtualinvoke $r0.<com.android.server.ConnectivityService$LegacyTypeTracker: com.android.server.connectivity.NetworkAgentInfo getNetworkForType(int)>(networkType);

        if nai == null goto label5;

        l3 = nai;

        entermonitor nai;

     label1:
        $r2 = new android.net.LinkProperties;

        $r3 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r2.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r3);

        exitmonitor l3;

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        l4 = $r4;

        exitmonitor l3;

     label4:
        throw l4;

     label5:
        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.net.LinkProperties getLinkProperties(android.net.Network)
    {
        com.android.server.ConnectivityService this;
        android.net.Network network;
        com.android.server.connectivity.NetworkAgentInfo nai, l3;
        java.lang.Throwable l4, $r3;
        android.net.LinkProperties $r1, $r2;

        this := @this: com.android.server.ConnectivityService;

        network := @parameter0: android.net.Network;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        nai = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(network);

        if nai == null goto label5;

        l3 = nai;

        entermonitor nai;

     label1:
        $r1 = new android.net.LinkProperties;

        $r2 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r1.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r2);

        exitmonitor l3;

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        l4 = $r3;

        exitmonitor l3;

     label4:
        throw l4;

     label5:
        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)
    {
        com.android.server.ConnectivityService this;
        android.net.Network network;
        com.android.server.connectivity.NetworkAgentInfo nai, l3;
        java.lang.Throwable l4, $r3;
        android.net.NetworkCapabilities $r1, $r2;

        this := @this: com.android.server.ConnectivityService;

        network := @parameter0: android.net.Network;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        nai = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(network);

        if nai == null goto label5;

        l3 = nai;

        entermonitor nai;

     label1:
        $r1 = new android.net.NetworkCapabilities;

        $r2 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke $r1.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>($r2);

        exitmonitor l3;

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        l4 = $r3;

        exitmonitor l3;

     label4:
        throw l4;

     label5:
        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.net.NetworkState[] getAllNetworkState()
    {
        com.android.server.ConnectivityService this;
        java.util.ArrayList result;
        android.net.Network[] arr$;
        int len$, $i0, i$#1;
        android.net.Network network;
        com.android.server.connectivity.NetworkAgentInfo nai, l7;
        java.lang.String subscriberId, $r11;
        java.lang.Throwable l9, $r10;
        android.net.NetworkState[] $r0, $r2;
        java.lang.Object[] $r1;
        android.net.NetworkState $r4;
        android.net.NetworkMisc $r5, $r9;
        android.net.LinkProperties $r6;
        android.net.NetworkCapabilities $r7;
        android.net.NetworkInfo $r8;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        result = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        arr$ = virtualinvoke this.<com.android.server.ConnectivityService: android.net.Network[] getAllNetworks()>();

        len$ = lengthof arr$;

        i$#1 = 0;

     label1:
        if i$#1 >= len$ goto label9;

        network = arr$[i$#1];

        nai = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(network);

        if nai == null goto label8;

        l7 = nai;

        entermonitor nai;

     label2:
        $r5 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMisc networkMisc>;

        if $r5 == null goto label3;

        $r9 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMisc networkMisc>;

        $r11 = $r9.<android.net.NetworkMisc: java.lang.String subscriberId>;

        goto label4;

     label3:
        $r11 = null;

     label4:
        subscriberId = $r11;

        $r4 = new android.net.NetworkState;

        $r8 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $r6 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $r7 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke $r4.<android.net.NetworkState: void <init>(android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,android.net.Network,java.lang.String,java.lang.String)>($r8, $r6, $r7, network, subscriberId, null);

        virtualinvoke result.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        exitmonitor l7;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        l9 = $r10;

        exitmonitor l7;

     label7:
        throw l9;

     label8:
        i$#1 = i$#1 + 1;

        goto label1;

     label9:
        $i0 = virtualinvoke result.<java.util.ArrayList: int size()>();

        $r0 = newarray (android.net.NetworkState)[$i0];

        $r1 = virtualinvoke result.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r0);

        $r2 = (android.net.NetworkState[]) $r1;

        return $r2;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()
    {
        com.android.server.ConnectivityService this;
        int uid;
        long token;
        android.net.NetworkState state;
        java.lang.Throwable l6, $r3;
        android.net.NetworkInfo $r0;
        android.net.INetworkPolicyManager $r1;
        android.os.RemoteException $r2;
        android.net.NetworkQuotaInfo l5#1;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        token = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        state = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>(uid);

        $r0 = state.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        if $r0 == null goto label5;

     label2:
        $r1 = this.<com.android.server.ConnectivityService: android.net.INetworkPolicyManager mPolicyManager>;

        l5#1 = interfaceinvoke $r1.<android.net.INetworkPolicyManager: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>(state);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        return l5#1;

     label4:
        $r2 := @caughtexception;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        return null;

     label6:
        $r3 := @caughtexception;

        l6 = $r3;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        throw l6;

        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean isActiveNetworkMetered()
    {
        com.android.server.ConnectivityService this;
        int uid;
        long token;
        boolean l4;
        java.lang.Throwable l5, $r0;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        token = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        l4 = specialinvoke this.<com.android.server.ConnectivityService: boolean isActiveNetworkMeteredUnchecked(int)>(uid);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        return l4;

     label3:
        $r0 := @caughtexception;

        l5 = $r0;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        throw l5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean isActiveNetworkMeteredUnchecked(int)
    {
        com.android.server.ConnectivityService this;
        int uid;
        android.net.NetworkState state;
        android.os.RemoteException l3, $r2;
        android.net.NetworkInfo $r0;
        android.net.INetworkPolicyManager $r1;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        uid := @parameter0: int;

        state = specialinvoke this.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>(uid);

        $r0 = state.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        if $r0 == null goto label4;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.net.INetworkPolicyManager mPolicyManager>;

        $z0 = interfaceinvoke $r1.<android.net.INetworkPolicyManager: boolean isNetworkMetered(android.net.NetworkState)>(state);

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        l3 = $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean requestRouteToHostAddress(int, byte[])
    {
        com.android.server.ConnectivityService this;
        int networkType, netId, uid#5;
        byte[] hostAddress;
        java.net.InetAddress addr;
        android.net.NetworkInfo$DetailedState netState, $r5, $r13;
        android.net.LinkProperties lp;
        java.lang.Throwable l13, $r31, $r32, $r34, token#4, l12#8;
        java.util.List $r0;
        java.lang.Integer $r1;
        boolean $z0, $z1, $z2, ok#9, l12#10;
        com.android.server.ConnectivityService$LegacyTypeTracker $r2, $r14;
        android.net.NetworkInfo $r4;
        android.net.Network $r6;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r16, $r17, $r18, $r20, $r21, $r22, $r25, $r26, $r27, $r29, $r30;
        java.lang.String $r9, $r15, $r19, $r24, $r28, $r33;
        java.net.UnknownHostException $r23, e#1;
        com.android.server.connectivity.NetworkAgentInfo e#2, uid#3, ok#7;
        long token#6;

        this := @this: com.android.server.ConnectivityService;

        networkType := @parameter0: int;

        hostAddress := @parameter1: byte[];

        specialinvoke this.<com.android.server.ConnectivityService: void enforceChangePermission()>();

        $r0 = this.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(networkType);

        $z0 = interfaceinvoke $r0.<java.util.List: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label01;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

     label01:
        addr = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(hostAddress);

     label02:
        goto label04;

     label03:
        $r23 := @caughtexception;

        e#1 = $r23;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress got ");

        $r28 = virtualinvoke e#1.<java.net.UnknownHostException: java.lang.String toString()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r33 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r33);

        return 0;

     label04:
        $z1 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(networkType);

        if $z1 != 0 goto label05;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress on invalid network: ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(networkType);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r24);

        return 0;

     label05:
        $r2 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        e#2 = virtualinvoke $r2.<com.android.server.ConnectivityService$LegacyTypeTracker: com.android.server.connectivity.NetworkAgentInfo getNetworkForType(int)>(networkType);

        if e#2 != null goto label08;

        $r14 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $z2 = virtualinvoke $r14.<com.android.server.ConnectivityService$LegacyTypeTracker: boolean isTypeSupported(int)>(networkType);

        if $z2 != 0 goto label06;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress on unsupported network: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(networkType);

        $r19 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r19);

        goto label07;

     label06:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress on down network: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(networkType);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r15);

     label07:
        return 0;

     label08:
        uid#3 = e#2;

        entermonitor e#2;

     label09:
        $r4 = e#2.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        netState = virtualinvoke $r4.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        exitmonitor uid#3;

     label10:
        goto label13;

     label11:
        $r31 := @caughtexception;

        token#4 = $r31;

        exitmonitor uid#3;

     label12:
        throw token#4;

     label13:
        $r5 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if netState == $r5 goto label14;

        $r13 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CAPTIVE_PORTAL_CHECK>;

        if netState == $r13 goto label14;

        return 0;

     label14:
        uid#5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        token#6 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label15:
        ok#7 = e#2;

        entermonitor e#2;

     label16:
        lp = e#2.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $r6 = e#2.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        netId = $r6.<android.net.Network: int netId>;

        exitmonitor ok#7;

     label17:
        goto label20;

     label18:
        $r32 := @caughtexception;

        l12#8 = $r32;

        exitmonitor ok#7;

     label19:
        throw l12#8;

     label20:
        ok#9 = specialinvoke this.<com.android.server.ConnectivityService: boolean addLegacyRouteToHost(android.net.LinkProperties,java.net.InetAddress,int,int)>(lp, addr, netId, uid#5);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress ok=");

        $r8 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(ok#9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

        l12#10 = ok#9;

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token#6);

        return l12#10;

     label22:
        $r34 := @caughtexception;

        l13 = $r34;

     label23:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token#6);

        throw l13;

        catch java.net.UnknownHostException from label01 to label02 with label03;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label15 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    private boolean addLegacyRouteToHost(android.net.LinkProperties, java.net.InetAddress, int, int)
    {
        com.android.server.ConnectivityService this;
        android.net.LinkProperties lp;
        java.net.InetAddress addr, $r1, $r2;
        int netId, uid;
        java.util.List $r0;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r13, $r14, $r16;
        java.lang.String $r8, $r10, $r11, $r15, iface#3;
        android.os.INetworkManagementService $r9;
        java.lang.Exception $r12, iface#4;
        android.net.RouteInfo bestRoute#1, bestRoute#2;

        this := @this: com.android.server.ConnectivityService;

        lp := @parameter0: android.net.LinkProperties;

        addr := @parameter1: java.net.InetAddress;

        netId := @parameter2: int;

        uid := @parameter3: int;

        $r0 = virtualinvoke lp.<android.net.LinkProperties: java.util.List getAllRoutes()>();

        bestRoute#1 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo selectBestRoute(java.util.Collection,java.net.InetAddress)>($r0, addr);

        if bestRoute#1 != null goto label1;

        $r11 = virtualinvoke lp.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        bestRoute#2 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.lang.String)>(addr, $r11);

        goto label3;

     label1:
        iface#3 = virtualinvoke bestRoute#1.<android.net.RouteInfo: java.lang.String getInterface()>();

        $r1 = virtualinvoke bestRoute#1.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $z0 = virtualinvoke $r1.<java.net.InetAddress: boolean equals(java.lang.Object)>(addr);

        if $z0 == 0 goto label2;

        bestRoute#2 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.lang.String)>(addr, iface#3);

        goto label3;

     label2:
        $r2 = virtualinvoke bestRoute#1.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        bestRoute#2 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.net.InetAddress,java.lang.String)>(addr, $r2, iface#3);

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(bestRoute#2);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for interface ");

        $r8 = virtualinvoke bestRoute#2.<android.net.RouteInfo: java.lang.String getInterface()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r10);

     label4:
        $r9 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r9.<android.os.INetworkManagementService: void addLegacyRouteForNetId(int,android.net.RouteInfo,int)>(netId, bestRoute#2, uid);

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        iface#4 = $r12;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception trying to add a route: ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(iface#4);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r15);

        return 0;

     label7:
        return 1;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void setDataDependency(int, boolean)
    {
        com.android.server.ConnectivityService this;
        int networkType;
        boolean met;
        com.android.server.ConnectivityService$InternalHandler $r0, $r1;
        android.os.Message $r2;
        byte $b0;

        this := @this: com.android.server.ConnectivityService;

        networkType := @parameter0: int;

        met := @parameter1: boolean;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        if met == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        $r2 = virtualinvoke $r0.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(10, $b0, networkType);

        virtualinvoke $r1.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r2);

        return;
    }

    private void handleSetDependencyMet(int, boolean)
    {
        com.android.server.ConnectivityService this;
        int networkType;
        boolean met;
        android.net.NetworkStateTracker[] $r0, $r9;
        android.net.NetworkStateTracker $r1, $r10;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        this := @this: com.android.server.ConnectivityService;

        networkType := @parameter0: int;

        met := @parameter1: boolean;

        $r0 = this.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r1 = $r0[networkType];

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleSetDependencyMet(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(networkType);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(met);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r8);

        $r9 = this.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r10 = $r9[networkType];

        interfaceinvoke $r10.<android.net.NetworkStateTracker: void setDependencyMet(boolean)>(met);

     label1:
        return;
    }

    private void enforceInternetPermission()
    {
        com.android.server.ConnectivityService this;
        android.content.Context $r0;

        this := @this: com.android.server.ConnectivityService;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERNET", "ConnectivityService");

        return;
    }

    private void enforceAccessPermission()
    {
        com.android.server.ConnectivityService this;
        android.content.Context $r0;

        this := @this: com.android.server.ConnectivityService;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_NETWORK_STATE", "ConnectivityService");

        return;
    }

    private void enforceChangePermission()
    {
        com.android.server.ConnectivityService this;
        android.content.Context $r0;

        this := @this: com.android.server.ConnectivityService;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CHANGE_NETWORK_STATE", "ConnectivityService");

        return;
    }

    private void enforceTetherAccessPermission()
    {
        com.android.server.ConnectivityService this;
        android.content.Context $r0;

        this := @this: com.android.server.ConnectivityService;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_NETWORK_STATE", "ConnectivityService");

        return;
    }

    private void enforceConnectivityInternalPermission()
    {
        com.android.server.ConnectivityService this;
        android.content.Context $r0;

        this := @this: com.android.server.ConnectivityService;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "ConnectivityService");

        return;
    }

    public void sendConnectedBroadcast(android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkInfo info;

        this := @this: com.android.server.ConnectivityService;

        info := @parameter0: android.net.NetworkInfo;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        specialinvoke this.<com.android.server.ConnectivityService: void sendGeneralBroadcast(android.net.NetworkInfo,java.lang.String)>(info, "android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE");

        specialinvoke this.<com.android.server.ConnectivityService: void sendGeneralBroadcast(android.net.NetworkInfo,java.lang.String)>(info, "android.net.conn.CONNECTIVITY_CHANGE");

        return;
    }

    private void sendInetConditionBroadcast(android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkInfo info;

        this := @this: com.android.server.ConnectivityService;

        info := @parameter0: android.net.NetworkInfo;

        specialinvoke this.<com.android.server.ConnectivityService: void sendGeneralBroadcast(android.net.NetworkInfo,java.lang.String)>(info, "android.net.conn.INET_CONDITION_ACTION");

        return;
    }

    private android.content.Intent makeGeneralIntent(android.net.NetworkInfo, java.lang.String)
    {
        com.android.server.ConnectivityService this;
        java.lang.String bcastType, $r5, $r6, $r9, $r10;
        android.content.Intent intent, tmp$1484828023;
        com.android.server.net.LockdownVpnTracker $r0, $r13;
        int $i0, $i1;
        boolean $z0;
        android.net.NetworkInfo info#1, tmp$1972271256;
        android.os.Parcelable tmp$1816519609;

        this := @this: com.android.server.ConnectivityService;

        info#1 := @parameter0: android.net.NetworkInfo;

        bcastType := @parameter1: java.lang.String;

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        if $r0 == null goto label1;

        $r13 = this.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        info#1 = virtualinvoke $r13.<com.android.server.net.LockdownVpnTracker: android.net.NetworkInfo augmentNetworkInfo(android.net.NetworkInfo)>(info#1);

     label1:
        tmp$1484828023 = new android.content.Intent;

        specialinvoke tmp$1484828023.<android.content.Intent: void <init>(java.lang.String)>(bcastType);

        intent = tmp$1484828023;

        tmp$1972271256 = new android.net.NetworkInfo;

        specialinvoke tmp$1972271256.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(info#1);

        tmp$1816519609 = (android.os.Parcelable) tmp$1972271256;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("networkInfo", tmp$1816519609);

        $i0 = virtualinvoke info#1.<android.net.NetworkInfo: int getType()>();

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("networkType", $i0);

        $z0 = virtualinvoke info#1.<android.net.NetworkInfo: boolean isFailover()>();

        if $z0 == 0 goto label2;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("isFailover", 1);

        virtualinvoke info#1.<android.net.NetworkInfo: void setFailover(boolean)>(0);

     label2:
        $r5 = virtualinvoke info#1.<android.net.NetworkInfo: java.lang.String getReason()>();

        if $r5 == null goto label3;

        $r10 = virtualinvoke info#1.<android.net.NetworkInfo: java.lang.String getReason()>();

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("reason", $r10);

     label3:
        $r6 = virtualinvoke info#1.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        if $r6 == null goto label4;

        $r9 = virtualinvoke info#1.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("extraInfo", $r9);

     label4:
        $i1 = this.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished>;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("inetCondition", $i1);

        return intent;
    }

    private void sendGeneralBroadcast(android.net.NetworkInfo, java.lang.String)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkInfo info;
        java.lang.String bcastType;
        android.content.Intent $r0;

        this := @this: com.android.server.ConnectivityService;

        info := @parameter0: android.net.NetworkInfo;

        bcastType := @parameter1: java.lang.String;

        $r0 = specialinvoke this.<com.android.server.ConnectivityService: android.content.Intent makeGeneralIntent(android.net.NetworkInfo,java.lang.String)>(info, bcastType);

        specialinvoke this.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>($r0);

        return;
    }

    private void sendDataActivityBroadcast(int, boolean, long)
    {
        com.android.server.ConnectivityService this;
        int deviceType;
        boolean active;
        long tsNanos, ident;
        android.content.Intent intent, $r0;
        java.lang.Throwable l8, $r6;
        android.os.UserHandle $r4;
        android.content.Context $r5;

        this := @this: com.android.server.ConnectivityService;

        deviceType := @parameter0: int;

        active := @parameter1: boolean;

        tsNanos := @parameter2: long;

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.DATA_ACTIVITY_CHANGE");

        intent = $r0;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("deviceType", deviceType);

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("isActive", active);

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("tsNanos", tsNanos);

        ident = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r4 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(intent, $r4, "android.permission.RECEIVE_DATA_ACTIVITY_CHANGE", null, null, 0, null, null);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        goto label5;

     label3:
        $r6 := @caughtexception;

        l8 = $r6;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        throw l8;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void sendStickyBroadcast(android.content.Intent)
    {
        com.android.server.ConnectivityService this, l2;
        android.content.Intent intent, $r13;
        long ident;
        com.android.internal.app.IBatteryStats bs;
        java.lang.Throwable l7, l8, $r14, $r15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6, $r7, $r8, $r17;
        android.os.UserHandle $r9;
        android.content.Context $r10;
        android.os.Parcelable $r11;
        android.net.NetworkInfo$State $r12;
        int $i0;
        android.os.RemoteException $r16, ni#3;
        android.net.NetworkInfo ni#1;

        this := @this: com.android.server.ConnectivityService;

        intent := @parameter0: android.content.Intent;

        l2 = this;

        entermonitor this;

     label01:
        $z0 = this.<com.android.server.ConnectivityService: boolean mSystemReady>;

        if $z0 != 0 goto label02;

        $r13 = new android.content.Intent;

        specialinvoke $r13.<android.content.Intent: void <init>(android.content.Intent)>(intent);

        this.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast> = $r13;

     label02:
        virtualinvoke intent.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        $r2 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendStickyBroadcast: action=");

        $r4 = virtualinvoke intent.<android.content.Intent: java.lang.String getAction()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r6);

        ident = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r8 = "android.net.conn.CONNECTIVITY_CHANGE";

        $r7 = virtualinvoke intent.<android.content.Intent: java.lang.String getAction()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label08;

        bs = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

     label03:
        $r11 = virtualinvoke intent.<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>("networkInfo");

        ni#1 = (android.net.NetworkInfo) $r11;

        $i0 = virtualinvoke intent.<android.content.Intent: int getIntExtra(java.lang.String,int)>("networkType", -1);

        if ni#1 == null goto label04;

        $r12 = virtualinvoke ni#1.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

        $r17 = virtualinvoke $r12.<android.net.NetworkInfo$State: java.lang.String toString()>();

        goto label05;

     label04:
        $r17 = "?";

     label05:
        interfaceinvoke bs.<com.android.internal.app.IBatteryStats: void noteConnectivityChanged(int,java.lang.String)>($i0, $r17);

     label06:
        goto label08;

     label07:
        $r16 := @caughtexception;

     label08:
        $r10 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r9 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r10.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(intent, $r9);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        goto label12;

     label10:
        $r15 := @caughtexception;

        l7 = $r15;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        throw l7;

     label12:
        exitmonitor l2;

     label13:
        goto label16;

     label14:
        $r14 := @caughtexception;

        l8 = $r14;

        exitmonitor l2;

     label15:
        throw l8;

     label16:
        return;

        catch android.os.RemoteException from label03 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    void systemReady()
    {
        com.android.server.ConnectivityService this, filter#1;
        android.content.Intent intent, $r0, $r8, $r20;
        java.lang.Throwable l3, $r22;
        android.content.Context $r1, $r4, $r19, $r23;
        java.lang.String $r2;
        android.app.PendingIntent $r5, $r6;
        com.android.server.ConnectivityService$InternalHandler $r9, $r10, $r12, $r14;
        android.os.Message $r11, $r13;
        boolean $z1;
        com.android.server.connectivity.PermissionMonitor $r15;
        android.content.BroadcastReceiver $r16;
        android.content.IntentFilter $r17, filter#2;
        android.os.UserHandle $r21;

        this := @this: com.android.server.ConnectivityService;

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("android.net.ConnectivityService.action.PKT_CNT_SAMPLE_INTERVAL_ELAPSED");

        intent = $r0;

        $r1 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke intent.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r2);

        $r4 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r5 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r4, 0, intent, 0);

        this.<com.android.server.ConnectivityService: android.app.PendingIntent mSampleIntervalElapsedIntent> = $r5;

        $r6 = this.<com.android.server.ConnectivityService: android.app.PendingIntent mSampleIntervalElapsedIntent>;

        virtualinvoke this.<com.android.server.ConnectivityService: void setAlarm(int,android.app.PendingIntent)>(60000, $r6);

        specialinvoke this.<com.android.server.ConnectivityService: void loadGlobalProxy()>();

        filter#1 = this;

        entermonitor this;

     label1:
        this.<com.android.server.ConnectivityService: boolean mSystemReady> = 1;

        $r8 = this.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast>;

        if $r8 == null goto label2;

        $r23 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r20 = this.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast>;

        $r21 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r23.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r20, $r21);

        this.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast> = null;

     label2:
        exitmonitor filter#1;

     label3:
        goto label6;

     label4:
        $r22 := @caughtexception;

        l3 = $r22;

        exitmonitor filter#1;

     label5:
        throw l3;

     label6:
        $r10 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r9 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r11 = virtualinvoke $r9.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int)>(9);

        virtualinvoke $r10.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r11);

        $z1 = virtualinvoke this.<com.android.server.ConnectivityService: boolean updateLockdownVpn()>();

        if $z1 != 0 goto label7;

        $r17 = new android.content.IntentFilter;

        specialinvoke $r17.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_PRESENT");

        filter#2 = $r17;

        $r19 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r16 = this.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mUserPresentReceiver>;

        virtualinvoke $r19.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r16, filter#2);

     label7:
        $r14 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r12 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r13 = virtualinvoke $r12.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int)>(25);

        virtualinvoke $r14.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r13);

        $r15 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        virtualinvoke $r15.<com.android.server.connectivity.PermissionMonitor: void startMonitoring()>();

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void captivePortalCheckCompleted(android.net.NetworkInfo, boolean)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkInfo info;
        boolean isCaptivePortal;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        this := @this: com.android.server.ConnectivityService;

        info := @parameter0: android.net.NetworkInfo;

        isCaptivePortal := @parameter1: boolean;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("captivePortalCheckCompleted: ni=");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(info);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" captive=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(isCaptivePortal);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r5);

        return;
    }

    private void setupDataActivityTracking(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo networkAgent;
        java.lang.String iface, $r11;
        java.lang.Exception e, $r8;
        android.net.LinkProperties $r0;
        android.net.NetworkCapabilities $r1, $r2;
        boolean $z0, $z1;
        android.os.INetworkManagementService $r3;
        android.content.Context $r4, $r7;
        android.content.ContentResolver $r5, $r6;
        java.lang.StringBuilder $r9, $r10, $r12;
        byte type#1;
        int timeout#2;

        this := @this: com.android.server.ConnectivityService;

        networkAgent := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r0 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        iface = virtualinvoke $r0.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        type#1 = -1;

        $r1 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z0 = virtualinvoke $r1.<android.net.NetworkCapabilities: boolean hasTransport(int)>(0);

        if $z0 == 0 goto label1;

        $r7 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r6 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        timeout#2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r6, "data_activity_timeout_mobile", 5);

        type#1 = 0;

        goto label3;

     label1:
        $r2 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z1 = virtualinvoke $r2.<android.net.NetworkCapabilities: boolean hasTransport(int)>(1);

        if $z1 == 0 goto label2;

        $r4 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        timeout#2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r5, "data_activity_timeout_wifi", 0);

        type#1 = 1;

        goto label3;

     label2:
        timeout#2 = 0;

     label3:
        if timeout#2 <= 0 goto label7;

        if iface == null goto label7;

        if type#1 == -1 goto label7;

     label4:
        $r3 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r3.<android.os.INetworkManagementService: void addIdleTimer(java.lang.String,int,int)>(iface, timeout#2, type#1);

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        e = $r8;

        $r10 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in setupDataActivityTracking ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r11);

     label7:
        return;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    private void removeDataActivityTracking(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo networkAgent;
        java.lang.String iface, $r6;
        android.net.NetworkCapabilities caps;
        java.lang.Exception e, $r2;
        android.net.LinkProperties $r0;
        boolean $z0, $z1;
        android.os.INetworkManagementService $r1;
        java.lang.StringBuilder $r3, $r4, $r5;

        this := @this: com.android.server.ConnectivityService;

        networkAgent := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r0 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        iface = virtualinvoke $r0.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        caps = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        if iface == null goto label4;

        $z0 = virtualinvoke caps.<android.net.NetworkCapabilities: boolean hasTransport(int)>(0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke caps.<android.net.NetworkCapabilities: boolean hasTransport(int)>(1);

        if $z1 == 0 goto label4;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r1.<android.os.INetworkManagementService: void removeIdleTimer(java.lang.String)>(iface);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in removeDataActivityTracking ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r6);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void updateMtu(android.net.LinkProperties, android.net.LinkProperties)
    {
        com.android.server.ConnectivityService this;
        android.net.LinkProperties newLp, oldLp;
        java.lang.String iface, $r6, $r11, $r17;
        int mtu;
        java.lang.Exception e, $r13;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10, $r12, $r14, $r15, $r16;
        android.os.INetworkManagementService $r5;

        this := @this: com.android.server.ConnectivityService;

        newLp := @parameter0: android.net.LinkProperties;

        oldLp := @parameter1: android.net.LinkProperties;

        iface = virtualinvoke newLp.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        mtu = virtualinvoke newLp.<android.net.LinkProperties: int getMtu()>();

        goto label1;

     label1:
        $z0 = virtualinvoke newLp.<android.net.LinkProperties: boolean hasGlobalIPv6Address()>();

        $z1 = staticinvoke <android.net.LinkProperties: boolean isValidMtu(int,boolean)>(mtu, $z0);

        if $z1 != 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected mtu value: ");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(mtu);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(iface);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r11);

        return;

     label2:
        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(iface);

        if $z2 == 0 goto label3;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        return;

     label3:
        $r0 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting MTU size: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(iface);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(mtu);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r6);

        $r5 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setMtu(java.lang.String,int)>(iface, mtu);

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        e = $r13;

        $r14 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception in setMtu()");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConnectivityService", $r17);

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private void updateTcpBufferSizes(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai;
        int defaultRwndValue, $i1, $i2, $i3;
        java.lang.Integer rwndValue;
        java.lang.String sysctlKey, $r5, $r6, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r19, $r24, tcpBufferSizes#1, prefix#3, prefix#5;
        boolean $z0, $z1;
        android.net.LinkProperties $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r7, $r8, $r10, $r20, $r21, $r23;
        android.content.Context $r17;
        android.content.ContentResolver $r18;
        java.io.IOException $r22, prefix#4;
        java.lang.String[] values#2;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $z0 = specialinvoke this.<com.android.server.ConnectivityService: boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)>(nai);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        tcpBufferSizes#1 = virtualinvoke $r0.<android.net.LinkProperties: java.lang.String getTcpBufferSizes()>();

        values#2 = null;

        if tcpBufferSizes#1 == null goto label2;

        values#2 = virtualinvoke tcpBufferSizes#1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

     label2:
        if values#2 == null goto label3;

        $i2 = lengthof values#2;

        if $i2 == 6 goto label4;

     label3:
        $r1 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw5()>();

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid tcpBufferSizes string: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tcpBufferSizes#1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", using defaults");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r5);

        tcpBufferSizes#1 = "4096,87380,110208,4096,16384,110208";

        values#2 = virtualinvoke tcpBufferSizes#1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

     label4:
        $r6 = this.<com.android.server.ConnectivityService: java.lang.String mCurrentTcpBufferSizes>;

        $z1 = virtualinvoke tcpBufferSizes#1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label5;

        return;

     label5:
        $r7 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw5()>();

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting tx/rx TCP buffers to ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tcpBufferSizes#1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConnectivityService", $r9);

        $r11 = values#2[0];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_rmem_min", $r11);

        $r13 = values#2[1];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_rmem_def", $r13);

        $r12 = values#2[2];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_rmem_max", $r12);

        $r15 = values#2[3];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_wmem_min", $r15);

        $r14 = values#2[4];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_wmem_def", $r14);

        $r16 = values#2[5];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_wmem_max", $r16);

        this.<com.android.server.ConnectivityService: java.lang.String mCurrentTcpBufferSizes> = tcpBufferSizes#1;

     label6:
        goto label8;

     label7:
        $r22 := @caughtexception;

        prefix#4 = $r22;

        $r20 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw5()>();

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t set TCP buffer sizes:");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(prefix#4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r24);

     label8:
        defaultRwndValue = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("net.tcp.default_init_rwnd", 0);

        $r17 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r18, "tcp_default_init_rwnd", defaultRwndValue);

        rwndValue = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i3 = virtualinvoke rwndValue.<java.lang.Integer: int intValue()>();

        if $i3 == 0 goto label9;

        $r19 = virtualinvoke rwndValue.<java.lang.Integer: java.lang.String toString()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.sysctl.tcp_def_init_rwnd", $r19);

     label9:
        return;

        catch java.io.IOException from label5 to label6 with label7;
    }

    private void flushVmDnsCache()
    {
        com.android.server.ConnectivityService this;
        android.content.Intent intent, $r0;
        long ident;
        java.lang.Throwable l4, $r5;
        android.os.UserHandle $r3;
        android.content.Context $r4;

        this := @this: com.android.server.ConnectivityService;

        $r0 = new android.content.Intent;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.CLEAR_DNS_CACHE");

        intent = $r0;

        virtualinvoke intent.<android.content.Intent: android.content.Intent addFlags(int)>(536870912);

        virtualinvoke intent.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        ident = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r3 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r4.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(intent, $r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        goto label5;

     label3:
        $r5 := @caughtexception;

        l4 = $r5;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        throw l4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getRestoreDefaultNetworkDelay(int)
    {
        com.android.server.ConnectivityService this;
        int networkType, $i0, $i1, ret#2;
        java.lang.String restoreDefaultNetworkDelayStr;
        android.net.NetworkConfig[] $r0, $r2;
        android.net.NetworkConfig $r1, $r3;
        java.lang.Integer $r4;
        java.lang.NumberFormatException $r5, ret#1;

        this := @this: com.android.server.ConnectivityService;

        networkType := @parameter0: int;

        restoreDefaultNetworkDelayStr = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("android.telephony.apn-restore");

        if restoreDefaultNetworkDelayStr == null goto label4;

        $i0 = virtualinvoke restoreDefaultNetworkDelayStr.<java.lang.String: int length()>();

        if $i0 == 0 goto label4;

     label1:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(restoreDefaultNetworkDelayStr);

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        ret#1 = $r5;

     label4:
        ret#2 = 60000;

        if networkType > 17 goto label5;

        $r0 = this.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r1 = $r0[networkType];

        if $r1 == null goto label5;

        $r2 = this.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r3 = $r2[networkType];

        ret#2 = $r3.<android.net.NetworkConfig: int restoreTime>;

     label5:
        return ret#2;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.ConnectivityService this, nfi#10;
        java.io.FileDescriptor fd;
        java.io.PrintWriter writer;
        java.lang.String[] args;
        com.android.internal.util.IndentingPrintWriter pw, $r0;
        android.net.NetworkRequest nr, $r4, $r44;
        java.lang.Throwable l10, $r47;
        android.content.Context $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i#6, nfi#12;
        java.util.HashMap $r2, $r9, $r11;
        java.util.Collection $r3, $r8, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r5, $r30, $r31, $r34, $r35, $r38, $r43;
        android.util.SparseArray $r6, $r32, $r42;
        android.net.Network $r7;
        java.lang.StringBuilder $r12, $r13, $r16, $r17, $r19, $r22, $r24, $r40, $r45, $r48, $r49, $r50;
        com.android.server.ConnectivityService$LegacyTypeTracker $r14;
        android.os.PowerManager$WakeLock $r18;
        java.lang.String $r20, $r21, $r25, $r29, $r33, $r37, $r39, $r41, $r46, $r51;
        com.android.server.connectivity.Tethering $r23;
        java.util.ArrayList $r26, $r27, $r28, $r36;
        java.util.Iterator i$#1, nfi#4, i#7, nfi#8;
        com.android.server.ConnectivityService$NetworkFactoryInfo nfi#2;
        com.android.server.connectivity.NetworkAgentInfo i$#3, nai#5;
        com.android.server.ConnectivityService$NetworkRequestInfo nai#9;

        this := @this: com.android.server.ConnectivityService;

        fd := @parameter0: java.io.FileDescriptor;

        writer := @parameter1: java.io.PrintWriter;

        args := @parameter2: java.lang.String[];

        $r0 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r0.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(writer, "  ");

        pw = $r0;

        $r1 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label01;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump ConnectivityService from from pid=");

        $i6 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r45 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r46);

        return;

     label01:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("NetworkFactories for:");

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r2 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkFactoryInfos>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        i$#1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke i$#1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r38 = interfaceinvoke i$#1.<java.util.Iterator: java.lang.Object next()>();

        nfi#2 = (com.android.server.ConnectivityService$NetworkFactoryInfo) $r38;

        $r39 = nfi#2.<com.android.server.ConnectivityService$NetworkFactoryInfo: java.lang.String name>;

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r39);

        goto label02;

     label03:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r6 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r4 = this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $i1 = $r4.<android.net.NetworkRequest: int requestId>;

        $r5 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        i$#3 = (com.android.server.connectivity.NetworkAgentInfo) $r5;

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Active default network: ");

        if i$#3 != null goto label04;

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("none");

        goto label05;

     label04:
        $r7 = i$#3.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i2 = $r7.<android.net.Network: int netId>;

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i2);

     label05:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Current Networks:");

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r9 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r8 = virtualinvoke $r9.<java.util.HashMap: java.util.Collection values()>();

        nfi#4 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke nfi#4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r34 = interfaceinvoke nfi#4.<java.util.Iterator: java.lang.Object next()>();

        nai#5 = (com.android.server.connectivity.NetworkAgentInfo) $r34;

        $r33 = virtualinvoke nai#5.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toString()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r33);

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Requests:");

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        i#6 = 0;

     label07:
        $r32 = nai#5.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $i4 = virtualinvoke $r32.<android.util.SparseArray: int size()>();

        if i#6 >= $i4 goto label08;

        $r42 = nai#5.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r43 = virtualinvoke $r42.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#6);

        $r44 = (android.net.NetworkRequest) $r43;

        $r37 = virtualinvoke $r44.<android.net.NetworkRequest: java.lang.String toString()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r37);

        i#6 = i#6 + 1;

        goto label07;

     label08:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Lingered:");

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r36 = nai#5.<com.android.server.connectivity.NetworkAgentInfo: java.util.ArrayList networkLingered>;

        i#7 = virtualinvoke $r36.<java.util.ArrayList: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke i#7.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r35 = interfaceinvoke i#7.<java.util.Iterator: java.lang.Object next()>();

        nr = (android.net.NetworkRequest) $r35;

        $r41 = virtualinvoke nr.<android.net.NetworkRequest: java.lang.String toString()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r41);

        goto label09;

     label10:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        goto label06;

     label11:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Network Requests:");

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r11 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r10 = virtualinvoke $r11.<java.util.HashMap: java.util.Collection values()>();

        nfi#8 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke nfi#8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r30 = interfaceinvoke nfi#8.<java.util.Iterator: java.lang.Object next()>();

        nai#9 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r30;

        $r29 = virtualinvoke nai#9.<com.android.server.ConnectivityService$NetworkRequestInfo: java.lang.String toString()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r29);

        goto label12;

     label13:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mLegacyTypeTracker:");

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r14 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r14.<com.android.server.ConnectivityService$LegacyTypeTracker: void dump(com.android.internal.util.IndentingPrintWriter)>(pw);

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println()>();

        nfi#10 = this;

        entermonitor this;

     label14:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetworkTransitionWakeLock is currently ");

        $r18 = this.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        $z3 = virtualinvoke $r18.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z3 == 0 goto label15;

        $r51 = "";

        goto label16;

     label15:
        $r51 = "not ";

     label16:
        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("held.");

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("It was last requested for ");

        $r20 = this.<com.android.server.ConnectivityService: java.lang.String mNetTransitionWakeLockCausedBy>;

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r25);

        exitmonitor nfi#10;

     label17:
        goto label20;

     label18:
        $r47 := @caughtexception;

        l10 = $r47;

        exitmonitor nfi#10;

     label19:
        throw l10;

     label20:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r23 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        virtualinvoke $r23.<com.android.server.connectivity.Tethering: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(fd, pw, args);

        $r28 = this.<com.android.server.ConnectivityService: java.util.ArrayList mInetLog>;

        if $r28 == null goto label23;

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Inet condition reports:");

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        nfi#12 = 0;

     label21:
        $r27 = this.<com.android.server.ConnectivityService: java.util.ArrayList mInetLog>;

        $i3 = virtualinvoke $r27.<java.util.ArrayList: int size()>();

        if nfi#12 >= $i3 goto label22;

        $r26 = this.<com.android.server.ConnectivityService: java.util.ArrayList mInetLog>;

        $r31 = virtualinvoke $r26.<java.util.ArrayList: java.lang.Object get(int)>(nfi#12);

        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r31);

        nfi#12 = nfi#12 + 1;

        goto label21;

     label22:
        virtualinvoke pw.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

     label23:
        return;

        catch java.lang.Throwable from label14 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    private boolean isLiveNetworkAgent(com.android.server.connectivity.NetworkAgentInfo, java.lang.String)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai, officialNai;
        java.lang.String msg, $r8;
        android.net.Network $r0, $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        msg := @parameter1: java.lang.String;

        $r0 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        if $r0 != null goto label1;

        return 0;

     label1:
        $r1 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        officialNai = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>($r1);

        if officialNai == null goto label2;

        $z0 = virtualinvoke officialNai.<java.lang.Object: boolean equals(java.lang.Object)>(nai);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        if officialNai != null goto label3;

        goto label4;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - isLiveNetworkAgent found mismatched netId: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(officialNai);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(nai);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r8);

     label4:
        return 0;
    }

    private boolean isRequest(android.net.NetworkRequest)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkRequest request;
        java.util.HashMap $r0;
        java.lang.Object $r1;
        com.android.server.ConnectivityService$NetworkRequestInfo $r2;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        request := @parameter0: android.net.NetworkRequest;

        $r0 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(request);

        $r2 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r1;

        $z0 = $r2.<com.android.server.ConnectivityService$NetworkRequestInfo: boolean isRequest>;

        return $z0;
    }

    private void unlinger(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai;
        boolean $z0;
        java.util.ArrayList $r0;
        com.android.server.connectivity.NetworkMonitor $r1;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $z0 = nai.<com.android.server.connectivity.NetworkAgentInfo: boolean everValidated>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0 = nai.<com.android.server.connectivity.NetworkAgentInfo: java.util.ArrayList networkLingered>;

        virtualinvoke $r0.<java.util.ArrayList: void clear()>();

        $r1 = nai.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.NetworkMonitor networkMonitor>;

        virtualinvoke $r1.<com.android.server.connectivity.NetworkMonitor: void sendMessage(int)>(532481);

        return;
    }

    private void handleAsyncChannelHalfConnect(android.os.Message)
    {
        com.android.server.ConnectivityService this;
        android.os.Message msg;
        com.android.internal.util.AsyncChannel ac, $r16;
        com.android.server.connectivity.NetworkAgentInfo nai, $r14, i$#4;
        java.lang.Throwable l6, $r27;
        java.lang.Object $r0, $r6, $r15, $r18, $r23, $r24;
        android.os.Messenger $r1, $r3, $r5, $r13;
        java.util.HashMap $r2, $r4, $r7, $r12, $r17, $r21;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i5;
        android.net.Network $r8;
        android.util.SparseArray $r9, $r10, $r26, nri#5;
        com.android.server.ConnectivityService$LegacyTypeTracker $r11;
        java.util.Collection $r19;
        android.net.NetworkRequest $r22, $r25;
        java.util.Iterator i$#1;
        com.android.server.ConnectivityService$NetworkRequestInfo nri#2;

        this := @this: com.android.server.ConnectivityService;

        msg := @parameter0: android.os.Message;

        $r0 = msg.<android.os.Message: java.lang.Object obj>;

        ac = (com.android.internal.util.AsyncChannel) $r0;

        $r2 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkFactoryInfos>;

        $r1 = msg.<android.os.Message: android.os.Messenger replyTo>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label07;

        $i2 = msg.<android.os.Message: int arg1>;

        if $i2 != 0 goto label06;

        $r21 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r19 = virtualinvoke $r21.<java.util.HashMap: java.util.Collection values()>();

        i$#1 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke i$#1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r23 = interfaceinvoke i$#1.<java.util.Iterator: java.lang.Object next()>();

        nri#2 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r23;

        $z2 = nri#2.<com.android.server.ConnectivityService$NetworkRequestInfo: boolean isRequest>;

        if $z2 != 0 goto label02;

        goto label01;

     label02:
        $r26 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r22 = nri#2.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i3 = $r22.<android.net.NetworkRequest: int requestId>;

        $r24 = virtualinvoke $r26.<android.util.SparseArray: java.lang.Object get(int)>($i3);

        nai = (com.android.server.connectivity.NetworkAgentInfo) $r24;

        if nai == null goto label03;

        $i5 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        goto label04;

     label03:
        $i5 = 0;

     label04:
        $r25 = nri#2.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke ac.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(536576, $i5, 0, $r25);

        goto label01;

     label05:
        goto label14;

     label06:
        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Error connecting NetworkFactory");

        $r17 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkFactoryInfos>;

        $r18 = msg.<android.os.Message: java.lang.Object obj>;

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r18);

        goto label14;

     label07:
        $r4 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r3 = msg.<android.os.Message: android.os.Messenger replyTo>;

        $z1 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z1 == 0 goto label14;

        $i0 = msg.<android.os.Message: int arg1>;

        if $i0 != 0 goto label08;

        $r12 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r13 = msg.<android.os.Message: android.os.Messenger replyTo>;

        $r15 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r13);

        $r14 = (com.android.server.connectivity.NetworkAgentInfo) $r15;

        $r16 = $r14.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r16.<com.android.internal.util.AsyncChannel: void sendMessage(int)>(69633);

        goto label14;

     label08:
        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Error connecting NetworkAgent");

        $r7 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r5 = msg.<android.os.Message: android.os.Messenger replyTo>;

        $r6 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r5);

        i$#4 = (com.android.server.connectivity.NetworkAgentInfo) $r6;

        if i$#4 == null goto label14;

        $r9 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        nri#5 = $r9;

        entermonitor $r9;

     label09:
        $r10 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r8 = i$#4.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i1 = $r8.<android.net.Network: int netId>;

        virtualinvoke $r10.<android.util.SparseArray: void remove(int)>($i1);

        exitmonitor nri#5;

     label10:
        goto label13;

     label11:
        $r27 := @caughtexception;

        l6 = $r27;

        exitmonitor nri#5;

     label12:
        throw l6;

     label13:
        $r11 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r11.<com.android.server.ConnectivityService$LegacyTypeTracker: void remove(com.android.server.connectivity.NetworkAgentInfo)>(i$#4);

     label14:
        return;

        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private void handleAsyncChannelDisconnected(android.os.Message)
    {
        com.android.server.ConnectivityService this;
        android.os.Message msg;
        com.android.server.connectivity.NetworkAgentInfo nai, currentNetwork, existing, alternative#7, request#9;
        java.util.Iterator i$, i#8;
        android.os.Messenger $r0, $r13;
        java.util.HashMap $r1, $r12, $r44;
        java.lang.Object $r2, $r23, $r27, $r28, $r33, $r48;
        java.lang.StringBuilder $r3, $r5, $r7, $r8, $r35, $r36, $r39, $r40, $r41, $r43, $r49, $r51, $r52;
        java.lang.String $r4, $r9, $r30, $r38, $r42, $r47, $r57;
        android.util.SparseArray $r6, $r16, $r18, $r22, $r24, $r29, $r34, $r37, e#2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i#5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.net.NetworkInfo $r10, $r54;
        com.android.server.connectivity.NetworkMonitor $r11;
        android.net.LinkProperties $r14;
        com.android.server.ConnectivityService$LegacyTypeTracker $r17;
        android.net.Network $r19, $r31, $r32, $r53;
        android.net.NetworkRequest $r20, request#6;
        java.util.ArrayList $r21, e#4;
        com.android.server.ConnectivityService$ReapUnvalidatedNetworks $r25;
        com.android.server.ConnectivityService$NascentState $r26;
        java.util.Collection $r45;
        android.net.NetworkInfo$DetailedState $r46;
        java.lang.Exception $r50, e#1;
        android.os.INetworkManagementService $r55;
        java.lang.Throwable $r56, i#3;

        this := @this: com.android.server.ConnectivityService;

        msg := @parameter0: android.os.Message;

        $r1 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r0 = msg.<android.os.Message: android.os.Messenger replyTo>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r0);

        nai = (com.android.server.connectivity.NetworkAgentInfo) $r2;

        if nai == null goto label21;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" got DISCONNECTED, was satisfying ");

        $r6 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $i0 = virtualinvoke $r6.<android.util.SparseArray: int size()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

        $z0 = nai.<com.android.server.connectivity.NetworkAgentInfo: boolean created>;

        if $z0 == 0 goto label04;

     label01:
        $r55 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r53 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i10 = $r53.<android.net.Network: int netId>;

        interfaceinvoke $r55.<android.os.INetworkManagementService: void removeNetwork(int)>($i10);

     label02:
        goto label04;

     label03:
        $r50 := @caughtexception;

        e#1 = $r50;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception removing network: ");

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e#1);

        $r57 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r57);

     label04:
        $r10 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $z1 = virtualinvoke $r10.<android.net.NetworkInfo: boolean isConnected()>();

        if $z1 == 0 goto label05;

        $r54 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $r46 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        virtualinvoke $r54.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r46, null, null);

     label05:
        $z2 = specialinvoke this.<com.android.server.ConnectivityService: boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)>(nai);

        if $z2 == 0 goto label06;

        this.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = 0;

     label06:
        specialinvoke this.<com.android.server.ConnectivityService: void notifyIfacesChanged()>();

        virtualinvoke this.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(nai, 524292);

        $r11 = nai.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.NetworkMonitor networkMonitor>;

        virtualinvoke $r11.<com.android.server.connectivity.NetworkMonitor: void sendMessage(int)>(532487);

        $r12 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r13 = msg.<android.os.Message: android.os.Messenger replyTo>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r13);

        $r14 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke this.<com.android.server.ConnectivityService: void updateClat(android.net.LinkProperties,android.net.LinkProperties,com.android.server.connectivity.NetworkAgentInfo)>(null, $r14, nai);

        $r17 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r17.<com.android.server.ConnectivityService$LegacyTypeTracker: void remove(com.android.server.connectivity.NetworkAgentInfo)>(nai);

        $r16 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        e#2 = $r16;

        entermonitor $r16;

     label07:
        $r18 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r19 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i1 = $r19.<android.net.Network: int netId>;

        virtualinvoke $r18.<android.util.SparseArray: void remove(int)>($i1);

        exitmonitor e#2;

     label08:
        goto label11;

     label09:
        $r56 := @caughtexception;

        i#3 = $r56;

        exitmonitor e#2;

     label10:
        throw i#3;

     label11:
        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        e#4 = $r21;

        i#5 = 0;

     label12:
        $r22 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $i2 = virtualinvoke $r22.<android.util.SparseArray: int size()>();

        if i#5 >= $i2 goto label18;

        $r29 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r28 = virtualinvoke $r29.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#5);

        request#6 = (android.net.NetworkRequest) $r28;

        $r34 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $i4 = request#6.<android.net.NetworkRequest: int requestId>;

        $r33 = virtualinvoke $r34.<android.util.SparseArray: java.lang.Object get(int)>($i4);

        currentNetwork = (com.android.server.connectivity.NetworkAgentInfo) $r33;

        if currentNetwork == null goto label17;

        $r32 = currentNetwork.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i5 = $r32.<android.net.Network: int netId>;

        $r31 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i6 = $r31.<android.net.Network: int netId>;

        if $i5 != $i6 goto label17;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking for replacement network to handle request ");

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(request#6);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r38);

        $r37 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $i7 = request#6.<android.net.NetworkRequest: int requestId>;

        virtualinvoke $r37.<android.util.SparseArray: void remove(int)>($i7);

        specialinvoke this.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(android.net.NetworkRequest,int)>(request#6, 0);

        alternative#7 = null;

        $r44 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r45 = virtualinvoke $r44.<java.util.HashMap: java.util.Collection values()>();

        i$ = interfaceinvoke $r45.<java.util.Collection: java.util.Iterator iterator()>();

     label13:
        $z4 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label16;

        $r48 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        existing = (com.android.server.connectivity.NetworkAgentInfo) $r48;

        $z5 = virtualinvoke existing.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfies(android.net.NetworkRequest)>(request#6);

        if $z5 == 0 goto label15;

        if alternative#7 == null goto label14;

        $i8 = virtualinvoke alternative#7.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        $i9 = virtualinvoke existing.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        if $i8 >= $i9 goto label15;

     label14:
        alternative#7 = existing;

     label15:
        goto label13;

     label16:
        if alternative#7 == null goto label17;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found replacement in ");

        $r42 = virtualinvoke alternative#7.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r47 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r47);

        $z6 = virtualinvoke e#4.<java.util.ArrayList: boolean contains(java.lang.Object)>(alternative#7);

        if $z6 != 0 goto label17;

        virtualinvoke e#4.<java.util.ArrayList: boolean add(java.lang.Object)>(alternative#7);

     label17:
        i#5 = i#5 + 1;

        goto label12;

     label18:
        $r24 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r20 = this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $i3 = $r20.<android.net.NetworkRequest: int requestId>;

        $r23 = virtualinvoke $r24.<android.util.SparseArray: java.lang.Object get(int)>($i3);

        if $r23 == null goto label19;

        specialinvoke this.<com.android.server.ConnectivityService: void removeDataActivityTracking(com.android.server.connectivity.NetworkAgentInfo)>(nai);

        specialinvoke this.<com.android.server.ConnectivityService: void notifyLockdownVpn(com.android.server.connectivity.NetworkAgentInfo)>(nai);

        $r30 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        specialinvoke this.<com.android.server.ConnectivityService: void requestNetworkTransitionWakelock(java.lang.String)>($r30);

     label19:
        i#8 = virtualinvoke e#4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label20:
        $z3 = interfaceinvoke i#8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label21;

        $r27 = interfaceinvoke i#8.<java.util.Iterator: java.lang.Object next()>();

        request#9 = (com.android.server.connectivity.NetworkAgentInfo) $r27;

        specialinvoke this.<com.android.server.ConnectivityService: void unlinger(com.android.server.connectivity.NetworkAgentInfo)>(request#9);

        $r26 = <com.android.server.ConnectivityService$NascentState: com.android.server.ConnectivityService$NascentState NOT_JUST_VALIDATED>;

        $r25 = <com.android.server.ConnectivityService$ReapUnvalidatedNetworks: com.android.server.ConnectivityService$ReapUnvalidatedNetworks DONT_REAP>;

        specialinvoke this.<com.android.server.ConnectivityService: void rematchNetworkAndRequests(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$NascentState,com.android.server.ConnectivityService$ReapUnvalidatedNetworks)>(request#9, $r26, $r25);

        goto label20;

     label21:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private com.android.server.ConnectivityService$NetworkRequestInfo findExistingNetworkRequestInfo(android.app.PendingIntent)
    {
        com.android.server.ConnectivityService this;
        android.app.PendingIntent pendingIntent, existingPendingIntent;
        android.content.Intent intent, $r5;
        java.util.Iterator i$;
        java.util.Map$Entry entry;
        java.util.HashMap $r0;
        java.util.Set $r1;
        boolean $z0, $z1;
        java.lang.Object $r2, $r3, $r7;
        com.android.server.ConnectivityService$NetworkRequestInfo $r4, $r6;

        this := @this: com.android.server.ConnectivityService;

        pendingIntent := @parameter0: android.app.PendingIntent;

        intent = virtualinvoke pendingIntent.<android.app.PendingIntent: android.content.Intent getIntent()>();

        $r0 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.util.Set entrySet()>();

        i$ = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r2;

        $r3 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r4 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r3;

        existingPendingIntent = $r4.<com.android.server.ConnectivityService$NetworkRequestInfo: android.app.PendingIntent mPendingIntent>;

        if existingPendingIntent == null goto label2;

        $r5 = virtualinvoke existingPendingIntent.<android.app.PendingIntent: android.content.Intent getIntent()>();

        $z1 = virtualinvoke $r5.<android.content.Intent: boolean filterEquals(android.content.Intent)>(intent);

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r7;

        return $r6;

     label2:
        goto label1;

     label3:
        return null;
    }

    private void handleRegisterNetworkRequestWithIntent(android.os.Message)
    {
        com.android.server.ConnectivityService this;
        android.os.Message msg;
        com.android.server.ConnectivityService$NetworkRequestInfo nri, existingRequest, $r1;
        java.lang.Object $r0;
        android.app.PendingIntent $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r10;
        android.net.NetworkRequest $r5, $r8, $r11;
        java.lang.String $r12;
        int $i0;

        this := @this: com.android.server.ConnectivityService;

        msg := @parameter0: android.os.Message;

        $r0 = msg.<android.os.Message: java.lang.Object obj>;

        $r1 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r0;

        nri = (com.android.server.ConnectivityService$NetworkRequestInfo) $r1;

        $r2 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.app.PendingIntent mPendingIntent>;

        existingRequest = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkRequestInfo findExistingNetworkRequestInfo(android.app.PendingIntent)>($r2);

        if existingRequest == null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Replacing ");

        $r5 = existingRequest.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ");

        $r8 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because their intents matched.");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r12);

        $r11 = existingRequest.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int getCallingUid()>();

        specialinvoke this.<com.android.server.ConnectivityService: void handleReleaseNetworkRequest(android.net.NetworkRequest,int)>($r11, $i0);

     label1:
        specialinvoke this.<com.android.server.ConnectivityService: void handleRegisterNetworkRequest(android.os.Message)>(msg);

        return;
    }

    private void handleRegisterNetworkRequest(android.os.Message)
    {
        com.android.server.ConnectivityService this;
        android.os.Message msg;
        com.android.server.ConnectivityService$NetworkRequestInfo nri, $r1;
        com.android.server.ConnectivityService$NetworkFactoryInfo nfi;
        java.lang.Object $r0, $r10, $r22;
        android.net.NetworkRequest $r2, $r9, $r17, $r18, $r19, $r23, $r30, $r34;
        java.util.HashMap $r3, $r5, $r8;
        java.util.Collection $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r11, $r14, $r16, $r25, $r26, $r27, $r28, $r32, $r33;
        com.android.internal.util.AsyncChannel $r12;
        java.lang.String $r13, $r15, $r24, $r29, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i$#5;
        android.util.SparseArray $r20;
        com.android.server.ConnectivityService$LegacyTypeTracker $r21;
        com.android.server.connectivity.NetworkAgentInfo bestNetwork#1, network#3;
        java.util.Iterator i$#2, network#6;

        this := @this: com.android.server.ConnectivityService;

        msg := @parameter0: android.os.Message;

        $r0 = msg.<android.os.Message: java.lang.Object obj>;

        $r1 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r0;

        nri = (com.android.server.ConnectivityService$NetworkRequestInfo) $r1;

        $r3 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r2 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, nri);

        bestNetwork#1 = null;

        $r5 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        i$#2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke i$#2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r22 = interfaceinvoke i$#2.<java.util.Iterator: java.lang.Object next()>();

        network#3 = (com.android.server.connectivity.NetworkAgentInfo) $r22;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleRegisterNetworkRequest checking ");

        $r24 = virtualinvoke network#3.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r29);

        $r30 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z3 = virtualinvoke network#3.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfies(android.net.NetworkRequest)>($r30);

        if $z3 == 0 goto label04;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("apparently satisfied.  currentScore=");

        $i3 = virtualinvoke network#3.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r31);

        $z4 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: boolean isRequest>;

        if $z4 != 0 goto label02;

        $r34 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke network#3.<com.android.server.connectivity.NetworkAgentInfo: void addRequest(android.net.NetworkRequest)>($r34);

        virtualinvoke this.<com.android.server.ConnectivityService: void notifyNetworkCallback(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$NetworkRequestInfo)>(network#3, nri);

        goto label04;

     label02:
        if bestNetwork#1 == null goto label03;

        $i5 = virtualinvoke bestNetwork#1.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        $i4 = virtualinvoke network#3.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        if $i5 >= $i4 goto label04;

     label03:
        bestNetwork#1 = network#3;

     label04:
        goto label01;

     label05:
        if bestNetwork#1 == null goto label06;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("using ");

        $r13 = virtualinvoke bestNetwork#1.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r15);

        specialinvoke this.<com.android.server.ConnectivityService: void unlinger(com.android.server.connectivity.NetworkAgentInfo)>(bestNetwork#1);

        $r18 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke bestNetwork#1.<com.android.server.connectivity.NetworkAgentInfo: void addRequest(android.net.NetworkRequest)>($r18);

        $r20 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r17 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i1 = $r17.<android.net.NetworkRequest: int requestId>;

        virtualinvoke $r20.<android.util.SparseArray: void put(int,java.lang.Object)>($i1, bestNetwork#1);

        virtualinvoke this.<com.android.server.ConnectivityService: void notifyNetworkCallback(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$NetworkRequestInfo)>(bestNetwork#1, nri);

        $r19 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i0 = $r19.<android.net.NetworkRequest: int legacyType>;

        if $i0 == -1 goto label06;

        $r21 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $r23 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i2 = $r23.<android.net.NetworkRequest: int legacyType>;

        virtualinvoke $r21.<com.android.server.ConnectivityService$LegacyTypeTracker: void add(int,com.android.server.connectivity.NetworkAgentInfo)>($i2, bestNetwork#1);

     label06:
        $z1 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: boolean isRequest>;

        if $z1 == 0 goto label10;

        if bestNetwork#1 != null goto label07;

        $i6 = 0;

        goto label08;

     label07:
        $i6 = virtualinvoke bestNetwork#1.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

     label08:
        i$#5 = $i6;

        $r8 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkFactoryInfos>;

        $r7 = virtualinvoke $r8.<java.util.HashMap: java.util.Collection values()>();

        network#6 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke network#6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r10 = interfaceinvoke network#6.<java.util.Iterator: java.lang.Object next()>();

        nfi = (com.android.server.ConnectivityService$NetworkFactoryInfo) $r10;

        $r12 = nfi.<com.android.server.ConnectivityService$NetworkFactoryInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        $r9 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r12.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(536576, i$#5, 0, $r9);

        goto label09;

     label10:
        return;
    }

    private void handleReleaseNetworkRequestWithIntent(android.app.PendingIntent, int)
    {
        com.android.server.ConnectivityService this;
        android.app.PendingIntent pendingIntent;
        int callingUid;
        com.android.server.ConnectivityService$NetworkRequestInfo nri;
        android.net.NetworkRequest $r0;

        this := @this: com.android.server.ConnectivityService;

        pendingIntent := @parameter0: android.app.PendingIntent;

        callingUid := @parameter1: int;

        nri = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkRequestInfo findExistingNetworkRequestInfo(android.app.PendingIntent)>(pendingIntent);

        if nri == null goto label1;

        $r0 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        specialinvoke this.<com.android.server.ConnectivityService: void handleReleaseNetworkRequest(android.net.NetworkRequest,int)>($r0, callingUid);

     label1:
        return;
    }

    private boolean unneeded(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai, $r9;
        java.lang.Exception e, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, unneeded#1;
        java.util.HashMap $r0;
        java.util.Collection $r1;
        java.lang.Object $r2, $r7, $r10, $r12;
        android.net.NetworkRequest $r3, $r4, $r6, nr#3;
        android.util.SparseArray $r5, $r8, $r11, $r13;
        int $i0, $i1, $i2, $i3, $i4, i#2;
        java.lang.StringBuilder $r14, $r15, $r18, $r19, $r20, $r21, $r23;
        java.lang.String $r17, $r22, $r24;
        java.util.Iterator i#4;
        com.android.server.ConnectivityService$NetworkRequestInfo nr#5;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $z0 = nai.<com.android.server.connectivity.NetworkAgentInfo: boolean created>;

        if $z0 == 0 goto label01;

        $z1 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z1 == 0 goto label02;

     label01:
        return 0;

     label02:
        unneeded#1 = 1;

        $z2 = nai.<com.android.server.connectivity.NetworkAgentInfo: boolean everValidated>;

        if $z2 == 0 goto label09;

        i#2 = 0;

     label03:
        $r11 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $i4 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

        if i#2 >= $i4 goto label08;

        if unneeded#1 == 0 goto label08;

        $r13 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r12 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#2);

        nr#3 = (android.net.NetworkRequest) $r12;

     label04:
        $z6 = specialinvoke this.<com.android.server.ConnectivityService: boolean isRequest(android.net.NetworkRequest)>(nr#3);

        if $z6 == 0 goto label05;

        unneeded#1 = 0;

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request ");

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(nr#3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in mNetworkRequests.");

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r17);

        $r18 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  it came from request list  of ");

        $r24 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r22);

     label07:
        i#2 = i#2 + 1;

        goto label03;

     label08:
        goto label13;

     label09:
        $r0 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.util.Collection values()>();

        i#4 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke i#4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r2 = interfaceinvoke i#4.<java.util.Iterator: java.lang.Object next()>();

        nr#5 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r2;

        $z4 = nr#5.<com.android.server.ConnectivityService$NetworkRequestInfo: boolean isRequest>;

        if $z4 == 0 goto label12;

        $r3 = nr#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z5 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfies(android.net.NetworkRequest)>($r3);

        if $z5 == 0 goto label12;

        $r5 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r4 = nr#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i0 = $r4.<android.net.NetworkRequest: int requestId>;

        $r7 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        if $r7 != null goto label11;

        $r8 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r6 = nr#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i1 = $r6.<android.net.NetworkRequest: int requestId>;

        $r10 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        $r9 = (com.android.server.connectivity.NetworkAgentInfo) $r10;

        $i3 = virtualinvoke $r9.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        $i2 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScoreAsValidated()>();

        if $i3 >= $i2 goto label12;

     label11:
        unneeded#1 = 0;

        goto label13;

     label12:
        goto label10;

     label13:
        return unneeded#1;

        catch java.lang.Exception from label04 to label05 with label06;
    }

    private void handleReleaseNetworkRequest(android.net.NetworkRequest, int)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkRequest request, otherRequest, $r10, $r15, $r16, $r22, $r24, $r27, $r30, $r31, $r34;
        int callingUid, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i#6;
        com.android.server.ConnectivityService$NetworkRequestInfo nri;
        java.util.HashMap $r0, $r6, $r9, $r14, $r19;
        java.lang.Object $r1, $r11, $r18, $r23, $r28, $r32, $r35;
        java.lang.StringBuilder $r2, $r3, $r4, $r37, $r38, $r41, $r42, $r44, $r45, $r47, $r48, $r49, $r51, $r52, $r55, $r56;
        java.lang.String $r5, $r43, $r46, $r50, $r53, $r54;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, wasKept#1, nai#5;
        java.util.Collection $r8, $r13, $r20;
        android.util.SparseArray $r12, $r17, $r25, $r29, $r33, $r36, $r39, $r40;
        com.android.internal.util.AsyncChannel $r21;
        com.android.server.ConnectivityService$LegacyTypeTracker $r26;
        java.util.Iterator i$#2, nai#7, wasKept#9;
        com.android.server.connectivity.NetworkAgentInfo nai#3, i$#4, i$#10;
        com.android.server.ConnectivityService$NetworkFactoryInfo i#8;

        this := @this: com.android.server.ConnectivityService;

        request := @parameter0: android.net.NetworkRequest;

        callingUid := @parameter1: int;

        $r0 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(request);

        nri = (com.android.server.ConnectivityService$NetworkRequestInfo) $r1;

        if nri == null goto label16;

        if 1000 == callingUid goto label01;

        $i11 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        if $i11 == callingUid goto label01;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to release unowned NetworkRequest ");

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(request);

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r53);

        return;

     label01:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("releasing NetworkRequest ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(request);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r5);

        virtualinvoke nri.<com.android.server.ConnectivityService$NetworkRequestInfo: void unlinkDeathRecipient()>();

        $r6 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(request);

        $z0 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: boolean isRequest>;

        if $z0 == 0 goto label13;

        wasKept#1 = 0;

        $r14 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r13 = virtualinvoke $r14.<java.util.HashMap: java.util.Collection values()>();

        i$#2 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke i$#2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r32 = interfaceinvoke i$#2.<java.util.Iterator: java.lang.Object next()>();

        nai#3 = (com.android.server.connectivity.NetworkAgentInfo) $r32;

        $r36 = nai#3.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r31 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i8 = $r31.<android.net.NetworkRequest: int requestId>;

        $r35 = virtualinvoke $r36.<android.util.SparseArray: java.lang.Object get(int)>($i8);

        if $r35 == null goto label04;

        $r40 = nai#3.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r34 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i9 = $r34.<android.net.NetworkRequest: int requestId>;

        virtualinvoke $r40.<android.util.SparseArray: void remove(int)>($i9);

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Removing from current network ");

        $r43 = virtualinvoke nai#3.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r37 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", leaving ");

        $r39 = nai#3.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $i10 = virtualinvoke $r39.<android.util.SparseArray: int size()>();

        $r48 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requests.");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r50);

        $z5 = specialinvoke this.<com.android.server.ConnectivityService: boolean unneeded(com.android.server.connectivity.NetworkAgentInfo)>(nai#3);

        if $z5 == 0 goto label03;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no live requests for ");

        $r46 = virtualinvoke nai#3.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r55 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; disconnecting");

        $r54 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r54);

        specialinvoke this.<com.android.server.ConnectivityService: void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)>(nai#3);

        goto label04;

     label03:
        wasKept#1 = wasKept#1 | 1;

     label04:
        goto label02;

     label05:
        $r17 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r15 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i1 = $r15.<android.net.NetworkRequest: int requestId>;

        $r18 = virtualinvoke $r17.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        i$#4 = (com.android.server.connectivity.NetworkAgentInfo) $r18;

        if i$#4 == null goto label06;

        $r33 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r30 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i6 = $r30.<android.net.NetworkRequest: int requestId>;

        virtualinvoke $r33.<android.util.SparseArray: void remove(int)>($i6);

     label06:
        $r16 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i2 = $r16.<android.net.NetworkRequest: int legacyType>;

        if $i2 == -1 goto label10;

        if i$#4 == null goto label10;

        nai#5 = 1;

        if wasKept#1 == 0 goto label09;

        i#6 = 0;

     label07:
        $r25 = i$#4.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $i3 = virtualinvoke $r25.<android.util.SparseArray: int size()>();

        if i#6 >= $i3 goto label09;

        $r29 = i$#4.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r28 = virtualinvoke $r29.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#6);

        otherRequest = (android.net.NetworkRequest) $r28;

        $i7 = otherRequest.<android.net.NetworkRequest: int legacyType>;

        $r27 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i5 = $r27.<android.net.NetworkRequest: int legacyType>;

        if $i7 != $i5 goto label08;

        $z4 = specialinvoke this.<com.android.server.ConnectivityService: boolean isRequest(android.net.NetworkRequest)>(otherRequest);

        if $z4 == 0 goto label08;

        nai#5 = 0;

     label08:
        i#6 = i#6 + 1;

        goto label07;

     label09:
        if nai#5 == 0 goto label10;

        $r26 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $r22 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i4 = $r22.<android.net.NetworkRequest: int legacyType>;

        virtualinvoke $r26.<com.android.server.ConnectivityService$LegacyTypeTracker: void remove(int,com.android.server.connectivity.NetworkAgentInfo)>($i4, i$#4);

     label10:
        $r19 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkFactoryInfos>;

        $r20 = virtualinvoke $r19.<java.util.HashMap: java.util.Collection values()>();

        nai#7 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke nai#7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r23 = interfaceinvoke nai#7.<java.util.Iterator: java.lang.Object next()>();

        i#8 = (com.android.server.ConnectivityService$NetworkFactoryInfo) $r23;

        $r21 = i#8.<com.android.server.ConnectivityService$NetworkFactoryInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        $r24 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r21.<com.android.internal.util.AsyncChannel: void sendMessage(int,java.lang.Object)>(536577, $r24);

        goto label11;

     label12:
        goto label15;

     label13:
        $r9 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r8 = virtualinvoke $r9.<java.util.HashMap: java.util.Collection values()>();

        wasKept#9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label14:
        $z1 = interfaceinvoke wasKept#9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r11 = interfaceinvoke wasKept#9.<java.util.Iterator: java.lang.Object next()>();

        i$#10 = (com.android.server.connectivity.NetworkAgentInfo) $r11;

        $r12 = i$#10.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r10 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i0 = $r10.<android.net.NetworkRequest: int requestId>;

        virtualinvoke $r12.<android.util.SparseArray: void remove(int)>($i0);

        goto label14;

     label15:
        specialinvoke this.<com.android.server.ConnectivityService: void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int)>(nri, null, 524296);

     label16:
        return;
    }

    public int tether(java.lang.String)
    {
        com.android.server.ConnectivityService this;
        java.lang.String iface;
        android.content.Context $r0;
        boolean $z0;
        com.android.server.connectivity.Tethering $r1;
        int $i0;

        this := @this: com.android.server.ConnectivityService;

        iface := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        staticinvoke <android.net.ConnectivityManager: void enforceTetherChangePermission(android.content.Context)>($r0);

        $z0 = virtualinvoke this.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $i0 = virtualinvoke $r1.<com.android.server.connectivity.Tethering: int tether(java.lang.String)>(iface);

        return $i0;

     label1:
        return 3;
    }

    public int untether(java.lang.String)
    {
        com.android.server.ConnectivityService this;
        java.lang.String iface;
        android.content.Context $r0;
        boolean $z0;
        com.android.server.connectivity.Tethering $r1;
        int $i0;

        this := @this: com.android.server.ConnectivityService;

        iface := @parameter0: java.lang.String;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        staticinvoke <android.net.ConnectivityManager: void enforceTetherChangePermission(android.content.Context)>($r0);

        $z0 = virtualinvoke this.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $i0 = virtualinvoke $r1.<com.android.server.connectivity.Tethering: int untether(java.lang.String)>(iface);

        return $i0;

     label1:
        return 3;
    }

    public int getLastTetherError(java.lang.String)
    {
        com.android.server.ConnectivityService this;
        java.lang.String iface;
        boolean $z0;
        com.android.server.connectivity.Tethering $r0;
        int $i0;

        this := @this: com.android.server.ConnectivityService;

        iface := @parameter0: java.lang.String;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $z0 = virtualinvoke this.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $i0 = virtualinvoke $r0.<com.android.server.connectivity.Tethering: int getLastTetherError(java.lang.String)>(iface);

        return $i0;

     label1:
        return 3;
    }

    public java.lang.String[] getTetherableUsbRegexs()
    {
        com.android.server.ConnectivityService this;
        boolean $z0;
        java.lang.String[] $r0, $r2;
        com.android.server.connectivity.Tethering $r1;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $z0 = virtualinvoke this.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r2 = virtualinvoke $r1.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableUsbRegexs()>();

        return $r2;

     label1:
        $r0 = newarray (java.lang.String)[0];

        return $r0;
    }

    public java.lang.String[] getTetherableWifiRegexs()
    {
        com.android.server.ConnectivityService this;
        boolean $z0;
        java.lang.String[] $r0, $r2;
        com.android.server.connectivity.Tethering $r1;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $z0 = virtualinvoke this.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r2 = virtualinvoke $r1.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableWifiRegexs()>();

        return $r2;

     label1:
        $r0 = newarray (java.lang.String)[0];

        return $r0;
    }

    public java.lang.String[] getTetherableBluetoothRegexs()
    {
        com.android.server.ConnectivityService this;
        boolean $z0;
        java.lang.String[] $r0, $r2;
        com.android.server.connectivity.Tethering $r1;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $z0 = virtualinvoke this.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r2 = virtualinvoke $r1.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableBluetoothRegexs()>();

        return $r2;

     label1:
        $r0 = newarray (java.lang.String)[0];

        return $r0;
    }

    public int setUsbTethering(boolean)
    {
        com.android.server.ConnectivityService this;
        boolean enable, $z0;
        android.content.Context $r0;
        com.android.server.connectivity.Tethering $r1;
        int $i0;

        this := @this: com.android.server.ConnectivityService;

        enable := @parameter0: boolean;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        staticinvoke <android.net.ConnectivityManager: void enforceTetherChangePermission(android.content.Context)>($r0);

        $z0 = virtualinvoke this.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $i0 = virtualinvoke $r1.<com.android.server.connectivity.Tethering: int setUsbTethering(boolean)>(enable);

        return $i0;

     label1:
        return 3;
    }

    public java.lang.String[] getTetherableIfaces()
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.Tethering $r0;
        java.lang.String[] $r1;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r1 = virtualinvoke $r0.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableIfaces()>();

        return $r1;
    }

    public java.lang.String[] getTetheredIfaces()
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.Tethering $r0;
        java.lang.String[] $r1;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r1 = virtualinvoke $r0.<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfaces()>();

        return $r1;
    }

    public java.lang.String[] getTetheringErroredIfaces()
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.Tethering $r0;
        java.lang.String[] $r1;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r1 = virtualinvoke $r0.<com.android.server.connectivity.Tethering: java.lang.String[] getErroredIfaces()>();

        return $r1;
    }

    public java.lang.String[] getTetheredDhcpRanges()
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.Tethering $r0;
        java.lang.String[] $r1;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r1 = virtualinvoke $r0.<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredDhcpRanges()>();

        return $r1;
    }

    public boolean isTetheringSupported()
    {
        com.android.server.ConnectivityService this;
        byte defaultVal, $b5;
        boolean tetherEnabledInSettings, $z0, $z1, $z2, $z3;
        java.lang.String $r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.server.connectivity.Tethering $r3, $r5, $r7, $r10;
        java.lang.String[] $r4, $r8, $r9;
        int[] $r6;
        android.os.UserManager $r11;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.tether.denied");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label1;

        $b5 = 0;

        goto label2;

     label1:
        $b5 = 1;

     label2:
        defaultVal = $b5;

        $r1 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "tether_supported", defaultVal);

        if $i0 == 0 goto label3;

        $r11 = this.<com.android.server.ConnectivityService: android.os.UserManager mUserManager>;

        $z1 = virtualinvoke $r11.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("no_config_tethering");

        if $z1 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        tetherEnabledInSettings = $z2;

        if tetherEnabledInSettings == 0 goto label6;

        $r3 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r4 = virtualinvoke $r3.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableUsbRegexs()>();

        $i1 = lengthof $r4;

        if $i1 != 0 goto label5;

        $r7 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r8 = virtualinvoke $r7.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableWifiRegexs()>();

        $i3 = lengthof $r8;

        if $i3 != 0 goto label5;

        $r10 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r9 = virtualinvoke $r10.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableBluetoothRegexs()>();

        $i4 = lengthof $r9;

        if $i4 == 0 goto label6;

     label5:
        $r5 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r6 = virtualinvoke $r5.<com.android.server.connectivity.Tethering: int[] getUpstreamIfaceTypes()>();

        $i2 = lengthof $r6;

        if $i2 == 0 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        return $z3;
    }

    private void requestNetworkTransitionWakelock(java.lang.String)
    {
        com.android.server.ConnectivityService this, l3;
        java.lang.String forWhom;
        java.lang.Throwable l4, $r6;
        android.os.PowerManager$WakeLock $r1, $r2;
        boolean $z0, serialNum#1;
        int $i0, $i1, $i2, serialNum#2;
        com.android.server.ConnectivityService$InternalHandler $r3, $r4;
        android.os.Message $r5;
        long $l3;

        this := @this: com.android.server.ConnectivityService;

        forWhom := @parameter0: java.lang.String;

        serialNum#1 = 0;

        l3 = this;

        entermonitor this;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label3;

        exitmonitor l3;

     label2:
        return;

     label3:
        $i0 = this.<com.android.server.ConnectivityService: int mNetTransitionWakeLockSerialNumber>;

        $i1 = $i0 + 1;

        this.<com.android.server.ConnectivityService: int mNetTransitionWakeLockSerialNumber> = $i1;

        serialNum#2 = $i1;

        $r2 = this.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void acquire()>();

        this.<com.android.server.ConnectivityService: java.lang.String mNetTransitionWakeLockCausedBy> = forWhom;

        exitmonitor l3;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        l4 = $r6;

        exitmonitor l3;

     label6:
        throw l4;

     label7:
        $r4 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r3 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r5 = virtualinvoke $r3.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(24, serialNum#2, 0);

        $i2 = this.<com.android.server.ConnectivityService: int mNetTransitionWakeLockTimeout>;

        $l3 = (long) $i2;

        virtualinvoke $r4.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r5, $l3);

        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void reportInetCondition(int, int)
    {
        com.android.server.ConnectivityService this;
        int networkType, percentage;
        com.android.server.connectivity.NetworkAgentInfo nai;
        boolean isGood, $z0, $z1;
        com.android.server.ConnectivityService$LegacyTypeTracker $r0;
        android.net.Network $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        this := @this: com.android.server.ConnectivityService;

        networkType := @parameter0: int;

        percentage := @parameter1: int;

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        nai = virtualinvoke $r0.<com.android.server.ConnectivityService$LegacyTypeTracker: com.android.server.connectivity.NetworkAgentInfo getNetworkForType(int)>(networkType);

        if nai != null goto label1;

        return;

     label1:
        if percentage <= 50 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        isGood = $z1;

        $z0 = nai.<com.android.server.connectivity.NetworkAgentInfo: boolean lastValidated>;

        if isGood == $z0 goto label5;

        if isGood == 0 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reportInetCondition: type=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(networkType);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ok, revalidate");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r6);

     label4:
        $r1 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        virtualinvoke this.<com.android.server.ConnectivityService: void reportBadNetwork(android.net.Network)>($r1);

     label5:
        return;
    }

    public void reportBadNetwork(android.net.Network)
    {
        com.android.server.ConnectivityService this;
        android.net.Network network;
        int uid;
        com.android.server.connectivity.NetworkAgentInfo nai, l4;
        java.lang.Throwable l5, $r10;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5;
        java.lang.String $r2, $r6;
        android.net.LinkProperties $r8;
        boolean $z0, $z1;
        com.android.server.connectivity.NetworkMonitor $r9;

        this := @this: com.android.server.ConnectivityService;

        network := @parameter0: android.net.Network;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        specialinvoke this.<com.android.server.ConnectivityService: void enforceInternetPermission()>();

        if network != null goto label01;

        return;

     label01:
        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        nai = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(network);

        if nai != null goto label02;

        return;

     label02:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reportBadNetwork(");

        $r2 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") by ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(uid);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r6);

        l4 = nai;

        entermonitor nai;

     label03:
        $z0 = nai.<com.android.server.connectivity.NetworkAgentInfo: boolean created>;

        if $z0 != 0 goto label05;

        exitmonitor l4;

     label04:
        return;

     label05:
        $r8 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $z1 = specialinvoke this.<com.android.server.ConnectivityService: boolean isNetworkWithLinkPropertiesBlocked(android.net.LinkProperties,int)>($r8, uid);

        if $z1 == 0 goto label07;

        exitmonitor l4;

     label06:
        return;

     label07:
        $r9 = nai.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.NetworkMonitor networkMonitor>;

        virtualinvoke $r9.<com.android.server.connectivity.NetworkMonitor: void sendMessage(int,int)>(532488, uid);

        exitmonitor l4;

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

        l5 = $r10;

        exitmonitor l4;

     label10:
        throw l5;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public android.net.ProxyInfo getDefaultProxy()
    {
        com.android.server.ConnectivityService this;
        java.lang.Object l1, $r0;
        java.lang.Throwable l3, $r1;
        boolean $z0;
        android.net.ProxyInfo ret#1;

        this := @this: com.android.server.ConnectivityService;

        $r0 = this.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        l1 = $r0;

        entermonitor $r0;

     label1:
        ret#1 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        if ret#1 != null goto label2;

        $z0 = this.<com.android.server.ConnectivityService: boolean mDefaultProxyDisabled>;

        if $z0 != 0 goto label2;

        ret#1 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mDefaultProxy>;

     label2:
        exitmonitor l1;

     label3:
        return ret#1;

     label4:
        $r1 := @caughtexception;

        l3 = $r1;

        exitmonitor l1;

     label5:
        throw l3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private android.net.ProxyInfo canonicalizeProxyInfo(android.net.ProxyInfo)
    {
        com.android.server.ConnectivityService this;
        java.lang.String $r0;
        boolean $z0, $z1;
        android.net.Uri $r1, $r2, $r3;
        android.net.ProxyInfo proxy#1;

        this := @this: com.android.server.ConnectivityService;

        proxy#1 := @parameter0: android.net.ProxyInfo;

        if proxy#1 == null goto label2;

        $r0 = virtualinvoke proxy#1.<android.net.ProxyInfo: java.lang.String getHost()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke proxy#1.<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>();

        if $r1 == null goto label1;

        $r2 = <android.net.Uri: android.net.Uri EMPTY>;

        $r3 = virtualinvoke proxy#1.<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>();

        $z1 = virtualinvoke $r2.<android.net.Uri: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

     label1:
        proxy#1 = null;

     label2:
        return proxy#1;
    }

    private boolean proxyInfoEqual(android.net.ProxyInfo, android.net.ProxyInfo)
    {
        com.android.server.ConnectivityService this;
        boolean $z0, $z1, $z2;
        java.lang.String $r0, $r1;
        android.net.ProxyInfo a#1, b#2, a#3, b#4;

        this := @this: com.android.server.ConnectivityService;

        a#1 := @parameter0: android.net.ProxyInfo;

        b#2 := @parameter1: android.net.ProxyInfo;

        a#3 = specialinvoke this.<com.android.server.ConnectivityService: android.net.ProxyInfo canonicalizeProxyInfo(android.net.ProxyInfo)>(a#1);

        b#4 = specialinvoke this.<com.android.server.ConnectivityService: android.net.ProxyInfo canonicalizeProxyInfo(android.net.ProxyInfo)>(b#2);

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(a#3, b#4);

        if $z0 == 0 goto label2;

        if a#3 == null goto label1;

        $r0 = virtualinvoke a#3.<android.net.ProxyInfo: java.lang.String getHost()>();

        $r1 = virtualinvoke b#4.<android.net.ProxyInfo: java.lang.String getHost()>();

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r0, $r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void setGlobalProxy(android.net.ProxyInfo)
    {
        com.android.server.ConnectivityService this;
        java.lang.Object l2, $r0;
        android.content.ContentResolver res;
        long token;
        java.lang.Throwable l10, l11, $r22, $r23;
        android.net.ProxyInfo $r1, $r2, $r4, $r6, $r7, $r8, $r11, $r20, $r21, proxyProperties#1;
        android.content.Context $r3;
        boolean $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.String $r5, $r15, $r17, host#2, exclList#4, pacFileUrl#5;
        android.net.Uri $r9, $r10, $r13, $r18, $r19;
        java.lang.StringBuilder $r12, $r14, $r16;
        int port#3;

        this := @this: com.android.server.ConnectivityService;

        proxyProperties#1 := @parameter0: android.net.ProxyInfo;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $r0 = this.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        l2 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        if proxyProperties#1 != $r1 goto label03;

        exitmonitor l2;

     label02:
        return;

     label03:
        if proxyProperties#1 == null goto label05;

        $r20 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        $z9 = virtualinvoke proxyProperties#1.<android.net.ProxyInfo: boolean equals(java.lang.Object)>($r20);

        if $z9 == 0 goto label05;

        exitmonitor l2;

     label04:
        return;

     label05:
        $r2 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        if $r2 == null goto label07;

        $r21 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        $z8 = virtualinvoke $r21.<android.net.ProxyInfo: boolean equals(java.lang.Object)>(proxyProperties#1);

        if $z8 == 0 goto label07;

        exitmonitor l2;

     label06:
        return;

     label07:
        host#2 = "";

        port#3 = 0;

        exclList#4 = "";

        pacFileUrl#5 = "";

        if proxyProperties#1 == null goto label11;

        $r5 = virtualinvoke proxyProperties#1.<android.net.ProxyInfo: java.lang.String getHost()>();

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5);

        if $z4 == 0 goto label08;

        $r19 = <android.net.Uri: android.net.Uri EMPTY>;

        $r18 = virtualinvoke proxyProperties#1.<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>();

        $z7 = virtualinvoke $r19.<android.net.Uri: boolean equals(java.lang.Object)>($r18);

        if $z7 != 0 goto label11;

     label08:
        $z5 = virtualinvoke proxyProperties#1.<android.net.ProxyInfo: boolean isValid()>();

        if $z5 != 0 goto label10;

        $r12 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid proxy properties, ignoring: ");

        $r17 = virtualinvoke proxyProperties#1.<android.net.ProxyInfo: java.lang.String toString()>();

        $r14 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r15);

        exitmonitor l2;

     label09:
        return;

     label10:
        $r6 = new android.net.ProxyInfo;

        specialinvoke $r6.<android.net.ProxyInfo: void <init>(android.net.ProxyInfo)>(proxyProperties#1);

        this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy> = $r6;

        $r7 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        host#2 = virtualinvoke $r7.<android.net.ProxyInfo: java.lang.String getHost()>();

        $r8 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        port#3 = virtualinvoke $r8.<android.net.ProxyInfo: int getPort()>();

        $r11 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        exclList#4 = virtualinvoke $r11.<android.net.ProxyInfo: java.lang.String getExclusionListAsString()>();

        $r9 = <android.net.Uri: android.net.Uri EMPTY>;

        $r10 = virtualinvoke proxyProperties#1.<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>();

        $z6 = virtualinvoke $r9.<android.net.Uri: boolean equals(java.lang.Object)>($r10);

        if $z6 != 0 goto label12;

        $r13 = virtualinvoke proxyProperties#1.<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>();

        pacFileUrl#5 = virtualinvoke $r13.<android.net.Uri: java.lang.String toString()>();

        goto label12;

     label11:
        this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy> = null;

     label12:
        $r3 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        res = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        token = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label13:
        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(res, "global_http_proxy_host", host#2);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(res, "global_http_proxy_port", port#3);

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(res, "global_http_proxy_exclusion_list", exclList#4);

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(res, "global_proxy_pac_url", pacFileUrl#5);

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        goto label17;

     label15:
        $r23 := @caughtexception;

        l10 = $r23;

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(token);

        throw l10;

     label17:
        $r4 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        if $r4 != null goto label18;

        proxyProperties#1 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mDefaultProxy>;

     label18:
        specialinvoke this.<com.android.server.ConnectivityService: void sendProxyBroadcast(android.net.ProxyInfo)>(proxyProperties#1);

        exitmonitor l2;

     label19:
        goto label22;

     label20:
        $r22 := @caughtexception;

        l11 = $r22;

        exitmonitor l2;

     label21:
        throw l11;

     label22:
        return;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label09 with label20;
        catch java.lang.Throwable from label10 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private void loadGlobalProxy()
    {
        com.android.server.ConnectivityService this;
        android.content.ContentResolver res;
        java.lang.String host, exclList, pacFileUrl, $r4, $r6;
        int port;
        java.lang.Object l7, $r2;
        java.lang.Throwable l8, $r9;
        android.content.Context $r0;
        boolean $z0, $z1, $z2, $z3;
        android.net.ProxyInfo $r1, $r8, proxyProperties#1;
        java.lang.StringBuilder $r3, $r5, $r7;

        this := @this: com.android.server.ConnectivityService;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        res = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        host = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(res, "global_http_proxy_host");

        port = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(res, "global_http_proxy_port", 0);

        exclList = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(res, "global_http_proxy_exclusion_list");

        pacFileUrl = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(res, "global_proxy_pac_url");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(host);

        if $z0 == 0 goto label1;

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(pacFileUrl);

        if $z3 != 0 goto label9;

     label1:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(pacFileUrl);

        if $z1 != 0 goto label2;

        $r8 = new android.net.ProxyInfo;

        specialinvoke $r8.<android.net.ProxyInfo: void <init>(java.lang.String)>(pacFileUrl);

        proxyProperties#1 = $r8;

        goto label3;

     label2:
        $r1 = new android.net.ProxyInfo;

        specialinvoke $r1.<android.net.ProxyInfo: void <init>(java.lang.String,int,java.lang.String)>(host, port, exclList);

        proxyProperties#1 = $r1;

     label3:
        $z2 = virtualinvoke proxyProperties#1.<android.net.ProxyInfo: boolean isValid()>();

        if $z2 != 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid proxy properties, ignoring: ");

        $r4 = virtualinvoke proxyProperties#1.<android.net.ProxyInfo: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r6);

        return;

     label4:
        $r2 = this.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        l7 = $r2;

        entermonitor $r2;

     label5:
        this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy> = proxyProperties#1;

        exitmonitor l7;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        l8 = $r9;

        exitmonitor l7;

     label8:
        throw l8;

     label9:
        return;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public android.net.ProxyInfo getGlobalProxy()
    {
        com.android.server.ConnectivityService this;
        java.lang.Object l1, $r0;
        java.lang.Throwable l2, $r2;
        android.net.ProxyInfo $r1;

        this := @this: com.android.server.ConnectivityService;

        $r0 = this.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        l1 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        exitmonitor l1;

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        l2 = $r2;

        exitmonitor l1;

     label4:
        throw l2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleApplyDefaultProxy(android.net.ProxyInfo)
    {
        com.android.server.ConnectivityService this;
        java.lang.Object l2, $r0;
        java.lang.Throwable l3, $r20;
        android.net.ProxyInfo $r1, $r2, $r3, $r4, $r9, $r10, $r16, proxy#1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.net.Uri $r5, $r6, $r7, $r8, $r17, $r18;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r14, $r15, $r19;

        this := @this: com.android.server.ConnectivityService;

        proxy#1 := @parameter0: android.net.ProxyInfo;

        if proxy#1 == null goto label01;

        $r19 = virtualinvoke proxy#1.<android.net.ProxyInfo: java.lang.String getHost()>();

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r19);

        if $z5 == 0 goto label01;

        $r17 = <android.net.Uri: android.net.Uri EMPTY>;

        $r18 = virtualinvoke proxy#1.<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>();

        $z6 = virtualinvoke $r17.<android.net.Uri: boolean equals(java.lang.Object)>($r18);

        if $z6 == 0 goto label01;

        proxy#1 = null;

     label01:
        $r0 = this.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        l2 = $r0;

        entermonitor $r0;

     label02:
        $r1 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mDefaultProxy>;

        if $r1 == null goto label04;

        $r16 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mDefaultProxy>;

        $z4 = virtualinvoke $r16.<android.net.ProxyInfo: boolean equals(java.lang.Object)>(proxy#1);

        if $z4 == 0 goto label04;

        exitmonitor l2;

     label03:
        return;

     label04:
        $r2 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mDefaultProxy>;

        if $r2 != proxy#1 goto label06;

        exitmonitor l2;

     label05:
        return;

     label06:
        if proxy#1 == null goto label08;

        $z3 = virtualinvoke proxy#1.<android.net.ProxyInfo: boolean isValid()>();

        if $z3 != 0 goto label08;

        $r12 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid proxy properties, ignoring: ");

        $r14 = virtualinvoke proxy#1.<android.net.ProxyInfo: java.lang.String toString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r15);

        exitmonitor l2;

     label07:
        return;

     label08:
        $r3 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        if $r3 == null goto label10;

        if proxy#1 == null goto label10;

        $r5 = <android.net.Uri: android.net.Uri EMPTY>;

        $r6 = virtualinvoke proxy#1.<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>();

        $z1 = virtualinvoke $r5.<android.net.Uri: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label10;

        $r7 = virtualinvoke proxy#1.<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>();

        $r9 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        $r8 = virtualinvoke $r9.<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>();

        $z2 = virtualinvoke $r7.<android.net.Uri: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label10;

        this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy> = proxy#1;

        $r10 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        specialinvoke this.<com.android.server.ConnectivityService: void sendProxyBroadcast(android.net.ProxyInfo)>($r10);

        exitmonitor l2;

     label09:
        return;

     label10:
        this.<com.android.server.ConnectivityService: android.net.ProxyInfo mDefaultProxy> = proxy#1;

        $r4 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        if $r4 == null goto label12;

        exitmonitor l2;

     label11:
        return;

     label12:
        $z0 = this.<com.android.server.ConnectivityService: boolean mDefaultProxyDisabled>;

        if $z0 != 0 goto label13;

        specialinvoke this.<com.android.server.ConnectivityService: void sendProxyBroadcast(android.net.ProxyInfo)>(proxy#1);

     label13:
        exitmonitor l2;

     label14:
        goto label17;

     label15:
        $r20 := @caughtexception;

        l3 = $r20;

        exitmonitor l2;

     label16:
        throw l3;

     label17:
        return;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private void updateProxy(android.net.LinkProperties, android.net.LinkProperties, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        android.net.LinkProperties newLp, oldLp;
        com.android.server.connectivity.NetworkAgentInfo nai;
        android.net.ProxyInfo newProxyInfo, oldProxyInfo, $r0, $r1, $r2;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        newLp := @parameter0: android.net.LinkProperties;

        oldLp := @parameter1: android.net.LinkProperties;

        nai := @parameter2: com.android.server.connectivity.NetworkAgentInfo;

        if newLp != null goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke newLp.<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()>();

     label2:
        newProxyInfo = $r1;

        $r2 = null;

        goto label3;

     label3:
        oldProxyInfo = $r2;

        $z0 = specialinvoke this.<com.android.server.ConnectivityService: boolean proxyInfoEqual(android.net.ProxyInfo,android.net.ProxyInfo)>(newProxyInfo, oldProxyInfo);

        if $z0 != 0 goto label4;

        $r0 = virtualinvoke this.<com.android.server.ConnectivityService: android.net.ProxyInfo getDefaultProxy()>();

        specialinvoke this.<com.android.server.ConnectivityService: void sendProxyBroadcast(android.net.ProxyInfo)>($r0);

     label4:
        return;
    }

    private void handleDeprecatedGlobalHttpProxy()
    {
        com.android.server.ConnectivityService this;
        java.lang.String proxy, proxyHost, $r3, $r4;
        java.lang.String[] data;
        android.content.Context $r0;
        android.content.ContentResolver $r1;
        boolean $z0;
        int $i0, $i1, proxyPort#1;
        android.net.ProxyInfo $r2, e#3;
        java.lang.NumberFormatException $r5, e#2;

        this := @this: com.android.server.ConnectivityService;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        proxy = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r1, "http_proxy");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(proxy);

        if $z0 != 0 goto label6;

        data = virtualinvoke proxy.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i0 = lengthof data;

        if $i0 != 0 goto label1;

        return;

     label1:
        proxyHost = data[0];

        proxyPort#1 = 8080;

        $i1 = lengthof data;

        if $i1 <= 1 goto label5;

     label2:
        $r4 = data[1];

        proxyPort#1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        return;

     label5:
        $r2 = new android.net.ProxyInfo;

        $r3 = data[0];

        specialinvoke $r2.<android.net.ProxyInfo: void <init>(java.lang.String,int,java.lang.String)>($r3, proxyPort#1, "");

        e#3 = $r2;

        virtualinvoke this.<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyInfo)>(e#3);

     label6:
        return;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    private void sendProxyBroadcast(android.net.ProxyInfo)
    {
        com.android.server.ConnectivityService this;
        android.content.Intent intent, tmp$14150015;
        long ident;
        java.lang.Throwable l5, $r10;
        com.android.server.connectivity.PacManager $r0;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, tmp$1419242323;
        java.lang.String $r4;
        android.content.Context $r8;
        android.os.UserHandle $r9;
        android.net.ProxyInfo proxy#1, tmp$724707318;
        android.os.Parcelable tmp$1381131673;

        this := @this: com.android.server.ConnectivityService;

        proxy#1 := @parameter0: android.net.ProxyInfo;

        if proxy#1 != null goto label1;

        tmp$724707318 = new android.net.ProxyInfo;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke tmp$724707318.<android.net.ProxyInfo: void <init>(java.lang.String,int,java.lang.String)>("", 0, "");

        proxy#1 = tmp$724707318;

     label1:
        $r0 = this.<com.android.server.ConnectivityService: com.android.server.connectivity.PacManager mPacManager>;

        $z0 = virtualinvoke $r0.<com.android.server.connectivity.PacManager: boolean setCurrentProxyScriptUrl(android.net.ProxyInfo)>(proxy#1);

        if $z0 == 0 goto label2;

        return;

     label2:
        tmp$1419242323 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke tmp$1419242323.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke tmp$1419242323.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sending Proxy Broadcast for ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(proxy#1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r4);

        tmp$14150015 = new android.content.Intent;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        specialinvoke tmp$14150015.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.PROXY_CHANGE");

        intent = tmp$14150015;

        virtualinvoke intent.<android.content.Intent: android.content.Intent addFlags(int)>(603979776);

        tmp$1381131673 = (android.os.Parcelable) proxy#1;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.PROXY_INFO", tmp$1381131673);

        ident = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r8 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r9 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r8.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(intent, $r9);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        goto label7;

     label5:
        $r10 := @caughtexception;

        l5 = $r10;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        throw l5;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static void log(java.lang.String)
    {
        java.lang.String s;

        s := @parameter0: java.lang.String;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConnectivityService", s);

        return;
    }

    private static void loge(java.lang.String)
    {
        java.lang.String s;

        s := @parameter0: java.lang.String;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConnectivityService", s);

        return;
    }

    private static java.lang.Object checkNotNull(java.lang.Object, java.lang.String)
    {
        java.lang.Object value;
        java.lang.String message;
        java.lang.NullPointerException $r0;

        value := @parameter0: java.lang.Object;

        message := @parameter1: java.lang.String;

        if value != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>(message);

        throw $r0;

     label1:
        return value;
    }

    public boolean prepareVpn(java.lang.String, java.lang.String)
    {
        com.android.server.ConnectivityService this;
        java.lang.String oldPackage, newPackage;
        int user, $i0;
        android.util.SparseArray l4, $r0, $r1;
        java.lang.Throwable l5, $r4;
        java.lang.Object $r2;
        com.android.server.connectivity.Vpn $r3;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        oldPackage := @parameter0: java.lang.String;

        newPackage := @parameter1: java.lang.String;

        specialinvoke this.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        user = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l4 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(user);

        $r3 = (com.android.server.connectivity.Vpn) $r2;

        $z0 = virtualinvoke $r3.<com.android.server.connectivity.Vpn: boolean prepare(java.lang.String,java.lang.String)>(oldPackage, newPackage);

        exitmonitor l4;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        l5 = $r4;

        exitmonitor l4;

     label4:
        throw l5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setVpnPackageAuthorization(boolean)
    {
        com.android.server.ConnectivityService this;
        boolean authorized;
        int user, $i0;
        android.util.SparseArray l3, $r0, $r1;
        java.lang.Throwable l4, $r4;
        java.lang.Object $r2;
        com.android.server.connectivity.Vpn $r3;

        this := @this: com.android.server.ConnectivityService;

        authorized := @parameter0: boolean;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        user = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(user);

        $r3 = (com.android.server.connectivity.Vpn) $r2;

        virtualinvoke $r3.<com.android.server.connectivity.Vpn: void setPackageAuthorization(boolean)>(authorized);

        exitmonitor l3;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        l4 = $r4;

        exitmonitor l3;

     label4:
        throw l4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)
    {
        com.android.server.ConnectivityService this;
        com.android.internal.net.VpnConfig config;
        int user, $i0;
        android.util.SparseArray l3, $r0, $r1;
        java.lang.Throwable l4, $r5;
        java.lang.Object $r2;
        com.android.server.connectivity.Vpn $r3;
        android.os.ParcelFileDescriptor $r4;

        this := @this: com.android.server.ConnectivityService;

        config := @parameter0: com.android.internal.net.VpnConfig;

        specialinvoke this.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        user = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(user);

        $r3 = (com.android.server.connectivity.Vpn) $r2;

        $r4 = virtualinvoke $r3.<com.android.server.connectivity.Vpn: android.os.ParcelFileDescriptor establish(com.android.internal.net.VpnConfig)>(config);

        exitmonitor l3;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        l4 = $r5;

        exitmonitor l3;

     label4:
        throw l4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void startLegacyVpn(com.android.internal.net.VpnProfile)
    {
        com.android.server.ConnectivityService this;
        com.android.internal.net.VpnProfile profile;
        android.net.LinkProperties egress;
        int user, $i0;
        android.util.SparseArray l4, $r0, $r1;
        java.lang.Throwable l5, $r6;
        java.lang.Object $r2;
        android.security.KeyStore $r3;
        com.android.server.connectivity.Vpn $r4;
        java.lang.IllegalStateException $r5;

        this := @this: com.android.server.ConnectivityService;

        profile := @parameter0: com.android.internal.net.VpnProfile;

        specialinvoke this.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        egress = virtualinvoke this.<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()>();

        if egress != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing active network connection");

        throw $r5;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        user = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l4 = $r0;

        entermonitor $r0;

     label2:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(user);

        $r4 = (com.android.server.connectivity.Vpn) $r2;

        $r3 = this.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        virtualinvoke $r4.<com.android.server.connectivity.Vpn: void startLegacyVpn(com.android.internal.net.VpnProfile,android.security.KeyStore,android.net.LinkProperties)>(profile, $r3, egress);

        exitmonitor l4;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        l5 = $r6;

        exitmonitor l4;

     label5:
        throw l5;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()
    {
        com.android.server.ConnectivityService this;
        int user, $i0;
        android.util.SparseArray l2, $r0, $r1;
        java.lang.Throwable l3, $r5;
        java.lang.Object $r2;
        com.android.server.connectivity.Vpn $r3;
        com.android.internal.net.LegacyVpnInfo $r4;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        user = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(user);

        $r3 = (com.android.server.connectivity.Vpn) $r2;

        $r4 = virtualinvoke $r3.<com.android.server.connectivity.Vpn: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>();

        exitmonitor l2;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        l3 = $r5;

        exitmonitor l2;

     label4:
        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public com.android.internal.net.VpnConfig getVpnConfig()
    {
        com.android.server.ConnectivityService this;
        int user, $i0;
        android.util.SparseArray l2, $r0, $r1;
        java.lang.Throwable l3, $r5;
        java.lang.Object $r2;
        com.android.server.connectivity.Vpn $r3;
        com.android.internal.net.VpnConfig $r4;

        this := @this: com.android.server.ConnectivityService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        user = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(user);

        $r3 = (com.android.server.connectivity.Vpn) $r2;

        $r4 = virtualinvoke $r3.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig getVpnConfig()>();

        exitmonitor l2;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        l3 = $r5;

        exitmonitor l2;

     label4:
        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean updateLockdownVpn()
    {
        com.android.server.ConnectivityService this;
        java.lang.String profileName, $r1, $r9;
        com.android.internal.net.VpnProfile profile;
        int user, $i0, $i1;
        android.util.SparseArray l4, $r10, $r11;
        java.lang.Throwable l5, $r17;
        boolean $z0, $z1, $z2;
        android.security.KeyStore $r0, $r2, $r5;
        byte[] $r3, $r8;
        java.lang.StringBuilder $r4, $r6, $r7;
        com.android.server.net.LockdownVpnTracker $r12;
        android.os.INetworkManagementService $r13;
        android.content.Context $r14;
        com.android.server.connectivity.Vpn $r15;
        java.lang.Object $r16;

        this := @this: com.android.server.ConnectivityService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ConnectivityService", "Lockdown VPN only available to AID_SYSTEM");

        return 0;

     label1:
        $z0 = staticinvoke <com.android.server.net.LockdownVpnTracker: boolean isEnabled()>();

        this.<com.android.server.ConnectivityService: boolean mLockdownEnabled> = $z0;

        $z1 = this.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

        if $z1 == 0 goto label8;

        $r0 = this.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        $z2 = virtualinvoke $r0.<android.security.KeyStore: boolean isUnlocked()>();

        if $z2 != 0 goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ConnectivityService", "KeyStore locked; unable to create LockdownTracker");

        return 0;

     label2:
        $r1 = new java.lang.String;

        $r2 = this.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        $r3 = virtualinvoke $r2.<android.security.KeyStore: byte[] get(java.lang.String)>("LOCKDOWN_VPN");

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r3);

        profileName = $r1;

        $r5 = this.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VPN_");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(profileName);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<android.security.KeyStore: byte[] get(java.lang.String)>($r9);

        profile = staticinvoke <com.android.internal.net.VpnProfile: com.android.internal.net.VpnProfile decode(java.lang.String,byte[])>(profileName, $r8);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        user = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        $r10 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l4 = $r10;

        entermonitor $r10;

     label3:
        $r12 = new com.android.server.net.LockdownVpnTracker;

        $r14 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r13 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r11 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r16 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object get(int)>(user);

        $r15 = (com.android.server.connectivity.Vpn) $r16;

        specialinvoke $r12.<com.android.server.net.LockdownVpnTracker: void <init>(android.content.Context,android.os.INetworkManagementService,com.android.server.ConnectivityService,com.android.server.connectivity.Vpn,com.android.internal.net.VpnProfile)>($r14, $r13, this, $r15, profile);

        specialinvoke this.<com.android.server.ConnectivityService: void setLockdownTracker(com.android.server.net.LockdownVpnTracker)>($r12);

        exitmonitor l4;

     label4:
        goto label7;

     label5:
        $r17 := @caughtexception;

        l5 = $r17;

        exitmonitor l4;

     label6:
        throw l5;

     label7:
        goto label9;

     label8:
        specialinvoke this.<com.android.server.ConnectivityService: void setLockdownTracker(com.android.server.net.LockdownVpnTracker)>(null);

     label9:
        return 1;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void setLockdownTracker(com.android.server.net.LockdownVpnTracker)
    {
        com.android.server.ConnectivityService this;
        com.android.server.net.LockdownVpnTracker tracker, existing, $r3;
        android.os.RemoteException l3, $r4;
        android.os.INetworkManagementService $r0, $r1, $r2;

        this := @this: com.android.server.ConnectivityService;

        tracker := @parameter0: com.android.server.net.LockdownVpnTracker;

        existing = this.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        this.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker> = null;

        if existing == null goto label1;

        virtualinvoke existing.<com.android.server.net.LockdownVpnTracker: void shutdown()>();

     label1:
        if tracker == null goto label2;

        $r1 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r1.<android.os.INetworkManagementService: void setFirewallEnabled(boolean)>(1);

        $r2 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r2.<android.os.INetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>("lo", 1);

        this.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker> = tracker;

        $r3 = this.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        virtualinvoke $r3.<com.android.server.net.LockdownVpnTracker: void init()>();

        goto label3;

     label2:
        $r0 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r0.<android.os.INetworkManagementService: void setFirewallEnabled(boolean)>(0);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        l3 = $r4;

     label5:
        return;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    private void throwIfLockdownEnabled()
    {
        com.android.server.ConnectivityService this;
        boolean $z0;
        java.lang.IllegalStateException $r0;

        this := @this: com.android.server.ConnectivityService;

        $z0 = this.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

        if $z0 == 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unavailable in lockdown mode");

        throw $r0;

     label1:
        return;
    }

    public void supplyMessenger(int, android.os.Messenger)
    {
        com.android.server.ConnectivityService this;
        int networkType;
        android.os.Messenger messenger;
        boolean $z0;
        android.net.NetworkStateTracker[] $r0, $r2;
        android.net.NetworkStateTracker $r1, $r3;

        this := @this: com.android.server.ConnectivityService;

        networkType := @parameter0: int;

        messenger := @parameter1: android.os.Messenger;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(networkType);

        if $z0 == 0 goto label1;

        $r0 = this.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r1 = $r0[networkType];

        if $r1 == null goto label1;

        $r2 = this.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r3 = $r2[networkType];

        interfaceinvoke $r3.<android.net.NetworkStateTracker: void supplyMessenger(android.os.Messenger)>(messenger);

     label1:
        return;
    }

    public int findConnectionTypeForIface(java.lang.String)
    {
        com.android.server.ConnectivityService this;
        java.lang.String iface, $r4;
        android.util.SparseArray l2, $r0, $r1, $r2;
        com.android.server.connectivity.NetworkAgentInfo nai;
        android.net.LinkProperties lp;
        java.lang.Throwable l6, $r7;
        boolean $z0, $z1;
        int $i0, $i1, i#1;
        java.lang.Object $r3;
        android.net.NetworkInfo $r5, $r6;

        this := @this: com.android.server.ConnectivityService;

        iface := @parameter0: java.lang.String;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(iface);

        if $z0 == 0 goto label01;

        return -1;

     label01:
        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        l2 = $r0;

        entermonitor $r0;

     label02:
        i#1 = 0;

     label03:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if i#1 >= $i0 goto label06;

        $r2 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#1);

        nai = (com.android.server.connectivity.NetworkAgentInfo) $r3;

        lp = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        if lp == null goto label05;

        $r4 = virtualinvoke lp.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $z1 = virtualinvoke iface.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label05;

        $r6 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        if $r6 == null goto label05;

        $r5 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $i1 = virtualinvoke $r5.<android.net.NetworkInfo: int getType()>();

        exitmonitor l2;

     label04:
        return $i1;

     label05:
        i#1 = i#1 + 1;

        goto label03;

     label06:
        exitmonitor l2;

     label07:
        goto label10;

     label08:
        $r7 := @caughtexception;

        l6 = $r7;

        exitmonitor l2;

     label09:
        throw l6;

     label10:
        return -1;

        catch java.lang.Throwable from label02 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void setEnableFailFastMobileData(int)
    {
        com.android.server.ConnectivityService this;
        int enabled, tag#1;
        java.util.concurrent.atomic.AtomicInteger $r0, $r4;
        com.android.server.ConnectivityService$InternalHandler $r1, $r2;
        android.os.Message $r3;

        this := @this: com.android.server.ConnectivityService;

        enabled := @parameter0: int;

        if enabled != 1 goto label1;

        $r4 = this.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicInteger mEnableFailFastMobileDataTag>;

        tag#1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        goto label2;

     label1:
        $r0 = this.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicInteger mEnableFailFastMobileDataTag>;

        tag#1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label2:
        $r2 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r3 = virtualinvoke $r1.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(14, tag#1, enabled);

        virtualinvoke $r2.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public int checkMobileProvisioning(int)
    {
        com.android.server.ConnectivityService this;
        int suggestedTimeOutMs;

        this := @this: com.android.server.ConnectivityService;

        suggestedTimeOutMs := @parameter0: int;

        return -1;
    }

    private void setProvNotificationVisible(boolean, int, java.lang.String)
    {
        com.android.server.ConnectivityService this;
        boolean visible;
        int networkType, id, $i0;
        java.lang.String action, $r7;
        android.content.Intent intent, $r8;
        android.app.PendingIntent pendingIntent;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        android.content.Context $r9;

        this := @this: com.android.server.ConnectivityService;

        visible := @parameter0: boolean;

        networkType := @parameter1: int;

        action := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setProvNotificationVisible: E visible=");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(visible);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" networkType=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(networkType);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" action=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(action);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r7);

        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(java.lang.String)>(action);

        intent = $r8;

        $r9 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        pendingIntent = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r9, 0, intent, 0);

        $i0 = networkType - -1;

        id = 65536 + $i0;

        specialinvoke this.<com.android.server.ConnectivityService: void setProvNotificationVisibleIntent(boolean,int,int,java.lang.String,android.app.PendingIntent)>(visible, id, networkType, null, pendingIntent);

        return;
    }

    private void setProvNotificationVisibleIntent(boolean, int, int, java.lang.String, android.app.PendingIntent)
    {
        com.android.server.ConnectivityService this;
        boolean visible;
        int id, networkType, $i0, icon#3;
        java.lang.String extraInfo, $r7, $r25, $r33, title#1, details#2;
        android.app.PendingIntent intent, $r14;
        android.content.res.Resources r, $r16;
        android.app.NotificationManager notificationManager;
        android.app.Notification notification, $r11;
        java.lang.NullPointerException npe, $r23, $r32, title#4;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r26, $r27, $r28, $r29, $r30, $r31;
        java.lang.Object $r8;
        android.content.Context $r9, $r15, $r17;
        java.lang.Object[] $r10, $r13, $r18, $r22, $r24;
        java.lang.Integer $r12, $r20, $r21;
        android.telephony.TelephonyManager $r19;

        this := @this: com.android.server.ConnectivityService;

        visible := @parameter0: boolean;

        id := @parameter1: int;

        networkType := @parameter2: int;

        extraInfo := @parameter3: java.lang.String;

        intent := @parameter4: android.app.PendingIntent;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setProvNotificationVisibleIntent: E visible=");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(visible);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" networkType=");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(networkType);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" extraInfo=");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(extraInfo);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r7);

        r = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r9 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r8 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        notificationManager = (android.app.NotificationManager) $r8;

        if visible == 0 goto label09;

        $r11 = new android.app.Notification;

        specialinvoke $r11.<android.app.Notification: void <init>()>();

        notification = $r11;

        lookupswitch(networkType)
        {
            case 0: goto label02;
            case 1: goto label01;
            case 5: goto label02;
            default: goto label03;
        };

     label01:
        $r10 = newarray (java.lang.Object)[1];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r10[0] = $r12;

        title#1 = virtualinvoke r.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040571, $r10);

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = extraInfo;

        details#2 = virtualinvoke r.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040573, $r13);

        icon#3 = 17303119;

        goto label04;

     label02:
        $r18 = newarray (java.lang.Object)[1];

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r18[0] = $r20;

        title#1 = virtualinvoke r.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040572, $r18);

        $r19 = this.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        details#2 = virtualinvoke $r19.<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>();

        icon#3 = 17303115;

        goto label04;

     label03:
        $r22 = newarray (java.lang.Object)[1];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r22[0] = $r21;

        title#1 = virtualinvoke r.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040572, $r22);

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = extraInfo;

        details#2 = virtualinvoke r.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040573, $r24);

        icon#3 = 17303115;

     label04:
        notification.<android.app.Notification: long when> = 0L;

        notification.<android.app.Notification: int icon> = icon#3;

        notification.<android.app.Notification: int flags> = 16;

        notification.<android.app.Notification: java.lang.CharSequence tickerText> = title#1;

        $r15 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r16 = virtualinvoke $r15.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r16.<android.content.res.Resources: int getColor(int)>(17170521);

        notification.<android.app.Notification: int color> = $i0;

        $r17 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r14 = notification.<android.app.Notification: android.app.PendingIntent contentIntent>;

        virtualinvoke notification.<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>($r17, title#1, details#2, $r14);

        notification.<android.app.Notification: android.app.PendingIntent contentIntent> = intent;

     label05:
        virtualinvoke notificationManager.<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>("CaptivePortal.Notification", id, notification);

     label06:
        goto label08;

     label07:
        $r23 := @caughtexception;

        npe = $r23;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setNotificaitionVisible: visible notificationManager npe=");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(npe);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r25);

        virtualinvoke npe.<java.lang.NullPointerException: void printStackTrace()>();

     label08:
        goto label12;

     label09:
        virtualinvoke notificationManager.<android.app.NotificationManager: void cancel(java.lang.String,int)>("CaptivePortal.Notification", id);

     label10:
        goto label12;

     label11:
        $r32 := @caughtexception;

        title#4 = $r32;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setNotificaitionVisible: cancel notificationManager npe=");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(title#4);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r33);

        virtualinvoke title#4.<java.lang.NullPointerException: void printStackTrace()>();

     label12:
        this.<com.android.server.ConnectivityService: boolean mIsNotificationVisible> = visible;

        return;

        catch java.lang.NullPointerException from label05 to label06 with label07;
        catch java.lang.NullPointerException from label09 to label10 with label11;
    }

    private java.lang.String getProvisioningUrlBaseFromFile(int)
    {
        com.android.server.ConnectivityService this;
        int type, $i0, $i1, $i2, $i3, $i4;
        android.content.res.Configuration config;
        java.lang.String l9, $r6, $r14, $r22, $r30, tagType#3, element#5, mcc#6, mnc#7;
        java.lang.Throwable l11, $r7;
        android.content.Context $r0;
        android.content.res.Resources $r1;
        java.io.File $r2;
        java.io.FileReader $r3, fileReader#1;
        boolean $z0;
        java.lang.StringBuilder $r4, $r8, $r9, $r11, $r16, $r17, $r23, $r24, $r25, $r26, $r27, $r31;
        java.lang.RuntimeException $r5;
        java.lang.NumberFormatException $r10, mnc#8;
        java.io.IOException $r12, $r15, $r18, $r19, $r20, $r21, $r29, element#15;
        java.io.FileNotFoundException $r13;
        org.xmlpull.v1.XmlPullParserException $r28, element#13;
        org.xmlpull.v1.XmlPullParser parser#4;

        this := @this: com.android.server.ConnectivityService;

        type := @parameter0: int;

        fileReader#1 = null;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        config = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        lookupswitch(type)
        {
            case 1: goto label02;
            case 2: goto label01;
            default: goto label03;
        };

     label01:
        tagType#3 = "provisioningUrl";

        goto label04;

     label02:
        tagType#3 = "redirectedUrl";

        goto label04;

     label03:
        $r5 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProvisioningUrlBaseFromFile: Unexpected parameter ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(type);

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label04:
        $r3 = new java.io.FileReader;

        $r2 = this.<com.android.server.ConnectivityService: java.io.File mProvisioningUrlFile>;

        specialinvoke $r3.<java.io.FileReader: void <init>(java.io.File)>($r2);

        fileReader#1 = $r3;

        parser#4 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke parser#4.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(fileReader#1);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(parser#4, "provisioningUrls");

     label05:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(parser#4);

        element#5 = interfaceinvoke parser#4.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        if element#5 != null goto label06;

        goto label16;

     label06:
        $z0 = virtualinvoke element#5.<java.lang.String: boolean equals(java.lang.Object)>(tagType#3);

        if $z0 == 0 goto label15;

        mcc#6 = interfaceinvoke parser#4.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "mcc");

     label07:
        if mcc#6 == null goto label13;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(mcc#6);

        $i0 = config.<android.content.res.Configuration: int mcc>;

        if $i1 != $i0 goto label13;

        mnc#7 = interfaceinvoke parser#4.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "mnc");

        if mnc#7 == null goto label13;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(mnc#7);

        $i3 = config.<android.content.res.Configuration: int mnc>;

        if $i2 != $i3 goto label13;

        interfaceinvoke parser#4.<org.xmlpull.v1.XmlPullParser: int next()>();

        $i4 = interfaceinvoke parser#4.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i4 != 4 goto label13;

        l9 = interfaceinvoke parser#4.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

     label08:
        if fileReader#1 == null goto label12;

     label09:
        virtualinvoke fileReader#1.<java.io.FileReader: void close()>();

     label10:
        goto label12;

     label11:
        $r21 := @caughtexception;

     label12:
        return l9;

     label13:
        goto label15;

     label14:
        $r10 := @caughtexception;

        mnc#8 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NumberFormatException in getProvisioningUrlBaseFromFile: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(mnc#8);

        $r14 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r14);

     label15:
        goto label05;

     label16:
        if fileReader#1 == null goto label20;

     label17:
        virtualinvoke fileReader#1.<java.io.FileReader: void close()>();

     label18:
        goto label20;

     label19:
        $r29 := @caughtexception;

     label20:
        return null;

     label21:
        $r13 := @caughtexception;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Carrier Provisioning Urls file not found");

     label22:
        if fileReader#1 == null goto label42;

     label23:
        virtualinvoke fileReader#1.<java.io.FileReader: void close()>();

     label24:
        goto label42;

     label25:
        $r15 := @caughtexception;

        goto label42;

     label26:
        $r28 := @caughtexception;

        element#13 = $r28;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Xml parser exception reading Carrier Provisioning Urls file: ");

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(element#13);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r30);

     label27:
        if fileReader#1 == null goto label42;

     label28:
        virtualinvoke fileReader#1.<java.io.FileReader: void close()>();

     label29:
        goto label42;

     label30:
        $r18 := @caughtexception;

        goto label42;

     label31:
        $r19 := @caughtexception;

        element#15 = $r19;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("I/O exception reading Carrier Provisioning Urls file: ");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(element#15);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r22);

     label32:
        if fileReader#1 == null goto label42;

     label33:
        virtualinvoke fileReader#1.<java.io.FileReader: void close()>();

     label34:
        goto label42;

     label35:
        $r20 := @caughtexception;

        goto label42;

     label36:
        $r7 := @caughtexception;

        l11 = $r7;

     label37:
        if fileReader#1 == null goto label41;

     label38:
        virtualinvoke fileReader#1.<java.io.FileReader: void close()>();

     label39:
        goto label41;

     label40:
        $r12 := @caughtexception;

     label41:
        throw l11;

     label42:
        return null;

        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.NumberFormatException from label07 to label08 with label14;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.io.FileNotFoundException from label04 to label08 with label21;
        catch java.io.FileNotFoundException from label13 to label16 with label21;
        catch java.io.IOException from label23 to label24 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label08 with label26;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label16 with label26;
        catch java.io.IOException from label28 to label29 with label30;
        catch java.io.IOException from label04 to label08 with label31;
        catch java.io.IOException from label13 to label16 with label31;
        catch java.io.IOException from label33 to label34 with label35;
        catch java.lang.Throwable from label04 to label08 with label36;
        catch java.lang.Throwable from label13 to label16 with label36;
        catch java.lang.Throwable from label21 to label22 with label36;
        catch java.lang.Throwable from label26 to label27 with label36;
        catch java.lang.Throwable from label31 to label32 with label36;
        catch java.io.IOException from label38 to label39 with label40;
        catch java.lang.Throwable from label36 to label37 with label36;
    }

    public java.lang.String getMobileRedirectedProvisioningUrl()
    {
        com.android.server.ConnectivityService this;
        boolean $z0;
        android.content.Context $r0;
        android.content.res.Resources $r1;
        java.lang.String url#1;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        url#1 = specialinvoke this.<com.android.server.ConnectivityService: java.lang.String getProvisioningUrlBaseFromFile(int)>(1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(url#1);

        if $z0 == 0 goto label1;

        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        url#1 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(17039405);

     label1:
        return url#1;
    }

    public java.lang.String getMobileProvisioningUrl()
    {
        com.android.server.ConnectivityService this;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r0, $r1, $r2, $r12, $r13, $r15;
        java.lang.String $r3, $r8, $r9, $r14, url#1, phoneNumber#2;
        android.telephony.TelephonyManager $r4, $r6, $r7;
        java.lang.Object[] $r5;
        android.content.Context $r10;
        android.content.res.Resources $r11;

        this := @this: com.android.server.ConnectivityService;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        url#1 = specialinvoke this.<com.android.server.ConnectivityService: java.lang.String getProvisioningUrlBaseFromFile(int)>(2);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(url#1);

        if $z0 == 0 goto label1;

        $r10 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.res.Resources getResources()>();

        url#1 = virtualinvoke $r11.<android.content.res.Resources: java.lang.String getString(int)>(17039404);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMobileProvisioningUrl: mobile_provisioining_url from resource =");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(url#1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r14);

        goto label2;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMobileProvisioningUrl: mobile_provisioning_url from File =");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(url#1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r3);

     label2:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(url#1);

        if $z1 != 0 goto label4;

        $r4 = this.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        phoneNumber#2 = virtualinvoke $r4.<android.telephony.TelephonyManager: java.lang.String getLine1Number()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(phoneNumber#2);

        if $z2 == 0 goto label3;

        phoneNumber#2 = "0000000000";

     label3:
        $r5 = newarray (java.lang.Object)[3];

        $r6 = this.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        $r8 = virtualinvoke $r6.<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>();

        $r5[0] = $r8;

        $r7 = this.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        $r9 = virtualinvoke $r7.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>();

        $r5[1] = $r9;

        $r5[2] = phoneNumber#2;

        url#1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(url#1, $r5);

     label4:
        return url#1;
    }

    public void setProvisioningNotificationVisible(boolean, int, java.lang.String)
    {
        com.android.server.ConnectivityService this;
        boolean visible;
        int networkType;
        java.lang.String action;
        long ident;
        java.lang.Throwable l6, $r0;

        this := @this: com.android.server.ConnectivityService;

        visible := @parameter0: boolean;

        networkType := @parameter1: int;

        action := @parameter2: java.lang.String;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        ident = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke this.<com.android.server.ConnectivityService: void setProvNotificationVisible(boolean,int,java.lang.String)>(visible, networkType, action);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        goto label5;

     label3:
        $r0 := @caughtexception;

        l6 = $r0;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        throw l6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setAirplaneMode(boolean)
    {
        com.android.server.ConnectivityService this;
        boolean enable;
        long ident;
        android.content.ContentResolver cr;
        android.content.Intent intent, $r1;
        java.lang.Throwable l6, $r5;
        android.content.Context $r0, $r4;
        android.os.UserHandle $r3;
        byte $b0;

        this := @this: com.android.server.ConnectivityService;

        enable := @parameter0: boolean;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        ident = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r0 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        cr = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if enable == 0 goto label2;

        $b0 = 1;

        goto label3;

     label2:
        $b0 = 0;

     label3:
        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(cr, "airplane_mode_on", $b0);

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.AIRPLANE_MODE");

        intent = $r1;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("state", enable);

        $r4 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r3 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r4.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(intent, $r3);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        goto label7;

     label5:
        $r5 := @caughtexception;

        l6 = $r5;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(ident);

        throw l6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void onUserStart(int)
    {
        com.android.server.ConnectivityService this;
        int userId;
        android.util.SparseArray l2, $r0, $r1, $r8;
        java.lang.Throwable l4, $r9;
        java.lang.Object $r2;
        com.android.server.ConnectivityService$InternalHandler $r4;
        android.os.Looper $r5;
        android.os.INetworkManagementService $r6;
        android.content.Context $r7;
        com.android.server.connectivity.Vpn userVpn#1, userVpn#2, tmp$1507443009;
        android.net.IConnectivityManager tmp$1086831537;

        this := @this: com.android.server.ConnectivityService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(userId);

        userVpn#1 = (com.android.server.connectivity.Vpn) $r2;

        if userVpn#1 == null goto label3;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Starting user already has a VPN");

        exitmonitor l2;

     label2:
        return;

     label3:
        tmp$1507443009 = new com.android.server.connectivity.Vpn;

        $r4 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r5 = virtualinvoke $r4.<com.android.server.ConnectivityService$InternalHandler: android.os.Looper getLooper()>();

        $r7 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r6 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        tmp$1086831537 = (android.net.IConnectivityManager) this;

        specialinvoke tmp$1507443009.<com.android.server.connectivity.Vpn: void <init>(android.os.Looper,android.content.Context,android.os.INetworkManagementService,android.net.IConnectivityManager,int)>($r5, $r7, $r6, tmp$1086831537, userId);

        userVpn#2 = tmp$1507443009;

        $r8 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(userId, userVpn#2);

        exitmonitor l2;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        l4 = $r9;

        exitmonitor l2;

     label6:
        throw l4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void onUserStop(int)
    {
        com.android.server.ConnectivityService this;
        int userId;
        android.util.SparseArray l2, $r0, $r1, $r3;
        com.android.server.connectivity.Vpn userVpn;
        java.lang.Throwable l4, $r4;
        java.lang.Object $r2;

        this := @this: com.android.server.ConnectivityService;

        userId := @parameter0: int;

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(userId);

        userVpn = (com.android.server.connectivity.Vpn) $r2;

        if userVpn != null goto label3;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Stopping user has no VPN");

        exitmonitor l2;

     label2:
        return;

     label3:
        $r3 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        virtualinvoke $r3.<android.util.SparseArray: void delete(int)>(userId);

        exitmonitor l2;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        l4 = $r4;

        exitmonitor l2;

     label6:
        throw l4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void handleNetworkSamplingTimeout()
    {
        com.android.server.ConnectivityService this;
        java.util.HashMap mapIfaceToSample, $r0;
        android.net.SamplingDataTracker$SamplingSnapshot ss;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.app.PendingIntent $r3;
        int $i0, len$#2, i$#3, len$#7, i$#8, arr$#11;
        java.lang.Object $r4;
        android.net.NetworkStateTracker[] arr$#1, arr$#6;
        android.net.NetworkStateTracker tracker#4, tracker#9;
        java.lang.String ifaceName#5, ifaceName#10;

        this := @this: com.android.server.ConnectivityService;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        mapIfaceToSample = $r0;

        arr$#1 = this.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        len$#2 = lengthof arr$#1;

        i$#3 = 0;

     label1:
        if i$#3 >= len$#2 goto label3;

        tracker#4 = arr$#1[i$#3];

        if tracker#4 == null goto label2;

        ifaceName#5 = interfaceinvoke tracker#4.<android.net.NetworkStateTracker: java.lang.String getNetworkInterfaceName()>();

        if ifaceName#5 == null goto label2;

        interfaceinvoke mapIfaceToSample.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(ifaceName#5, null);

     label2:
        i$#3 = i$#3 + 1;

        goto label1;

     label3:
        staticinvoke <android.net.SamplingDataTracker: void getSamplingSnapshots(java.util.Map)>(mapIfaceToSample);

        arr$#6 = this.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        len$#7 = lengthof arr$#6;

        i$#8 = 0;

     label4:
        if i$#8 >= len$#7 goto label6;

        tracker#9 = arr$#6[i$#8];

        if tracker#9 == null goto label5;

        ifaceName#10 = interfaceinvoke tracker#9.<android.net.NetworkStateTracker: java.lang.String getNetworkInterfaceName()>();

        $r4 = interfaceinvoke mapIfaceToSample.<java.util.Map: java.lang.Object get(java.lang.Object)>(ifaceName#10);

        ss = (android.net.SamplingDataTracker$SamplingSnapshot) $r4;

        if ss == null goto label5;

        interfaceinvoke tracker#9.<android.net.NetworkStateTracker: void stopSampling(android.net.SamplingDataTracker$SamplingSnapshot)>(ss);

        interfaceinvoke tracker#9.<android.net.NetworkStateTracker: void startSampling(android.net.SamplingDataTracker$SamplingSnapshot)>(ss);

     label5:
        i$#8 = i$#8 + 1;

        goto label4;

     label6:
        $r1 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        arr$#11 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "connectivity_sampling_interval_in_seconds", 720);

        $i0 = arr$#11 * 1000;

        $r3 = this.<com.android.server.ConnectivityService: android.app.PendingIntent mSampleIntervalElapsedIntent>;

        virtualinvoke this.<com.android.server.ConnectivityService: void setAlarm(int,android.app.PendingIntent)>($i0, $r3);

        return;
    }

    void setAlarm(int, android.app.PendingIntent)
    {
        com.android.server.ConnectivityService this;
        int timeoutInMilliseconds;
        android.app.PendingIntent intent;
        long wakeupTime, $l0, $l1;
        android.content.res.Resources $r0;
        boolean $z0;
        android.app.AlarmManager $r1;
        byte alarmType#1;

        this := @this: com.android.server.ConnectivityService;

        timeoutInMilliseconds := @parameter0: int;

        intent := @parameter1: android.app.PendingIntent;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l1 = (long) timeoutInMilliseconds;

        wakeupTime = $l0 + $l1;

        $r0 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $z0 = virtualinvoke $r0.<android.content.res.Resources: boolean getBoolean(int)>(17956997);

        if $z0 == 0 goto label1;

        alarmType#1 = 2;

        goto label2;

     label1:
        alarmType#1 = 3;

     label2:
        $r1 = this.<com.android.server.ConnectivityService: android.app.AlarmManager mAlarmManager>;

        virtualinvoke $r1.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(alarmType#1, wakeupTime, intent);

        return;
    }

    public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities, android.os.Messenger, int, android.os.IBinder, int)
    {
        com.android.server.ConnectivityService this;
        android.os.Messenger messenger;
        int timeoutMs, legacyType, $i0;
        android.os.IBinder binder;
        android.net.NetworkRequest networkRequest, $r2;
        com.android.server.ConnectivityService$NetworkRequestInfo nri, $r8;
        android.net.NetworkCapabilities $r0, networkCapabilities#1, networkCapabilities#2;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        com.android.server.ConnectivityService$InternalHandler $r7, $r10, $r11, $r13;
        android.os.Message $r9, $r12;
        long $l1;

        this := @this: com.android.server.ConnectivityService;

        networkCapabilities#1 := @parameter0: android.net.NetworkCapabilities;

        messenger := @parameter1: android.os.Messenger;

        timeoutMs := @parameter2: int;

        binder := @parameter3: android.os.IBinder;

        legacyType := @parameter4: int;

        $r0 = new android.net.NetworkCapabilities;

        specialinvoke $r0.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(networkCapabilities#1);

        networkCapabilities#2 = $r0;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceNetworkRequestPermissions(android.net.NetworkCapabilities)>(networkCapabilities#2);

        specialinvoke this.<com.android.server.ConnectivityService: void enforceMeteredApnPolicy(android.net.NetworkCapabilities)>(networkCapabilities#2);

        if timeoutMs < 0 goto label1;

        if timeoutMs <= 6000000 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad timeout specified");

        throw $r1;

     label2:
        $r2 = new android.net.NetworkRequest;

        $i0 = specialinvoke this.<com.android.server.ConnectivityService: int nextNetworkRequestId()>();

        specialinvoke $r2.<android.net.NetworkRequest: void <init>(android.net.NetworkCapabilities,int,int)>(networkCapabilities#2, legacyType, $i0);

        networkRequest = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestNetwork for ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(networkRequest);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r6);

        $r8 = new com.android.server.ConnectivityService$NetworkRequestInfo;

        specialinvoke $r8.<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.os.Messenger,android.net.NetworkRequest,android.os.IBinder,boolean)>(this, messenger, networkRequest, binder, 1);

        nri = $r8;

        $r10 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r7 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r9 = virtualinvoke $r7.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(19, nri);

        virtualinvoke $r10.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r9);

        if timeoutMs <= 0 goto label3;

        $r13 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r11 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r12 = virtualinvoke $r11.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(20, nri);

        $l1 = (long) timeoutMs;

        virtualinvoke $r13.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r12, $l1);

     label3:
        return networkRequest;
    }

    private void enforceNetworkRequestPermissions(android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkCapabilities networkCapabilities;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        networkCapabilities := @parameter0: android.net.NetworkCapabilities;

        $z0 = virtualinvoke networkCapabilities.<android.net.NetworkCapabilities: boolean hasCapability(int)>(13);

        if $z0 != 0 goto label1;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        goto label2;

     label1:
        specialinvoke this.<com.android.server.ConnectivityService: void enforceChangePermission()>();

     label2:
        return;
    }

    private void enforceMeteredApnPolicy(android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkCapabilities networkCapabilities;
        int uidRules, uid, $i0;
        java.lang.Object l4, $r0;
        java.lang.Throwable l5, $r3;
        boolean $z0;
        android.util.SparseIntArray $r1;

        this := @this: com.android.server.ConnectivityService;

        networkCapabilities := @parameter0: android.net.NetworkCapabilities;

        $z0 = virtualinvoke networkCapabilities.<android.net.NetworkCapabilities: boolean hasCapability(int)>(11);

        if $z0 != 0 goto label6;

        uid = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r0 = this.<com.android.server.ConnectivityService: java.lang.Object mRulesLock>;

        l4 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        uidRules = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(uid, 0);

        exitmonitor l4;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        l5 = $r3;

        exitmonitor l4;

     label4:
        throw l5;

     label5:
        $i0 = uidRules & 1;

        if $i0 == 0 goto label6;

        virtualinvoke networkCapabilities.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(11);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities, android.app.PendingIntent)
    {
        com.android.server.ConnectivityService this;
        android.app.PendingIntent operation;
        android.net.NetworkRequest networkRequest, $r2;
        com.android.server.ConnectivityService$NetworkRequestInfo nri, $r10;
        android.net.NetworkCapabilities $r1, networkCapabilities#1, networkCapabilities#2;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        com.android.server.ConnectivityService$InternalHandler $r9, $r12;
        android.os.Message $r11;

        this := @this: com.android.server.ConnectivityService;

        networkCapabilities#1 := @parameter0: android.net.NetworkCapabilities;

        operation := @parameter1: android.app.PendingIntent;

        staticinvoke <com.android.server.ConnectivityService: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(operation, "PendingIntent cannot be null.");

        $r1 = new android.net.NetworkCapabilities;

        specialinvoke $r1.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(networkCapabilities#1);

        networkCapabilities#2 = $r1;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceNetworkRequestPermissions(android.net.NetworkCapabilities)>(networkCapabilities#2);

        specialinvoke this.<com.android.server.ConnectivityService: void enforceMeteredApnPolicy(android.net.NetworkCapabilities)>(networkCapabilities#2);

        $r2 = new android.net.NetworkRequest;

        $i0 = specialinvoke this.<com.android.server.ConnectivityService: int nextNetworkRequestId()>();

        specialinvoke $r2.<android.net.NetworkRequest: void <init>(android.net.NetworkCapabilities,int,int)>(networkCapabilities#2, -1, $i0);

        networkRequest = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pendingRequest for ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(networkRequest);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to trigger ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(operation);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r8);

        $r10 = new com.android.server.ConnectivityService$NetworkRequestInfo;

        specialinvoke $r10.<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.net.NetworkRequest,android.app.PendingIntent,boolean)>(this, networkRequest, operation, 1);

        nri = $r10;

        $r12 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r9 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r11 = virtualinvoke $r9.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(26, nri);

        virtualinvoke $r12.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r11);

        return networkRequest;
    }

    private void releasePendingNetworkRequestWithDelay(android.app.PendingIntent)
    {
        com.android.server.ConnectivityService this;
        android.app.PendingIntent operation;
        com.android.server.ConnectivityService$InternalHandler $r0, $r1;
        int $i0, $i1;
        android.os.Message $r2;
        long $l2;

        this := @this: com.android.server.ConnectivityService;

        operation := @parameter0: android.app.PendingIntent;

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int getCallingUid()>();

        $r2 = virtualinvoke $r1.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(27, $i0, 0, operation);

        $i1 = this.<com.android.server.ConnectivityService: int mReleasePendingIntentDelayMs>;

        $l2 = (long) $i1;

        virtualinvoke $r0.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r2, $l2);

        return;
    }

    public void releasePendingNetworkRequest(android.app.PendingIntent)
    {
        com.android.server.ConnectivityService this;
        android.app.PendingIntent operation;
        com.android.server.ConnectivityService$InternalHandler $r0, $r1;
        int $i0;
        android.os.Message $r2;

        this := @this: com.android.server.ConnectivityService;

        operation := @parameter0: android.app.PendingIntent;

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int getCallingUid()>();

        $r2 = virtualinvoke $r1.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(27, $i0, 0, operation);

        virtualinvoke $r0.<com.android.server.ConnectivityService$InternalHandler: void dispatchMessage_ConnectivityService__InternalHandler_27(android.os.Message)>($r2);

        return;
    }

    public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities, android.os.Messenger, android.os.IBinder)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkCapabilities networkCapabilities, $r1;
        android.os.Messenger messenger;
        android.os.IBinder binder;
        android.net.NetworkRequest networkRequest, $r0;
        com.android.server.ConnectivityService$NetworkRequestInfo nri, $r6;
        int $i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        com.android.server.ConnectivityService$InternalHandler $r7, $r9;
        android.os.Message $r8;

        this := @this: com.android.server.ConnectivityService;

        networkCapabilities := @parameter0: android.net.NetworkCapabilities;

        messenger := @parameter1: android.os.Messenger;

        binder := @parameter2: android.os.IBinder;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r0 = new android.net.NetworkRequest;

        $r1 = new android.net.NetworkCapabilities;

        specialinvoke $r1.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(networkCapabilities);

        $i0 = specialinvoke this.<com.android.server.ConnectivityService: int nextNetworkRequestId()>();

        specialinvoke $r0.<android.net.NetworkRequest: void <init>(android.net.NetworkCapabilities,int,int)>($r1, -1, $i0);

        networkRequest = $r0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listenForNetwork for ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(networkRequest);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r5);

        $r6 = new com.android.server.ConnectivityService$NetworkRequestInfo;

        specialinvoke $r6.<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.os.Messenger,android.net.NetworkRequest,android.os.IBinder,boolean)>(this, messenger, networkRequest, binder, 0);

        nri = $r6;

        $r9 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r7 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r8 = virtualinvoke $r7.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(21, nri);

        virtualinvoke $r9.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r8);

        return networkRequest;
    }

    public void pendingListenForNetwork(android.net.NetworkCapabilities, android.app.PendingIntent)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkCapabilities networkCapabilities;
        android.app.PendingIntent operation;

        this := @this: com.android.server.ConnectivityService;

        networkCapabilities := @parameter0: android.net.NetworkCapabilities;

        operation := @parameter1: android.app.PendingIntent;

        return;
    }

    public void releaseNetworkRequest(android.net.NetworkRequest)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkRequest networkRequest;
        com.android.server.ConnectivityService$InternalHandler $r0, $r1;
        int $i0;
        android.os.Message $r2;

        this := @this: com.android.server.ConnectivityService;

        networkRequest := @parameter0: android.net.NetworkRequest;

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int getCallingUid()>();

        $r2 = virtualinvoke $r1.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(22, $i0, 0, networkRequest);

        virtualinvoke $r0.<com.android.server.ConnectivityService$InternalHandler: void dispatchMessage_ConnectivityService__InternalHandler_22(android.os.Message)>($r2);

        return;
    }

    public void registerNetworkFactory(android.os.Messenger, java.lang.String)
    {
        com.android.server.ConnectivityService this;
        android.os.Messenger messenger;
        java.lang.String name;
        com.android.server.ConnectivityService$NetworkFactoryInfo nfi, $r0;
        com.android.internal.util.AsyncChannel $r1;
        com.android.server.ConnectivityService$InternalHandler $r2, $r3;
        android.os.Message $r4;

        this := @this: com.android.server.ConnectivityService;

        messenger := @parameter0: android.os.Messenger;

        name := @parameter1: java.lang.String;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $r0 = new com.android.server.ConnectivityService$NetworkFactoryInfo;

        $r1 = new com.android.internal.util.AsyncChannel;

        specialinvoke $r1.<com.android.internal.util.AsyncChannel: void <init>()>();

        specialinvoke $r0.<com.android.server.ConnectivityService$NetworkFactoryInfo: void <init>(java.lang.String,android.os.Messenger,com.android.internal.util.AsyncChannel)>(name, messenger, $r1);

        nfi = $r0;

        $r3 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r2 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r4 = virtualinvoke $r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(17, nfi);

        virtualinvoke $r3.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r4);

        return;
    }

    private void handleRegisterNetworkFactory(com.android.server.ConnectivityService$NetworkFactoryInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.ConnectivityService$NetworkFactoryInfo nfi;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4;
        android.os.Messenger $r5, $r8;
        java.util.HashMap $r6;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler $r9;
        android.content.Context $r10;
        com.android.internal.util.AsyncChannel $r11;

        this := @this: com.android.server.ConnectivityService;

        nfi := @parameter0: com.android.server.ConnectivityService$NetworkFactoryInfo;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got NetworkFactory Messenger for ");

        $r2 = nfi.<com.android.server.ConnectivityService$NetworkFactoryInfo: java.lang.String name>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r4);

        $r6 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkFactoryInfos>;

        $r5 = nfi.<com.android.server.ConnectivityService$NetworkFactoryInfo: android.os.Messenger messenger>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, nfi);

        $r11 = nfi.<com.android.server.ConnectivityService$NetworkFactoryInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        $r10 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r9 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        $r8 = nfi.<com.android.server.ConnectivityService$NetworkFactoryInfo: android.os.Messenger messenger>;

        virtualinvoke $r11.<com.android.internal.util.AsyncChannel: void connect(android.content.Context,android.os.Handler,android.os.Messenger)>($r10, $r9, $r8);

        return;
    }

    public void unregisterNetworkFactory(android.os.Messenger)
    {
        com.android.server.ConnectivityService this;
        android.os.Messenger messenger;
        com.android.server.ConnectivityService$InternalHandler $r0, $r1;
        android.os.Message $r2;

        this := @this: com.android.server.ConnectivityService;

        messenger := @parameter0: android.os.Messenger;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $r1 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r2 = virtualinvoke $r0.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(23, messenger);

        virtualinvoke $r1.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r2);

        return;
    }

    private void handleUnregisterNetworkFactory(android.os.Messenger)
    {
        com.android.server.ConnectivityService this;
        android.os.Messenger messenger;
        com.android.server.ConnectivityService$NetworkFactoryInfo nfi;
        java.util.HashMap $r0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        this := @this: com.android.server.ConnectivityService;

        messenger := @parameter0: android.os.Messenger;

        $r0 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkFactoryInfos>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(messenger);

        nfi = (com.android.server.ConnectivityService$NetworkFactoryInfo) $r1;

        if nfi != null goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unregisterNetworkFactory for ");

        $r4 = nfi.<com.android.server.ConnectivityService$NetworkFactoryInfo: java.lang.String name>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r6);

        return;
    }

    private com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkRequest $r0;
        int $i0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        com.android.server.connectivity.NetworkAgentInfo $r3;

        this := @this: com.android.server.ConnectivityService;

        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r0 = this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $i0 = $r0.<android.net.NetworkRequest: int requestId>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        $r3 = (com.android.server.connectivity.NetworkAgentInfo) $r2;

        return $r3;
    }

    private boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai, $r0;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r0 = specialinvoke this.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        if nai != $r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void registerNetworkAgent(android.os.Messenger, android.net.NetworkInfo, android.net.LinkProperties, android.net.NetworkCapabilities, int, android.net.NetworkMisc)
    {
        com.android.server.ConnectivityService this, l8;
        android.os.Messenger messenger;
        android.net.NetworkInfo networkInfo, $r2;
        android.net.LinkProperties linkProperties, $r3;
        android.net.NetworkCapabilities networkCapabilities, $r4;
        int currentScore;
        android.net.NetworkMisc networkMisc, $r5;
        com.android.server.connectivity.NetworkAgentInfo nai, $r0;
        java.lang.Throwable l9, $r18;
        com.android.internal.util.AsyncChannel $r1;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler $r6;
        android.content.Context $r7;
        android.net.NetworkRequest $r9;
        com.android.server.connectivity.NetworkMonitor $r10;
        boolean $z0;
        java.lang.StringBuilder $r11, $r12, $r13;
        com.android.server.ConnectivityService$InternalHandler $r14, $r17;
        java.lang.String $r15;
        android.os.Message $r16;

        this := @this: com.android.server.ConnectivityService;

        messenger := @parameter0: android.os.Messenger;

        networkInfo := @parameter1: android.net.NetworkInfo;

        linkProperties := @parameter2: android.net.LinkProperties;

        networkCapabilities := @parameter3: android.net.NetworkCapabilities;

        currentScore := @parameter4: int;

        networkMisc := @parameter5: android.net.NetworkMisc;

        specialinvoke this.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $r0 = new com.android.server.connectivity.NetworkAgentInfo;

        $r1 = new com.android.internal.util.AsyncChannel;

        specialinvoke $r1.<com.android.internal.util.AsyncChannel: void <init>()>();

        $r2 = new android.net.NetworkInfo;

        specialinvoke $r2.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(networkInfo);

        $r3 = new android.net.LinkProperties;

        specialinvoke $r3.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>(linkProperties);

        $r4 = new android.net.NetworkCapabilities;

        specialinvoke $r4.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(networkCapabilities);

        $r7 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r6 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        $r5 = new android.net.NetworkMisc;

        specialinvoke $r5.<android.net.NetworkMisc: void <init>(android.net.NetworkMisc)>(networkMisc);

        $r9 = this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        specialinvoke $r0.<com.android.server.connectivity.NetworkAgentInfo: void <init>(android.os.Messenger,com.android.internal.util.AsyncChannel,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.content.Context,android.os.Handler,android.net.NetworkMisc,android.net.NetworkRequest)>(messenger, $r1, $r2, $r3, $r4, currentScore, $r7, $r6, $r5, $r9);

        nai = $r0;

        l8 = this;

        entermonitor this;

     label1:
        $r10 = nai.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.NetworkMonitor networkMonitor>;

        $z0 = this.<com.android.server.ConnectivityService: boolean mSystemReady>;

        $r10.<com.android.server.connectivity.NetworkMonitor: boolean systemReady> = $z0;

        exitmonitor l8;

     label2:
        goto label5;

     label3:
        $r18 := @caughtexception;

        l9 = $r18;

        exitmonitor l8;

     label4:
        throw l9;

     label5:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("registerNetworkAgent ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(nai);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r15);

        $r17 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r14 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r16 = virtualinvoke $r14.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(18, nai);

        virtualinvoke $r17.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r16);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleRegisterNetworkAgent(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo na;
        android.net.NetworkInfo networkInfo;
        android.os.Messenger $r0, $r3;
        java.util.HashMap $r1;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler $r4;
        android.content.Context $r5;
        com.android.internal.util.AsyncChannel $r6;

        this := @this: com.android.server.ConnectivityService;

        na := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r1 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r0 = na.<com.android.server.connectivity.NetworkAgentInfo: android.os.Messenger messenger>;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, na);

        specialinvoke this.<com.android.server.ConnectivityService: void assignNextNetId(com.android.server.connectivity.NetworkAgentInfo)>(na);

        $r6 = na.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        $r5 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r4 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        $r3 = na.<com.android.server.connectivity.NetworkAgentInfo: android.os.Messenger messenger>;

        virtualinvoke $r6.<com.android.internal.util.AsyncChannel: void connect(android.content.Context,android.os.Handler,android.os.Messenger)>($r5, $r4, $r3);

        networkInfo = na.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        na.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo> = null;

        specialinvoke this.<com.android.server.ConnectivityService: void updateNetworkInfo(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkInfo)>(na, networkInfo);

        return;
    }

    private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo, android.net.LinkProperties)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo networkAgent;
        android.net.LinkProperties oldLp, newLp;
        int netId;
        boolean useDefaultDns, flushDns, $z0, $z1;
        android.net.Network $r0;
        com.android.server.connectivity.Nat464Xlat $r1, $r4;
        android.net.NetworkCapabilities $r2;
        android.net.ProxyInfo $r3;

        this := @this: com.android.server.ConnectivityService;

        networkAgent := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        oldLp := @parameter1: android.net.LinkProperties;

        newLp = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $r0 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        netId = $r0.<android.net.Network: int netId>;

        $r1 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd>;

        if $r1 == null goto label1;

        $r4 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd>;

        virtualinvoke $r4.<com.android.server.connectivity.Nat464Xlat: void fixupLinkProperties(android.net.LinkProperties)>(null);

     label1:
        specialinvoke this.<com.android.server.ConnectivityService: void updateInterfaces(android.net.LinkProperties,android.net.LinkProperties,int)>(newLp, null, netId);

        specialinvoke this.<com.android.server.ConnectivityService: void updateMtu(android.net.LinkProperties,android.net.LinkProperties)>(newLp, null);

        specialinvoke this.<com.android.server.ConnectivityService: void updateTcpBufferSizes(com.android.server.connectivity.NetworkAgentInfo)>(networkAgent);

        $r2 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        useDefaultDns = virtualinvoke $r2.<android.net.NetworkCapabilities: boolean hasCapability(int)>(12);

        flushDns = specialinvoke this.<com.android.server.ConnectivityService: boolean updateRoutes(android.net.LinkProperties,android.net.LinkProperties,int)>(newLp, null, netId);

        specialinvoke this.<com.android.server.ConnectivityService: void updateDnses(android.net.LinkProperties,android.net.LinkProperties,int,boolean,boolean)>(newLp, null, netId, flushDns, useDefaultDns);

        specialinvoke this.<com.android.server.ConnectivityService: void updateClat(android.net.LinkProperties,android.net.LinkProperties,com.android.server.connectivity.NetworkAgentInfo)>(newLp, null, networkAgent);

        $z0 = specialinvoke this.<com.android.server.ConnectivityService: boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)>(networkAgent);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke newLp.<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()>();

        specialinvoke this.<com.android.server.ConnectivityService: void handleApplyDefaultProxy(android.net.ProxyInfo)>($r3);

        goto label3;

     label2:
        specialinvoke this.<com.android.server.ConnectivityService: void updateProxy(android.net.LinkProperties,android.net.LinkProperties,com.android.server.connectivity.NetworkAgentInfo)>(newLp, null, networkAgent);

     label3:
        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(newLp, null);

        if $z1 != 0 goto label4;

        specialinvoke this.<com.android.server.ConnectivityService: void notifyIfacesChanged()>();

        virtualinvoke this.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(networkAgent, 524295);

     label4:
        return;
    }

    private void updateClat(android.net.LinkProperties, android.net.LinkProperties, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        android.net.LinkProperties newLp, oldLp;
        com.android.server.connectivity.NetworkAgentInfo nai;
        boolean wasRunningClat, shouldRunClat, $z0, $z1;
        com.android.server.connectivity.Nat464Xlat $r0, $r1, $r2, $r6, $r7;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler $r3;
        android.os.INetworkManagementService $r4;
        android.content.Context $r5;

        this := @this: com.android.server.ConnectivityService;

        newLp := @parameter0: android.net.LinkProperties;

        oldLp := @parameter1: android.net.LinkProperties;

        nai := @parameter2: com.android.server.connectivity.NetworkAgentInfo;

        $r0 = nai.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd>;

        if $r0 == null goto label1;

        $r7 = nai.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd>;

        $z0 = virtualinvoke $r7.<com.android.server.connectivity.Nat464Xlat: boolean isStarted()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        wasRunningClat = $z1;

        shouldRunClat = staticinvoke <com.android.server.connectivity.Nat464Xlat: boolean requiresClat(com.android.server.connectivity.NetworkAgentInfo)>(nai);

        if wasRunningClat != 0 goto label3;

        if shouldRunClat == 0 goto label3;

        $r2 = new com.android.server.connectivity.Nat464Xlat;

        $r5 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r4 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r3 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        specialinvoke $r2.<com.android.server.connectivity.Nat464Xlat: void <init>(android.content.Context,android.os.INetworkManagementService,android.os.Handler,com.android.server.connectivity.NetworkAgentInfo)>($r5, $r4, $r3, nai);

        nai.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd> = $r2;

        $r6 = nai.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd>;

        virtualinvoke $r6.<com.android.server.connectivity.Nat464Xlat: void start()>();

        goto label4;

     label3:
        if wasRunningClat == 0 goto label4;

        if shouldRunClat != 0 goto label4;

        $r1 = nai.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd>;

        virtualinvoke $r1.<com.android.server.connectivity.Nat464Xlat: void stop()>();

     label4:
        return;
    }

    private void updateInterfaces(android.net.LinkProperties, android.net.LinkProperties, int)
    {
        com.android.server.ConnectivityService this;
        android.net.LinkProperties newLp, oldLp;
        int netId;
        android.net.LinkProperties$CompareResult $r0, interfaceDiff#1;
        java.util.List $r1, $r2, $r18;
        boolean $z0, $z1;
        java.lang.Object $r3, $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r12, $r13, $r14, $r15, $r17, $r20, $r21, $r24, $r25, $r28, $r29;
        java.lang.String $r8, $r16, $r26, $r27, iface#3, iface#6;
        android.os.INetworkManagementService $r11, $r19;
        java.lang.Exception $r22, $r23, e#4, e#7;
        java.util.Iterator i$#2, i$#5;

        this := @this: com.android.server.ConnectivityService;

        newLp := @parameter0: android.net.LinkProperties;

        oldLp := @parameter1: android.net.LinkProperties;

        netId := @parameter2: int;

        $r0 = new android.net.LinkProperties$CompareResult;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r0.<android.net.LinkProperties$CompareResult: void <init>()>();

        interfaceDiff#1 = $r0;

        goto label01;

     label01:
        if newLp == null goto label02;

        $r18 = virtualinvoke newLp.<android.net.LinkProperties: java.util.List getAllInterfaceNames()>();

        interfaceDiff#1.<android.net.LinkProperties$CompareResult: java.util.List added> = $r18;

     label02:
        $r1 = interfaceDiff#1.<android.net.LinkProperties$CompareResult: java.util.List added>;

        i$#2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke i$#2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r10 = interfaceinvoke i$#2.<java.util.Iterator: java.lang.Object next()>();

        iface#3 = (java.lang.String) $r10;

     label04:
        $r13 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding iface ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(iface#3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to network ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(netId);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r16);

        $r19 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r19.<android.os.INetworkManagementService: void addInterfaceToNetwork(java.lang.String,int)>(iface#3, netId);

     label05:
        goto label07;

     label06:
        $r23 := @caughtexception;

        e#4 = $r23;

        $r24 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception adding interface: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e#4);

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r27);

     label07:
        goto label03;

     label08:
        $r2 = interfaceDiff#1.<android.net.LinkProperties$CompareResult: java.util.List removed>;

        i$#5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke i$#5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r3 = interfaceinvoke i$#5.<java.util.Iterator: java.lang.Object next()>();

        iface#6 = (java.lang.String) $r3;

     label10:
        $r5 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing iface ");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(iface#6);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from network ");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(netId);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r8);

        $r11 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r11.<android.os.INetworkManagementService: void removeInterfaceFromNetwork(java.lang.String,int)>(iface#6, netId);

     label11:
        goto label13;

     label12:
        $r22 := @caughtexception;

        e#7 = $r22;

        $r20 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception removing interface: ");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e#7);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r26);

     label13:
        goto label09;

     label14:
        return;

        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label10 to label11 with label12;
    }

    private boolean updateRoutes(android.net.LinkProperties, android.net.LinkProperties, int)
    {
        com.android.server.ConnectivityService this;
        android.net.LinkProperties newLp, oldLp;
        int netId;
        android.net.LinkProperties$CompareResult $r0, routeDiff#1;
        java.util.List $r1, $r2, $r3, $r4, $r5, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Object $r6, $r13, $r24;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12, $r15, $r16, $r17, $r20, $r21, $r22, $r23, $r25, $r27, $r28, $r32, $r33, $r35, $r38, $r41, $r42, $r43, $r44, $r48;
        java.lang.String $r11, $r18, $r26, $r37, $r40, $r45;
        android.os.INetworkManagementService $r14, $r19, $r31;
        java.lang.Exception $r29, $r36, $r39, e#4, e#7, e#10;
        java.net.InetAddress $r34, $r47;
        android.net.IpPrefix $r46;
        java.util.Iterator i$#2, i$#5, i$#8;
        android.net.RouteInfo route#3, route#6, route#9;

        this := @this: com.android.server.ConnectivityService;

        newLp := @parameter0: android.net.LinkProperties;

        oldLp := @parameter1: android.net.LinkProperties;

        netId := @parameter2: int;

        $r0 = new android.net.LinkProperties$CompareResult;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r0.<android.net.LinkProperties$CompareResult: void <init>()>();

        routeDiff#1 = $r0;

        goto label01;

     label01:
        if newLp == null goto label02;

        $r30 = virtualinvoke newLp.<android.net.LinkProperties: java.util.List getAllRoutes()>();

        routeDiff#1.<android.net.LinkProperties$CompareResult: java.util.List added> = $r30;

     label02:
        $r1 = routeDiff#1.<android.net.LinkProperties$CompareResult: java.util.List added>;

        i$#2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke i$#2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r24 = interfaceinvoke i$#2.<java.util.Iterator: java.lang.Object next()>();

        route#3 = (android.net.RouteInfo) $r24;

        $z6 = virtualinvoke route#3.<android.net.RouteInfo: boolean hasGateway()>();

        if $z6 == 0 goto label04;

        goto label03;

     label04:
        $r22 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding Route [");

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(route#3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to network ");

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(netId);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r26);

     label05:
        $r31 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r31.<android.os.INetworkManagementService: void addRoute(int,android.net.RouteInfo)>(netId, route#3);

     label06:
        goto label09;

     label07:
        $r39 := @caughtexception;

        e#4 = $r39;

        $r46 = virtualinvoke route#3.<android.net.RouteInfo: android.net.IpPrefix getDestination()>();

        $r47 = virtualinvoke $r46.<android.net.IpPrefix: java.net.InetAddress getAddress()>();

        $z8 = $r47 instanceof java.net.Inet4Address;

        if $z8 != 0 goto label08;

        goto label09;

     label08:
        $r48 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in addRoute for non-gateway: ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e#4);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r45);

     label09:
        goto label03;

     label10:
        $r2 = routeDiff#1.<android.net.LinkProperties$CompareResult: java.util.List added>;

        i$#5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke i$#5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label18;

        $r13 = interfaceinvoke i$#5.<java.util.Iterator: java.lang.Object next()>();

        route#6 = (android.net.RouteInfo) $r13;

        $z5 = virtualinvoke route#6.<android.net.RouteInfo: boolean hasGateway()>();

        if $z5 != 0 goto label12;

        goto label11;

     label12:
        $r17 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding Route [");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(route#6);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to network ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(netId);

        $r18 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r18);

     label13:
        $r19 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r19.<android.os.INetworkManagementService: void addRoute(int,android.net.RouteInfo)>(netId, route#6);

     label14:
        goto label17;

     label15:
        $r29 := @caughtexception;

        e#7 = $r29;

        $r34 = virtualinvoke route#6.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $z7 = $r34 instanceof java.net.Inet4Address;

        if $z7 != 0 goto label16;

        goto label17;

     label16:
        $r33 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in addRoute for gateway: ");

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e#7);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r37);

     label17:
        goto label11;

     label18:
        $r3 = routeDiff#1.<android.net.LinkProperties$CompareResult: java.util.List removed>;

        i$#8 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label19:
        $z2 = interfaceinvoke i$#8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label24;

        $r6 = interfaceinvoke i$#8.<java.util.Iterator: java.lang.Object next()>();

        route#9 = (android.net.RouteInfo) $r6;

        $r8 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing Route [");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(route#9);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] from network ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(netId);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r11);

     label20:
        $r14 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r14.<android.os.INetworkManagementService: void removeRoute(int,android.net.RouteInfo)>(netId, route#9);

     label21:
        goto label23;

     label22:
        $r36 := @caughtexception;

        e#10 = $r36;

        $r35 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in removeRoute: ");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e#10);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r40);

     label23:
        goto label19;

     label24:
        $r4 = routeDiff#1.<android.net.LinkProperties$CompareResult: java.util.List added>;

        $z3 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label25;

        $r5 = routeDiff#1.<android.net.LinkProperties$CompareResult: java.util.List removed>;

        $z4 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z4 != 0 goto label26;

     label25:
        $z9 = 1;

        goto label27;

     label26:
        $z9 = 0;

     label27:
        return $z9;

        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label20 to label21 with label22;
    }

    private void updateDnses(android.net.LinkProperties, android.net.LinkProperties, int, boolean, boolean)
    {
        com.android.server.ConnectivityService this;
        android.net.LinkProperties newLp, oldLp;
        int netId, $i0, $i1, $i2;
        boolean flush, useDefaultDns, $z1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r17, $r18, $r20, $r22, $r23, $r27, $r30, tmp$1854447934, tmp$998632153, tmp$1233231089, tmp$1538560778;
        java.lang.String $r5, $r9, $r21, $r28, $r31;
        java.lang.String[] $r6;
        android.os.INetworkManagementService $r7, $r19;
        android.net.NetworkRequest $r8;
        android.util.SparseArray $r10;
        android.net.Network $r11;
        java.lang.Object $r12, dnses#1;
        java.net.InetAddress $r13, $r14;
        java.lang.Exception $r24, $r29, e#2, dnses#4;
        com.android.server.connectivity.NetworkAgentInfo e#3;
        java.util.ArrayList tmp$1443021884;
        java.util.Collection tmp$810312130, tmp$613703115, tmp$695078585, tmp$1409998612;

        this := @this: com.android.server.ConnectivityService;

        newLp := @parameter0: android.net.LinkProperties;

        oldLp := @parameter1: android.net.LinkProperties;

        netId := @parameter2: int;

        flush := @parameter3: boolean;

        useDefaultDns := @parameter4: boolean;

        goto label1;

     label1:
        dnses#1 = virtualinvoke newLp.<android.net.LinkProperties: java.util.List getDnsServers()>();

        tmp$810312130 = (java.util.Collection) dnses#1;

        $i0 = interfaceinvoke tmp$810312130.<java.util.Collection: int size()>();

        if $i0 != 0 goto label2;

        $r13 = this.<com.android.server.ConnectivityService: java.net.InetAddress mDefaultDns>;

        if $r13 == null goto label2;

        if useDefaultDns == 0 goto label2;

        tmp$1443021884 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1443021884.<java.util.ArrayList: void <init>()>();

        dnses#1 = tmp$1443021884;

        $r14 = this.<com.android.server.ConnectivityService: java.net.InetAddress mDefaultDns>;

        tmp$613703115 = (java.util.Collection) dnses#1;

        interfaceinvoke tmp$613703115.<java.util.Collection: boolean add(java.lang.Object)>($r14);

        tmp$1854447934 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1854447934.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke tmp$1854447934.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no dns provided for netId ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(netId);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", so using defaults");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r21);

     label2:
        tmp$998632153 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$998632153.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke tmp$998632153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting Dns servers for network ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(netId);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(dnses#1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r5);

     label3:
        $r7 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        tmp$695078585 = (java.util.Collection) dnses#1;

        $r6 = staticinvoke <android.net.NetworkUtils: java.lang.String[] makeStrings(java.util.Collection)>(tmp$695078585);

        $r9 = virtualinvoke newLp.<android.net.LinkProperties: java.lang.String getDomains()>();

        interfaceinvoke $r7.<android.os.INetworkManagementService: void setDnsServersForNetwork(int,java.lang.String[],java.lang.String)>(netId, $r6, $r9);

     label4:
        goto label6;

     label5:
        $r24 := @caughtexception;

        e#2 = $r24;

        tmp$1233231089 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke tmp$1233231089.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke tmp$1233231089.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in setDnsServersForNetwork: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e#2);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r28);

     label6:
        $r10 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r8 = this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $i1 = $r8.<android.net.NetworkRequest: int requestId>;

        $r12 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        e#3 = (com.android.server.connectivity.NetworkAgentInfo) $r12;

        if e#3 == null goto label7;

        $r11 = e#3.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i2 = $r11.<android.net.Network: int netId>;

        if $i2 != netId goto label7;

        tmp$1409998612 = (java.util.Collection) dnses#1;

        specialinvoke this.<com.android.server.ConnectivityService: void setDefaultDnsSystemProperties(java.util.Collection)>(tmp$1409998612);

     label7:
        specialinvoke this.<com.android.server.ConnectivityService: void flushVmDnsCache()>();

        goto label8;

     label8:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private void setDefaultDnsSystemProperties(java.util.Collection)
    {
        com.android.server.ConnectivityService this;
        java.util.Collection dnses;
        java.lang.String key, value, dns#5;
        boolean $z0;
        int $i0, last#1, i$#4;
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r5, $r6;
        java.lang.Object $r3;
        java.util.Iterator i$#2;
        java.net.InetAddress dns#3;

        this := @this: com.android.server.ConnectivityService;

        dnses := @parameter0: java.util.Collection;

        last#1 = 0;

        i$#2 = interfaceinvoke dnses.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$#2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke i$#2.<java.util.Iterator: java.lang.Object next()>();

        dns#3 = (java.net.InetAddress) $r3;

        last#1 = last#1 + 1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("net.dns");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(last#1);

        key = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        value = virtualinvoke dns#3.<java.net.InetAddress: java.lang.String getHostAddress()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>(key, value);

        goto label1;

     label2:
        i$#4 = last#1 + 1;

     label3:
        $i0 = this.<com.android.server.ConnectivityService: int mNumDnsEntries>;

        if i$#4 > $i0 goto label4;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("net.dns");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i$#4);

        dns#5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>(dns#5, "");

        i$#4 = i$#4 + 1;

        goto label3;

     label4:
        this.<com.android.server.ConnectivityService: int mNumDnsEntries> = last#1;

        return;
    }

    private void updateCapabilities(com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo networkAgent, l3;
        android.net.NetworkCapabilities networkCapabilities, $r0;
        java.lang.Throwable l4, $r2;
        boolean $z0;
        int $i0;

        this := @this: com.android.server.ConnectivityService;

        networkAgent := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        networkCapabilities := @parameter1: android.net.NetworkCapabilities;

        $r0 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r0, networkCapabilities);

        if $z0 != 0 goto label6;

        l3 = networkAgent;

        entermonitor networkAgent;

     label1:
        networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities> = networkCapabilities;

        exitmonitor l3;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        l4 = $r2;

        exitmonitor l3;

     label4:
        throw l4;

     label5:
        $i0 = virtualinvoke networkAgent.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        specialinvoke this.<com.android.server.ConnectivityService: void rematchAllNetworksAndRequests(com.android.server.connectivity.NetworkAgentInfo,int)>(networkAgent, $i0);

        virtualinvoke this.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(networkAgent, 524294);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void sendUpdatedScoreToFactories(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai;
        android.net.NetworkRequest nr;
        android.util.SparseArray $r0, $r1;
        int $i0, $i1, i#1;
        java.lang.Object $r2;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        i#1 = 0;

     label1:
        $r0 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $i0 = virtualinvoke $r0.<android.util.SparseArray: int size()>();

        if i#1 >= $i0 goto label4;

        $r1 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#1);

        nr = (android.net.NetworkRequest) $r2;

        $z0 = specialinvoke this.<com.android.server.ConnectivityService: boolean isRequest(android.net.NetworkRequest)>(nr);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $i1 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        specialinvoke this.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(android.net.NetworkRequest,int)>(nr, $i1);

     label3:
        i#1 = i#1 + 1;

        goto label1;

     label4:
        return;
    }

    private void sendUpdatedScoreToFactories(android.net.NetworkRequest, int)
    {
        com.android.server.ConnectivityService this;
        android.net.NetworkRequest networkRequest;
        int score;
        java.util.Iterator i$;
        com.android.server.ConnectivityService$NetworkFactoryInfo nfi;
        java.util.HashMap $r0;
        java.util.Collection $r1;
        boolean $z0;
        java.lang.Object $r2;
        com.android.internal.util.AsyncChannel $r3;

        this := @this: com.android.server.ConnectivityService;

        networkRequest := @parameter0: android.net.NetworkRequest;

        score := @parameter1: int;

        $r0 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkFactoryInfos>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.util.Collection values()>();

        i$ = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>();

        nfi = (com.android.server.ConnectivityService$NetworkFactoryInfo) $r2;

        $r3 = nfi.<com.android.server.ConnectivityService$NetworkFactoryInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r3.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(536576, score, 0, networkRequest);

        goto label1;

     label2:
        return;
    }

    private void sendPendingIntentForRequest(com.android.server.ConnectivityService$NetworkRequestInfo, com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService this;
        com.android.server.ConnectivityService$NetworkRequestInfo nri;
        com.android.server.connectivity.NetworkAgentInfo networkAgent;
        int notificationType;
        android.content.Intent intent, tmp$545470090;
        boolean $z0;
        android.net.Network $r1;
        android.net.NetworkRequest $r3;
        android.app.PendingIntent $r5;
        android.os.Parcelable tmp$219480929, tmp$2019208676;

        this := @this: com.android.server.ConnectivityService;

        nri := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        networkAgent := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        notificationType := @parameter2: int;

        if notificationType != 524290 goto label1;

        $z0 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: boolean mPendingIntentSent>;

        if $z0 != 0 goto label1;

        tmp$545470090 = new android.content.Intent;

        specialinvoke tmp$545470090.<android.content.Intent: void <init>()>();

        intent = tmp$545470090;

        $r1 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        tmp$219480929 = (android.os.Parcelable) $r1;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.extra.NETWORK", tmp$219480929);

        $r3 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        tmp$2019208676 = (android.os.Parcelable) $r3;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.extra.NETWORK_REQUEST", tmp$2019208676);

        nri.<com.android.server.ConnectivityService$NetworkRequestInfo: boolean mPendingIntentSent> = 1;

        $r5 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.app.PendingIntent mPendingIntent>;

        specialinvoke this.<com.android.server.ConnectivityService: void sendIntent(android.app.PendingIntent,android.content.Intent)>($r5, intent);

     label1:
        return;
    }

    private void sendIntent(android.app.PendingIntent, android.content.Intent)
    {
        com.android.server.ConnectivityService this;
        android.app.PendingIntent pendingIntent;
        android.content.Intent intent;
        android.app.PendingIntent$CanceledException e, $r6;
        android.os.PowerManager$WakeLock $r0, $r11;
        java.lang.StringBuilder $r2, $r3, $r8, $r9, tmp$1016423565, tmp$1195486456;
        java.lang.String $r4, $r10;
        android.content.Context $r5;
        android.app.PendingIntent$OnFinished tmp$1644281872;

        this := @this: com.android.server.ConnectivityService;

        pendingIntent := @parameter0: android.app.PendingIntent;

        intent := @parameter1: android.content.Intent;

        $r0 = this.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mPendingIntentWakeLock>;

        virtualinvoke $r0.<android.os.PowerManager$WakeLock: void acquire()>();

     label1:
        tmp$1016423565 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        specialinvoke tmp$1016423565.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke tmp$1016423565.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(pendingIntent);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r4);

        $r5 = this.<com.android.server.ConnectivityService: android.content.Context mContext>;

        tmp$1644281872 = (android.app.PendingIntent$OnFinished) this;

        virtualinvoke pendingIntent.<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)>($r5, 0, intent, tmp$1644281872, null);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        tmp$1195486456 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        specialinvoke tmp$1195486456.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke tmp$1195486456.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(pendingIntent);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not sent, it had been canceled.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r10);

        $r11 = this.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mPendingIntentWakeLock>;

        virtualinvoke $r11.<android.os.PowerManager$WakeLock: void release()>();

        virtualinvoke this.<com.android.server.ConnectivityService: void releasePendingNetworkRequest(android.app.PendingIntent)>(pendingIntent);

     label4:
        return;

        catch android.app.PendingIntent$CanceledException from label1 to label2 with label3;
    }

    public void onSendFinished(android.app.PendingIntent, android.content.Intent, int, java.lang.String, android.os.Bundle)
    {
        com.android.server.ConnectivityService this;
        android.app.PendingIntent pendingIntent;
        android.content.Intent intent;
        int resultCode;
        java.lang.String resultData, $r3;
        android.os.Bundle resultExtras;
        java.lang.StringBuilder $r0, $r1, $r2;
        android.os.PowerManager$WakeLock $r4;

        this := @this: com.android.server.ConnectivityService;

        pendingIntent := @parameter0: android.app.PendingIntent;

        intent := @parameter1: android.content.Intent;

        resultCode := @parameter2: int;

        resultData := @parameter3: java.lang.String;

        resultExtras := @parameter4: android.os.Bundle;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finished sending ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(pendingIntent);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r3);

        $r4 = this.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mPendingIntentWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void release()>();

        specialinvoke this.<com.android.server.ConnectivityService: void releasePendingNetworkRequestWithDelay(android.app.PendingIntent)>(pendingIntent);

        return;
    }

    private void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo, com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService this;
        com.android.server.ConnectivityService$NetworkRequestInfo nri;
        com.android.server.connectivity.NetworkAgentInfo networkAgent;
        int notificationType;
        android.os.Bundle bundle, tmp$1232356156;
        android.os.Message msg;
        android.os.RemoteException e, $r19;
        android.os.Messenger $r0, $r6;
        java.lang.Class $r2, $r7, $r10, $r14;
        java.lang.String $r3, $r9, $r13, $r17, $r22;
        android.net.NetworkRequest $r5, $r20, tmp$2072009750;
        android.net.LinkProperties $r11, tmp$395508885;
        android.net.NetworkCapabilities $r15, tmp$1129737137;
        android.net.Network $r16;
        java.lang.StringBuilder $r21, $r23, tmp$1983995504;
        android.os.Parcelable tmp$71763178, tmp$1512353179, tmp$122290547, tmp$135716487;

        this := @this: com.android.server.ConnectivityService;

        nri := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        networkAgent := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        notificationType := @parameter2: int;

        $r0 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.os.Messenger messenger>;

        if $r0 != null goto label01;

        return;

     label01:
        tmp$1232356156 = new android.os.Bundle;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke tmp$1232356156.<android.os.Bundle: void <init>()>();

        bundle = tmp$1232356156;

        $r2 = class "android/net/NetworkRequest";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        tmp$2072009750 = new android.net.NetworkRequest;

        $r5 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        specialinvoke tmp$2072009750.<android.net.NetworkRequest: void <init>(android.net.NetworkRequest)>($r5);

        tmp$71763178 = (android.os.Parcelable) tmp$2072009750;

        virtualinvoke bundle.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>($r3, tmp$71763178);

        msg = staticinvoke <android.os.Message: android.os.Message obtain()>();

        if notificationType == 524293 goto label02;

        if notificationType == 524296 goto label02;

        $r14 = class "android/net/Network";

        $r17 = virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>();

        $r16 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        tmp$1512353179 = (android.os.Parcelable) $r16;

        virtualinvoke bundle.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>($r17, tmp$1512353179);

     label02:
        tableswitch(notificationType)
        {
            case 524291: goto label03;
            case 524292: goto label06;
            case 524293: goto label06;
            case 524294: goto label04;
            case 524295: goto label05;
            default: goto label06;
        };

     label03:
        msg.<android.os.Message: int arg1> = 30000;

        goto label06;

     label04:
        $r10 = class "android/net/NetworkCapabilities";

        $r13 = virtualinvoke $r10.<java.lang.Class: java.lang.String getSimpleName()>();

        tmp$1129737137 = new android.net.NetworkCapabilities;

        $r15 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke tmp$1129737137.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>($r15);

        tmp$122290547 = (android.os.Parcelable) tmp$1129737137;

        virtualinvoke bundle.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>($r13, tmp$122290547);

        goto label06;

     label05:
        $r7 = class "android/net/LinkProperties";

        $r9 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        tmp$395508885 = new android.net.LinkProperties;

        $r11 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke tmp$395508885.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r11);

        tmp$135716487 = (android.os.Parcelable) tmp$395508885;

        virtualinvoke bundle.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>($r9, tmp$135716487);

     label06:
        msg.<android.os.Message: int what> = notificationType;

        virtualinvoke msg.<android.os.Message: void setData(android.os.Bundle)>(bundle);

     label07:
        $r6 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.os.Messenger messenger>;

        virtualinvoke $r6.<android.os.Messenger: void send(android.os.Message)>(msg);

     label08:
        goto label10;

     label09:
        $r19 := @caughtexception;

        tmp$1983995504 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke tmp$1983995504.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke tmp$1983995504.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException caught trying to send a callback msg for ");

        $r20 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r22);

     label10:
        return;

        catch android.os.RemoteException from label07 to label08 with label09;
    }

    private void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai;
        android.net.NetworkRequest nr;
        android.util.SparseArray $r0, $r2;
        int $i0, i#1;
        com.android.internal.util.AsyncChannel $r1;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        i#1 = 0;

     label1:
        $r0 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $i0 = virtualinvoke $r0.<android.util.SparseArray: int size()>();

        if i#1 >= $i0 goto label4;

        $r2 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#1);

        nr = (android.net.NetworkRequest) $r3;

        $z0 = specialinvoke this.<com.android.server.ConnectivityService: boolean isRequest(android.net.NetworkRequest)>(nr);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead network still had at least ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(nr);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r7);

        goto label4;

     label3:
        i#1 = i#1 + 1;

        goto label1;

     label4:
        $r1 = nai.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r1.<com.android.internal.util.AsyncChannel: void disconnect()>();

        return;
    }

    private void handleLingerComplete(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo oldNetwork;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4;

        this := @this: com.android.server.ConnectivityService;

        oldNetwork := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        if oldNetwork != null goto label1;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Unknown NetworkAgentInfo in handleLingerComplete");

        return;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleLingerComplete for ");

        $r2 = virtualinvoke oldNetwork.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r4);

        specialinvoke this.<com.android.server.ConnectivityService: void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)>(oldNetwork);

        return;
    }

    private void makeDefault(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo newNetwork;
        java.lang.Exception e, $r10;
        java.lang.StringBuilder $r0, $r1, $r2, $r11, $r12, $r13;
        java.lang.String $r3, $r14;
        android.net.Network $r4;
        int $i0;
        android.os.INetworkManagementService $r5;
        android.net.LinkProperties $r6, $r8;
        android.net.ProxyInfo $r7;
        java.util.List $r9;

        this := @this: com.android.server.ConnectivityService;

        newNetwork := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r0 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Switching to new default network: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(newNetwork);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r3);

        specialinvoke this.<com.android.server.ConnectivityService: void setupDataActivityTracking(com.android.server.connectivity.NetworkAgentInfo)>(newNetwork);

     label1:
        $r5 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r4 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i0 = $r4.<android.net.Network: int netId>;

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setDefaultNetId(int)>($i0);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        e = $r10;

        $r11 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception setting default network :");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r14);

     label4:
        specialinvoke this.<com.android.server.ConnectivityService: void notifyLockdownVpn(com.android.server.connectivity.NetworkAgentInfo)>(newNetwork);

        $r6 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $r7 = virtualinvoke $r6.<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()>();

        specialinvoke this.<com.android.server.ConnectivityService: void handleApplyDefaultProxy(android.net.ProxyInfo)>($r7);

        specialinvoke this.<com.android.server.ConnectivityService: void updateTcpBufferSizes(com.android.server.connectivity.NetworkAgentInfo)>(newNetwork);

        $r8 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $r9 = virtualinvoke $r8.<android.net.LinkProperties: java.util.List getDnsServers()>();

        specialinvoke this.<com.android.server.ConnectivityService: void setDefaultDnsSystemProperties(java.util.Collection)>($r9);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void rematchNetworkAndRequests(com.android.server.connectivity.NetworkAgentInfo, com.android.server.ConnectivityService$NascentState, com.android.server.ConnectivityService$ReapUnvalidatedNetworks)
    {
        com.android.server.ConnectivityService this, i$#9;
        com.android.server.connectivity.NetworkAgentInfo newNetwork, oldDefaultNetwork#3, currentNetwork#6, nri#8, nri#20;
        com.android.server.ConnectivityService$NascentState nascent, $r0, $r9;
        com.android.server.ConnectivityService$ReapUnvalidatedNetworks reapUnvalidatedNetworks, $r11;
        java.util.ArrayList affectedNetworks, $r7, $r62;
        android.net.LinkProperties stacked, $r19, $r22;
        java.lang.String stackedIface, $r2, $r4, $r16, $r17, $r56, $r58, $r69, $r70, currentNetwork#14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z12, $z13, $z14, $z15, $z18, keep#1, isNewDefault#2;
        java.lang.StringBuilder $r1, $r3, $r5, $r14, $r15, $r18, $r47, $r55, $r57, $r59, $r60, $r63, $r64, $r66, $r67, $r68;
        java.util.HashMap $r6, $r10;
        java.util.Collection $r8, $r13;
        java.lang.Object $r12, $r25, $r27, $r38, $r41, $r44;
        android.net.NetworkInfo $r20, $r29, $r31;
        java.util.List $r21;
        com.android.server.ConnectivityService$LegacyTypeTracker $r23, $r28, $r30, $r32;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, nri#13, i$#17;
        android.util.SparseArray $r24, $r26, $r43, $r45, $r52;
        com.android.server.ConnectivityService$InternalHandler $r33, $r34;
        android.os.Message $r35;
        android.os.PowerManager$WakeLock $r37;
        com.android.server.connectivity.NetworkMonitor $r39;
        android.net.NetworkRequest $r40, $r42, $r46, $r48, $r49, $r50, $r51, $r53, $r54, $r61, $r65, nri#18;
        java.lang.Throwable $r71, i$#10;
        android.os.RemoteException $r72, i$#16;
        java.util.Iterator i$#4, i$#7, i$#15, i$#19;
        com.android.server.ConnectivityService$NetworkRequestInfo nri#5;
        byte $b15;
        com.android.internal.app.IBatteryStats i$#12;

        this := @this: com.android.server.ConnectivityService;

        newNetwork := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        nascent := @parameter1: com.android.server.ConnectivityService$NascentState;

        reapUnvalidatedNetworks := @parameter2: com.android.server.ConnectivityService$ReapUnvalidatedNetworks;

        $z0 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: boolean created>;

        if $z0 != 0 goto label01;

        return;

     label01:
        $r0 = <com.android.server.ConnectivityService$NascentState: com.android.server.ConnectivityService$NascentState JUST_VALIDATED>;

        if nascent != $r0 goto label02;

        $z18 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: boolean everValidated>;

        if $z18 != 0 goto label02;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

     label02:
        keep#1 = virtualinvoke newNetwork.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        isNewDefault#2 = 0;

        oldDefaultNetwork#3 = null;

        $r1 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rematching ");

        $r2 = virtualinvoke newNetwork.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r4);

        $r7 = new java.util.ArrayList;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        affectedNetworks = $r7;

        $r6 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.util.Collection values()>();

        i$#4 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke i$#4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r38 = interfaceinvoke i$#4.<java.util.Iterator: java.lang.Object next()>();

        nri#5 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r38;

        $r45 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r40 = nri#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i6 = $r40.<android.net.NetworkRequest: int requestId>;

        $r44 = virtualinvoke $r45.<android.util.SparseArray: java.lang.Object get(int)>($i6);

        currentNetwork#6 = (com.android.server.connectivity.NetworkAgentInfo) $r44;

        if newNetwork != currentNetwork#6 goto label04;

        $r60 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Network ");

        $r69 = virtualinvoke newNetwork.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r68 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was already satisfying");

        $r66 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" request ");

        $r65 = nri#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i14 = $r65.<android.net.NetworkRequest: int requestId>;

        $r64 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". No change.");

        $r70 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r70);

        keep#1 = 1;

        goto label03;

     label04:
        $r46 = nri#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z15 = virtualinvoke newNetwork.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfies(android.net.NetworkRequest)>($r46);

        if $z15 == 0 goto label09;

        $z14 = nri#5.<com.android.server.ConnectivityService$NetworkRequestInfo: boolean isRequest>;

        if $z14 != 0 goto label05;

        $r61 = nri#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke newNetwork.<com.android.server.connectivity.NetworkAgentInfo: void addRequest(android.net.NetworkRequest)>($r61);

        goto label03;

     label05:
        if currentNetwork#6 == null goto label06;

        $i13 = virtualinvoke currentNetwork#6.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        $i12 = virtualinvoke newNetwork.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        if $i13 >= $i12 goto label09;

     label06:
        if currentNetwork#6 == null goto label07;

        $r47 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   accepting network in place of ");

        $r58 = virtualinvoke currentNetwork#6.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r55 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r56);

        $r52 = currentNetwork#6.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r54 = nri#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i11 = $r54.<android.net.NetworkRequest: int requestId>;

        virtualinvoke $r52.<android.util.SparseArray: void remove(int)>($i11);

        $r62 = currentNetwork#6.<com.android.server.connectivity.NetworkAgentInfo: java.util.ArrayList networkLingered>;

        $r53 = nri#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r62.<java.util.ArrayList: boolean add(java.lang.Object)>($r53);

        virtualinvoke affectedNetworks.<java.util.ArrayList: boolean add(java.lang.Object)>(currentNetwork#6);

        goto label08;

     label07:
        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

     label08:
        specialinvoke this.<com.android.server.ConnectivityService: void unlinger(com.android.server.connectivity.NetworkAgentInfo)>(newNetwork);

        $r43 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r42 = nri#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i7 = $r42.<android.net.NetworkRequest: int requestId>;

        virtualinvoke $r43.<android.util.SparseArray: void put(int,java.lang.Object)>($i7, newNetwork);

        $r50 = nri#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke newNetwork.<com.android.server.connectivity.NetworkAgentInfo: void addRequest(android.net.NetworkRequest)>($r50);

        keep#1 = 1;

        $r51 = nri#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i10 = virtualinvoke newNetwork.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        specialinvoke this.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(android.net.NetworkRequest,int)>($r51, $i10);

        $r49 = this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $i8 = $r49.<android.net.NetworkRequest: int requestId>;

        $r48 = nri#5.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i9 = $r48.<android.net.NetworkRequest: int requestId>;

        if $i8 != $i9 goto label09;

        isNewDefault#2 = 1;

        oldDefaultNetwork#3 = currentNetwork#6;

     label09:
        goto label03;

     label10:
        i$#7 = virtualinvoke affectedNetworks.<java.util.ArrayList: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke i$#7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r41 = interfaceinvoke i$#7.<java.util.Iterator: java.lang.Object next()>();

        nri#8 = (com.android.server.connectivity.NetworkAgentInfo) $r41;

        $z13 = nri#8.<com.android.server.connectivity.NetworkAgentInfo: boolean everValidated>;

        if $z13 == 0 goto label12;

        $z12 = specialinvoke this.<com.android.server.ConnectivityService: boolean unneeded(com.android.server.connectivity.NetworkAgentInfo)>(nri#8);

        if $z12 == 0 goto label12;

        $r39 = nri#8.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.NetworkMonitor networkMonitor>;

        virtualinvoke $r39.<com.android.server.connectivity.NetworkMonitor: void sendMessage(int)>(532483);

        virtualinvoke this.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(nri#8, 524291);

        goto label13;

     label12:
        specialinvoke this.<com.android.server.ConnectivityService: void unlinger(com.android.server.connectivity.NetworkAgentInfo)>(nri#8);

     label13:
        goto label11;

     label14:
        if keep#1 == 0 goto label32;

        if isNewDefault#2 == 0 goto label20;

        specialinvoke this.<com.android.server.ConnectivityService: void makeDefault(com.android.server.connectivity.NetworkAgentInfo)>(newNetwork);

        i$#9 = this;

        entermonitor this;

     label15:
        $r37 = this.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        $z10 = virtualinvoke $r37.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z10 == 0 goto label16;

        $r34 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r33 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i5 = this.<com.android.server.ConnectivityService: int mNetTransitionWakeLockSerialNumber>;

        $r35 = virtualinvoke $r33.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(8, $i5, 0);

        virtualinvoke $r34.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r35, 1000L);

     label16:
        exitmonitor i$#9;

     label17:
        goto label20;

     label18:
        $r71 := @caughtexception;

        i$#10 = $r71;

        exitmonitor i$#9;

     label19:
        throw i$#10;

     label20:
        virtualinvoke this.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(newNetwork, 524290);

        if isNewDefault#2 == 0 goto label24;

        if oldDefaultNetwork#3 == null goto label21;

        $r30 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $r29 = oldDefaultNetwork#3.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $i3 = virtualinvoke $r29.<android.net.NetworkInfo: int getType()>();

        virtualinvoke $r30.<com.android.server.ConnectivityService$LegacyTypeTracker: void remove(int,com.android.server.connectivity.NetworkAgentInfo)>($i3, oldDefaultNetwork#3);

     label21:
        $z9 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: boolean everValidated>;

        if $z9 == 0 goto label22;

        $b15 = 100;

        goto label23;

     label22:
        $b15 = 0;

     label23:
        this.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = $b15;

        $r32 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $r31 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $i4 = virtualinvoke $r31.<android.net.NetworkInfo: int getType()>();

        virtualinvoke $r32.<com.android.server.ConnectivityService$LegacyTypeTracker: void add(int,com.android.server.connectivity.NetworkAgentInfo)>($i4, newNetwork);

        specialinvoke this.<com.android.server.ConnectivityService: void notifyLockdownVpn(com.android.server.connectivity.NetworkAgentInfo)>(newNetwork);

     label24:
        i$#12 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        $r20 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        nri#13 = virtualinvoke $r20.<android.net.NetworkInfo: int getType()>();

        $r19 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        currentNetwork#14 = virtualinvoke $r19.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        interfaceinvoke i$#12.<com.android.internal.app.IBatteryStats: void noteNetworkInterfaceType(java.lang.String,int)>(currentNetwork#14, nri#13);

        $r22 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $r21 = virtualinvoke $r22.<android.net.LinkProperties: java.util.List getStackedLinks()>();

        i$#15 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label25:
        $z6 = interfaceinvoke i$#15.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label26;

        $r27 = interfaceinvoke i$#15.<java.util.Iterator: java.lang.Object next()>();

        stacked = (android.net.LinkProperties) $r27;

        stackedIface = virtualinvoke stacked.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        interfaceinvoke i$#12.<com.android.internal.app.IBatteryStats: void noteNetworkInterfaceType(java.lang.String,int)>(stackedIface, nri#13);

        staticinvoke <com.android.internal.net.NetworkStatsFactory: void noteStackedIface(java.lang.String,java.lang.String)>(stackedIface, currentNetwork#14);

        goto label25;

     label26:
        goto label28;

     label27:
        $r72 := @caughtexception;

     label28:
        i$#17 = 0;

     label29:
        $r24 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $i0 = virtualinvoke $r24.<android.util.SparseArray: int size()>();

        if i$#17 >= $i0 goto label31;

        $r26 = newNetwork.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r25 = virtualinvoke $r26.<android.util.SparseArray: java.lang.Object valueAt(int)>(i$#17);

        nri#18 = (android.net.NetworkRequest) $r25;

        $i1 = nri#18.<android.net.NetworkRequest: int legacyType>;

        if $i1 == -1 goto label30;

        $z8 = specialinvoke this.<com.android.server.ConnectivityService: boolean isRequest(android.net.NetworkRequest)>(nri#18);

        if $z8 == 0 goto label30;

        $r28 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $i2 = nri#18.<android.net.NetworkRequest: int legacyType>;

        virtualinvoke $r28.<com.android.server.ConnectivityService$LegacyTypeTracker: void add(int,com.android.server.connectivity.NetworkAgentInfo)>($i2, newNetwork);

     label30:
        i$#17 = i$#17 + 1;

        goto label29;

     label31:
        $z7 = virtualinvoke newNetwork.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z7 == 0 goto label33;

        $r23 = this.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r23.<com.android.server.ConnectivityService$LegacyTypeTracker: void add(int,com.android.server.connectivity.NetworkAgentInfo)>(17, newNetwork);

        goto label33;

     label32:
        $r9 = <com.android.server.ConnectivityService$NascentState: com.android.server.ConnectivityService$NascentState JUST_VALIDATED>;

        if nascent != $r9 goto label33;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke this.<com.android.server.ConnectivityService: void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)>(newNetwork);

     label33:
        $r11 = <com.android.server.ConnectivityService$ReapUnvalidatedNetworks: com.android.server.ConnectivityService$ReapUnvalidatedNetworks REAP>;

        if reapUnvalidatedNetworks != $r11 goto label36;

        $r10 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r13 = virtualinvoke $r10.<java.util.HashMap: java.util.Collection values()>();

        i$#19 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label34:
        $z3 = interfaceinvoke i$#19.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label36;

        $r12 = interfaceinvoke i$#19.<java.util.Iterator: java.lang.Object next()>();

        nri#20 = (com.android.server.connectivity.NetworkAgentInfo) $r12;

        $z4 = nri#20.<com.android.server.connectivity.NetworkAgentInfo: boolean everValidated>;

        if $z4 != 0 goto label35;

        $z5 = specialinvoke this.<com.android.server.ConnectivityService: boolean unneeded(com.android.server.connectivity.NetworkAgentInfo)>(nri#20);

        if $z5 == 0 goto label35;

        $r14 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reaping ");

        $r17 = virtualinvoke nri#20.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r16);

        specialinvoke this.<com.android.server.ConnectivityService: void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)>(nri#20);

     label35:
        goto label34;

     label36:
        return;

        catch java.lang.Throwable from label15 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch android.os.RemoteException from label24 to label26 with label27;
    }

    private void rematchAllNetworksAndRequests(com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo changed, $r3;
        int oldScore, $i0;
        java.util.Iterator i;
        java.util.HashMap $r0;
        java.util.Collection $r1;
        boolean $z0, $z1;
        java.lang.Object $r2;
        com.android.server.ConnectivityService$NascentState $r4, $r6;
        com.android.server.ConnectivityService$ReapUnvalidatedNetworks $r5, $r7;

        this := @this: com.android.server.ConnectivityService;

        changed := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        oldScore := @parameter1: int;

        if changed == null goto label1;

        $i0 = virtualinvoke changed.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        if oldScore >= $i0 goto label1;

        $r6 = <com.android.server.ConnectivityService$NascentState: com.android.server.ConnectivityService$NascentState NOT_JUST_VALIDATED>;

        $r5 = <com.android.server.ConnectivityService$ReapUnvalidatedNetworks: com.android.server.ConnectivityService$ReapUnvalidatedNetworks REAP>;

        specialinvoke this.<com.android.server.ConnectivityService: void rematchNetworkAndRequests(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$NascentState,com.android.server.ConnectivityService$ReapUnvalidatedNetworks)>(changed, $r6, $r5);

        goto label5;

     label1:
        $r0 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.util.Collection values()>();

        i = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.android.server.connectivity.NetworkAgentInfo) $r2;

        $r4 = <com.android.server.ConnectivityService$NascentState: com.android.server.ConnectivityService$NascentState NOT_JUST_VALIDATED>;

        $z1 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = <com.android.server.ConnectivityService$ReapUnvalidatedNetworks: com.android.server.ConnectivityService$ReapUnvalidatedNetworks DONT_REAP>;

        goto label4;

     label3:
        $r7 = <com.android.server.ConnectivityService$ReapUnvalidatedNetworks: com.android.server.ConnectivityService$ReapUnvalidatedNetworks REAP>;

     label4:
        specialinvoke this.<com.android.server.ConnectivityService: void rematchNetworkAndRequests(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$NascentState,com.android.server.ConnectivityService$ReapUnvalidatedNetworks)>($r3, $r4, $r7);

        goto label2;

     label5:
        return;
    }

    private void updateInetCondition(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai;
        byte newInetCondition, $b1;
        boolean $z0, $z1, $z2;
        int $i0;
        android.net.NetworkInfo $r0;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $z0 = nai.<com.android.server.connectivity.NetworkAgentInfo: boolean everValidated>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = specialinvoke this.<com.android.server.ConnectivityService: boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)>(nai);

        if $z1 != 0 goto label2;

        return;

     label2:
        $z2 = nai.<com.android.server.connectivity.NetworkAgentInfo: boolean lastValidated>;

        if $z2 == 0 goto label3;

        $b1 = 100;

        goto label4;

     label3:
        $b1 = 0;

     label4:
        newInetCondition = $b1;

        $i0 = this.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished>;

        if newInetCondition != $i0 goto label5;

        return;

     label5:
        this.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = newInetCondition;

        $r0 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        specialinvoke this.<com.android.server.ConnectivityService: void sendInetConditionBroadcast(android.net.NetworkInfo)>($r0);

        return;
    }

    private void notifyLockdownVpn(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai;
        com.android.server.net.LockdownVpnTracker $r0, $r1, $r3;
        boolean $z0;
        android.net.NetworkInfo $r2;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r0 = this.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        if $r0 == null goto label2;

        if nai == null goto label1;

        $z0 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z0 == 0 goto label1;

        $r3 = this.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        $r2 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        virtualinvoke $r3.<com.android.server.net.LockdownVpnTracker: void onVpnStateChanged(android.net.NetworkInfo)>($r2);

        goto label2;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        virtualinvoke $r1.<com.android.server.net.LockdownVpnTracker: void onNetworkInfoChanged()>();

     label2:
        return;
    }

    private void updateNetworkInfo(com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo networkAgent, e#2;
        android.net.NetworkInfo newInfo, oldInfo#3;
        android.net.NetworkInfo$State state, $r8, $r11, $r15, $r32;
        java.lang.Throwable l6, l7, l8, $r31, $r39, $r43;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r7, $r34, $r35, $r37, $r40, $r41;
        java.lang.String $r2, $r9, $r38, $r42;
        com.android.internal.util.AsyncChannel $r10;
        java.lang.Object $r12, $r22, $r44, e#8, e#9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.net.ProxyInfo $r13, $r14, $r16, $r25, $r26;
        android.net.Network $r17, $r23, $r33;
        int $i0, $i1, $i2;
        com.android.server.ConnectivityService$ReapUnvalidatedNetworks $r18;
        android.os.INetworkManagementService $r19, $r28;
        com.android.server.connectivity.NetworkMonitor $r20;
        com.android.server.ConnectivityService$NascentState $r21;
        android.net.LinkProperties $r24;
        java.util.List $r27;
        android.net.NetworkMisc $r29, $r30;
        java.lang.Exception $r36, e#7;

        this := @this: com.android.server.ConnectivityService;

        networkAgent := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        newInfo := @parameter1: android.net.NetworkInfo;

        state = virtualinvoke newInfo.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

        e#2 = networkAgent;

        entermonitor networkAgent;

     label01:
        oldInfo#3 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo> = newInfo;

        exitmonitor e#2;

     label02:
        goto label05;

     label03:
        $r39 := @caughtexception;

        l6 = $r39;

        exitmonitor e#2;

     label04:
        throw l6;

     label05:
        specialinvoke this.<com.android.server.ConnectivityService: void notifyLockdownVpn(com.android.server.connectivity.NetworkAgentInfo)>(networkAgent);

        if oldInfo#3 == null goto label06;

        $r32 = virtualinvoke oldInfo#3.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

        if $r32 != state goto label06;

        return;

     label06:
        $r1 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke networkAgent.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EVENT_NETWORK_INFO_CHANGED, going from ");

        if oldInfo#3 != null goto label07;

        $r44 = "null";

        goto label08;

     label07:
        $r44 = virtualinvoke oldInfo#3.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

     label08:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(state);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

        $r8 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State CONNECTED>;

        if state != $r8 goto label25;

        $z2 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: boolean created>;

        if $z2 != 0 goto label25;

     label09:
        $z3 = virtualinvoke networkAgent.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z3 == 0 goto label15;

        $r28 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r23 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i1 = $r23.<android.net.Network: int netId>;

        $r24 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $r27 = virtualinvoke $r24.<android.net.LinkProperties: java.util.List getDnsServers()>();

        $z6 = interfaceinvoke $r27.<java.util.List: boolean isEmpty()>();

        if $z6 != 0 goto label10;

        $z8 = 1;

        goto label11;

     label10:
        $z8 = 0;

     label11:
        $r30 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMisc networkMisc>;

        if $r30 == null goto label12;

        $r29 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMisc networkMisc>;

        $z7 = $r29.<android.net.NetworkMisc: boolean allowBypass>;

        if $z7 != 0 goto label13;

     label12:
        $z9 = 1;

        goto label14;

     label13:
        $z9 = 0;

     label14:
        interfaceinvoke $r28.<android.os.INetworkManagementService: void createVirtualNetwork(int,boolean,boolean)>($i1, $z8, $z9);

        goto label16;

     label15:
        $r19 = this.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r17 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i0 = $r17.<android.net.Network: int netId>;

        interfaceinvoke $r19.<android.os.INetworkManagementService: void createPhysicalNetwork(int)>($i0);

     label16:
        goto label18;

     label17:
        $r36 := @caughtexception;

        e#7 = $r36;

        $r35 = new java.lang.StringBuilder;

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error creating network ");

        $r33 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i2 = $r33.<android.net.Network: int netId>;

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r42 = virtualinvoke e#7.<java.lang.Exception: java.lang.String getMessage()>();

        $r37 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r38);

        return;

     label18:
        networkAgent.<com.android.server.connectivity.NetworkAgentInfo: boolean created> = 1;

        specialinvoke this.<com.android.server.ConnectivityService: void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)>(networkAgent, null);

        specialinvoke this.<com.android.server.ConnectivityService: void notifyIfacesChanged()>();

        virtualinvoke this.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(networkAgent, 524289);

        $r20 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.NetworkMonitor networkMonitor>;

        virtualinvoke $r20.<com.android.server.connectivity.NetworkMonitor: void sendMessage(int)>(532481);

        $z4 = virtualinvoke networkAgent.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z4 == 0 goto label24;

        $r22 = this.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        e#8 = $r22;

        entermonitor $r22;

     label19:
        $z5 = this.<com.android.server.ConnectivityService: boolean mDefaultProxyDisabled>;

        if $z5 != 0 goto label20;

        this.<com.android.server.ConnectivityService: boolean mDefaultProxyDisabled> = 1;

        $r25 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        if $r25 != null goto label20;

        $r26 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mDefaultProxy>;

        if $r26 == null goto label20;

        specialinvoke this.<com.android.server.ConnectivityService: void sendProxyBroadcast(android.net.ProxyInfo)>(null);

     label20:
        exitmonitor e#8;

     label21:
        goto label24;

     label22:
        $r31 := @caughtexception;

        l7 = $r31;

        exitmonitor e#8;

     label23:
        throw l7;

     label24:
        $r21 = <com.android.server.ConnectivityService$NascentState: com.android.server.ConnectivityService$NascentState NOT_JUST_VALIDATED>;

        $r18 = <com.android.server.ConnectivityService$ReapUnvalidatedNetworks: com.android.server.ConnectivityService$ReapUnvalidatedNetworks REAP>;

        specialinvoke this.<com.android.server.ConnectivityService: void rematchNetworkAndRequests(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$NascentState,com.android.server.ConnectivityService$ReapUnvalidatedNetworks)>(networkAgent, $r21, $r18);

        goto label32;

     label25:
        $r11 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State DISCONNECTED>;

        if state == $r11 goto label26;

        $r15 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State SUSPENDED>;

        if state != $r15 goto label32;

     label26:
        $r10 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r10.<com.android.internal.util.AsyncChannel: void disconnect()>();

        $z0 = virtualinvoke networkAgent.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z0 == 0 goto label32;

        $r12 = this.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        e#9 = $r12;

        entermonitor $r12;

     label27:
        $z1 = this.<com.android.server.ConnectivityService: boolean mDefaultProxyDisabled>;

        if $z1 == 0 goto label28;

        this.<com.android.server.ConnectivityService: boolean mDefaultProxyDisabled> = 0;

        $r14 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mGlobalProxy>;

        if $r14 != null goto label28;

        $r13 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mDefaultProxy>;

        if $r13 == null goto label28;

        $r16 = this.<com.android.server.ConnectivityService: android.net.ProxyInfo mDefaultProxy>;

        specialinvoke this.<com.android.server.ConnectivityService: void sendProxyBroadcast(android.net.ProxyInfo)>($r16);

     label28:
        exitmonitor e#9;

     label29:
        goto label32;

     label30:
        $r43 := @caughtexception;

        l8 = $r43;

        exitmonitor e#9;

     label31:
        throw l8;

     label32:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Exception from label09 to label16 with label17;
        catch java.lang.Throwable from label19 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
        catch java.lang.Throwable from label27 to label29 with label30;
        catch java.lang.Throwable from label30 to label31 with label30;
    }

    private void updateNetworkScore(com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai;
        int oldScore, score#1;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r14;
        java.lang.String $r2, $r6, $r9, $r13;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        score#1 := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateNetworkScore for ");

        $r2 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(score#1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r6);

        if score#1 >= 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateNetworkScore for ");

        $r9 = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" got a negative score (");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(score#1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").  Bumping score to min of 0");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r13);

        score#1 = 0;

     label1:
        oldScore = virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        virtualinvoke nai.<com.android.server.connectivity.NetworkAgentInfo: void setCurrentScore(int)>(score#1);

        specialinvoke this.<com.android.server.ConnectivityService: void rematchAllNetworksAndRequests(com.android.server.connectivity.NetworkAgentInfo,int)>(nai, oldScore);

        specialinvoke this.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(com.android.server.connectivity.NetworkAgentInfo)>(nai);

        return;
    }

    protected void notifyNetworkCallback(com.android.server.connectivity.NetworkAgentInfo, com.android.server.ConnectivityService$NetworkRequestInfo)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai;
        com.android.server.ConnectivityService$NetworkRequestInfo nri;
        int notifyType;
        android.app.PendingIntent $r0;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        nri := @parameter1: com.android.server.ConnectivityService$NetworkRequestInfo;

        $r0 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.app.PendingIntent mPendingIntent>;

        if $r0 != null goto label1;

        specialinvoke this.<com.android.server.ConnectivityService: void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int)>(nri, nai, 524290);

        goto label2;

     label1:
        specialinvoke this.<com.android.server.ConnectivityService: void sendPendingIntentForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int)>(nri, nai, 524290);

     label2:
        return;
    }

    private void sendLegacyNetworkBroadcast(com.android.server.connectivity.NetworkAgentInfo, boolean, int)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo nai, newDefaultAgent#1;
        boolean connected, $z0;
        int type, $i0, $i1, $i2, $i3;
        android.net.NetworkInfo info, $r1, $r14, $r18, $r28, tmp$1966964007;
        android.content.Intent intent, immediateIntent, tmp$1799589925, tmp$642583859;
        android.net.NetworkInfo$DetailedState $r2, $r29;
        java.lang.String $r3, $r7, $r9, $r21, $r26, $r27;
        android.net.NetworkRequest $r8, $r16;
        android.util.SparseArray $r10, $r19;
        java.lang.Object $r11, $r20;
        android.os.Parcelable tmp$1754543106, tmp$784005201;

        this := @this: com.android.server.ConnectivityService;

        nai := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        connected := @parameter1: boolean;

        type := @parameter2: int;

        tmp$1966964007 = new android.net.NetworkInfo;

        $r1 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        specialinvoke tmp$1966964007.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r1);

        info = tmp$1966964007;

        virtualinvoke info.<android.net.NetworkInfo: void setType(int)>(type);

        if connected == 0 goto label1;

        $r29 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        $r27 = virtualinvoke info.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke info.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r29, null, $r27);

        virtualinvoke this.<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)>(info);

        goto label7;

     label1:
        $r2 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        $r3 = virtualinvoke info.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke info.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r2, null, $r3);

        tmp$1799589925 = new android.content.Intent;

        specialinvoke tmp$1799589925.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE");

        intent = tmp$1799589925;

        tmp$1754543106 = (android.os.Parcelable) info;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("networkInfo", tmp$1754543106);

        $i0 = virtualinvoke info.<android.net.NetworkInfo: int getType()>();

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("networkType", $i0);

        $z0 = virtualinvoke info.<android.net.NetworkInfo: boolean isFailover()>();

        if $z0 == 0 goto label2;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("isFailover", 1);

        $r28 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        virtualinvoke $r28.<android.net.NetworkInfo: void setFailover(boolean)>(0);

     label2:
        $r7 = virtualinvoke info.<android.net.NetworkInfo: java.lang.String getReason()>();

        if $r7 == null goto label3;

        $r26 = virtualinvoke info.<android.net.NetworkInfo: java.lang.String getReason()>();

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("reason", $r26);

     label3:
        $r9 = virtualinvoke info.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        if $r9 == null goto label4;

        $r21 = virtualinvoke info.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("extraInfo", $r21);

     label4:
        newDefaultAgent#1 = null;

        $r10 = nai.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r8 = this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $i1 = $r8.<android.net.NetworkRequest: int requestId>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        if $r11 == null goto label6;

        $r19 = this.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForRequestId>;

        $r16 = this.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $i3 = $r16.<android.net.NetworkRequest: int requestId>;

        $r20 = virtualinvoke $r19.<android.util.SparseArray: java.lang.Object get(int)>($i3);

        newDefaultAgent#1 = (com.android.server.connectivity.NetworkAgentInfo) $r20;

        if newDefaultAgent#1 == null goto label5;

        $r18 = newDefaultAgent#1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        tmp$784005201 = (android.os.Parcelable) $r18;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("otherNetwork", tmp$784005201);

        goto label6;

     label5:
        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("noConnectivity", 1);

     label6:
        $i2 = this.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished>;

        virtualinvoke intent.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("inetCondition", $i2);

        tmp$642583859 = new android.content.Intent;

        specialinvoke tmp$642583859.<android.content.Intent: void <init>(android.content.Intent)>(intent);

        immediateIntent = tmp$642583859;

        virtualinvoke immediateIntent.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE");

        specialinvoke this.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>(immediateIntent);

        specialinvoke this.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>(intent);

        if newDefaultAgent#1 == null goto label7;

        $r14 = newDefaultAgent#1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        virtualinvoke this.<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)>($r14);

     label7:
        return;
    }

    protected void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService this;
        com.android.server.connectivity.NetworkAgentInfo networkAgent;
        int notifyType, $i0, i#1;
        android.net.NetworkRequest nr;
        com.android.server.ConnectivityService$NetworkRequestInfo nri;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6;
        java.lang.String $r2, $r5, $r7;
        android.util.SparseArray $r8, $r10;
        java.lang.Object $r9, $r11;
        java.util.HashMap $r12;
        android.app.PendingIntent $r13;

        this := @this: com.android.server.ConnectivityService;

        networkAgent := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        notifyType := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyType ");

        $r2 = specialinvoke this.<com.android.server.ConnectivityService: java.lang.String notifyTypeToName(int)>(notifyType);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r5 = virtualinvoke networkAgent.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String name()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r7);

        i#1 = 0;

     label1:
        $r8 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $i0 = virtualinvoke $r8.<android.util.SparseArray: int size()>();

        if i#1 >= $i0 goto label4;

        $r10 = networkAgent.<com.android.server.connectivity.NetworkAgentInfo: android.util.SparseArray networkRequests>;

        $r9 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i#1);

        nr = (android.net.NetworkRequest) $r9;

        $r12 = this.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r11 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(nr);

        nri = (com.android.server.ConnectivityService$NetworkRequestInfo) $r11;

        $r13 = nri.<com.android.server.ConnectivityService$NetworkRequestInfo: android.app.PendingIntent mPendingIntent>;

        if $r13 != null goto label2;

        specialinvoke this.<com.android.server.ConnectivityService: void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int)>(nri, networkAgent, notifyType);

        goto label3;

     label2:
        specialinvoke this.<com.android.server.ConnectivityService: void sendPendingIntentForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int)>(nri, networkAgent, notifyType);

     label3:
        i#1 = i#1 + 1;

        goto label1;

     label4:
        return;
    }

    private java.lang.String notifyTypeToName(int)
    {
        com.android.server.ConnectivityService this;
        int notifyType;

        this := @this: com.android.server.ConnectivityService;

        notifyType := @parameter0: int;

        tableswitch(notifyType)
        {
            case 524289: goto label1;
            case 524290: goto label2;
            case 524291: goto label3;
            case 524292: goto label4;
            case 524293: goto label5;
            case 524294: goto label6;
            case 524295: goto label7;
            case 524296: goto label8;
            default: goto label9;
        };

     label1:
        return "PRECHECK";

     label2:
        return "AVAILABLE";

     label3:
        return "LOSING";

     label4:
        return "LOST";

     label5:
        return "UNAVAILABLE";

     label6:
        return "CAP_CHANGED";

     label7:
        return "IP_CHANGED";

     label8:
        return "RELEASED";

     label9:
        return "UNKNOWN";
    }

    private void notifyIfacesChanged()
    {
        com.android.server.ConnectivityService this;
        java.lang.Exception l1, $r1;
        android.net.INetworkStatsService $r0;

        this := @this: com.android.server.ConnectivityService;

     label1:
        $r0 = this.<com.android.server.ConnectivityService: android.net.INetworkStatsService mStatsService>;

        interfaceinvoke $r0.<android.net.INetworkStatsService: void forceUpdateIfaces()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean addVpnAddress(java.lang.String, int)
    {
        com.android.server.ConnectivityService this;
        java.lang.String address;
        int prefixLength, user, $i0;
        android.util.SparseArray l4, $r0, $r1;
        java.lang.Throwable l5, $r4;
        java.lang.Object $r2;
        com.android.server.connectivity.Vpn $r3;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        address := @parameter0: java.lang.String;

        prefixLength := @parameter1: int;

        specialinvoke this.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        user = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l4 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(user);

        $r3 = (com.android.server.connectivity.Vpn) $r2;

        $z0 = virtualinvoke $r3.<com.android.server.connectivity.Vpn: boolean addAddress(java.lang.String,int)>(address, prefixLength);

        exitmonitor l4;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        l5 = $r4;

        exitmonitor l4;

     label4:
        throw l5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean removeVpnAddress(java.lang.String, int)
    {
        com.android.server.ConnectivityService this;
        java.lang.String address;
        int prefixLength, user, $i0;
        android.util.SparseArray l4, $r0, $r1;
        java.lang.Throwable l5, $r4;
        java.lang.Object $r2;
        com.android.server.connectivity.Vpn $r3;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        address := @parameter0: java.lang.String;

        prefixLength := @parameter1: int;

        specialinvoke this.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        user = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l4 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(user);

        $r3 = (com.android.server.connectivity.Vpn) $r2;

        $z0 = virtualinvoke $r3.<com.android.server.connectivity.Vpn: boolean removeAddress(java.lang.String,int)>(address, prefixLength);

        exitmonitor l4;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        l5 = $r4;

        exitmonitor l4;

     label4:
        throw l5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean setUnderlyingNetworksForVpn(android.net.Network[])
    {
        com.android.server.ConnectivityService this;
        android.net.Network[] networks;
        int user, $i0;
        android.util.SparseArray l3, $r0, $r1;
        java.lang.Throwable l4, $r4;
        java.lang.Object $r2;
        com.android.server.connectivity.Vpn $r3;
        boolean $z0;

        this := @this: com.android.server.ConnectivityService;

        networks := @parameter0: android.net.Network[];

        specialinvoke this.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        user = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        $r0 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(user);

        $r3 = (com.android.server.connectivity.Vpn) $r2;

        $z0 = virtualinvoke $r3.<com.android.server.connectivity.Vpn: boolean setUnderlyingNetworks(android.net.Network[])>(networks);

        exitmonitor l3;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        l4 = $r4;

        exitmonitor l3;

     label4:
        throw l4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static boolean access$000(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;
        boolean $z0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        $z0 = specialinvoke x0.<com.android.server.ConnectivityService: boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)>(x1);

        return $z0;
    }

    static void access$100(java.lang.String)
    {
        java.lang.String x0;

        x0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>(x0);

        return;
    }

    static void access$200(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, boolean, int)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;
        boolean x2;
        int x3;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        x2 := @parameter2: boolean;

        x3 := @parameter3: int;

        specialinvoke x0.<com.android.server.ConnectivityService: void sendLegacyNetworkBroadcast(com.android.server.connectivity.NetworkAgentInfo,boolean,int)>(x1, x2, x3);

        return;
    }

    static com.android.server.ConnectivityService$InternalHandler access$300(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.ConnectivityService$InternalHandler $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        return $r0;
    }

    static void access$400(com.android.server.ConnectivityService, int, boolean, long)
    {
        com.android.server.ConnectivityService x0;
        int x1;
        boolean x2;
        long x3;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: int;

        x2 := @parameter2: boolean;

        x3 := @parameter3: long;

        specialinvoke x0.<com.android.server.ConnectivityService: void sendDataActivityBroadcast(int,boolean,long)>(x1, x2, x3);

        return;
    }

    static java.lang.Object access$500(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        java.lang.Object $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: java.lang.Object mRulesLock>;

        return $r0;
    }

    static android.util.SparseIntArray access$600(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        android.util.SparseIntArray $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        return $r0;
    }

    static java.util.HashSet access$700(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        java.util.HashSet $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: java.util.HashSet mMeteredIfaces>;

        return $r0;
    }

    static android.content.Context access$800(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        android.content.Context $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        return $r0;
    }

    static void access$900(com.android.server.ConnectivityService, android.os.Message)
    {
        com.android.server.ConnectivityService x0;
        android.os.Message x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: android.os.Message;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleAsyncChannelHalfConnect(android.os.Message)>(x1);

        return;
    }

    static java.util.HashMap access$1000(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        java.util.HashMap $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        return $r0;
    }

    static void access$1100(com.android.server.ConnectivityService, android.os.Message)
    {
        com.android.server.ConnectivityService x0;
        android.os.Message x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: android.os.Message;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleAsyncChannelDisconnected(android.os.Message)>(x1);

        return;
    }

    static void access$1200(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;
        android.net.NetworkCapabilities x2;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        x2 := @parameter2: android.net.NetworkCapabilities;

        specialinvoke x0.<com.android.server.ConnectivityService: void updateCapabilities(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities)>(x1, x2);

        return;
    }

    static void access$1300(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, android.net.LinkProperties)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;
        android.net.LinkProperties x2;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        x2 := @parameter2: android.net.LinkProperties;

        specialinvoke x0.<com.android.server.ConnectivityService: void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)>(x1, x2);

        return;
    }

    static void access$1400(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;
        android.net.NetworkInfo x2;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        x2 := @parameter2: android.net.NetworkInfo;

        specialinvoke x0.<com.android.server.ConnectivityService: void updateNetworkInfo(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkInfo)>(x1, x2);

        return;
    }

    static void access$1500(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;
        int x2;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        x2 := @parameter2: int;

        specialinvoke x0.<com.android.server.ConnectivityService: void updateNetworkScore(com.android.server.connectivity.NetworkAgentInfo,int)>(x1, x2);

        return;
    }

    static android.os.INetworkManagementService access$1600(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        android.os.INetworkManagementService $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        return $r0;
    }

    static boolean access$1700(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, java.lang.String)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;
        java.lang.String x2;
        boolean $z0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        x2 := @parameter2: java.lang.String;

        $z0 = specialinvoke x0.<com.android.server.ConnectivityService: boolean isLiveNetworkAgent(com.android.server.connectivity.NetworkAgentInfo,java.lang.String)>(x1, x2);

        return $z0;
    }

    static void access$1800(java.lang.String)
    {
        java.lang.String x0;

        x0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>(x0);

        return;
    }

    static void access$1900(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, com.android.server.ConnectivityService$NascentState, com.android.server.ConnectivityService$ReapUnvalidatedNetworks)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;
        com.android.server.ConnectivityService$NascentState x2;
        com.android.server.ConnectivityService$ReapUnvalidatedNetworks x3;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        x2 := @parameter2: com.android.server.ConnectivityService$NascentState;

        x3 := @parameter3: com.android.server.ConnectivityService$ReapUnvalidatedNetworks;

        specialinvoke x0.<com.android.server.ConnectivityService: void rematchNetworkAndRequests(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$NascentState,com.android.server.ConnectivityService$ReapUnvalidatedNetworks)>(x1, x2, x3);

        return;
    }

    static void access$2000(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke x0.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(com.android.server.connectivity.NetworkAgentInfo)>(x1);

        return;
    }

    static void access$2100(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke x0.<com.android.server.ConnectivityService: void updateInetCondition(com.android.server.connectivity.NetworkAgentInfo)>(x1);

        return;
    }

    static void access$2200(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleLingerComplete(com.android.server.connectivity.NetworkAgentInfo)>(x1);

        return;
    }

    static void access$2300(com.android.server.ConnectivityService, boolean, int, int, java.lang.String, android.app.PendingIntent)
    {
        com.android.server.ConnectivityService x0;
        boolean x1;
        int x2, x3;
        java.lang.String x4;
        android.app.PendingIntent x5;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: boolean;

        x2 := @parameter2: int;

        x3 := @parameter3: int;

        x4 := @parameter4: java.lang.String;

        x5 := @parameter5: android.app.PendingIntent;

        specialinvoke x0.<com.android.server.ConnectivityService: void setProvNotificationVisibleIntent(boolean,int,int,java.lang.String,android.app.PendingIntent)>(x1, x2, x3, x4, x5);

        return;
    }

    static android.util.SparseArray access$2400(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        android.util.SparseArray $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        return $r0;
    }

    static void access$2500(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke x0.<com.android.server.ConnectivityService: void notifyLockdownVpn(com.android.server.connectivity.NetworkAgentInfo)>(x1);

        return;
    }

    static int access$2600(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        int $i0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $i0 = x0.<com.android.server.ConnectivityService: int mNetTransitionWakeLockSerialNumber>;

        return $i0;
    }

    static android.os.PowerManager$WakeLock access$2700(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        android.os.PowerManager$WakeLock $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        return $r0;
    }

    static java.lang.String access$2800(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        java.lang.String $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: java.lang.String mNetTransitionWakeLockCausedBy>;

        return $r0;
    }

    static void access$2900(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleDeprecatedGlobalHttpProxy()>();

        return;
    }

    static void access$3000(com.android.server.ConnectivityService, int, boolean)
    {
        com.android.server.ConnectivityService x0;
        int x1;
        boolean x2;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: int;

        x2 := @parameter2: boolean;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleSetDependencyMet(int,boolean)>(x1, x2);

        return;
    }

    static void access$3100(com.android.server.ConnectivityService, android.content.Intent)
    {
        com.android.server.ConnectivityService x0;
        android.content.Intent x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: android.content.Intent;

        specialinvoke x0.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>(x1);

        return;
    }

    static java.util.concurrent.atomic.AtomicInteger access$3200(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        java.util.concurrent.atomic.AtomicInteger $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicInteger mEnableFailFastMobileDataTag>;

        return $r0;
    }

    static android.net.NetworkStateTracker[] access$3300(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;
        android.net.NetworkStateTracker[] $r0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        $r0 = x0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        return $r0;
    }

    static void access$3400(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService x0;

        x0 := @parameter0: com.android.server.ConnectivityService;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleNetworkSamplingTimeout()>();

        return;
    }

    static void access$3500(com.android.server.ConnectivityService, android.net.ProxyInfo)
    {
        com.android.server.ConnectivityService x0;
        android.net.ProxyInfo x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: android.net.ProxyInfo;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleApplyDefaultProxy(android.net.ProxyInfo)>(x1);

        return;
    }

    static void access$3600(com.android.server.ConnectivityService, com.android.server.ConnectivityService$NetworkFactoryInfo)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.ConnectivityService$NetworkFactoryInfo x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.ConnectivityService$NetworkFactoryInfo;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleRegisterNetworkFactory(com.android.server.ConnectivityService$NetworkFactoryInfo)>(x1);

        return;
    }

    static void access$3700(com.android.server.ConnectivityService, android.os.Messenger)
    {
        com.android.server.ConnectivityService x0;
        android.os.Messenger x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: android.os.Messenger;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleUnregisterNetworkFactory(android.os.Messenger)>(x1);

        return;
    }

    static void access$3800(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService x0;
        com.android.server.connectivity.NetworkAgentInfo x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleRegisterNetworkAgent(com.android.server.connectivity.NetworkAgentInfo)>(x1);

        return;
    }

    static void access$3900(com.android.server.ConnectivityService, android.os.Message)
    {
        com.android.server.ConnectivityService x0;
        android.os.Message x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: android.os.Message;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleRegisterNetworkRequest(android.os.Message)>(x1);

        return;
    }

    static void access$4000(com.android.server.ConnectivityService, android.os.Message)
    {
        com.android.server.ConnectivityService x0;
        android.os.Message x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: android.os.Message;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleRegisterNetworkRequestWithIntent(android.os.Message)>(x1);

        return;
    }

    static void access$4100(com.android.server.ConnectivityService, android.app.PendingIntent, int)
    {
        com.android.server.ConnectivityService x0;
        android.app.PendingIntent x1;
        int x2;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: android.app.PendingIntent;

        x2 := @parameter2: int;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleReleaseNetworkRequestWithIntent(android.app.PendingIntent,int)>(x1, x2);

        return;
    }

    static void access$4200(com.android.server.ConnectivityService, android.net.NetworkRequest, int)
    {
        com.android.server.ConnectivityService x0;
        android.net.NetworkRequest x1;
        int x2;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: android.net.NetworkRequest;

        x2 := @parameter2: int;

        specialinvoke x0.<com.android.server.ConnectivityService: void handleReleaseNetworkRequest(android.net.NetworkRequest,int)>(x1, x2);

        return;
    }

    static void access$4300(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService x0;
        int x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: int;

        specialinvoke x0.<com.android.server.ConnectivityService: void onUserStart(int)>(x1);

        return;
    }

    static void access$4400(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService x0;
        int x1;

        x0 := @parameter0: com.android.server.ConnectivityService;

        x1 := @parameter1: int;

        specialinvoke x0.<com.android.server.ConnectivityService: void onUserStop(int)>(x1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.ConnectivityService: int PROVISIONING> = 2;

        <com.android.server.ConnectivityService: int REDIRECTED_PROVISIONING> = 1;

        <com.android.server.ConnectivityService: java.lang.String ATTR_MNC> = "mnc";

        <com.android.server.ConnectivityService: java.lang.String ATTR_MCC> = "mcc";

        <com.android.server.ConnectivityService: java.lang.String TAG_REDIRECTED_URL> = "redirectedUrl";

        <com.android.server.ConnectivityService: java.lang.String TAG_PROVISIONING_URL> = "provisioningUrl";

        <com.android.server.ConnectivityService: java.lang.String TAG_PROVISIONING_URLS> = "provisioningUrls";

        <com.android.server.ConnectivityService: java.lang.String PROVISIONING_URL_PATH> = "/data/misc/radio/provisioning_urls.xml";

        <com.android.server.ConnectivityService: java.lang.String NOTIFICATION_ID> = "CaptivePortal.Notification";

        <com.android.server.ConnectivityService: java.lang.String DEFAULT_TCP_BUFFER_SIZES> = "4096,87380,110208,4096,16384,110208";

        <com.android.server.ConnectivityService: int MAX_NET_ID> = 65535;

        <com.android.server.ConnectivityService: int MIN_NET_ID> = 100;

        <com.android.server.ConnectivityService: int INET_CONDITION_LOG_MAX_SIZE> = 15;

        <com.android.server.ConnectivityService: int EVENT_RELEASE_NETWORK_REQUEST_WITH_INTENT> = 27;

        <com.android.server.ConnectivityService: int EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT> = 26;

        <com.android.server.ConnectivityService: int EVENT_SYSTEM_READY> = 25;

        <com.android.server.ConnectivityService: int EVENT_EXPIRE_NET_TRANSITION_WAKELOCK> = 24;

        <com.android.server.ConnectivityService: int EVENT_UNREGISTER_NETWORK_FACTORY> = 23;

        <com.android.server.ConnectivityService: int EVENT_RELEASE_NETWORK_REQUEST> = 22;

        <com.android.server.ConnectivityService: int EVENT_REGISTER_NETWORK_LISTENER> = 21;

        <com.android.server.ConnectivityService: int EVENT_TIMEOUT_NETWORK_REQUEST> = 20;

        <com.android.server.ConnectivityService: int EVENT_REGISTER_NETWORK_REQUEST> = 19;

        <com.android.server.ConnectivityService: int EVENT_REGISTER_NETWORK_AGENT> = 18;

        <com.android.server.ConnectivityService: int EVENT_REGISTER_NETWORK_FACTORY> = 17;

        <com.android.server.ConnectivityService: int EVENT_PROXY_HAS_CHANGED> = 16;

        <com.android.server.ConnectivityService: int EVENT_SAMPLE_INTERVAL_ELAPSED> = 15;

        <com.android.server.ConnectivityService: int EVENT_ENABLE_FAIL_FAST_MOBILE_DATA> = 14;

        <com.android.server.ConnectivityService: int EVENT_SEND_STICKY_BROADCAST_INTENT> = 11;

        <com.android.server.ConnectivityService: int EVENT_SET_DEPENDENCY_MET> = 10;

        <com.android.server.ConnectivityService: int EVENT_APPLY_GLOBAL_HTTP_PROXY> = 9;

        <com.android.server.ConnectivityService: int EVENT_CLEAR_NET_TRANSITION_WAKELOCK> = 8;

        <com.android.server.ConnectivityService: int EVENT_CHANGE_MOBILE_DATA_ENABLED> = 2;

        <com.android.server.ConnectivityService: int DISABLED> = 0;

        <com.android.server.ConnectivityService: int ENABLED> = 1;

        <com.android.server.ConnectivityService: int DEFAULT_START_SAMPLING_INTERVAL_IN_SECONDS> = 60;

        <com.android.server.ConnectivityService: int DEFAULT_SAMPLING_INTERVAL_IN_SECONDS> = 720;

        <com.android.server.ConnectivityService: int SAMPLE_INTERVAL_ELAPSED_REQUEST_CODE> = 0;

        <com.android.server.ConnectivityService: java.lang.String ACTION_PKT_CNT_SAMPLE_INTERVAL_ELAPSED> = "android.net.ConnectivityService.action.PKT_CNT_SAMPLE_INTERVAL_ELAPSED";

        <com.android.server.ConnectivityService: java.lang.String FAIL_FAST_TIME_MS> = "persist.radio.fail_fast_time_ms";

        <com.android.server.ConnectivityService: int DEFAULT_FAIL_FAST_TIME_MS> = 60000;

        <com.android.server.ConnectivityService: java.lang.String NETWORK_RESTORE_DELAY_PROP_NAME> = "android.telephony.apn-restore";

        <com.android.server.ConnectivityService: int RESTORE_DEFAULT_NETWORK_DELAY> = 60000;

        <com.android.server.ConnectivityService: boolean LOGD_RULES> = 0;

        <com.android.server.ConnectivityService: boolean SAMPLE_DBG> = 0;

        <com.android.server.ConnectivityService: boolean VDBG> = 0;

        <com.android.server.ConnectivityService: boolean DBG> = 1;

        <com.android.server.ConnectivityService: java.lang.String TAG> = "ConnectivityService";

        return;
    }
}
