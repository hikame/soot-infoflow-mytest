public class com.android.server.SystemConfig extends java.lang.Object
{
    static final java.lang.String TAG;
    static com.android.server.SystemConfig sInstance;
    int[] mGlobalGids;
    final android.util.SparseArray mSystemPermissions;
    final android.util.ArrayMap mSharedLibraries;
    final android.util.ArrayMap mAvailableFeatures;
    final android.util.ArraySet mUnavailableFeatures;
    final android.util.ArrayMap mPermissions;
    final android.util.ArraySet mAllowInPowerSaveExceptIdle;
    final android.util.ArraySet mAllowInPowerSave;
    final android.util.ArraySet mFixedImeApps;
    final android.util.ArraySet mLinkedApps;

    public static com.android.server.SystemConfig getInstance()
    {
        java.lang.Class l0;
        java.lang.Throwable l1, $r3;
        com.android.server.SystemConfig $r0, $r1, $r2;

        l0 = class "com/android/server/SystemConfig";

        entermonitor class "com/android/server/SystemConfig";

     label1:
        $r0 = <com.android.server.SystemConfig: com.android.server.SystemConfig sInstance>;

        if $r0 != null goto label2;

        $r2 = new com.android.server.SystemConfig;

        specialinvoke $r2.<com.android.server.SystemConfig: void <init>()>();

        <com.android.server.SystemConfig: com.android.server.SystemConfig sInstance> = $r2;

     label2:
        $r1 = <com.android.server.SystemConfig: com.android.server.SystemConfig sInstance>;

        exitmonitor l0;

     label3:
        return $r1;

     label4:
        $r3 := @caughtexception;

        l1 = $r3;

        exitmonitor l0;

     label5:
        throw l1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int[] getGlobalGids()
    {
        com.android.server.SystemConfig this;
        int[] $r0;

        this := @this: com.android.server.SystemConfig;

        $r0 = this.<com.android.server.SystemConfig: int[] mGlobalGids>;

        return $r0;
    }

    public android.util.SparseArray getSystemPermissions()
    {
        com.android.server.SystemConfig this;
        android.util.SparseArray $r0;

        this := @this: com.android.server.SystemConfig;

        $r0 = this.<com.android.server.SystemConfig: android.util.SparseArray mSystemPermissions>;

        return $r0;
    }

    public android.util.ArrayMap getSharedLibraries()
    {
        com.android.server.SystemConfig this;
        android.util.ArrayMap $r0;

        this := @this: com.android.server.SystemConfig;

        $r0 = this.<com.android.server.SystemConfig: android.util.ArrayMap mSharedLibraries>;

        return $r0;
    }

    public android.util.ArrayMap getAvailableFeatures()
    {
        com.android.server.SystemConfig this;
        android.util.ArrayMap $r0;

        this := @this: com.android.server.SystemConfig;

        $r0 = this.<com.android.server.SystemConfig: android.util.ArrayMap mAvailableFeatures>;

        return $r0;
    }

    public android.util.ArrayMap getPermissions()
    {
        com.android.server.SystemConfig this;
        android.util.ArrayMap $r0;

        this := @this: com.android.server.SystemConfig;

        $r0 = this.<com.android.server.SystemConfig: android.util.ArrayMap mPermissions>;

        return $r0;
    }

    public android.util.ArraySet getAllowInPowerSaveExceptIdle()
    {
        com.android.server.SystemConfig this;
        android.util.ArraySet $r0;

        this := @this: com.android.server.SystemConfig;

        $r0 = this.<com.android.server.SystemConfig: android.util.ArraySet mAllowInPowerSaveExceptIdle>;

        return $r0;
    }

    public android.util.ArraySet getAllowInPowerSave()
    {
        com.android.server.SystemConfig this;
        android.util.ArraySet $r0;

        this := @this: com.android.server.SystemConfig;

        $r0 = this.<com.android.server.SystemConfig: android.util.ArraySet mAllowInPowerSave>;

        return $r0;
    }

    public android.util.ArraySet getFixedImeApps()
    {
        com.android.server.SystemConfig this;
        android.util.ArraySet $r0;

        this := @this: com.android.server.SystemConfig;

        $r0 = this.<com.android.server.SystemConfig: android.util.ArraySet mFixedImeApps>;

        return $r0;
    }

    public android.util.ArraySet getLinkedApps()
    {
        com.android.server.SystemConfig this;
        android.util.ArraySet $r0;

        this := @this: com.android.server.SystemConfig;

        $r0 = this.<com.android.server.SystemConfig: android.util.ArraySet mLinkedApps>;

        return $r0;
    }

    void <init>()
    {
        com.android.server.SystemConfig this;
        android.util.SparseArray $r0;
        android.util.ArrayMap $r1, $r2, $r4;
        android.util.ArraySet $r3, $r5, $r6, $r7, $r8;
        java.io.File $r9, $r11, $r12, $r14, $r16, $r17, $r18, $r19;
        java.lang.String[] $r10, $r13, $r15, $r20;

        this := @this: com.android.server.SystemConfig;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new android.util.SparseArray;

        specialinvoke $r0.<android.util.SparseArray: void <init>()>();

        this.<com.android.server.SystemConfig: android.util.SparseArray mSystemPermissions> = $r0;

        $r1 = new android.util.ArrayMap;

        specialinvoke $r1.<android.util.ArrayMap: void <init>()>();

        this.<com.android.server.SystemConfig: android.util.ArrayMap mSharedLibraries> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        this.<com.android.server.SystemConfig: android.util.ArrayMap mAvailableFeatures> = $r2;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        this.<com.android.server.SystemConfig: android.util.ArraySet mUnavailableFeatures> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        this.<com.android.server.SystemConfig: android.util.ArrayMap mPermissions> = $r4;

        $r5 = new android.util.ArraySet;

        specialinvoke $r5.<android.util.ArraySet: void <init>()>();

        this.<com.android.server.SystemConfig: android.util.ArraySet mAllowInPowerSaveExceptIdle> = $r5;

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        this.<com.android.server.SystemConfig: android.util.ArraySet mAllowInPowerSave> = $r6;

        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        this.<com.android.server.SystemConfig: android.util.ArraySet mFixedImeApps> = $r7;

        $r8 = new android.util.ArraySet;

        specialinvoke $r8.<android.util.ArraySet: void <init>()>();

        this.<com.android.server.SystemConfig: android.util.ArraySet mLinkedApps> = $r8;

        $r9 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "etc";

        $r10[1] = "sysconfig";

        $r11 = staticinvoke <android.os.Environment: java.io.File buildPath(java.io.File,java.lang.String[])>($r9, $r10);

        virtualinvoke this.<com.android.server.SystemConfig: void readPermissions(java.io.File,boolean)>($r11, 0);

        $r12 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        $r13 = newarray (java.lang.String)[2];

        $r13[0] = "etc";

        $r13[1] = "permissions";

        $r14 = staticinvoke <android.os.Environment: java.io.File buildPath(java.io.File,java.lang.String[])>($r12, $r13);

        virtualinvoke this.<com.android.server.SystemConfig: void readPermissions(java.io.File,boolean)>($r14, 0);

        $r16 = staticinvoke <android.os.Environment: java.io.File getOemDirectory()>();

        $r15 = newarray (java.lang.String)[2];

        $r15[0] = "etc";

        $r15[1] = "sysconfig";

        $r18 = staticinvoke <android.os.Environment: java.io.File buildPath(java.io.File,java.lang.String[])>($r16, $r15);

        virtualinvoke this.<com.android.server.SystemConfig: void readPermissions(java.io.File,boolean)>($r18, 1);

        $r17 = staticinvoke <android.os.Environment: java.io.File getOemDirectory()>();

        $r20 = newarray (java.lang.String)[2];

        $r20[0] = "etc";

        $r20[1] = "permissions";

        $r19 = staticinvoke <android.os.Environment: java.io.File buildPath(java.io.File,java.lang.String[])>($r17, $r20);

        virtualinvoke this.<com.android.server.SystemConfig: void readPermissions(java.io.File,boolean)>($r19, 1);

        return;
    }

    void readPermissions(java.io.File, boolean)
    {
        com.android.server.SystemConfig this;
        java.io.File libraryDir, f, platformFile#1;
        boolean onlyFeatures, $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.File[] arr$;
        int len$, i$#2;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22;
        java.lang.String $r4, $r5, $r6, $r10, $r16, $r23;

        this := @this: com.android.server.SystemConfig;

        libraryDir := @parameter0: java.io.File;

        onlyFeatures := @parameter1: boolean;

        $z0 = virtualinvoke libraryDir.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label01;

        $z2 = virtualinvoke libraryDir.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label03;

     label01:
        if onlyFeatures != 0 goto label02;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No directory ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(libraryDir);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r4);

     label02:
        return;

     label03:
        $z1 = virtualinvoke libraryDir.<java.io.File: boolean canRead()>();

        if $z1 != 0 goto label04;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Directory ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(libraryDir);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be read");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r23);

        return;

     label04:
        platformFile#1 = null;

        arr$ = virtualinvoke libraryDir.<java.io.File: java.io.File[] listFiles()>();

        len$ = lengthof arr$;

        i$#2 = 0;

     label05:
        if i$#2 >= len$ goto label10;

        f = arr$[i$#2];

        $r5 = virtualinvoke f.<java.io.File: java.lang.String getPath()>();

        $z3 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>("etc/permissions/platform.xml");

        if $z3 == 0 goto label06;

        platformFile#1 = f;

        goto label09;

     label06:
        $r6 = virtualinvoke f.<java.io.File: java.lang.String getPath()>();

        $z5 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z5 != 0 goto label07;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-xml file ");

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(f);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(libraryDir);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" directory, ignoring");

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemConfig", $r16);

        goto label09;

     label07:
        $z4 = virtualinvoke f.<java.io.File: boolean canRead()>();

        if $z4 != 0 goto label08;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permissions library file ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(f);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be read");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r10);

        goto label09;

     label08:
        specialinvoke this.<com.android.server.SystemConfig: void readPermissionsFromXml(java.io.File,boolean)>(f, onlyFeatures);

     label09:
        i$#2 = i$#2 + 1;

        goto label05;

     label10:
        if platformFile#1 == null goto label11;

        specialinvoke this.<com.android.server.SystemConfig: void readPermissionsFromXml(java.io.File,boolean)>(platformFile#1, onlyFeatures);

     label11:
        return;
    }

    private void readPermissionsFromXml(java.io.File, boolean)
    {
        com.android.server.SystemConfig this;
        java.io.File permFile;
        boolean onlyFeatures, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, e#4, gid#19, $z14;
        java.lang.String name, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r16, $r18, $r24, $r26, $r34, $r36, $r37, $r39, $r48, $r50, $r52, $r58, $r60, $r62, $r69, $r70, $r71, $r81, $r83, $r93, $r99, $r101, $r104, $r106, $r108, $r118, $r122, $r125, $r132, $r133, $r140, $r146, gidStr#7, gidStr#9, gidStr#10, gidStr#11, gid#12, gidStr#14, gidStr#16, gid#17, gidStr#18, uid#20, gidStr#23, gidStr#24, gidStr#25, gidStr#26, gidStr#27, type#31;
        java.lang.Throwable l12, $r137;
        java.io.FileReader $r0, permReader#2;
        int $i0, $i1, type#6, gid#8, uid#13;
        android.util.ArraySet $r12, $r20, $r31, $r32, $r47, $r86, $r117, perms#15;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r19, $r21, $r22, $r23, $r25, $r27, $r28, $r29, $r30, $r33, $r35, $r38, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r49, $r51, $r53, $r54, $r55, $r59, $r61, $r63, $r64, $r65, $r66, $r68, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r82, $r88, $r89, $r90, $r91, $r92, $r94, $r95, $r96, $r97, $r98, $r100, $r102, $r103, $r105, $r107, $r109, $r110, $r111, $r119, $r120, $r121, $r123, $r124, $r126, $r127, $r129, $r130, $r131, $r134, $r135, $r136, $r141, $r142, $r143;
        android.util.ArrayMap $r56, $r67, $r114;
        android.content.pm.FeatureInfo $r57, uid#22;
        android.util.SparseArray $r84, $r87;
        java.lang.Object $r85, $r112, $r113;
        int[] $r115, $r116;
        org.xmlpull.v1.XmlPullParserException $r128, $r139, $r145, parser#28;
        java.io.IOException $r138, parser#29;
        java.io.FileNotFoundException $r144;
        org.xmlpull.v1.XmlPullParser parser#5;
        java.util.Iterator parser#30;

        this := @this: com.android.server.SystemConfig;

        permFile := @parameter0: java.io.File;

        onlyFeatures := @parameter1: boolean;

     label01:
        $r0 = new java.io.FileReader;

        specialinvoke $r0.<java.io.FileReader: void <init>(java.io.File)>(permFile);

        permReader#2 = $r0;

     label02:
        goto label04;

     label03:
        $r144 := @caughtexception;

        $r143 = new java.lang.StringBuilder;

        specialinvoke $r143.<java.lang.StringBuilder: void <init>()>();

        $r142 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find or open permissions file ");

        $r141 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r140 = virtualinvoke $r141.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r140);

        return;

     label04:
        e#4 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

     label05:
        parser#5 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(permReader#2);

     label06:
        $i0 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: int next()>();

        type#6 = $i0;

        if $i0 == 2 goto label07;

        if type#6 == 1 goto label07;

        goto label06;

     label07:
        if type#6 == 2 goto label08;

        $r145 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r145.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

        throw $r145;

     label08:
        $r1 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("permissions");

        if $z0 != 0 goto label09;

        $r133 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z13 = virtualinvoke $r133.<java.lang.String: boolean equals(java.lang.Object)>("config");

        if $z13 != 0 goto label09;

        $r128 = new org.xmlpull.v1.XmlPullParserException;

        $r129 = new java.lang.StringBuilder;

        specialinvoke $r129.<java.lang.StringBuilder: void <init>()>();

        $r130 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected start tag in ");

        $r131 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r124 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": found ");

        $r125 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r126 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r125);

        $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected \'permissions\' or \'config\'");

        $r146 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r128.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r146);

        throw $r128;

     label09:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(parser#5);

        $i1 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i1 != 1 goto label10;

        goto label48;

     label10:
        name = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r2 = "group";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z1 == 0 goto label13;

        if onlyFeatures != 0 goto label13;

        gidStr#7 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "gid");

        if gidStr#7 == null goto label11;

        gid#8 = staticinvoke <android.os.Process: int getGidForName(java.lang.String)>(gidStr#7);

        $r116 = this.<com.android.server.SystemConfig: int[] mGlobalGids>;

        $r115 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>($r116, gid#8);

        this.<com.android.server.SystemConfig: int[] mGlobalGids> = $r115;

        goto label12;

     label11:
        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        $r121 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<group> without gid in ");

        $r120 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r123 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r122 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r119 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r122);

        $r118 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r118);

     label12:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label13:
        $r3 = "permission";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z2 == 0 goto label15;

        if onlyFeatures != 0 goto label15;

        gidStr#9 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        if gidStr#9 != null goto label14;

        $r111 = new java.lang.StringBuilder;

        specialinvoke $r111.<java.lang.StringBuilder: void <init>()>();

        $r109 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<permission> without name in ");

        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r105 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r106 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r103 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r106);

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r104);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label14:
        gidStr#10 = virtualinvoke gidStr#9.<java.lang.String: java.lang.String intern()>();

        virtualinvoke this.<com.android.server.SystemConfig: void readPermission(org.xmlpull.v1.XmlPullParser,java.lang.String)>(parser#5, gidStr#10);

        goto label47;

     label15:
        $r4 = "assign-permission";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z3 == 0 goto label20;

        if onlyFeatures != 0 goto label20;

        gidStr#11 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        if gidStr#11 != null goto label16;

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<assign-permission> without name in ");

        $r95 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r94 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r93 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r92 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r93);

        $r108 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r108);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label16:
        gid#12 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "uid");

        if gid#12 != null goto label17;

        $r98 = new java.lang.StringBuilder;

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        $r97 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<assign-permission> without uid in ");

        $r96 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r102 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r101 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r100 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r101);

        $r99 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r99);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label17:
        uid#13 = staticinvoke <android.os.Process: int getUidForName(java.lang.String)>(gid#12);

        if uid#13 >= 0 goto label18;

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<assign-permission> with unknown uid \"");

        $r77 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(gid#12);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  in ");

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r81 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r83);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label18:
        gidStr#14 = virtualinvoke gidStr#11.<java.lang.String: java.lang.String intern()>();

        $r84 = this.<com.android.server.SystemConfig: android.util.SparseArray mSystemPermissions>;

        $r85 = virtualinvoke $r84.<android.util.SparseArray: java.lang.Object get(int)>(uid#13);

        perms#15 = (android.util.ArraySet) $r85;

        if perms#15 != null goto label19;

        $r86 = new android.util.ArraySet;

        specialinvoke $r86.<android.util.ArraySet: void <init>()>();

        perms#15 = $r86;

        $r87 = this.<com.android.server.SystemConfig: android.util.SparseArray mSystemPermissions>;

        virtualinvoke $r87.<android.util.SparseArray: void put(int,java.lang.Object)>(uid#13, perms#15);

     label19:
        virtualinvoke perms#15.<android.util.ArraySet: boolean add(java.lang.Object)>(gidStr#14);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label47;

     label20:
        $r5 = "library";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z4 == 0 goto label24;

        if onlyFeatures != 0 goto label24;

        gidStr#16 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        gid#17 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "file");

        if gidStr#16 != null goto label21;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<library> without name in ");

        $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r69 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r68 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r70 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r70);

        goto label23;

     label21:
        if gid#17 != null goto label22;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<library> without file in ");

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r62 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r72 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r71 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r71);

        goto label23;

     label22:
        $r67 = this.<com.android.server.SystemConfig: android.util.ArrayMap mSharedLibraries>;

        virtualinvoke $r67.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(gidStr#16, gid#17);

     label23:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label24:
        $r6 = "feature";

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z5 == 0 goto label31;

        gidStr#18 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        if e#4 != 0 goto label25;

        gid#19 = 1;

        goto label28;

     label25:
        uid#20 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "notLowRam");

        $r48 = "true";

        $z11 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>(uid#20);

        if $z11 != 0 goto label26;

        $z14 = 1;

        goto label27;

     label26:
        $z14 = 0;

     label27:
        gid#19 = $z14;

     label28:
        if gidStr#18 != null goto label29;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<feature> without name in ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r61 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r60 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r59 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r58);

        goto label30;

     label29:
        if gid#19 == 0 goto label30;

        $r57 = new android.content.pm.FeatureInfo;

        specialinvoke $r57.<android.content.pm.FeatureInfo: void <init>()>();

        uid#22 = $r57;

        uid#22.<android.content.pm.FeatureInfo: java.lang.String name> = gidStr#18;

        $r56 = this.<com.android.server.SystemConfig: android.util.ArrayMap mAvailableFeatures>;

        virtualinvoke $r56.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(gidStr#18, uid#22);

     label30:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label31:
        $r7 = "unavailable-feature";

        $z7 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z7 == 0 goto label34;

        gidStr#23 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        if gidStr#23 != null goto label32;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<unavailable-feature> without name in ");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r51 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r52 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r49 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r50);

        goto label33;

     label32:
        $r47 = this.<com.android.server.SystemConfig: android.util.ArraySet mUnavailableFeatures>;

        virtualinvoke $r47.<android.util.ArraySet: boolean add(java.lang.Object)>(gidStr#23);

     label33:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label34:
        $r9 = "allow-in-power-save-except-idle";

        $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z6 == 0 goto label37;

        if onlyFeatures != 0 goto label37;

        gidStr#24 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        if gidStr#24 != null goto label35;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<allow-in-power-save-except-idle> without package in ");

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r38 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r37 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r39);

        goto label36;

     label35:
        $r32 = this.<com.android.server.SystemConfig: android.util.ArraySet mAllowInPowerSaveExceptIdle>;

        virtualinvoke $r32.<android.util.ArraySet: boolean add(java.lang.Object)>(gidStr#24);

     label36:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label37:
        $r8 = "allow-in-power-save";

        $z9 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z9 == 0 goto label40;

        if onlyFeatures != 0 goto label40;

        gidStr#25 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        if gidStr#25 != null goto label38;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<allow-in-power-save> without package in ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r34 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r36);

        goto label39;

     label38:
        $r31 = this.<com.android.server.SystemConfig: android.util.ArraySet mAllowInPowerSave>;

        virtualinvoke $r31.<android.util.ArraySet: boolean add(java.lang.Object)>(gidStr#25);

     label39:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label40:
        $r11 = "fixed-ime-app";

        $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z8 == 0 goto label43;

        if onlyFeatures != 0 goto label43;

        gidStr#26 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        if gidStr#26 != null goto label41;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<fixed-ime-app> without package in ");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r27 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r26 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r24);

        goto label42;

     label41:
        $r20 = this.<com.android.server.SystemConfig: android.util.ArraySet mFixedImeApps>;

        virtualinvoke $r20.<android.util.ArraySet: boolean add(java.lang.Object)>(gidStr#26);

     label42:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label43:
        $r10 = "app-link";

        $z10 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $z10 == 0 goto label46;

        gidStr#27 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        if gidStr#27 != null goto label44;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<app-link> without package in ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(permFile);

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r18 = interfaceinvoke parser#5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r16);

        goto label45;

     label44:
        $r12 = this.<com.android.server.SystemConfig: android.util.ArraySet mLinkedApps>;

        virtualinvoke $r12.<android.util.ArraySet: boolean add(java.lang.Object)>(gidStr#27);

     label45:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label47;

     label46:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser#5);

        goto label09;

     label47:
        goto label09;

     label48:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(permReader#2);

        goto label55;

     label49:
        $r139 := @caughtexception;

        parser#28 = $r139;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemConfig", "Got exception parsing permissions.", parser#28);

     label50:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(permReader#2);

        goto label55;

     label51:
        $r138 := @caughtexception;

        parser#29 = $r138;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemConfig", "Got exception parsing permissions.", parser#29);

     label52:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(permReader#2);

        goto label55;

     label53:
        $r137 := @caughtexception;

        l12 = $r137;

     label54:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(permReader#2);

        throw l12;

     label55:
        $r117 = this.<com.android.server.SystemConfig: android.util.ArraySet mUnavailableFeatures>;

        parser#30 = virtualinvoke $r117.<android.util.ArraySet: java.util.Iterator iterator()>();

     label56:
        $z12 = interfaceinvoke parser#30.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label58;

        $r112 = interfaceinvoke parser#30.<java.util.Iterator: java.lang.Object next()>();

        type#31 = (java.lang.String) $r112;

        $r114 = this.<com.android.server.SystemConfig: android.util.ArrayMap mAvailableFeatures>;

        $r113 = virtualinvoke $r114.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(type#31);

        if $r113 == null goto label57;

        $r134 = new java.lang.StringBuilder;

        specialinvoke $r134.<java.lang.StringBuilder: void <init>()>();

        $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed unavailable feature ");

        $r136 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(type#31);

        $r132 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SystemConfig", $r132);

     label57:
        goto label56;

     label58:
        return;

        catch java.io.FileNotFoundException from label01 to label02 with label03;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label48 with label49;
        catch java.io.IOException from label05 to label48 with label51;
        catch java.lang.Throwable from label05 to label48 with label53;
        catch java.lang.Throwable from label49 to label50 with label53;
        catch java.lang.Throwable from label51 to label52 with label53;
        catch java.lang.Throwable from label53 to label54 with label53;
    }

    void readPermission(org.xmlpull.v1.XmlPullParser, java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.SystemConfig this;
        org.xmlpull.v1.XmlPullParser parser;
        java.lang.String name, tagName, gidStr, $r4, $r6, $r8, $r16;
        boolean perUser, $z0, $z1;
        com.android.server.SystemConfig$PermissionEntry perm, $r1;
        int outerDepth, type, gid, $i0, $i2;
        android.util.ArrayMap $r0, $r2;
        java.lang.StringBuilder $r5, $r7, $r9, $r12, $r13, $r15;
        int[] $r10, $r11;
        java.lang.IllegalStateException $r14;

        this := @this: com.android.server.SystemConfig;

        parser := @parameter0: org.xmlpull.v1.XmlPullParser;

        name := @parameter1: java.lang.String;

        $r0 = this.<com.android.server.SystemConfig: android.util.ArrayMap mPermissions>;

        $z0 = virtualinvoke $r0.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(name);

        if $z0 == 0 goto label1;

        $r14 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate permission definition for ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r14;

     label1:
        perUser = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,boolean)>(parser, "perUser", 0);

        $r1 = new com.android.server.SystemConfig$PermissionEntry;

        specialinvoke $r1.<com.android.server.SystemConfig$PermissionEntry: void <init>(java.lang.String,boolean)>(name, perUser);

        perm = $r1;

        $r2 = this.<com.android.server.SystemConfig: android.util.ArrayMap mPermissions>;

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, perm);

        outerDepth = interfaceinvoke parser.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label2:
        $i0 = interfaceinvoke parser.<org.xmlpull.v1.XmlPullParser: int next()>();

        type = $i0;

        if $i0 == 1 goto label7;

        if type != 3 goto label3;

        $i2 = interfaceinvoke parser.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i2 <= outerDepth goto label7;

     label3:
        if type == 3 goto label2;

        if type != 4 goto label4;

        goto label2;

     label4:
        tagName = interfaceinvoke parser.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r4 = "group";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(tagName);

        if $z1 == 0 goto label6;

        gidStr = interfaceinvoke parser.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "gid");

        if gidStr == null goto label5;

        gid = staticinvoke <android.os.Process: int getGidForName(java.lang.String)>(gidStr);

        $r11 = perm.<com.android.server.SystemConfig$PermissionEntry: int[] gids>;

        $r10 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>($r11, gid);

        perm.<com.android.server.SystemConfig$PermissionEntry: int[] gids> = $r10;

        goto label6;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<group> without gid at ");

        $r6 = interfaceinvoke parser.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemConfig", $r8);

     label6:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(parser);

        goto label2;

     label7:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.SystemConfig: java.lang.String TAG> = "SystemConfig";

        return;
    }
}
