public class android.os.Build extends java.lang.Object
{
    private static final java.lang.String TAG;
    public static final java.lang.String UNKNOWN;
    public static final java.lang.String ID;
    public static final java.lang.String DISPLAY;
    public static final java.lang.String PRODUCT;
    public static final java.lang.String DEVICE;
    public static final java.lang.String BOARD;
    public static final java.lang.String CPU_ABI;
    public static final java.lang.String CPU_ABI2;
    public static final java.lang.String MANUFACTURER;
    public static final java.lang.String BRAND;
    public static final java.lang.String MODEL;
    public static final java.lang.String BOOTLOADER;
    public static final java.lang.String RADIO;
    public static final java.lang.String HARDWARE;
    public static final java.lang.String SERIAL;
    public static final java.lang.String[] SUPPORTED_ABIS;
    public static final java.lang.String[] SUPPORTED_32_BIT_ABIS;
    public static final java.lang.String[] SUPPORTED_64_BIT_ABIS;
    public static final java.lang.String TYPE;
    public static final java.lang.String TAGS;
    public static final java.lang.String FINGERPRINT;
    public static final long TIME;
    public static final java.lang.String USER;
    public static final java.lang.String HOST;
    public static final boolean IS_DEBUGGABLE;

    public void <init>()
    {
        android.os.Build this;

        this := @this: android.os.Build;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.String deriveFingerprint()
    {
        boolean $z0;
        java.lang.StringBuilder $r0, $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r13, $r16, $r17, $r18, $r19, $r22, $r23;
        java.lang.String $r1, $r4, $r7, $r10, $r14, $r15, $r20, $r21, finger#1;

        finger#1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.fingerprint");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(finger#1);

        if $z0 == 0 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.brand");

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r4 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.name");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r7 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.device");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r10 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.version.release");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r14 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.id");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r15 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.version.incremental");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r20 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.type");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r21 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.tags");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        finger#1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return finger#1;
    }

    public static void ensureFingerprintProperty()
    {
        java.lang.IllegalArgumentException e, $r2;
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.fingerprint");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label4;

     label1:
        $r1 = <android.os.Build: java.lang.String FINGERPRINT>;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("ro.build.fingerprint", $r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Build", "Failed to set fingerprint property", e);

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static boolean isBuildConsistent()
    {
        java.lang.String system, vendor, $r4;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r5;

        system = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.fingerprint");

        vendor = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.vendor.build.fingerprint");

        staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.bootimage.build.fingerprint");

        staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.expect.bootloader");

        staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.bootloader");

        staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.expect.baseband");

        staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("gsm.version.baseband");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(system);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("Build", "Required ro.build.fingerprint is empty!");

        return 0;

     label1:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(vendor);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(system, vendor);

        if $z2 != 0 goto label2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched fingerprints; system reported ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(system);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but vendor reported ");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(vendor);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("Build", $r4);

        return 0;

     label2:
        return 1;
    }

    public static java.lang.String getRadioVersion()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("gsm.version.baseband", null);

        return $r0;
    }

    private static java.lang.String getString(java.lang.String)
    {
        java.lang.String property, $r0;

        property := @parameter0: java.lang.String;

        $r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>(property, "unknown");

        return $r0;
    }

    private static java.lang.String[] getStringList(java.lang.String, java.lang.String)
    {
        java.lang.String property, separator, value;
        boolean $z0;
        java.lang.String[] $r0, $r1;

        property := @parameter0: java.lang.String;

        separator := @parameter1: java.lang.String;

        value = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>(property);

        $z0 = virtualinvoke value.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = newarray (java.lang.String)[0];

        return $r1;

     label1:
        $r0 = virtualinvoke value.<java.lang.String: java.lang.String[] split(java.lang.String)>(separator);

        return $r0;
    }

    private static long getLong(java.lang.String)
    {
        java.lang.String property, $r0;
        java.lang.NumberFormatException e, $r1;
        long $l0;

        property := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>(property);

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);

     label2:
        return $l0;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        return -1L;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    static java.lang.String access$000(java.lang.String)
    {
        java.lang.String x0, $r0;

        x0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>(x0);

        return $r0;
    }

    static java.lang.String[] access$100(java.lang.String, java.lang.String)
    {
        java.lang.String x0, x1;
        java.lang.String[] $r0;

        x0 := @parameter0: java.lang.String;

        x1 := @parameter1: java.lang.String;

        $r0 = staticinvoke <android.os.Build: java.lang.String[] getStringList(java.lang.String,java.lang.String)>(x0, x1);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        java.lang.String[] $r12, $r13, $r14, abiList#1;
        boolean $z0, $z1;
        dalvik.system.VMRuntime $r15;
        int $i0, $i3;
        long $l1, $l2;

        <android.os.Build: java.lang.String UNKNOWN> = "unknown";

        <android.os.Build: java.lang.String TAG> = "Build";

        $r0 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.id");

        <android.os.Build: java.lang.String ID> = $r0;

        $r1 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.display.id");

        <android.os.Build: java.lang.String DISPLAY> = $r1;

        $r2 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.name");

        <android.os.Build: java.lang.String PRODUCT> = $r2;

        $r3 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.device");

        <android.os.Build: java.lang.String DEVICE> = $r3;

        $r4 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.board");

        <android.os.Build: java.lang.String BOARD> = $r4;

        $r5 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.manufacturer");

        <android.os.Build: java.lang.String MANUFACTURER> = $r5;

        $r6 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.brand");

        <android.os.Build: java.lang.String BRAND> = $r6;

        $r7 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.model");

        <android.os.Build: java.lang.String MODEL> = $r7;

        $r8 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.bootloader");

        <android.os.Build: java.lang.String BOOTLOADER> = $r8;

        $r9 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("gsm.version.baseband");

        <android.os.Build: java.lang.String RADIO> = $r9;

        $r10 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.hardware");

        <android.os.Build: java.lang.String HARDWARE> = $r10;

        $r11 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.serialno");

        <android.os.Build: java.lang.String SERIAL> = $r11;

        $r12 = staticinvoke <android.os.Build: java.lang.String[] getStringList(java.lang.String,java.lang.String)>("ro.product.cpu.abilist", ",");

        <android.os.Build: java.lang.String[] SUPPORTED_ABIS> = $r12;

        $r13 = staticinvoke <android.os.Build: java.lang.String[] getStringList(java.lang.String,java.lang.String)>("ro.product.cpu.abilist32", ",");

        <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS> = $r13;

        $r14 = staticinvoke <android.os.Build: java.lang.String[] getStringList(java.lang.String,java.lang.String)>("ro.product.cpu.abilist64", ",");

        <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS> = $r14;

        $r15 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $z0 = virtualinvoke $r15.<dalvik.system.VMRuntime: boolean is64Bit()>();

        if $z0 == 0 goto label1;

        abiList#1 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        goto label2;

     label1:
        abiList#1 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

     label2:
        $r16 = abiList#1[0];

        <android.os.Build: java.lang.String CPU_ABI> = $r16;

        $i0 = lengthof abiList#1;

        if $i0 <= 1 goto label3;

        $r22 = abiList#1[1];

        <android.os.Build: java.lang.String CPU_ABI2> = $r22;

        goto label4;

     label3:
        <android.os.Build: java.lang.String CPU_ABI2> = "";

     label4:
        $r18 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.type");

        <android.os.Build: java.lang.String TYPE> = $r18;

        $r17 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.tags");

        <android.os.Build: java.lang.String TAGS> = $r17;

        $r19 = staticinvoke <android.os.Build: java.lang.String deriveFingerprint()>();

        <android.os.Build: java.lang.String FINGERPRINT> = $r19;

        $l1 = staticinvoke <android.os.Build: long getLong(java.lang.String)>("ro.build.date.utc");

        $l2 = $l1 * 1000L;

        <android.os.Build: long TIME> = $l2;

        $r20 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.user");

        <android.os.Build: java.lang.String USER> = $r20;

        $r21 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.host");

        <android.os.Build: java.lang.String HOST> = $r21;

        $i3 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.debuggable", 0);

        if $i3 != 1 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        <android.os.Build: boolean IS_DEBUGGABLE> = $z1;

        return;
    }
}
